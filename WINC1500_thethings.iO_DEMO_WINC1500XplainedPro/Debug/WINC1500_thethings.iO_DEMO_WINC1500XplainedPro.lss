
WINC1500_thethings.iO_DEMO_WINC1500XplainedPro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c674  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000144  20000000  0000c674  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000628  20000144  0000c7b8  00018144  2**2
                  ALLOC
  3 .stack        00002004  2000076c  0000cde0  00018144  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00018144  2**0
                  CONTENTS, READONLY
  5 .comment      000000cc  00000000  00000000  0001816c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0005d5e1  00000000  00000000  00018238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00008185  00000000  00000000  00075819  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000151e6  00000000  00000000  0007d99e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001180  00000000  00000000  00092b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001430  00000000  00000000  00093d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010c9c  00000000  00000000  00095134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000228c6  00000000  00000000  000a5dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009c070  00000000  00000000  000c8696  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000039c0  00000000  00000000  00164708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20002770 	.word	0x20002770
       4:	00005ac1 	.word	0x00005ac1
	/* Initialize time structure. */
	struct rtc_calendar_time time;
	struct rtc_calendar_alarm_time alarm;

	/* Get current time. */
	rtc_calendar_get_time(module, &time);
       8:	00005abd 	.word	0x00005abd
       c:	00005abd 	.word	0x00005abd
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	00005abd 	.word	0x00005abd
	...
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
      38:	00005abd 	.word	0x00005abd
			}
			module->clock_24h = false;
      3c:	000073b9 	.word	0x000073b9
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      40:	00005abd 	.word	0x00005abd
      44:	00005abd 	.word	0x00005abd
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
      48:	00005abd 	.word	0x00005abd
      4c:	000035dd 	.word	0x000035dd
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
      50:	000031b9 	.word	0x000031b9
      54:	00005abd 	.word	0x00005abd
			time.hour = time.hour + 12;
      58:	00005abd 	.word	0x00005abd
      5c:	00005abd 	.word	0x00005abd

			time.pm = 0;
      60:	00005abd 	.word	0x00005abd
		} else if (time.hour == 12) {
      64:	00004265 	.word	0x00004265
      68:	00004275 	.word	0x00004275
			time.hour = 0;
      6c:	00004285 	.word	0x00004285
      70:	00004295 	.word	0x00004295

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			if (alarm.time.pm == 1) {
				alarm.time.hour = alarm.time.hour + 12;
      74:	000042a5 	.word	0x000042a5
      78:	000042b5 	.word	0x000042b5
				alarm.time.pm = 0;
      7c:	00005a8d 	.word	0x00005a8d
				module->clock_24h = true;
      80:	00005a9d 	.word	0x00005a9d
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      84:	00005aad 	.word	0x00005aad
      88:	00005abd 	.word	0x00005abd
      8c:	00005abd 	.word	0x00005abd
				module->clock_24h = false;
			} else if (alarm.time.hour == 12) {
      90:	00005abd 	.word	0x00005abd
      94:	00005abd 	.word	0x00005abd
				alarm.time.hour = 0;
      98:	00005abd 	.word	0x00005abd
			}
		}

		/* Change value in configuration structure. */
		module->clock_24h = true;
      9c:	00003091 	.word	0x00003091
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      a0:	00005abd 	.word	0x00005abd
      a4:	00005abd 	.word	0x00005abd

	/* Toggle mode. */
	rtc_module->MODE2.CTRL.reg ^= RTC_MODE2_CTRL_CLKREP;
      a8:	00005abd 	.word	0x00005abd
      ac:	00005abd 	.word	0x00005abd

000000b0 <__do_global_dtors_aux>:

	/* Enable RTC. */
	rtc_calendar_enable(module);
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000144 	.word	0x20000144
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      d0:	00000000 	.word	0x00000000
      d4:	0000c674 	.word	0x0000c674

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
			alarm.time.hour = alarm.time.hour % 12;
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
			if (alarm.time.hour == 0) {
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
			time.hour = 0;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d100      	bne.n	f2 <frame_dummy+0x1a>
      f0:	bd08      	pop	{r3, pc}
      f2:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f4:	2b00      	cmp	r3, #0
			if (alarm.time.pm == 1) {
      f6:	d0fb      	beq.n	f0 <frame_dummy+0x18>
      f8:	4798      	blx	r3
      fa:	e7f9      	b.n	f0 <frame_dummy+0x18>
      fc:	00000000 	.word	0x00000000
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
     100:	0000c674 	.word	0x0000c674
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
     104:	20000148 	.word	0x20000148
     108:	0000c674 	.word	0x0000c674
	/* Enable RTC. */
	rtc_calendar_enable(module);

	/* Set new time format in CLOCK register. */
	rtc_calendar_set_time(module, &time);
}
     10c:	00000000 	.word	0x00000000

00000110 <delay_init>:
     110:	b510      	push	{r4, lr}
     112:	2000      	movs	r0, #0
     114:	4b08      	ldr	r3, [pc, #32]	; (138 <delay_init+0x28>)
     116:	4798      	blx	r3
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <delay_init+0x2c>)
     11a:	21fa      	movs	r1, #250	; 0xfa
     11c:	0089      	lsls	r1, r1, #2
     11e:	47a0      	blx	r4
     120:	4b07      	ldr	r3, [pc, #28]	; (140 <delay_init+0x30>)
     122:	6018      	str	r0, [r3, #0]
     124:	21fa      	movs	r1, #250	; 0xfa
     126:	0089      	lsls	r1, r1, #2
     128:	47a0      	blx	r4
     12a:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_init+0x34>)
 */
void delay_init(void)
{
	cycles_per_ms = system_gclk_gen_get_hz(0);
	cycles_per_ms /= 1000;
	cycles_per_us = cycles_per_ms / 1000;
     12c:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     12e:	2205      	movs	r2, #5
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <delay_init+0x38>)
     132:	601a      	str	r2, [r3, #0]
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	000051d9 	.word	0x000051d9
     13c:	00008045 	.word	0x00008045
     140:	20000004 	.word	0x20000004
     144:	20000000 	.word	0x20000000
     148:	e000e010 	.word	0xe000e010

0000014c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     14c:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     14e:	4b08      	ldr	r3, [pc, #32]	; (170 <delay_cycles_ms+0x24>)
     150:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     152:	4a08      	ldr	r2, [pc, #32]	; (174 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     154:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     156:	2180      	movs	r1, #128	; 0x80
     158:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     15a:	e006      	b.n	16a <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     15c:	2c00      	cmp	r4, #0
     15e:	d004      	beq.n	16a <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     160:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     162:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     164:	6813      	ldr	r3, [r2, #0]
     166:	420b      	tst	r3, r1
     168:	d0fc      	beq.n	164 <delay_cycles_ms+0x18>
     16a:	3801      	subs	r0, #1
     16c:	d2f6      	bcs.n	15c <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     16e:	bd30      	pop	{r4, r5, pc}
     170:	20000004 	.word	0x20000004
     174:	e000e010 	.word	0xe000e010

00000178 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     178:	b508      	push	{r3, lr}
	if (gpfIsr) {
     17a:	4b03      	ldr	r3, [pc, #12]	; (188 <chip_isr+0x10>)
     17c:	681b      	ldr	r3, [r3, #0]
     17e:	2b00      	cmp	r3, #0
     180:	d000      	beq.n	184 <chip_isr+0xc>
		gpfIsr();
     182:	4798      	blx	r3
	}
}
     184:	bd08      	pop	{r3, pc}
     186:	46c0      	nop			; (mov r8, r8)
     188:	20000160 	.word	0x20000160

0000018c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     18c:	b538      	push	{r3, r4, r5, lr}
	while (u32TimeMsec--) {
     18e:	2800      	cmp	r0, #0
     190:	d006      	beq.n	1a0 <nm_bsp_sleep+0x14>
     192:	1c04      	adds	r4, r0, #0
		delay_ms(1);
     194:	4d03      	ldr	r5, [pc, #12]	; (1a4 <nm_bsp_sleep+0x18>)
     196:	2001      	movs	r0, #1
     198:	47a8      	blx	r5
     19a:	3c01      	subs	r4, #1
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     19c:	2c00      	cmp	r4, #0
     19e:	d1fa      	bne.n	196 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     1a0:	bd38      	pop	{r3, r4, r5, pc}
     1a2:	46c0      	nop			; (mov r8, r8)
     1a4:	0000014d 	.word	0x0000014d

000001a8 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
     1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     1aa:	4c07      	ldr	r4, [pc, #28]	; (1c8 <nm_bsp_reset+0x20>)
     1ac:	2720      	movs	r7, #32
     1ae:	6167      	str	r7, [r4, #20]
     1b0:	2640      	movs	r6, #64	; 0x40
     1b2:	6166      	str	r6, [r4, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
	nm_bsp_sleep(100);
     1b4:	2064      	movs	r0, #100	; 0x64
     1b6:	4d05      	ldr	r5, [pc, #20]	; (1cc <nm_bsp_reset+0x24>)
     1b8:	47a8      	blx	r5
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     1ba:	61a7      	str	r7, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
	nm_bsp_sleep(10);
     1bc:	200a      	movs	r0, #10
     1be:	47a8      	blx	r5
     1c0:	61a6      	str	r6, [r4, #24]
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
	nm_bsp_sleep(10);
     1c2:	200a      	movs	r0, #10
     1c4:	47a8      	blx	r5
}
     1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     1c8:	41004480 	.word	0x41004480
     1cc:	0000018d 	.word	0x0000018d

000001d0 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
     1d0:	b570      	push	{r4, r5, r6, lr}
     1d2:	b082      	sub	sp, #8
	gpfIsr = NULL;
     1d4:	2300      	movs	r3, #0
     1d6:	4a13      	ldr	r2, [pc, #76]	; (224 <nm_bsp_init+0x54>)
     1d8:	6013      	str	r3, [r2, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     1da:	ac01      	add	r4, sp, #4
     1dc:	2501      	movs	r5, #1
     1de:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     1e0:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     1e2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     1e4:	2026      	movs	r0, #38	; 0x26
     1e6:	1c21      	adds	r1, r4, #0
     1e8:	4e0f      	ldr	r6, [pc, #60]	; (228 <nm_bsp_init+0x58>)
     1ea:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     1ec:	2025      	movs	r0, #37	; 0x25
     1ee:	1c21      	adds	r1, r4, #0
     1f0:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1f2:	2027      	movs	r0, #39	; 0x27
     1f4:	1c21      	adds	r1, r4, #0
     1f6:	47b0      	blx	r6

	/* Initialize chip IOs. */
	init_chip_pins();

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     1f8:	4b0c      	ldr	r3, [pc, #48]	; (22c <nm_bsp_init+0x5c>)
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	421d      	tst	r5, r3
     1fe:	d003      	beq.n	208 <nm_bsp_init+0x38>
     200:	4b0a      	ldr	r3, [pc, #40]	; (22c <nm_bsp_init+0x5c>)
     202:	681b      	ldr	r3, [r3, #0]
     204:	079b      	lsls	r3, r3, #30
     206:	d401      	bmi.n	20c <nm_bsp_init+0x3c>
	    delay_init();
     208:	4b09      	ldr	r3, [pc, #36]	; (230 <nm_bsp_init+0x60>)
     20a:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
     20c:	4b09      	ldr	r3, [pc, #36]	; (234 <nm_bsp_init+0x64>)
     20e:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     210:	2201      	movs	r2, #1
     212:	4b09      	ldr	r3, [pc, #36]	; (238 <nm_bsp_init+0x68>)
     214:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     216:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     21a:	b662      	cpsie	i

	system_interrupt_enable_global();

	return M2M_SUCCESS;
}
     21c:	2000      	movs	r0, #0
     21e:	b002      	add	sp, #8
     220:	bd70      	pop	{r4, r5, r6, pc}
     222:	46c0      	nop			; (mov r8, r8)
     224:	20000160 	.word	0x20000160
     228:	000035b9 	.word	0x000035b9
     22c:	e000e010 	.word	0xe000e010
     230:	00000111 	.word	0x00000111
     234:	000001a9 	.word	0x000001a9
     238:	20000010 	.word	0x20000010

0000023c <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     23c:	b510      	push	{r4, lr}
     23e:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     240:	4b0e      	ldr	r3, [pc, #56]	; (27c <nm_bsp_register_isr+0x40>)
     242:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     244:	ac01      	add	r4, sp, #4
     246:	1c20      	adds	r0, r4, #0
     248:	4b0d      	ldr	r3, [pc, #52]	; (280 <nm_bsp_register_isr+0x44>)
     24a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     24c:	2324      	movs	r3, #36	; 0x24
     24e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     250:	2300      	movs	r3, #0
     252:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     254:	3301      	adds	r3, #1
     256:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     258:	3301      	adds	r3, #1
     25a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     25c:	2004      	movs	r0, #4
     25e:	1c21      	adds	r1, r4, #0
     260:	4b08      	ldr	r3, [pc, #32]	; (284 <nm_bsp_register_isr+0x48>)
     262:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     264:	4808      	ldr	r0, [pc, #32]	; (288 <nm_bsp_register_isr+0x4c>)
     266:	2104      	movs	r1, #4
     268:	2200      	movs	r2, #0
     26a:	4b08      	ldr	r3, [pc, #32]	; (28c <nm_bsp_register_isr+0x50>)
     26c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     26e:	2004      	movs	r0, #4
     270:	2100      	movs	r1, #0
     272:	4b07      	ldr	r3, [pc, #28]	; (290 <nm_bsp_register_isr+0x54>)
     274:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     276:	b004      	add	sp, #16
     278:	bd10      	pop	{r4, pc}
     27a:	46c0      	nop			; (mov r8, r8)
     27c:	20000160 	.word	0x20000160
     280:	000032a5 	.word	0x000032a5
     284:	000032b9 	.word	0x000032b9
     288:	00000179 	.word	0x00000179
     28c:	0000314d 	.word	0x0000314d
     290:	00003179 	.word	0x00003179

00000294 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     294:	b508      	push	{r3, lr}
	if (u8Enable) {
     296:	2800      	cmp	r0, #0
     298:	d004      	beq.n	2a4 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     29a:	2004      	movs	r0, #4
     29c:	2100      	movs	r1, #0
     29e:	4b04      	ldr	r3, [pc, #16]	; (2b0 <nm_bsp_interrupt_ctrl+0x1c>)
     2a0:	4798      	blx	r3
     2a2:	e003      	b.n	2ac <nm_bsp_interrupt_ctrl+0x18>
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     2a4:	2004      	movs	r0, #4
     2a6:	2100      	movs	r1, #0
     2a8:	4b02      	ldr	r3, [pc, #8]	; (2b4 <nm_bsp_interrupt_ctrl+0x20>)
     2aa:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     2ac:	bd08      	pop	{r3, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	00003179 	.word	0x00003179
     2b4:	00003199 	.word	0x00003199

000002b8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     2b8:	b530      	push	{r4, r5, lr}
     2ba:	b091      	sub	sp, #68	; 0x44
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     2bc:	4c2f      	ldr	r4, [pc, #188]	; (37c <nm_bus_init+0xc4>)
     2be:	2305      	movs	r3, #5
     2c0:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     2c2:	2300      	movs	r3, #0
     2c4:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     2c6:	70a3      	strb	r3, [r4, #2]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     2c8:	a901      	add	r1, sp, #4
     2ca:	2201      	movs	r2, #1
     2cc:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     2ce:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     2d0:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     2d2:	2005      	movs	r0, #5
     2d4:	4b2a      	ldr	r3, [pc, #168]	; (380 <nm_bus_init+0xc8>)
     2d6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     2d8:	7823      	ldrb	r3, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2da:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     2dc:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     2de:	2900      	cmp	r1, #0
     2e0:	d104      	bne.n	2ec <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     2e2:	095a      	lsrs	r2, r3, #5
     2e4:	01d2      	lsls	r2, r2, #7
     2e6:	4927      	ldr	r1, [pc, #156]	; (384 <nm_bus_init+0xcc>)
     2e8:	468c      	mov	ip, r1
     2ea:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2ec:	211f      	movs	r1, #31
     2ee:	400b      	ands	r3, r1
     2f0:	391e      	subs	r1, #30
     2f2:	1c08      	adds	r0, r1, #0
     2f4:	4098      	lsls	r0, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     2f6:	6190      	str	r0, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     2f8:	aa02      	add	r2, sp, #8
     2fa:	7011      	strb	r1, [r2, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     2fc:	2300      	movs	r3, #0
     2fe:	6053      	str	r3, [r2, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     300:	6093      	str	r3, [r2, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     302:	7413      	strb	r3, [r2, #16]
	config->run_in_standby   = false;
     304:	7453      	strb	r3, [r2, #17]
	config->receiver_enable  = true;
     306:	7491      	strb	r1, [r2, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     308:	74d1      	strb	r1, [r2, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     30a:	7513      	strb	r3, [r2, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     30c:	3123      	adds	r1, #35	; 0x23
     30e:	5453      	strb	r3, [r2, r1]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     310:	9309      	str	r3, [sp, #36]	; 0x24
     312:	930a      	str	r3, [sp, #40]	; 0x28
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     314:	2380      	movs	r3, #128	; 0x80
     316:	025b      	lsls	r3, r3, #9
     318:	60d3      	str	r3, [r2, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     31a:	4b1b      	ldr	r3, [pc, #108]	; (388 <nm_bus_init+0xd0>)
     31c:	6293      	str	r3, [r2, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     31e:	2301      	movs	r3, #1
     320:	425b      	negs	r3, r3
     322:	62d3      	str	r3, [r2, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     324:	4b19      	ldr	r3, [pc, #100]	; (38c <nm_bus_init+0xd4>)
     326:	6313      	str	r3, [r2, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     328:	4b19      	ldr	r3, [pc, #100]	; (390 <nm_bus_init+0xd8>)
     32a:	6353      	str	r3, [r2, #52]	; 0x34
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
     32c:	4b19      	ldr	r3, [pc, #100]	; (394 <nm_bus_init+0xdc>)
     32e:	6193      	str	r3, [r2, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
     330:	4819      	ldr	r0, [pc, #100]	; (398 <nm_bus_init+0xe0>)
     332:	491a      	ldr	r1, [pc, #104]	; (39c <nm_bus_init+0xe4>)
     334:	4b1a      	ldr	r3, [pc, #104]	; (3a0 <nm_bus_init+0xe8>)
     336:	4798      	blx	r3
     338:	2800      	cmp	r0, #0
     33a:	d11a      	bne.n	372 <nm_bus_init+0xba>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     33c:	4d16      	ldr	r5, [pc, #88]	; (398 <nm_bus_init+0xe0>)
     33e:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     340:	1c20      	adds	r0, r4, #0
     342:	4b18      	ldr	r3, [pc, #96]	; (3a4 <nm_bus_init+0xec>)
     344:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     346:	231f      	movs	r3, #31
     348:	4018      	ands	r0, r3
     34a:	3b1e      	subs	r3, #30
     34c:	4083      	lsls	r3, r0
     34e:	1c18      	adds	r0, r3, #0
     350:	4b15      	ldr	r3, [pc, #84]	; (3a8 <nm_bus_init+0xf0>)
     352:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     354:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     356:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     358:	2b00      	cmp	r3, #0
     35a:	d1fc      	bne.n	356 <nm_bus_init+0x9e>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     35c:	6822      	ldr	r2, [r4, #0]
     35e:	3302      	adds	r3, #2
     360:	4313      	orrs	r3, r2
     362:	6023      	str	r3, [r4, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master);

	nm_bsp_reset();
     364:	4b11      	ldr	r3, [pc, #68]	; (3ac <nm_bus_init+0xf4>)
     366:	4798      	blx	r3
	nm_bsp_sleep(1);
     368:	2001      	movs	r0, #1
     36a:	4b11      	ldr	r3, [pc, #68]	; (3b0 <nm_bus_init+0xf8>)
     36c:	4798      	blx	r3
#endif
	return result;
     36e:	2000      	movs	r0, #0
     370:	e000      	b.n	374 <nm_bus_init+0xbc>
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
	config.master_slave_select_enable = false;

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
		return M2M_ERR_BUS_FAIL;
     372:	20fa      	movs	r0, #250	; 0xfa
     374:	b240      	sxtb	r0, r0

	nm_bsp_reset();
	nm_bsp_sleep(1);
#endif
	return result;
}
     376:	b011      	add	sp, #68	; 0x44
     378:	bd30      	pop	{r4, r5, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	2000036c 	.word	0x2000036c
     380:	000035b9 	.word	0x000035b9
     384:	41004400 	.word	0x41004400
     388:	00040003 	.word	0x00040003
     38c:	00060003 	.word	0x00060003
     390:	00070003 	.word	0x00070003
     394:	00b71b00 	.word	0x00b71b00
     398:	20000370 	.word	0x20000370
     39c:	42000800 	.word	0x42000800
     3a0:	000042c5 	.word	0x000042c5
     3a4:	00004239 	.word	0x00004239
     3a8:	e000e100 	.word	0xe000e100
     3ac:	000001a9 	.word	0x000001a9
     3b0:	0000018d 	.word	0x0000018d

000003b4 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	465f      	mov	r7, fp
     3b8:	4656      	mov	r6, sl
     3ba:	464d      	mov	r5, r9
     3bc:	4644      	mov	r4, r8
     3be:	b4f0      	push	{r4, r5, r6, r7}
     3c0:	b085      	sub	sp, #20
	sint8 s8Ret = 0;
	switch(u8Cmd)
     3c2:	2803      	cmp	r0, #3
     3c4:	d169      	bne.n	49a <nm_bus_ioctl+0xe6>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     3c6:	680e      	ldr	r6, [r1, #0]
     3c8:	684d      	ldr	r5, [r1, #4]
     3ca:	890c      	ldrh	r4, [r1, #8]
struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
     3cc:	2200      	movs	r2, #0
     3ce:	ab02      	add	r3, sp, #8
     3d0:	71da      	strb	r2, [r3, #7]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
     3d2:	2e00      	cmp	r6, #0
     3d4:	d008      	beq.n	3e8 <nm_bus_ioctl+0x34>
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
     3d6:	2d00      	cmp	r5, #0
     3d8:	d15d      	bne.n	496 <nm_bus_ioctl+0xe2>
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
     3da:	2301      	movs	r3, #1
     3dc:	4699      	mov	r9, r3
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3de:	2300      	movs	r3, #0
     3e0:	9301      	str	r3, [sp, #4]
	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
	}
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
     3e2:	ab02      	add	r3, sp, #8
     3e4:	1ddd      	adds	r5, r3, #7
     3e6:	e005      	b.n	3f4 <nm_bus_ioctl+0x40>
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
	uint8 u8Dummy = 0;
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3e8:	2300      	movs	r3, #0
     3ea:	4699      	mov	r9, r3
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
		u8SkipMosi = 1;
     3ec:	3301      	adds	r3, #1
     3ee:	9301      	str	r3, [sp, #4]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
	uint16_t txd_data = 0;
	uint16_t rxd_data = 0;

	if (!pu8Mosi) {
		pu8Mosi = &u8Dummy;
     3f0:	ab02      	add	r3, sp, #8
     3f2:	1dde      	adds	r6, r3, #7
	}
	else {
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);
     3f4:	4833      	ldr	r0, [pc, #204]	; (4c4 <nm_bus_ioctl+0x110>)
     3f6:	4934      	ldr	r1, [pc, #208]	; (4c8 <nm_bus_ioctl+0x114>)
     3f8:	2201      	movs	r2, #1
     3fa:	4b34      	ldr	r3, [pc, #208]	; (4cc <nm_bus_ioctl+0x118>)
     3fc:	4798      	blx	r3

	while (u16Sz) {
     3fe:	2c00      	cmp	r4, #0
     400:	d03c      	beq.n	47c <nm_bus_ioctl+0xc8>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     402:	4b30      	ldr	r3, [pc, #192]	; (4c4 <nm_bus_ioctl+0x110>)
     404:	469b      	mov	fp, r3

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     406:	2701      	movs	r7, #1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     408:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     40a:	469a      	mov	sl, r3

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     40c:	2304      	movs	r3, #4
     40e:	4698      	mov	r8, r3
			;
		*pu8Miso = rxd_data;

		u16Sz--;
		if (!u8SkipMiso)
			pu8Miso++;
     410:	4649      	mov	r1, r9
     412:	424b      	negs	r3, r1
     414:	4159      	adcs	r1, r3
     416:	4689      	mov	r9, r1
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
		txd_data = *pu8Mosi;
     418:	7830      	ldrb	r0, [r6, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     41a:	465b      	mov	r3, fp
     41c:	681b      	ldr	r3, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     41e:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master))
     420:	4239      	tst	r1, r7
     422:	d0fc      	beq.n	41e <nm_bus_ioctl+0x6a>
     424:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     426:	4239      	tst	r1, r7
     428:	d0fc      	beq.n	424 <nm_bus_ioctl+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     42a:	6298      	str	r0, [r3, #40]	; 0x28
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     42c:	7e19      	ldrb	r1, [r3, #24]
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     42e:	4211      	tst	r1, r2
     430:	d0fc      	beq.n	42c <nm_bus_ioctl+0x78>
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     432:	4651      	mov	r1, sl
     434:	7989      	ldrb	r1, [r1, #6]
     436:	468c      	mov	ip, r1
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     438:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     43a:	4211      	tst	r1, r2
     43c:	d0fc      	beq.n	438 <nm_bus_ioctl+0x84>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     43e:	8b59      	ldrh	r1, [r3, #26]
		/* No data has been received, return */
		return STATUS_ERR_IO;
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     440:	2000      	movs	r0, #0

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     442:	4211      	tst	r1, r2
     444:	d005      	beq.n	452 <nm_bus_ioctl+0x9e>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
     446:	8b59      	ldrh	r1, [r3, #26]
     448:	4640      	mov	r0, r8
     44a:	4301      	orrs	r1, r0
     44c:	b289      	uxth	r1, r1
     44e:	8359      	strh	r1, [r3, #26]
	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
		retval = STATUS_ERR_OVERFLOW;
     450:	201e      	movs	r0, #30
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     452:	4661      	mov	r1, ip
     454:	2901      	cmp	r1, #1
     456:	d103      	bne.n	460 <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     458:	6a99      	ldr	r1, [r3, #40]	; 0x28
     45a:	05c9      	lsls	r1, r1, #23
     45c:	0dc9      	lsrs	r1, r1, #23
     45e:	e001      	b.n	464 <nm_bus_ioctl+0xb0>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     460:	6a99      	ldr	r1, [r3, #40]	; 0x28
     462:	b2c9      	uxtb	r1, r1
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     464:	2800      	cmp	r0, #0
     466:	d1e7      	bne.n	438 <nm_bus_ioctl+0x84>
			;
		*pu8Miso = rxd_data;
     468:	7029      	strb	r1, [r5, #0]

		u16Sz--;
     46a:	3c01      	subs	r4, #1
     46c:	b2a4      	uxth	r4, r4
		if (!u8SkipMiso)
			pu8Miso++;
     46e:	444d      	add	r5, r9
		if (!u8SkipMosi)
			pu8Mosi++;
     470:	9b01      	ldr	r3, [sp, #4]
     472:	4259      	negs	r1, r3
     474:	414b      	adcs	r3, r1
     476:	18f6      	adds	r6, r6, r3
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     478:	2c00      	cmp	r4, #0
     47a:	d1cd      	bne.n	418 <nm_bus_ioctl+0x64>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     47c:	4b11      	ldr	r3, [pc, #68]	; (4c4 <nm_bus_ioctl+0x110>)
     47e:	6819      	ldr	r1, [r3, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     480:	2202      	movs	r2, #2
     482:	7e0b      	ldrb	r3, [r1, #24]
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     484:	4213      	tst	r3, r2
     486:	d0fc      	beq.n	482 <nm_bus_ioctl+0xce>
		;

	spi_select_slave(&master, &slave_inst, false);
     488:	480e      	ldr	r0, [pc, #56]	; (4c4 <nm_bus_ioctl+0x110>)
     48a:	490f      	ldr	r1, [pc, #60]	; (4c8 <nm_bus_ioctl+0x114>)
     48c:	2200      	movs	r2, #0
     48e:	4b0f      	ldr	r3, [pc, #60]	; (4cc <nm_bus_ioctl+0x118>)
     490:	4798      	blx	r3

	return M2M_SUCCESS;
     492:	2000      	movs	r0, #0
     494:	e00e      	b.n	4b4 <nm_bus_ioctl+0x100>
	else if(!pu8Miso) {
		pu8Miso = &u8Dummy;
		u8SkipMiso = 1;
	}
	else {
		return M2M_ERR_BUS_FAIL;
     496:	20fa      	movs	r0, #250	; 0xfa
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
     498:	e00c      	b.n	4b4 <nm_bus_ioctl+0x100>
#endif
		default:
			s8Ret = -1;
			M2M_ERR("invalide ioclt cmd\n");
     49a:	480d      	ldr	r0, [pc, #52]	; (4d0 <nm_bus_ioctl+0x11c>)
     49c:	490d      	ldr	r1, [pc, #52]	; (4d4 <nm_bus_ioctl+0x120>)
     49e:	2286      	movs	r2, #134	; 0x86
     4a0:	0052      	lsls	r2, r2, #1
     4a2:	4b0d      	ldr	r3, [pc, #52]	; (4d8 <nm_bus_ioctl+0x124>)
     4a4:	4798      	blx	r3
     4a6:	480d      	ldr	r0, [pc, #52]	; (4dc <nm_bus_ioctl+0x128>)
     4a8:	4b0d      	ldr	r3, [pc, #52]	; (4e0 <nm_bus_ioctl+0x12c>)
     4aa:	4798      	blx	r3
     4ac:	200d      	movs	r0, #13
     4ae:	4b0d      	ldr	r3, [pc, #52]	; (4e4 <nm_bus_ioctl+0x130>)
     4b0:	4798      	blx	r3
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
		}
		break;
#endif
		default:
			s8Ret = -1;
     4b2:	20ff      	movs	r0, #255	; 0xff
			M2M_ERR("invalide ioclt cmd\n");
			break;
	}

	return s8Ret;
     4b4:	b240      	sxtb	r0, r0
}
     4b6:	b005      	add	sp, #20
     4b8:	bc3c      	pop	{r2, r3, r4, r5}
     4ba:	4690      	mov	r8, r2
     4bc:	4699      	mov	r9, r3
     4be:	46a2      	mov	sl, r4
     4c0:	46ab      	mov	fp, r5
     4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4c4:	20000370 	.word	0x20000370
     4c8:	2000036c 	.word	0x2000036c
     4cc:	00004499 	.word	0x00004499
     4d0:	0000a28c 	.word	0x0000a28c
     4d4:	0000a2b4 	.word	0x0000a2b4
     4d8:	00008bed 	.word	0x00008bed
     4dc:	0000a2a0 	.word	0x0000a2a0
     4e0:	00008d0d 	.word	0x00008d0d
     4e4:	00008c21 	.word	0x00008c21

000004e8 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
     4e8:	b538      	push	{r3, r4, r5, lr}
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     4ea:	4d0b      	ldr	r5, [pc, #44]	; (518 <nm_bus_deinit+0x30>)
     4ec:	682c      	ldr	r4, [r5, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     4ee:	1c20      	adds	r0, r4, #0
     4f0:	4b0a      	ldr	r3, [pc, #40]	; (51c <nm_bus_deinit+0x34>)
     4f2:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     4f4:	231f      	movs	r3, #31
     4f6:	4018      	ands	r0, r3
     4f8:	3b1e      	subs	r3, #30
     4fa:	4083      	lsls	r3, r0
     4fc:	1c18      	adds	r0, r3, #0
     4fe:	2380      	movs	r3, #128	; 0x80
     500:	4a07      	ldr	r2, [pc, #28]	; (520 <nm_bus_deinit+0x38>)
     502:	50d0      	str	r0, [r2, r3]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     504:	682a      	ldr	r2, [r5, #0]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     506:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     508:	2b00      	cmp	r3, #0
     50a:	d1fc      	bne.n	506 <nm_bus_deinit+0x1e>
		/* Wait until the synchronization is complete */
	}

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     50c:	6823      	ldr	r3, [r4, #0]
     50e:	2202      	movs	r2, #2
     510:	4393      	bics	r3, r2
     512:	6023      	str	r3, [r4, #0]
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     514:	2000      	movs	r0, #0
     516:	bd38      	pop	{r3, r4, r5, pc}
     518:	20000370 	.word	0x20000370
     51c:	00004239 	.word	0x00004239
     520:	e000e100 	.word	0xe000e100

00000524 <m2m_memcpy>:
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     524:	2a00      	cmp	r2, #0
     526:	d006      	beq.n	536 <m2m_memcpy+0x12>
     528:	1882      	adds	r2, r0, r2
	do
	{
		*pDst = *pSrc;
     52a:	780b      	ldrb	r3, [r1, #0]
     52c:	7003      	strb	r3, [r0, #0]
		pDst++;
     52e:	3001      	adds	r0, #1
		pSrc++;
     530:	3101      	adds	r1, #1
	}while(--sz);
     532:	4290      	cmp	r0, r2
     534:	d1f9      	bne.n	52a <m2m_memcpy+0x6>
}
     536:	4770      	bx	lr

00000538 <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     538:	2a00      	cmp	r2, #0
     53a:	d004      	beq.n	546 <m2m_memset+0xe>
     53c:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     53e:	7001      	strb	r1, [r0, #0]
		pBuf++;
     540:	3001      	adds	r0, #1
	}while(--sz);
     542:	4290      	cmp	r0, r2
     544:	d1fb      	bne.n	53e <m2m_memset+0x6>
}
     546:	4770      	bx	lr

00000548 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     548:	1c03      	adds	r3, r0, #0
	uint16	u16StrLen = 0;
	while(*pcStr)
     54a:	7802      	ldrb	r2, [r0, #0]
     54c:	2a00      	cmp	r2, #0
     54e:	d007      	beq.n	560 <m2m_strlen+0x18>
     550:	2000      	movs	r0, #0
	{
		u16StrLen ++;
     552:	3001      	adds	r0, #1
     554:	b280      	uxth	r0, r0
		pcStr++;
     556:	3301      	adds	r3, #1
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     558:	781a      	ldrb	r2, [r3, #0]
     55a:	2a00      	cmp	r2, #0
     55c:	d1f9      	bne.n	552 <m2m_strlen+0xa>
     55e:	e000      	b.n	562 <m2m_strlen+0x1a>
	}while(--sz);
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
     560:	2000      	movs	r0, #0
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
}
     562:	4770      	bx	lr

00000564 <isr>:
tpfHifCallBack pfOtaCb = NULL;		/*!< pointer to OTA call back function */
tpfHifCallBack pfHifCb = NULL;

static void isr(void)
{
	gu8Interrupt++;
     564:	4a02      	ldr	r2, [pc, #8]	; (570 <isr+0xc>)
     566:	7813      	ldrb	r3, [r2, #0]
     568:	3301      	adds	r3, #1
     56a:	b2db      	uxtb	r3, r3
     56c:	7013      	strb	r3, [r2, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
     56e:	4770      	bx	lr
     570:	20000168 	.word	0x20000168

00000574 <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     574:	4770      	bx	lr
     576:	46c0      	nop			; (mov r8, r8)

00000578 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
     578:	b500      	push	{lr}
     57a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     57c:	2001      	movs	r0, #1
     57e:	4b09      	ldr	r3, [pc, #36]	; (5a4 <hif_set_rx_done+0x2c>)
     580:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     582:	4809      	ldr	r0, [pc, #36]	; (5a8 <hif_set_rx_done+0x30>)
     584:	a901      	add	r1, sp, #4
     586:	4b09      	ldr	r3, [pc, #36]	; (5ac <hif_set_rx_done+0x34>)
     588:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     58a:	2800      	cmp	r0, #0
     58c:	d106      	bne.n	59c <hif_set_rx_done+0x24>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
     58e:	2102      	movs	r1, #2
     590:	9b01      	ldr	r3, [sp, #4]
     592:	4319      	orrs	r1, r3
     594:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     596:	4804      	ldr	r0, [pc, #16]	; (5a8 <hif_set_rx_done+0x30>)
     598:	4b05      	ldr	r3, [pc, #20]	; (5b0 <hif_set_rx_done+0x38>)
     59a:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     59c:	b240      	sxtb	r0, r0

}
     59e:	b003      	add	sp, #12
     5a0:	bd00      	pop	{pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	00000295 	.word	0x00000295
     5a8:	00001070 	.word	0x00001070
     5ac:	00001931 	.word	0x00001931
     5b0:	0000193d 	.word	0x0000193d

000005b4 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     5b4:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	if(gu8ChipSleep == 0)
     5b6:	4b0f      	ldr	r3, [pc, #60]	; (5f4 <hif_chip_wake+0x40>)
     5b8:	781b      	ldrb	r3, [r3, #0]
     5ba:	2b00      	cmp	r3, #0
     5bc:	d111      	bne.n	5e2 <hif_chip_wake+0x2e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     5be:	4b0e      	ldr	r3, [pc, #56]	; (5f8 <hif_chip_wake+0x44>)
     5c0:	781b      	ldrb	r3, [r3, #0]
     5c2:	2b03      	cmp	r3, #3
     5c4:	d003      	beq.n	5ce <hif_chip_wake+0x1a>
     5c6:	4b0c      	ldr	r3, [pc, #48]	; (5f8 <hif_chip_wake+0x44>)
     5c8:	781b      	ldrb	r3, [r3, #0]
     5ca:	2b04      	cmp	r3, #4
     5cc:	d109      	bne.n	5e2 <hif_chip_wake+0x2e>
		{
			ret = nm_clkless_wake();
     5ce:	4b0b      	ldr	r3, [pc, #44]	; (5fc <hif_chip_wake+0x48>)
     5d0:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5d2:	2800      	cmp	r0, #0
     5d4:	d10b      	bne.n	5ee <hif_chip_wake+0x3a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     5d6:	480a      	ldr	r0, [pc, #40]	; (600 <hif_chip_wake+0x4c>)
     5d8:	490a      	ldr	r1, [pc, #40]	; (604 <hif_chip_wake+0x50>)
     5da:	4b0b      	ldr	r3, [pc, #44]	; (608 <hif_chip_wake+0x54>)
     5dc:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     5de:	2800      	cmp	r0, #0
     5e0:	d105      	bne.n	5ee <hif_chip_wake+0x3a>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     5e2:	4a04      	ldr	r2, [pc, #16]	; (5f4 <hif_chip_wake+0x40>)
     5e4:	7813      	ldrb	r3, [r2, #0]
     5e6:	3301      	adds	r3, #1
     5e8:	b2db      	uxtb	r3, r3
     5ea:	7013      	strb	r3, [r2, #0]
     5ec:	2000      	movs	r0, #0
ERR1:
	return ret;
     5ee:	b240      	sxtb	r0, r0
}
     5f0:	bd08      	pop	{r3, pc}
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	20000180 	.word	0x20000180
     5f8:	20000170 	.word	0x20000170
     5fc:	000013e5 	.word	0x000013e5
     600:	00001074 	.word	0x00001074
     604:	00005678 	.word	0x00005678
     608:	0000193d 	.word	0x0000193d

0000060c <hif_set_sleep_mode>:
	The function SHALL return 0 for success and a negative value otherwise.
*/

void hif_set_sleep_mode(uint8 u8Pstype)
{
	gu8ChipMode = u8Pstype;
     60c:	4b01      	ldr	r3, [pc, #4]	; (614 <hif_set_sleep_mode+0x8>)
     60e:	7018      	strb	r0, [r3, #0]
}
     610:	4770      	bx	lr
     612:	46c0      	nop			; (mov r8, r8)
     614:	20000170 	.word	0x20000170

00000618 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     618:	b500      	push	{lr}
     61a:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;

	if(gu8ChipSleep >= 1)
     61c:	4b17      	ldr	r3, [pc, #92]	; (67c <hif_chip_sleep+0x64>)
     61e:	781b      	ldrb	r3, [r3, #0]
     620:	2b00      	cmp	r3, #0
     622:	d004      	beq.n	62e <hif_chip_sleep+0x16>
	{
		gu8ChipSleep--;
     624:	4a15      	ldr	r2, [pc, #84]	; (67c <hif_chip_sleep+0x64>)
     626:	7813      	ldrb	r3, [r2, #0]
     628:	3b01      	subs	r3, #1
     62a:	b2db      	uxtb	r3, r3
     62c:	7013      	strb	r3, [r2, #0]
	}

	if(gu8ChipSleep == 0)
     62e:	4b13      	ldr	r3, [pc, #76]	; (67c <hif_chip_sleep+0x64>)
     630:	781b      	ldrb	r3, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
	sint8 ret = M2M_SUCCESS;
     632:	2000      	movs	r0, #0
	if(gu8ChipSleep >= 1)
	{
		gu8ChipSleep--;
	}

	if(gu8ChipSleep == 0)
     634:	2b00      	cmp	r3, #0
     636:	d11e      	bne.n	676 <hif_chip_sleep+0x5e>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     638:	4b11      	ldr	r3, [pc, #68]	; (680 <hif_chip_sleep+0x68>)
     63a:	781b      	ldrb	r3, [r3, #0]
     63c:	2b03      	cmp	r3, #3
     63e:	d003      	beq.n	648 <hif_chip_sleep+0x30>
     640:	4b0f      	ldr	r3, [pc, #60]	; (680 <hif_chip_sleep+0x68>)
     642:	781b      	ldrb	r3, [r3, #0]
     644:	2b04      	cmp	r3, #4
     646:	d116      	bne.n	676 <hif_chip_sleep+0x5e>
		{
			uint32 reg = 0;
     648:	2300      	movs	r3, #0
     64a:	9301      	str	r3, [sp, #4]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     64c:	480d      	ldr	r0, [pc, #52]	; (684 <hif_chip_sleep+0x6c>)
     64e:	490e      	ldr	r1, [pc, #56]	; (688 <hif_chip_sleep+0x70>)
     650:	4b0e      	ldr	r3, [pc, #56]	; (68c <hif_chip_sleep+0x74>)
     652:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     654:	2800      	cmp	r0, #0
     656:	d10e      	bne.n	676 <hif_chip_sleep+0x5e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
     658:	3001      	adds	r0, #1
     65a:	a901      	add	r1, sp, #4
     65c:	4b0c      	ldr	r3, [pc, #48]	; (690 <hif_chip_sleep+0x78>)
     65e:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     660:	2800      	cmp	r0, #0
     662:	d108      	bne.n	676 <hif_chip_sleep+0x5e>
			if(reg&0x2)
     664:	9901      	ldr	r1, [sp, #4]
     666:	078b      	lsls	r3, r1, #30
     668:	d505      	bpl.n	676 <hif_chip_sleep+0x5e>
			{
				reg &=~(1 << 1);
     66a:	2302      	movs	r3, #2
     66c:	4399      	bics	r1, r3
     66e:	9101      	str	r1, [sp, #4]
				ret = nm_write_reg(0x1, reg);
     670:	3001      	adds	r0, #1
     672:	4b06      	ldr	r3, [pc, #24]	; (68c <hif_chip_sleep+0x74>)
     674:	4798      	blx	r3
		else
		{
		}
	}
ERR1:
	return ret;
     676:	b240      	sxtb	r0, r0
}
     678:	b003      	add	sp, #12
     67a:	bd00      	pop	{pc}
     67c:	20000180 	.word	0x20000180
     680:	20000170 	.word	0x20000170
     684:	00001074 	.word	0x00001074
     688:	00004321 	.word	0x00004321
     68c:	0000193d 	.word	0x0000193d
     690:	00001931 	.word	0x00001931

00000694 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     694:	b5f0      	push	{r4, r5, r6, r7, lr}
     696:	465f      	mov	r7, fp
     698:	4656      	mov	r6, sl
     69a:	b4c0      	push	{r6, r7}
     69c:	b089      	sub	sp, #36	; 0x24
     69e:	4683      	mov	fp, r0
     6a0:	468a      	mov	sl, r1
     6a2:	9201      	str	r2, [sp, #4]
     6a4:	9300      	str	r3, [sp, #0]
     6a6:	ab10      	add	r3, sp, #64	; 0x40
     6a8:	cb80      	ldmia	r3!, {r7}
     6aa:	881e      	ldrh	r6, [r3, #0]
     6ac:	ab12      	add	r3, sp, #72	; 0x48
     6ae:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     6b0:	227f      	movs	r2, #127	; 0x7f
     6b2:	400a      	ands	r2, r1
     6b4:	ab07      	add	r3, sp, #28
     6b6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     6b8:	7018      	strb	r0, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     6ba:	2208      	movs	r2, #8
     6bc:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     6be:	2f00      	cmp	r7, #0
     6c0:	d005      	beq.n	6ce <hif_send+0x3a>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     6c2:	885a      	ldrh	r2, [r3, #2]
     6c4:	1992      	adds	r2, r2, r6
     6c6:	18aa      	adds	r2, r5, r2
     6c8:	b292      	uxth	r2, r2
     6ca:	805a      	strh	r2, [r3, #2]
     6cc:	e006      	b.n	6dc <hif_send+0x48>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     6ce:	ab07      	add	r3, sp, #28
     6d0:	885a      	ldrh	r2, [r3, #2]
     6d2:	9900      	ldr	r1, [sp, #0]
     6d4:	468c      	mov	ip, r1
     6d6:	4462      	add	r2, ip
     6d8:	b292      	uxth	r2, r2
     6da:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     6dc:	4b55      	ldr	r3, [pc, #340]	; (834 <hif_send+0x1a0>)
     6de:	4798      	blx	r3
     6e0:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     6e2:	d000      	beq.n	6e6 <hif_send+0x52>
     6e4:	e08e      	b.n	804 <hif_send+0x170>
	{
		volatile uint32 reg, dma_addr = 0;
     6e6:	2300      	movs	r3, #0
     6e8:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     6ea:	aa02      	add	r2, sp, #8
     6ec:	80d3      	strh	r3, [r2, #6]

		reg = 0UL;
     6ee:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     6f0:	9b04      	ldr	r3, [sp, #16]
     6f2:	465a      	mov	r2, fp
     6f4:	431a      	orrs	r2, r3
     6f6:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     6f8:	9a04      	ldr	r2, [sp, #16]
     6fa:	4653      	mov	r3, sl
     6fc:	021b      	lsls	r3, r3, #8
     6fe:	4313      	orrs	r3, r2
     700:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     702:	ab07      	add	r3, sp, #28
     704:	885b      	ldrh	r3, [r3, #2]
     706:	9a04      	ldr	r2, [sp, #16]
     708:	041b      	lsls	r3, r3, #16
     70a:	4313      	orrs	r3, r2
     70c:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     70e:	9904      	ldr	r1, [sp, #16]
     710:	4849      	ldr	r0, [pc, #292]	; (838 <hif_send+0x1a4>)
     712:	4b4a      	ldr	r3, [pc, #296]	; (83c <hif_send+0x1a8>)
     714:	4798      	blx	r3
     716:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     718:	d000      	beq.n	71c <hif_send+0x88>
     71a:	e085      	b.n	828 <hif_send+0x194>


		reg = 0;
     71c:	2300      	movs	r3, #0
     71e:	9304      	str	r3, [sp, #16]
		reg |= (1<<1);
     720:	9a04      	ldr	r2, [sp, #16]
     722:	3302      	adds	r3, #2
     724:	4313      	orrs	r3, r2
     726:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     728:	9904      	ldr	r1, [sp, #16]
     72a:	4845      	ldr	r0, [pc, #276]	; (840 <hif_send+0x1ac>)
     72c:	4b43      	ldr	r3, [pc, #268]	; (83c <hif_send+0x1a8>)
     72e:	4798      	blx	r3
     730:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     732:	d000      	beq.n	736 <hif_send+0xa2>
     734:	e078      	b.n	828 <hif_send+0x194>
		dma_addr = 0;
     736:	2200      	movs	r2, #0
     738:	9205      	str	r2, [sp, #20]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     73a:	ab02      	add	r3, sp, #8
     73c:	80da      	strh	r2, [r3, #6]
     73e:	3306      	adds	r3, #6
     740:	881b      	ldrh	r3, [r3, #0]
     742:	b29b      	uxth	r3, r3
     744:	4a3f      	ldr	r2, [pc, #252]	; (844 <hif_send+0x1b0>)
     746:	4293      	cmp	r3, r2
     748:	d81c      	bhi.n	784 <hif_send+0xf0>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     74a:	4c3f      	ldr	r4, [pc, #252]	; (848 <hif_send+0x1b4>)
     74c:	483c      	ldr	r0, [pc, #240]	; (840 <hif_send+0x1ac>)
     74e:	a904      	add	r1, sp, #16
     750:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     752:	2800      	cmp	r0, #0
     754:	d116      	bne.n	784 <hif_send+0xf0>
			if (!(reg & 0x2))
     756:	9b04      	ldr	r3, [sp, #16]
     758:	079b      	lsls	r3, r3, #30
     75a:	d408      	bmi.n	76e <hif_send+0xda>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
     75c:	483b      	ldr	r0, [pc, #236]	; (84c <hif_send+0x1b8>)
     75e:	a905      	add	r1, sp, #20
     760:	4b39      	ldr	r3, [pc, #228]	; (848 <hif_send+0x1b4>)
     762:	4798      	blx	r3
				if(ret != M2M_SUCCESS) {
     764:	2800      	cmp	r0, #0
     766:	d00d      	beq.n	784 <hif_send+0xf0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
     768:	2300      	movs	r3, #0
     76a:	9305      	str	r3, [sp, #20]
     76c:	e00a      	b.n	784 <hif_send+0xf0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     76e:	ab02      	add	r3, sp, #8
     770:	88da      	ldrh	r2, [r3, #6]
     772:	3201      	adds	r2, #1
     774:	b292      	uxth	r2, r2
     776:	80da      	strh	r2, [r3, #6]
     778:	3306      	adds	r3, #6
     77a:	881b      	ldrh	r3, [r3, #0]
     77c:	b29b      	uxth	r3, r3
     77e:	4a31      	ldr	r2, [pc, #196]	; (844 <hif_send+0x1b0>)
     780:	4293      	cmp	r3, r2
     782:	d9e3      	bls.n	74c <hif_send+0xb8>
				break;
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
     784:	9b05      	ldr	r3, [sp, #20]
     786:	2b00      	cmp	r3, #0
     788:	d04d      	beq.n	826 <hif_send+0x192>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     78a:	9b05      	ldr	r3, [sp, #20]
     78c:	9306      	str	r3, [sp, #24]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     78e:	a907      	add	r1, sp, #28
     790:	884b      	ldrh	r3, [r1, #2]
     792:	b29b      	uxth	r3, r3
     794:	804b      	strh	r3, [r1, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     796:	9806      	ldr	r0, [sp, #24]
     798:	2208      	movs	r2, #8
     79a:	4b2d      	ldr	r3, [pc, #180]	; (850 <hif_send+0x1bc>)
     79c:	4798      	blx	r3
     79e:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     7a0:	d142      	bne.n	828 <hif_send+0x194>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     7a2:	9b06      	ldr	r3, [sp, #24]
     7a4:	3308      	adds	r3, #8
     7a6:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     7a8:	9b01      	ldr	r3, [sp, #4]
     7aa:	2b00      	cmp	r3, #0
     7ac:	d00b      	beq.n	7c6 <hif_send+0x132>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     7ae:	9806      	ldr	r0, [sp, #24]
     7b0:	1c19      	adds	r1, r3, #0
     7b2:	9a00      	ldr	r2, [sp, #0]
     7b4:	4b26      	ldr	r3, [pc, #152]	; (850 <hif_send+0x1bc>)
     7b6:	4798      	blx	r3
     7b8:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7ba:	d135      	bne.n	828 <hif_send+0x194>
				u32CurrAddr += u16CtrlBufSize;
     7bc:	9b06      	ldr	r3, [sp, #24]
     7be:	9a00      	ldr	r2, [sp, #0]
     7c0:	4694      	mov	ip, r2
     7c2:	4463      	add	r3, ip
     7c4:	9306      	str	r3, [sp, #24]
			}
			if(pu8DataBuf != NULL)
     7c6:	2f00      	cmp	r7, #0
     7c8:	d00e      	beq.n	7e8 <hif_send+0x154>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     7ca:	9b06      	ldr	r3, [sp, #24]
     7cc:	9a00      	ldr	r2, [sp, #0]
     7ce:	1aad      	subs	r5, r5, r2
     7d0:	18ed      	adds	r5, r5, r3
     7d2:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     7d4:	9806      	ldr	r0, [sp, #24]
     7d6:	1c39      	adds	r1, r7, #0
     7d8:	1c32      	adds	r2, r6, #0
     7da:	4b1d      	ldr	r3, [pc, #116]	; (850 <hif_send+0x1bc>)
     7dc:	4798      	blx	r3
     7de:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     7e0:	d122      	bne.n	828 <hif_send+0x194>
				u32CurrAddr += u16DataSize;
     7e2:	9b06      	ldr	r3, [sp, #24]
     7e4:	18f3      	adds	r3, r6, r3
     7e6:	9306      	str	r3, [sp, #24]
			}

			reg = dma_addr << 2;
     7e8:	9b05      	ldr	r3, [sp, #20]
     7ea:	009b      	lsls	r3, r3, #2
     7ec:	9304      	str	r3, [sp, #16]
			reg |= (1 << 1);
     7ee:	9a04      	ldr	r2, [sp, #16]
     7f0:	2302      	movs	r3, #2
     7f2:	4313      	orrs	r3, r2
     7f4:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     7f6:	9904      	ldr	r1, [sp, #16]
     7f8:	4816      	ldr	r0, [pc, #88]	; (854 <hif_send+0x1c0>)
     7fa:	4b10      	ldr	r3, [pc, #64]	; (83c <hif_send+0x1a8>)
     7fc:	4798      	blx	r3
     7fe:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     800:	d112      	bne.n	828 <hif_send+0x194>
     802:	e00c      	b.n	81e <hif_send+0x18a>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
     804:	4814      	ldr	r0, [pc, #80]	; (858 <hif_send+0x1c4>)
     806:	4915      	ldr	r1, [pc, #84]	; (85c <hif_send+0x1c8>)
     808:	22ca      	movs	r2, #202	; 0xca
     80a:	0052      	lsls	r2, r2, #1
     80c:	4b14      	ldr	r3, [pc, #80]	; (860 <hif_send+0x1cc>)
     80e:	4798      	blx	r3
     810:	4814      	ldr	r0, [pc, #80]	; (864 <hif_send+0x1d0>)
     812:	4b15      	ldr	r3, [pc, #84]	; (868 <hif_send+0x1d4>)
     814:	4798      	blx	r3
     816:	200d      	movs	r0, #13
     818:	4b14      	ldr	r3, [pc, #80]	; (86c <hif_send+0x1d8>)
     81a:	4798      	blx	r3
		goto ERR1;
     81c:	e004      	b.n	828 <hif_send+0x194>
	}
	ret = hif_chip_sleep();
     81e:	4b14      	ldr	r3, [pc, #80]	; (870 <hif_send+0x1dc>)
     820:	4798      	blx	r3
     822:	1c04      	adds	r4, r0, #0
     824:	e000      	b.n	828 <hif_send+0x194>
			if(M2M_SUCCESS != ret) goto ERR1;
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
     826:	24fd      	movs	r4, #253	; 0xfd
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
     828:	b260      	sxtb	r0, r4
}
     82a:	b009      	add	sp, #36	; 0x24
     82c:	bc0c      	pop	{r2, r3}
     82e:	4692      	mov	sl, r2
     830:	469b      	mov	fp, r3
     832:	bdf0      	pop	{r4, r5, r6, r7, pc}
     834:	000005b5 	.word	0x000005b5
     838:	0000108c 	.word	0x0000108c
     83c:	0000193d 	.word	0x0000193d
     840:	00001078 	.word	0x00001078
     844:	000003e7 	.word	0x000003e7
     848:	00001931 	.word	0x00001931
     84c:	00150400 	.word	0x00150400
     850:	000019b5 	.word	0x000019b5
     854:	0000106c 	.word	0x0000106c
     858:	0000a28c 	.word	0x0000a28c
     85c:	0000a548 	.word	0x0000a548
     860:	00008bed 	.word	0x00008bed
     864:	0000a2f8 	.word	0x0000a2f8
     868:	00008d0d 	.word	0x00008d0d
     86c:	00008c21 	.word	0x00008c21
     870:	00000619 	.word	0x00000619

00000874 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     874:	b5f0      	push	{r4, r5, r6, r7, lr}
     876:	464f      	mov	r7, r9
     878:	4646      	mov	r6, r8
     87a:	b4c0      	push	{r6, r7}
     87c:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     87e:	4ba3      	ldr	r3, [pc, #652]	; (b0c <hif_handle_isr+0x298>)
     880:	4698      	mov	r8, r3
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     882:	1c1f      	adds	r7, r3, #0
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     884:	4ea2      	ldr	r6, [pc, #648]	; (b10 <hif_handle_isr+0x29c>)

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     886:	e136      	b.n	af6 <hif_handle_isr+0x282>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
     888:	783b      	ldrb	r3, [r7, #0]
     88a:	3b01      	subs	r3, #1
     88c:	b2db      	uxtb	r3, r3
     88e:	703b      	strb	r3, [r7, #0]
{
	sint8 ret = M2M_ERR_BUS_FAIL;
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
     890:	47b0      	blx	r6
     892:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     894:	d000      	beq.n	898 <hif_handle_isr+0x24>
     896:	e110      	b.n	aba <hif_handle_isr+0x246>
	{
		ret = nm_read_reg_with_ret(0x1070, &reg);
     898:	489e      	ldr	r0, [pc, #632]	; (b14 <hif_handle_isr+0x2a0>)
     89a:	a903      	add	r1, sp, #12
     89c:	4b9e      	ldr	r3, [pc, #632]	; (b18 <hif_handle_isr+0x2a4>)
     89e:	4798      	blx	r3
     8a0:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS == ret)
     8a2:	d000      	beq.n	8a6 <hif_handle_isr+0x32>
     8a4:	e0fd      	b.n	aa2 <hif_handle_isr+0x22e>
		{
			if(reg & 0x1)	/* New interrupt has been received */
     8a6:	9b03      	ldr	r3, [sp, #12]
     8a8:	07db      	lsls	r3, r3, #31
     8aa:	d400      	bmi.n	8ae <hif_handle_isr+0x3a>
     8ac:	e0ed      	b.n	a8a <hif_handle_isr+0x216>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
     8ae:	2000      	movs	r0, #0
     8b0:	4b9a      	ldr	r3, [pc, #616]	; (b1c <hif_handle_isr+0x2a8>)
     8b2:	4798      	blx	r3
				/*Clearing RX interrupt*/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     8b4:	4897      	ldr	r0, [pc, #604]	; (b14 <hif_handle_isr+0x2a0>)
     8b6:	a903      	add	r1, sp, #12
     8b8:	4b97      	ldr	r3, [pc, #604]	; (b18 <hif_handle_isr+0x2a4>)
     8ba:	4798      	blx	r3
     8bc:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
     8be:	d000      	beq.n	8c2 <hif_handle_isr+0x4e>
     8c0:	e10c      	b.n	adc <hif_handle_isr+0x268>
				reg &= ~(1<<0);
     8c2:	2301      	movs	r3, #1
     8c4:	9903      	ldr	r1, [sp, #12]
     8c6:	4399      	bics	r1, r3
     8c8:	9103      	str	r1, [sp, #12]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     8ca:	4892      	ldr	r0, [pc, #584]	; (b14 <hif_handle_isr+0x2a0>)
     8cc:	4b94      	ldr	r3, [pc, #592]	; (b20 <hif_handle_isr+0x2ac>)
     8ce:	4798      	blx	r3
     8d0:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS)goto ERR1;
     8d2:	d000      	beq.n	8d6 <hif_handle_isr+0x62>
     8d4:	e102      	b.n	adc <hif_handle_isr+0x268>
				/* read the rx size */
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     8d6:	488f      	ldr	r0, [pc, #572]	; (b14 <hif_handle_isr+0x2a0>)
     8d8:	a903      	add	r1, sp, #12
     8da:	4b8f      	ldr	r3, [pc, #572]	; (b18 <hif_handle_isr+0x2a4>)
     8dc:	4798      	blx	r3
     8de:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret)
     8e0:	d00f      	beq.n	902 <hif_handle_isr+0x8e>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
     8e2:	4890      	ldr	r0, [pc, #576]	; (b24 <hif_handle_isr+0x2b0>)
     8e4:	4990      	ldr	r1, [pc, #576]	; (b28 <hif_handle_isr+0x2b4>)
     8e6:	22c0      	movs	r2, #192	; 0xc0
     8e8:	32ff      	adds	r2, #255	; 0xff
     8ea:	4b90      	ldr	r3, [pc, #576]	; (b2c <hif_handle_isr+0x2b8>)
     8ec:	4798      	blx	r3
     8ee:	4890      	ldr	r0, [pc, #576]	; (b30 <hif_handle_isr+0x2bc>)
     8f0:	4b90      	ldr	r3, [pc, #576]	; (b34 <hif_handle_isr+0x2c0>)
     8f2:	4798      	blx	r3
     8f4:	200d      	movs	r0, #13
     8f6:	4b90      	ldr	r3, [pc, #576]	; (b38 <hif_handle_isr+0x2c4>)
     8f8:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
     8fa:	2001      	movs	r0, #1
     8fc:	4b87      	ldr	r3, [pc, #540]	; (b1c <hif_handle_isr+0x2a8>)
     8fe:	4798      	blx	r3
     900:	e0ec      	b.n	adc <hif_handle_isr+0x268>
					goto ERR1;
				}
				gu8HifSizeDone = 0;
     902:	2200      	movs	r2, #0
     904:	4b8d      	ldr	r3, [pc, #564]	; (b3c <hif_handle_isr+0x2c8>)
     906:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
     908:	9b03      	ldr	r3, [sp, #12]
     90a:	049b      	lsls	r3, r3, #18
     90c:	0d1b      	lsrs	r3, r3, #20
     90e:	4699      	mov	r9, r3
				if (size > 0) {
     910:	d100      	bne.n	914 <hif_handle_isr+0xa0>
     912:	e0ad      	b.n	a70 <hif_handle_isr+0x1fc>
					uint32 address = 0;
     914:	2300      	movs	r3, #0
     916:	9305      	str	r3, [sp, #20]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     918:	4889      	ldr	r0, [pc, #548]	; (b40 <hif_handle_isr+0x2cc>)
     91a:	a905      	add	r1, sp, #20
     91c:	4b7e      	ldr	r3, [pc, #504]	; (b18 <hif_handle_isr+0x2a4>)
     91e:	4798      	blx	r3
     920:	1e04      	subs	r4, r0, #0
					if(M2M_SUCCESS != ret)
     922:	d00f      	beq.n	944 <hif_handle_isr+0xd0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     924:	487f      	ldr	r0, [pc, #508]	; (b24 <hif_handle_isr+0x2b0>)
     926:	4980      	ldr	r1, [pc, #512]	; (b28 <hif_handle_isr+0x2b4>)
     928:	22ce      	movs	r2, #206	; 0xce
     92a:	32ff      	adds	r2, #255	; 0xff
     92c:	4b7f      	ldr	r3, [pc, #508]	; (b2c <hif_handle_isr+0x2b8>)
     92e:	4798      	blx	r3
     930:	4884      	ldr	r0, [pc, #528]	; (b44 <hif_handle_isr+0x2d0>)
     932:	4b80      	ldr	r3, [pc, #512]	; (b34 <hif_handle_isr+0x2c0>)
     934:	4798      	blx	r3
     936:	200d      	movs	r0, #13
     938:	4b7f      	ldr	r3, [pc, #508]	; (b38 <hif_handle_isr+0x2c4>)
     93a:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     93c:	2001      	movs	r0, #1
     93e:	4b77      	ldr	r3, [pc, #476]	; (b1c <hif_handle_isr+0x2a8>)
     940:	4798      	blx	r3
     942:	e0c9      	b.n	ad8 <hif_handle_isr+0x264>
						goto ERR1;
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     944:	ad04      	add	r5, sp, #16
     946:	9805      	ldr	r0, [sp, #20]
     948:	1c29      	adds	r1, r5, #0
     94a:	2204      	movs	r2, #4
     94c:	4b7e      	ldr	r3, [pc, #504]	; (b48 <hif_handle_isr+0x2d4>)
     94e:	4798      	blx	r3
     950:	1c04      	adds	r4, r0, #0
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     952:	886b      	ldrh	r3, [r5, #2]
     954:	b29b      	uxth	r3, r3
     956:	806b      	strh	r3, [r5, #2]
					if(M2M_SUCCESS != ret)
     958:	2800      	cmp	r0, #0
     95a:	d00f      	beq.n	97c <hif_handle_isr+0x108>
					{
						M2M_ERR("(hif) address bus fail\n");
     95c:	4871      	ldr	r0, [pc, #452]	; (b24 <hif_handle_isr+0x2b0>)
     95e:	4972      	ldr	r1, [pc, #456]	; (b28 <hif_handle_isr+0x2b4>)
     960:	22d6      	movs	r2, #214	; 0xd6
     962:	32ff      	adds	r2, #255	; 0xff
     964:	4b71      	ldr	r3, [pc, #452]	; (b2c <hif_handle_isr+0x2b8>)
     966:	4798      	blx	r3
     968:	4878      	ldr	r0, [pc, #480]	; (b4c <hif_handle_isr+0x2d8>)
     96a:	4b72      	ldr	r3, [pc, #456]	; (b34 <hif_handle_isr+0x2c0>)
     96c:	4798      	blx	r3
     96e:	200d      	movs	r0, #13
     970:	4b71      	ldr	r3, [pc, #452]	; (b38 <hif_handle_isr+0x2c4>)
     972:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
     974:	2001      	movs	r0, #1
     976:	4b69      	ldr	r3, [pc, #420]	; (b1c <hif_handle_isr+0x2a8>)
     978:	4798      	blx	r3
     97a:	e0ad      	b.n	ad8 <hif_handle_isr+0x264>
						goto ERR1;
					}
					if(strHif.u16Length != size)
     97c:	ab04      	add	r3, sp, #16
     97e:	885b      	ldrh	r3, [r3, #2]
     980:	b29b      	uxth	r3, r3
     982:	4599      	cmp	r9, r3
     984:	d01d      	beq.n	9c2 <hif_handle_isr+0x14e>
					{
						if((size - strHif.u16Length) > 4)
     986:	ab04      	add	r3, sp, #16
     988:	885b      	ldrh	r3, [r3, #2]
     98a:	464a      	mov	r2, r9
     98c:	1ad3      	subs	r3, r2, r3
     98e:	2b04      	cmp	r3, #4
     990:	dd17      	ble.n	9c2 <hif_handle_isr+0x14e>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     992:	4864      	ldr	r0, [pc, #400]	; (b24 <hif_handle_isr+0x2b0>)
     994:	4964      	ldr	r1, [pc, #400]	; (b28 <hif_handle_isr+0x2b4>)
     996:	22ef      	movs	r2, #239	; 0xef
     998:	0052      	lsls	r2, r2, #1
     99a:	4c64      	ldr	r4, [pc, #400]	; (b2c <hif_handle_isr+0x2b8>)
     99c:	47a0      	blx	r4
     99e:	a904      	add	r1, sp, #16
     9a0:	884a      	ldrh	r2, [r1, #2]
     9a2:	b292      	uxth	r2, r2
     9a4:	780b      	ldrb	r3, [r1, #0]
     9a6:	b2db      	uxtb	r3, r3
     9a8:	7849      	ldrb	r1, [r1, #1]
     9aa:	9100      	str	r1, [sp, #0]
     9ac:	4868      	ldr	r0, [pc, #416]	; (b50 <hif_handle_isr+0x2dc>)
     9ae:	4649      	mov	r1, r9
     9b0:	47a0      	blx	r4
     9b2:	200d      	movs	r0, #13
     9b4:	4b60      	ldr	r3, [pc, #384]	; (b38 <hif_handle_isr+0x2c4>)
     9b6:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
     9b8:	2001      	movs	r0, #1
     9ba:	4b58      	ldr	r3, [pc, #352]	; (b1c <hif_handle_isr+0x2a8>)
     9bc:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
     9be:	24fa      	movs	r4, #250	; 0xfa
     9c0:	e08a      	b.n	ad8 <hif_handle_isr+0x264>
							goto ERR1;
						}
					}

					if(M2M_REQ_GRP_WIFI == strHif.u8Gid)
     9c2:	ab04      	add	r3, sp, #16
     9c4:	781b      	ldrb	r3, [r3, #0]
     9c6:	2b01      	cmp	r3, #1
     9c8:	d10d      	bne.n	9e6 <hif_handle_isr+0x172>
					{
						if(pfWifiCb)
     9ca:	4b62      	ldr	r3, [pc, #392]	; (b54 <hif_handle_isr+0x2e0>)
     9cc:	681b      	ldr	r3, [r3, #0]
     9ce:	2b00      	cmp	r3, #0
     9d0:	d03b      	beq.n	a4a <hif_handle_isr+0x1d6>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9d2:	aa04      	add	r2, sp, #16
     9d4:	7850      	ldrb	r0, [r2, #1]
     9d6:	b2c0      	uxtb	r0, r0
     9d8:	8851      	ldrh	r1, [r2, #2]
     9da:	3908      	subs	r1, #8
     9dc:	b289      	uxth	r1, r1
     9de:	9a05      	ldr	r2, [sp, #20]
     9e0:	3208      	adds	r2, #8
     9e2:	4798      	blx	r3
     9e4:	e031      	b.n	a4a <hif_handle_isr+0x1d6>

					}
					else if(M2M_REQ_GRP_IP == strHif.u8Gid)
     9e6:	ab04      	add	r3, sp, #16
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	2b02      	cmp	r3, #2
     9ec:	d10d      	bne.n	a0a <hif_handle_isr+0x196>
					{
						if(pfIpCb)
     9ee:	4b5a      	ldr	r3, [pc, #360]	; (b58 <hif_handle_isr+0x2e4>)
     9f0:	681b      	ldr	r3, [r3, #0]
     9f2:	2b00      	cmp	r3, #0
     9f4:	d029      	beq.n	a4a <hif_handle_isr+0x1d6>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9f6:	aa04      	add	r2, sp, #16
     9f8:	7850      	ldrb	r0, [r2, #1]
     9fa:	b2c0      	uxtb	r0, r0
     9fc:	8851      	ldrh	r1, [r2, #2]
     9fe:	3908      	subs	r1, #8
     a00:	b289      	uxth	r1, r1
     a02:	9a05      	ldr	r2, [sp, #20]
     a04:	3208      	adds	r2, #8
     a06:	4798      	blx	r3
     a08:	e01f      	b.n	a4a <hif_handle_isr+0x1d6>
					}
					else if(M2M_REQ_GRP_OTA == strHif.u8Gid)
     a0a:	ab04      	add	r3, sp, #16
     a0c:	781b      	ldrb	r3, [r3, #0]
     a0e:	2b04      	cmp	r3, #4
     a10:	d10d      	bne.n	a2e <hif_handle_isr+0x1ba>
					{
						if(pfOtaCb)
     a12:	4b52      	ldr	r3, [pc, #328]	; (b5c <hif_handle_isr+0x2e8>)
     a14:	681b      	ldr	r3, [r3, #0]
     a16:	2b00      	cmp	r3, #0
     a18:	d017      	beq.n	a4a <hif_handle_isr+0x1d6>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a1a:	aa04      	add	r2, sp, #16
     a1c:	7850      	ldrb	r0, [r2, #1]
     a1e:	b2c0      	uxtb	r0, r0
     a20:	8851      	ldrh	r1, [r2, #2]
     a22:	3908      	subs	r1, #8
     a24:	b289      	uxth	r1, r1
     a26:	9a05      	ldr	r2, [sp, #20]
     a28:	3208      	adds	r2, #8
     a2a:	4798      	blx	r3
     a2c:	e00d      	b.n	a4a <hif_handle_isr+0x1d6>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
     a2e:	483d      	ldr	r0, [pc, #244]	; (b24 <hif_handle_isr+0x2b0>)
     a30:	493d      	ldr	r1, [pc, #244]	; (b28 <hif_handle_isr+0x2b4>)
     a32:	22f8      	movs	r2, #248	; 0xf8
     a34:	32ff      	adds	r2, #255	; 0xff
     a36:	4b3d      	ldr	r3, [pc, #244]	; (b2c <hif_handle_isr+0x2b8>)
     a38:	4798      	blx	r3
     a3a:	4849      	ldr	r0, [pc, #292]	; (b60 <hif_handle_isr+0x2ec>)
     a3c:	4b3d      	ldr	r3, [pc, #244]	; (b34 <hif_handle_isr+0x2c0>)
     a3e:	4798      	blx	r3
     a40:	200d      	movs	r0, #13
     a42:	4b3d      	ldr	r3, [pc, #244]	; (b38 <hif_handle_isr+0x2c4>)
     a44:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     a46:	24fa      	movs	r4, #250	; 0xfa
     a48:	e046      	b.n	ad8 <hif_handle_isr+0x264>
						goto ERR1;
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
     a4a:	4b3c      	ldr	r3, [pc, #240]	; (b3c <hif_handle_isr+0x2c8>)
     a4c:	781b      	ldrb	r3, [r3, #0]
     a4e:	2b00      	cmp	r3, #0
     a50:	d13f      	bne.n	ad2 <hif_handle_isr+0x25e>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
     a52:	4834      	ldr	r0, [pc, #208]	; (b24 <hif_handle_isr+0x2b0>)
     a54:	4934      	ldr	r1, [pc, #208]	; (b28 <hif_handle_isr+0x2b4>)
     a56:	22ff      	movs	r2, #255	; 0xff
     a58:	0052      	lsls	r2, r2, #1
     a5a:	4b34      	ldr	r3, [pc, #208]	; (b2c <hif_handle_isr+0x2b8>)
     a5c:	4798      	blx	r3
     a5e:	4841      	ldr	r0, [pc, #260]	; (b64 <hif_handle_isr+0x2f0>)
     a60:	4b34      	ldr	r3, [pc, #208]	; (b34 <hif_handle_isr+0x2c0>)
     a62:	4798      	blx	r3
     a64:	200d      	movs	r0, #13
     a66:	4b34      	ldr	r3, [pc, #208]	; (b38 <hif_handle_isr+0x2c4>)
     a68:	4798      	blx	r3
						ret = hif_set_rx_done();
     a6a:	4b3f      	ldr	r3, [pc, #252]	; (b68 <hif_handle_isr+0x2f4>)
     a6c:	4798      	blx	r3
     a6e:	e030      	b.n	ad2 <hif_handle_isr+0x25e>
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
					M2M_ERR("(hif) Wrong Size\n");
     a70:	482c      	ldr	r0, [pc, #176]	; (b24 <hif_handle_isr+0x2b0>)
     a72:	492d      	ldr	r1, [pc, #180]	; (b28 <hif_handle_isr+0x2b4>)
     a74:	4a3d      	ldr	r2, [pc, #244]	; (b6c <hif_handle_isr+0x2f8>)
     a76:	4b2d      	ldr	r3, [pc, #180]	; (b2c <hif_handle_isr+0x2b8>)
     a78:	4798      	blx	r3
     a7a:	483d      	ldr	r0, [pc, #244]	; (b70 <hif_handle_isr+0x2fc>)
     a7c:	4b2d      	ldr	r3, [pc, #180]	; (b34 <hif_handle_isr+0x2c0>)
     a7e:	4798      	blx	r3
     a80:	200d      	movs	r0, #13
     a82:	4b2d      	ldr	r3, [pc, #180]	; (b38 <hif_handle_isr+0x2c4>)
     a84:	4798      	blx	r3
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
     a86:	24fe      	movs	r4, #254	; 0xfe
     a88:	e028      	b.n	adc <hif_handle_isr+0x268>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
     a8a:	4826      	ldr	r0, [pc, #152]	; (b24 <hif_handle_isr+0x2b0>)
     a8c:	4926      	ldr	r1, [pc, #152]	; (b28 <hif_handle_isr+0x2b4>)
     a8e:	4a39      	ldr	r2, [pc, #228]	; (b74 <hif_handle_isr+0x300>)
     a90:	4c26      	ldr	r4, [pc, #152]	; (b2c <hif_handle_isr+0x2b8>)
     a92:	47a0      	blx	r4
     a94:	4838      	ldr	r0, [pc, #224]	; (b78 <hif_handle_isr+0x304>)
     a96:	9903      	ldr	r1, [sp, #12]
     a98:	47a0      	blx	r4
     a9a:	200d      	movs	r0, #13
     a9c:	4b26      	ldr	r3, [pc, #152]	; (b38 <hif_handle_isr+0x2c4>)
     a9e:	4798      	blx	r3
     aa0:	e017      	b.n	ad2 <hif_handle_isr+0x25e>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
     aa2:	4820      	ldr	r0, [pc, #128]	; (b24 <hif_handle_isr+0x2b0>)
     aa4:	4920      	ldr	r1, [pc, #128]	; (b28 <hif_handle_isr+0x2b4>)
     aa6:	4a35      	ldr	r2, [pc, #212]	; (b7c <hif_handle_isr+0x308>)
     aa8:	4b20      	ldr	r3, [pc, #128]	; (b2c <hif_handle_isr+0x2b8>)
     aaa:	4798      	blx	r3
     aac:	4834      	ldr	r0, [pc, #208]	; (b80 <hif_handle_isr+0x30c>)
     aae:	4b21      	ldr	r3, [pc, #132]	; (b34 <hif_handle_isr+0x2c0>)
     ab0:	4798      	blx	r3
     ab2:	200d      	movs	r0, #13
     ab4:	4b20      	ldr	r3, [pc, #128]	; (b38 <hif_handle_isr+0x2c4>)
     ab6:	4798      	blx	r3
     ab8:	e010      	b.n	adc <hif_handle_isr+0x268>
			goto ERR1;
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
     aba:	481a      	ldr	r0, [pc, #104]	; (b24 <hif_handle_isr+0x2b0>)
     abc:	491a      	ldr	r1, [pc, #104]	; (b28 <hif_handle_isr+0x2b4>)
     abe:	4a31      	ldr	r2, [pc, #196]	; (b84 <hif_handle_isr+0x310>)
     ac0:	4b1a      	ldr	r3, [pc, #104]	; (b2c <hif_handle_isr+0x2b8>)
     ac2:	4798      	blx	r3
     ac4:	4830      	ldr	r0, [pc, #192]	; (b88 <hif_handle_isr+0x314>)
     ac6:	4b1b      	ldr	r3, [pc, #108]	; (b34 <hif_handle_isr+0x2c0>)
     ac8:	4798      	blx	r3
     aca:	200d      	movs	r0, #13
     acc:	4b1a      	ldr	r3, [pc, #104]	; (b38 <hif_handle_isr+0x2c4>)
     ace:	4798      	blx	r3
     ad0:	e004      	b.n	adc <hif_handle_isr+0x268>
		goto ERR1;
	}

	ret = hif_chip_sleep();
     ad2:	4b2e      	ldr	r3, [pc, #184]	; (b8c <hif_handle_isr+0x318>)
     ad4:	4798      	blx	r3
     ad6:	1c04      	adds	r4, r0, #0
		/*when the interrupt enabled*/
		gu8Interrupt--;
		while(1)
		{
			ret = hif_isr();
			if(ret == M2M_SUCCESS) {
     ad8:	2c00      	cmp	r4, #0
     ada:	d00c      	beq.n	af6 <hif_handle_isr+0x282>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
     adc:	4811      	ldr	r0, [pc, #68]	; (b24 <hif_handle_isr+0x2b0>)
     ade:	492c      	ldr	r1, [pc, #176]	; (b90 <hif_handle_isr+0x31c>)
     ae0:	228e      	movs	r2, #142	; 0x8e
     ae2:	0092      	lsls	r2, r2, #2
     ae4:	4d11      	ldr	r5, [pc, #68]	; (b2c <hif_handle_isr+0x2b8>)
     ae6:	47a8      	blx	r5
     ae8:	b261      	sxtb	r1, r4
     aea:	482a      	ldr	r0, [pc, #168]	; (b94 <hif_handle_isr+0x320>)
     aec:	47a8      	blx	r5
     aee:	200d      	movs	r0, #13
     af0:	4b11      	ldr	r3, [pc, #68]	; (b38 <hif_handle_isr+0x2c4>)
     af2:	4798      	blx	r3
			}
		}
     af4:	e6cc      	b.n	890 <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
     af6:	4643      	mov	r3, r8
     af8:	781b      	ldrb	r3, [r3, #0]
     afa:	2b00      	cmp	r3, #0
     afc:	d000      	beq.n	b00 <hif_handle_isr+0x28c>
     afe:	e6c3      	b.n	888 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
}
     b00:	2000      	movs	r0, #0
     b02:	b007      	add	sp, #28
     b04:	bc0c      	pop	{r2, r3}
     b06:	4690      	mov	r8, r2
     b08:	4699      	mov	r9, r3
     b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b0c:	20000168 	.word	0x20000168
     b10:	000005b5 	.word	0x000005b5
     b14:	00001070 	.word	0x00001070
     b18:	00001931 	.word	0x00001931
     b1c:	00000295 	.word	0x00000295
     b20:	0000193d 	.word	0x0000193d
     b24:	0000a28c 	.word	0x0000a28c
     b28:	0000a2c4 	.word	0x0000a2c4
     b2c:	00008bed 	.word	0x00008bed
     b30:	0000a314 	.word	0x0000a314
     b34:	00008d0d 	.word	0x00008d0d
     b38:	00008c21 	.word	0x00008c21
     b3c:	20000178 	.word	0x20000178
     b40:	00001084 	.word	0x00001084
     b44:	0000a338 	.word	0x0000a338
     b48:	00001949 	.word	0x00001949
     b4c:	0000a35c 	.word	0x0000a35c
     b50:	0000a374 	.word	0x0000a374
     b54:	20000164 	.word	0x20000164
     b58:	20000174 	.word	0x20000174
     b5c:	2000017c 	.word	0x2000017c
     b60:	0000a3b4 	.word	0x0000a3b4
     b64:	0000a3cc 	.word	0x0000a3cc
     b68:	00000579 	.word	0x00000579
     b6c:	00000206 	.word	0x00000206
     b70:	0000a3f0 	.word	0x0000a3f0
     b74:	0000020d 	.word	0x0000020d
     b78:	0000a404 	.word	0x0000a404
     b7c:	00000213 	.word	0x00000213
     b80:	0000a420 	.word	0x0000a420
     b84:	00000219 	.word	0x00000219
     b88:	0000a444 	.word	0x0000a444
     b8c:	00000619 	.word	0x00000619
     b90:	0000a2e8 	.word	0x0000a2e8
     b94:	0000a464 	.word	0x0000a464

00000b98 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     b98:	b5f0      	push	{r4, r5, r6, r7, lr}
     b9a:	4647      	mov	r7, r8
     b9c:	b480      	push	{r7}
     b9e:	b082      	sub	sp, #8
     ba0:	1c06      	adds	r6, r0, #0
     ba2:	1c0f      	adds	r7, r1, #0
     ba4:	1c15      	adds	r5, r2, #0
     ba6:	1c1c      	adds	r4, r3, #0
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
     ba8:	2800      	cmp	r0, #0
     baa:	d003      	beq.n	bb4 <hif_receive+0x1c>
     bac:	2900      	cmp	r1, #0
     bae:	d001      	beq.n	bb4 <hif_receive+0x1c>
     bb0:	2a00      	cmp	r2, #0
     bb2:	d113      	bne.n	bdc <hif_receive+0x44>
	{
		if(isDone)
     bb4:	2c00      	cmp	r4, #0
     bb6:	d004      	beq.n	bc2 <hif_receive+0x2a>
		{
			gu8HifSizeDone = 1;
     bb8:	2201      	movs	r2, #1
     bba:	4b2e      	ldr	r3, [pc, #184]	; (c74 <hif_receive+0xdc>)
     bbc:	701a      	strb	r2, [r3, #0]

			/* set RX done */
			ret = hif_set_rx_done();
     bbe:	4b2e      	ldr	r3, [pc, #184]	; (c78 <hif_receive+0xe0>)
     bc0:	4798      	blx	r3
		}
			
		ret = M2M_ERR_FAIL;
		M2M_ERR(" hif_receive: Invalid argument\n");
     bc2:	482e      	ldr	r0, [pc, #184]	; (c7c <hif_receive+0xe4>)
     bc4:	492e      	ldr	r1, [pc, #184]	; (c80 <hif_receive+0xe8>)
     bc6:	4a2f      	ldr	r2, [pc, #188]	; (c84 <hif_receive+0xec>)
     bc8:	4b2f      	ldr	r3, [pc, #188]	; (c88 <hif_receive+0xf0>)
     bca:	4798      	blx	r3
     bcc:	482f      	ldr	r0, [pc, #188]	; (c8c <hif_receive+0xf4>)
     bce:	4b30      	ldr	r3, [pc, #192]	; (c90 <hif_receive+0xf8>)
     bd0:	4798      	blx	r3
     bd2:	200d      	movs	r0, #13
     bd4:	4b2f      	ldr	r3, [pc, #188]	; (c94 <hif_receive+0xfc>)
     bd6:	4798      	blx	r3

			/* set RX done */
			ret = hif_set_rx_done();
		}
			
		ret = M2M_ERR_FAIL;
     bd8:	20f4      	movs	r0, #244	; 0xf4
		M2M_ERR(" hif_receive: Invalid argument\n");
		goto ERR1;
     bda:	e045      	b.n	c68 <hif_receive+0xd0>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     bdc:	482e      	ldr	r0, [pc, #184]	; (c98 <hif_receive+0x100>)
     bde:	4669      	mov	r1, sp
     be0:	4b2e      	ldr	r3, [pc, #184]	; (c9c <hif_receive+0x104>)
     be2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     be4:	2800      	cmp	r0, #0
     be6:	d13f      	bne.n	c68 <hif_receive+0xd0>


	size = (uint16)((reg >> 2) & 0xfff);
     be8:	9b00      	ldr	r3, [sp, #0]
     bea:	4698      	mov	r8, r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
     bec:	482c      	ldr	r0, [pc, #176]	; (ca0 <hif_receive+0x108>)
     bee:	a901      	add	r1, sp, #4
     bf0:	4b2a      	ldr	r3, [pc, #168]	; (c9c <hif_receive+0x104>)
     bf2:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     bf4:	2800      	cmp	r0, #0
     bf6:	d137      	bne.n	c68 <hif_receive+0xd0>

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     bf8:	1c30      	adds	r0, r6, #0
     bfa:	1c39      	adds	r1, r7, #0
     bfc:	1c2a      	adds	r2, r5, #0
     bfe:	4b29      	ldr	r3, [pc, #164]	; (ca4 <hif_receive+0x10c>)
     c00:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     c02:	2800      	cmp	r0, #0
     c04:	d130      	bne.n	c68 <hif_receive+0xd0>

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;


	size = (uint16)((reg >> 2) & 0xfff);
     c06:	4643      	mov	r3, r8
     c08:	049f      	lsls	r7, r3, #18
     c0a:	0d3f      	lsrs	r7, r7, #20

	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
     c0c:	42bd      	cmp	r5, r7
     c0e:	d90e      	bls.n	c2e <hif_receive+0x96>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
     c10:	481a      	ldr	r0, [pc, #104]	; (c7c <hif_receive+0xe4>)
     c12:	491b      	ldr	r1, [pc, #108]	; (c80 <hif_receive+0xe8>)
     c14:	229c      	movs	r2, #156	; 0x9c
     c16:	0092      	lsls	r2, r2, #2
     c18:	4c1b      	ldr	r4, [pc, #108]	; (c88 <hif_receive+0xf0>)
     c1a:	47a0      	blx	r4
     c1c:	4822      	ldr	r0, [pc, #136]	; (ca8 <hif_receive+0x110>)
     c1e:	1c29      	adds	r1, r5, #0
     c20:	1c3a      	adds	r2, r7, #0
     c22:	47a0      	blx	r4
     c24:	200d      	movs	r0, #13
     c26:	4b1b      	ldr	r3, [pc, #108]	; (c94 <hif_receive+0xfc>)
     c28:	4798      	blx	r3
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;

	if(u16Sz > size)
	{
		ret = M2M_ERR_FAIL;
     c2a:	20f4      	movs	r0, #244	; 0xf4
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
     c2c:	e01c      	b.n	c68 <hif_receive+0xd0>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
     c2e:	9b01      	ldr	r3, [sp, #4]
     c30:	429e      	cmp	r6, r3
     c32:	d303      	bcc.n	c3c <hif_receive+0xa4>
     c34:	1972      	adds	r2, r6, r5
     c36:	18ff      	adds	r7, r7, r3
     c38:	42ba      	cmp	r2, r7
     c3a:	d90c      	bls.n	c56 <hif_receive+0xbe>
	{
		ret = M2M_ERR_FAIL;
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
     c3c:	480f      	ldr	r0, [pc, #60]	; (c7c <hif_receive+0xe4>)
     c3e:	4910      	ldr	r1, [pc, #64]	; (c80 <hif_receive+0xe8>)
     c40:	4a1a      	ldr	r2, [pc, #104]	; (cac <hif_receive+0x114>)
     c42:	4b11      	ldr	r3, [pc, #68]	; (c88 <hif_receive+0xf0>)
     c44:	4798      	blx	r3
     c46:	481a      	ldr	r0, [pc, #104]	; (cb0 <hif_receive+0x118>)
     c48:	4b11      	ldr	r3, [pc, #68]	; (c90 <hif_receive+0xf8>)
     c4a:	4798      	blx	r3
     c4c:	200d      	movs	r0, #13
     c4e:	4b11      	ldr	r3, [pc, #68]	; (c94 <hif_receive+0xfc>)
     c50:	4798      	blx	r3
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
		goto ERR1;
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
	{
		ret = M2M_ERR_FAIL;
     c52:	20f4      	movs	r0, #244	; 0xf4
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
		goto ERR1;
     c54:	e008      	b.n	c68 <hif_receive+0xd0>
	}

	/* check if this is the last packet */
	if((((address+size) - (u32Addr+u16Sz)) <= 0) || isDone)
     c56:	42ba      	cmp	r2, r7
     c58:	d001      	beq.n	c5e <hif_receive+0xc6>
     c5a:	2c00      	cmp	r4, #0
     c5c:	d004      	beq.n	c68 <hif_receive+0xd0>
	{
		gu8HifSizeDone = 1;
     c5e:	2201      	movs	r2, #1
     c60:	4b04      	ldr	r3, [pc, #16]	; (c74 <hif_receive+0xdc>)
     c62:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
     c64:	4b04      	ldr	r3, [pc, #16]	; (c78 <hif_receive+0xe0>)
     c66:	4798      	blx	r3
	}



ERR1:
	return ret;
     c68:	b240      	sxtb	r0, r0
}
     c6a:	b002      	add	sp, #8
     c6c:	bc04      	pop	{r2}
     c6e:	4690      	mov	r8, r2
     c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	20000178 	.word	0x20000178
     c78:	00000579 	.word	0x00000579
     c7c:	0000a28c 	.word	0x0000a28c
     c80:	0000a2cc 	.word	0x0000a2cc
     c84:	0000025d 	.word	0x0000025d
     c88:	00008bed 	.word	0x00008bed
     c8c:	0000a494 	.word	0x0000a494
     c90:	00008d0d 	.word	0x00008d0d
     c94:	00008c21 	.word	0x00008c21
     c98:	00001070 	.word	0x00001070
     c9c:	00001931 	.word	0x00001931
     ca0:	00001084 	.word	0x00001084
     ca4:	00001949 	.word	0x00001949
     ca8:	0000a4b4 	.word	0x0000a4b4
     cac:	00000276 	.word	0x00000276
     cb0:	0000a4f8 	.word	0x0000a4f8

00000cb4 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     cb4:	b538      	push	{r3, r4, r5, lr}
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     cb6:	2802      	cmp	r0, #2
     cb8:	d008      	beq.n	ccc <hif_register_cb+0x18>
     cba:	d802      	bhi.n	cc2 <hif_register_cb+0xe>
     cbc:	2801      	cmp	r0, #1
     cbe:	d009      	beq.n	cd4 <hif_register_cb+0x20>
     cc0:	e014      	b.n	cec <hif_register_cb+0x38>
     cc2:	2803      	cmp	r0, #3
     cc4:	d00e      	beq.n	ce4 <hif_register_cb+0x30>
     cc6:	2804      	cmp	r0, #4
     cc8:	d008      	beq.n	cdc <hif_register_cb+0x28>
     cca:	e00f      	b.n	cec <hif_register_cb+0x38>
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
     ccc:	4b0f      	ldr	r3, [pc, #60]	; (d0c <hif_register_cb+0x58>)
     cce:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     cd0:	2000      	movs	r0, #0
	switch(u8Grp)
	{
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
     cd2:	e018      	b.n	d06 <hif_register_cb+0x52>
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
     cd4:	4b0e      	ldr	r3, [pc, #56]	; (d10 <hif_register_cb+0x5c>)
     cd6:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     cd8:	2000      	movs	r0, #0
		case M2M_REQ_GRP_IP:
			pfIpCb = fn;
			break;
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
     cda:	e014      	b.n	d06 <hif_register_cb+0x52>
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
     cdc:	4b0d      	ldr	r3, [pc, #52]	; (d14 <hif_register_cb+0x60>)
     cde:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     ce0:	2000      	movs	r0, #0
		case M2M_REQ_GRP_WIFI:
			pfWifiCb = fn;
			break;
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
     ce2:	e010      	b.n	d06 <hif_register_cb+0x52>
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
     ce4:	4b0c      	ldr	r3, [pc, #48]	; (d18 <hif_register_cb+0x64>)
     ce6:	6019      	str	r1, [r3, #0]
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
	sint8 ret = M2M_SUCCESS;
     ce8:	2000      	movs	r0, #0
		case M2M_REQ_GRP_OTA:
			pfOtaCb = fn;
			break;
		case M2M_REQ_GRP_HIF:
			pfHifCb = fn;
			break;
     cea:	e00c      	b.n	d06 <hif_register_cb+0x52>
     cec:	1c04      	adds	r4, r0, #0
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
     cee:	480b      	ldr	r0, [pc, #44]	; (d1c <hif_register_cb+0x68>)
     cf0:	490b      	ldr	r1, [pc, #44]	; (d20 <hif_register_cb+0x6c>)
     cf2:	4a0c      	ldr	r2, [pc, #48]	; (d24 <hif_register_cb+0x70>)
     cf4:	4d0c      	ldr	r5, [pc, #48]	; (d28 <hif_register_cb+0x74>)
     cf6:	47a8      	blx	r5
     cf8:	480c      	ldr	r0, [pc, #48]	; (d2c <hif_register_cb+0x78>)
     cfa:	1c21      	adds	r1, r4, #0
     cfc:	47a8      	blx	r5
     cfe:	200d      	movs	r0, #13
     d00:	4b0b      	ldr	r3, [pc, #44]	; (d30 <hif_register_cb+0x7c>)
     d02:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     d04:	20f4      	movs	r0, #244	; 0xf4
			break;
	}
	return ret;
     d06:	b240      	sxtb	r0, r0
}
     d08:	bd38      	pop	{r3, r4, r5, pc}
     d0a:	46c0      	nop			; (mov r8, r8)
     d0c:	20000174 	.word	0x20000174
     d10:	20000164 	.word	0x20000164
     d14:	2000017c 	.word	0x2000017c
     d18:	2000016c 	.word	0x2000016c
     d1c:	0000a28c 	.word	0x0000a28c
     d20:	0000a2d8 	.word	0x0000a2d8
     d24:	000002a5 	.word	0x000002a5
     d28:	00008bed 	.word	0x00008bed
     d2c:	0000a53c 	.word	0x0000a53c
     d30:	00008c21 	.word	0x00008c21

00000d34 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
     d34:	b508      	push	{r3, lr}
	pfWifiCb = NULL;
     d36:	2300      	movs	r3, #0
     d38:	4a09      	ldr	r2, [pc, #36]	; (d60 <hif_init+0x2c>)
     d3a:	6013      	str	r3, [r2, #0]
	pfIpCb = NULL;
     d3c:	4a09      	ldr	r2, [pc, #36]	; (d64 <hif_init+0x30>)
     d3e:	6013      	str	r3, [r2, #0]

	gu8ChipSleep = 0;
     d40:	4a09      	ldr	r2, [pc, #36]	; (d68 <hif_init+0x34>)
     d42:	7013      	strb	r3, [r2, #0]
	gu8ChipMode = M2M_NO_PS;
     d44:	4a09      	ldr	r2, [pc, #36]	; (d6c <hif_init+0x38>)
     d46:	7013      	strb	r3, [r2, #0]

	gu8Interrupt = 0;
     d48:	4a09      	ldr	r2, [pc, #36]	; (d70 <hif_init+0x3c>)
     d4a:	7013      	strb	r3, [r2, #0]
	nm_bsp_register_isr(isr);
     d4c:	4809      	ldr	r0, [pc, #36]	; (d74 <hif_init+0x40>)
     d4e:	4b0a      	ldr	r3, [pc, #40]	; (d78 <hif_init+0x44>)
     d50:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GRP_HIF,m2m_hif_cb);
     d52:	2003      	movs	r0, #3
     d54:	4909      	ldr	r1, [pc, #36]	; (d7c <hif_init+0x48>)
     d56:	4b0a      	ldr	r3, [pc, #40]	; (d80 <hif_init+0x4c>)
     d58:	4798      	blx	r3

	return M2M_SUCCESS;
}
     d5a:	2000      	movs	r0, #0
     d5c:	bd08      	pop	{r3, pc}
     d5e:	46c0      	nop			; (mov r8, r8)
     d60:	20000164 	.word	0x20000164
     d64:	20000174 	.word	0x20000174
     d68:	20000180 	.word	0x20000180
     d6c:	20000170 	.word	0x20000170
     d70:	20000168 	.word	0x20000168
     d74:	00000565 	.word	0x00000565
     d78:	0000023d 	.word	0x0000023d
     d7c:	00000575 	.word	0x00000575
     d80:	00000cb5 	.word	0x00000cb5

00000d84 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     d84:	b530      	push	{r4, r5, lr}
     d86:	b09f      	sub	sp, #124	; 0x7c
     d88:	1c04      	adds	r4, r0, #0
     d8a:	1c15      	adds	r5, r2, #0
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     d8c:	282c      	cmp	r0, #44	; 0x2c
     d8e:	d111      	bne.n	db4 <m2m_wifi_cb+0x30>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     d90:	1c10      	adds	r0, r2, #0
     d92:	a903      	add	r1, sp, #12
     d94:	2204      	movs	r2, #4
     d96:	2300      	movs	r3, #0
     d98:	4c86      	ldr	r4, [pc, #536]	; (fb4 <m2m_wifi_cb+0x230>)
     d9a:	47a0      	blx	r4
     d9c:	2800      	cmp	r0, #0
     d9e:	d000      	beq.n	da2 <m2m_wifi_cb+0x1e>
     da0:	e105      	b.n	fae <m2m_wifi_cb+0x22a>
		{
			if (gpfAppWifiCb)
     da2:	4b85      	ldr	r3, [pc, #532]	; (fb8 <m2m_wifi_cb+0x234>)
     da4:	681b      	ldr	r3, [r3, #0]
     da6:	2b00      	cmp	r3, #0
     da8:	d100      	bne.n	dac <m2m_wifi_cb+0x28>
     daa:	e100      	b.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     dac:	302c      	adds	r0, #44	; 0x2c
     dae:	a903      	add	r1, sp, #12
     db0:	4798      	blx	r3
     db2:	e0fc      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     db4:	281b      	cmp	r0, #27
     db6:	d111      	bne.n	ddc <m2m_wifi_cb+0x58>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     db8:	1c10      	adds	r0, r2, #0
     dba:	a903      	add	r1, sp, #12
     dbc:	2208      	movs	r2, #8
     dbe:	2300      	movs	r3, #0
     dc0:	4c7c      	ldr	r4, [pc, #496]	; (fb4 <m2m_wifi_cb+0x230>)
     dc2:	47a0      	blx	r4
     dc4:	2800      	cmp	r0, #0
     dc6:	d000      	beq.n	dca <m2m_wifi_cb+0x46>
     dc8:	e0f1      	b.n	fae <m2m_wifi_cb+0x22a>
		{
			if (gpfAppWifiCb)
     dca:	4b7b      	ldr	r3, [pc, #492]	; (fb8 <m2m_wifi_cb+0x234>)
     dcc:	681b      	ldr	r3, [r3, #0]
     dce:	2b00      	cmp	r3, #0
     dd0:	d100      	bne.n	dd4 <m2m_wifi_cb+0x50>
     dd2:	e0ec      	b.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     dd4:	301b      	adds	r0, #27
     dd6:	a903      	add	r1, sp, #12
     dd8:	4798      	blx	r3
     dda:	e0e8      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     ddc:	2806      	cmp	r0, #6
     dde:	d111      	bne.n	e04 <m2m_wifi_cb+0x80>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     de0:	1c10      	adds	r0, r2, #0
     de2:	a903      	add	r1, sp, #12
     de4:	2230      	movs	r2, #48	; 0x30
     de6:	2301      	movs	r3, #1
     de8:	4c72      	ldr	r4, [pc, #456]	; (fb4 <m2m_wifi_cb+0x230>)
     dea:	47a0      	blx	r4
     dec:	2800      	cmp	r0, #0
     dee:	d000      	beq.n	df2 <m2m_wifi_cb+0x6e>
     df0:	e0dd      	b.n	fae <m2m_wifi_cb+0x22a>
		{
			if(gpfAppWifiCb)
     df2:	4b71      	ldr	r3, [pc, #452]	; (fb8 <m2m_wifi_cb+0x234>)
     df4:	681b      	ldr	r3, [r3, #0]
     df6:	2b00      	cmp	r3, #0
     df8:	d100      	bne.n	dfc <m2m_wifi_cb+0x78>
     dfa:	e0d8      	b.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     dfc:	3006      	adds	r0, #6
     dfe:	a903      	add	r1, sp, #12
     e00:	4798      	blx	r3
     e02:	e0d4      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e04:	280e      	cmp	r0, #14
     e06:	d100      	bne.n	e0a <m2m_wifi_cb+0x86>
     e08:	e0d1      	b.n	fae <m2m_wifi_cb+0x22a>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e0a:	2832      	cmp	r0, #50	; 0x32
     e0c:	d111      	bne.n	e32 <m2m_wifi_cb+0xae>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     e0e:	1c10      	adds	r0, r2, #0
     e10:	a903      	add	r1, sp, #12
     e12:	2210      	movs	r2, #16
     e14:	2300      	movs	r3, #0
     e16:	4c67      	ldr	r4, [pc, #412]	; (fb4 <m2m_wifi_cb+0x230>)
     e18:	47a0      	blx	r4
     e1a:	2800      	cmp	r0, #0
     e1c:	d000      	beq.n	e20 <m2m_wifi_cb+0x9c>
     e1e:	e0c6      	b.n	fae <m2m_wifi_cb+0x22a>
		{
			if (gpfAppWifiCb)
     e20:	4b65      	ldr	r3, [pc, #404]	; (fb8 <m2m_wifi_cb+0x234>)
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	2b00      	cmp	r3, #0
     e26:	d100      	bne.n	e2a <m2m_wifi_cb+0xa6>
     e28:	e0c1      	b.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     e2a:	3032      	adds	r0, #50	; 0x32
     e2c:	a903      	add	r1, sp, #12
     e2e:	4798      	blx	r3
     e30:	e0bd      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e32:	282f      	cmp	r0, #47	; 0x2f
     e34:	d116      	bne.n	e64 <m2m_wifi_cb+0xe0>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     e36:	a803      	add	r0, sp, #12
     e38:	2100      	movs	r1, #0
     e3a:	2264      	movs	r2, #100	; 0x64
     e3c:	4b5f      	ldr	r3, [pc, #380]	; (fbc <m2m_wifi_cb+0x238>)
     e3e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     e40:	1c28      	adds	r0, r5, #0
     e42:	a903      	add	r1, sp, #12
     e44:	2264      	movs	r2, #100	; 0x64
     e46:	2300      	movs	r3, #0
     e48:	4c5a      	ldr	r4, [pc, #360]	; (fb4 <m2m_wifi_cb+0x230>)
     e4a:	47a0      	blx	r4
     e4c:	2800      	cmp	r0, #0
     e4e:	d000      	beq.n	e52 <m2m_wifi_cb+0xce>
     e50:	e0ad      	b.n	fae <m2m_wifi_cb+0x22a>
		{
			if (gpfAppWifiCb)
     e52:	4b59      	ldr	r3, [pc, #356]	; (fb8 <m2m_wifi_cb+0x234>)
     e54:	681b      	ldr	r3, [r3, #0]
     e56:	2b00      	cmp	r3, #0
     e58:	d100      	bne.n	e5c <m2m_wifi_cb+0xd8>
     e5a:	e0a8      	b.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     e5c:	302f      	adds	r0, #47	; 0x2f
     e5e:	a903      	add	r1, sp, #12
     e60:	4798      	blx	r3
     e62:	e0a4      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e64:	2834      	cmp	r0, #52	; 0x34
     e66:	d123      	bne.n	eb0 <m2m_wifi_cb+0x12c>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     e68:	1c10      	adds	r0, r2, #0
     e6a:	a903      	add	r1, sp, #12
     e6c:	2204      	movs	r2, #4
     e6e:	2300      	movs	r3, #0
     e70:	4c50      	ldr	r4, [pc, #320]	; (fb4 <m2m_wifi_cb+0x230>)
     e72:	47a0      	blx	r4
     e74:	2800      	cmp	r0, #0
     e76:	d000      	beq.n	e7a <m2m_wifi_cb+0xf6>
     e78:	e099      	b.n	fae <m2m_wifi_cb+0x22a>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
     e7a:	4851      	ldr	r0, [pc, #324]	; (fc0 <m2m_wifi_cb+0x23c>)
     e7c:	4d51      	ldr	r5, [pc, #324]	; (fc4 <m2m_wifi_cb+0x240>)
     e7e:	47a8      	blx	r5
     e80:	9803      	ldr	r0, [sp, #12]
     e82:	24ff      	movs	r4, #255	; 0xff
     e84:	1c21      	adds	r1, r4, #0
     e86:	4001      	ands	r1, r0
     e88:	0a02      	lsrs	r2, r0, #8
     e8a:	4022      	ands	r2, r4
     e8c:	0c03      	lsrs	r3, r0, #16
     e8e:	4023      	ands	r3, r4
     e90:	0e00      	lsrs	r0, r0, #24
     e92:	9000      	str	r0, [sp, #0]
     e94:	484c      	ldr	r0, [pc, #304]	; (fc8 <m2m_wifi_cb+0x244>)
     e96:	47a8      	blx	r5
     e98:	200d      	movs	r0, #13
     e9a:	4b4c      	ldr	r3, [pc, #304]	; (fcc <m2m_wifi_cb+0x248>)
     e9c:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
     e9e:	4b46      	ldr	r3, [pc, #280]	; (fb8 <m2m_wifi_cb+0x234>)
     ea0:	681b      	ldr	r3, [r3, #0]
     ea2:	2b00      	cmp	r3, #0
     ea4:	d100      	bne.n	ea8 <m2m_wifi_cb+0x124>
     ea6:	e082      	b.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     ea8:	2034      	movs	r0, #52	; 0x34
     eaa:	2100      	movs	r1, #0
     eac:	4798      	blx	r3
     eae:	e07e      	b.n	fae <m2m_wifi_cb+0x22a>

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     eb0:	2811      	cmp	r0, #17
     eb2:	d116      	bne.n	ee2 <m2m_wifi_cb+0x15e>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
     eb4:	2200      	movs	r2, #0
     eb6:	4b46      	ldr	r3, [pc, #280]	; (fd0 <m2m_wifi_cb+0x24c>)
     eb8:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     eba:	1c28      	adds	r0, r5, #0
     ebc:	a903      	add	r1, sp, #12
     ebe:	3204      	adds	r2, #4
     ec0:	2300      	movs	r3, #0
     ec2:	4c3c      	ldr	r4, [pc, #240]	; (fb4 <m2m_wifi_cb+0x230>)
     ec4:	47a0      	blx	r4
     ec6:	2800      	cmp	r0, #0
     ec8:	d171      	bne.n	fae <m2m_wifi_cb+0x22a>
		{
			gu8ChNum = strState.u8NumofCh;
     eca:	ab03      	add	r3, sp, #12
     ecc:	781a      	ldrb	r2, [r3, #0]
     ece:	4b41      	ldr	r3, [pc, #260]	; (fd4 <m2m_wifi_cb+0x250>)
     ed0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     ed2:	4b39      	ldr	r3, [pc, #228]	; (fb8 <m2m_wifi_cb+0x234>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d069      	beq.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     eda:	3011      	adds	r0, #17
     edc:	a903      	add	r1, sp, #12
     ede:	4798      	blx	r3
     ee0:	e065      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     ee2:	2813      	cmp	r0, #19
     ee4:	d10f      	bne.n	f06 <m2m_wifi_cb+0x182>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     ee6:	1c10      	adds	r0, r2, #0
     ee8:	a903      	add	r1, sp, #12
     eea:	222c      	movs	r2, #44	; 0x2c
     eec:	2300      	movs	r3, #0
     eee:	4c31      	ldr	r4, [pc, #196]	; (fb4 <m2m_wifi_cb+0x230>)
     ef0:	47a0      	blx	r4
     ef2:	2800      	cmp	r0, #0
     ef4:	d15b      	bne.n	fae <m2m_wifi_cb+0x22a>
		{
			if (gpfAppWifiCb)
     ef6:	4b30      	ldr	r3, [pc, #192]	; (fb8 <m2m_wifi_cb+0x234>)
     ef8:	681b      	ldr	r3, [r3, #0]
     efa:	2b00      	cmp	r3, #0
     efc:	d057      	beq.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
     efe:	3013      	adds	r0, #19
     f00:	a903      	add	r1, sp, #12
     f02:	4798      	blx	r3
     f04:	e053      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     f06:	2804      	cmp	r0, #4
     f08:	d10f      	bne.n	f2a <m2m_wifi_cb+0x1a6>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     f0a:	1c10      	adds	r0, r2, #0
     f0c:	a91c      	add	r1, sp, #112	; 0x70
     f0e:	2204      	movs	r2, #4
     f10:	2300      	movs	r3, #0
     f12:	4c28      	ldr	r4, [pc, #160]	; (fb4 <m2m_wifi_cb+0x230>)
     f14:	47a0      	blx	r4
     f16:	2800      	cmp	r0, #0
     f18:	d149      	bne.n	fae <m2m_wifi_cb+0x22a>
		{
			if (gpfAppWifiCb)
     f1a:	4b27      	ldr	r3, [pc, #156]	; (fb8 <m2m_wifi_cb+0x234>)
     f1c:	681b      	ldr	r3, [r3, #0]
     f1e:	2b00      	cmp	r3, #0
     f20:	d045      	beq.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
     f22:	3004      	adds	r0, #4
     f24:	a91c      	add	r1, sp, #112	; 0x70
     f26:	4798      	blx	r3
     f28:	e041      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     f2a:	2879      	cmp	r0, #121	; 0x79
     f2c:	d10f      	bne.n	f4e <m2m_wifi_cb+0x1ca>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     f2e:	1c10      	adds	r0, r2, #0
     f30:	a91c      	add	r1, sp, #112	; 0x70
     f32:	2204      	movs	r2, #4
     f34:	2300      	movs	r3, #0
     f36:	4c1f      	ldr	r4, [pc, #124]	; (fb4 <m2m_wifi_cb+0x230>)
     f38:	47a0      	blx	r4
     f3a:	2800      	cmp	r0, #0
     f3c:	d137      	bne.n	fae <m2m_wifi_cb+0x22a>
		{
			if (gpfAppWifiCb)
     f3e:	4b1e      	ldr	r3, [pc, #120]	; (fb8 <m2m_wifi_cb+0x234>)
     f40:	681b      	ldr	r3, [r3, #0]
     f42:	2b00      	cmp	r3, #0
     f44:	d033      	beq.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
     f46:	3079      	adds	r0, #121	; 0x79
     f48:	a91c      	add	r1, sp, #112	; 0x70
     f4a:	4798      	blx	r3
     f4c:	e02f      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     f4e:	2809      	cmp	r0, #9
     f50:	d10f      	bne.n	f72 <m2m_wifi_cb+0x1ee>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
     f52:	1c10      	adds	r0, r2, #0
     f54:	a903      	add	r1, sp, #12
     f56:	2264      	movs	r2, #100	; 0x64
     f58:	2301      	movs	r3, #1
     f5a:	4c16      	ldr	r4, [pc, #88]	; (fb4 <m2m_wifi_cb+0x230>)
     f5c:	47a0      	blx	r4
     f5e:	2800      	cmp	r0, #0
     f60:	d125      	bne.n	fae <m2m_wifi_cb+0x22a>
		{
			if(gpfAppWifiCb)
     f62:	4b15      	ldr	r3, [pc, #84]	; (fb8 <m2m_wifi_cb+0x234>)
     f64:	681b      	ldr	r3, [r3, #0]
     f66:	2b00      	cmp	r3, #0
     f68:	d021      	beq.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
     f6a:	3009      	adds	r0, #9
     f6c:	a903      	add	r1, sp, #12
     f6e:	4798      	blx	r3
     f70:	e01d      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     f72:	282a      	cmp	r0, #42	; 0x2a
     f74:	d10f      	bne.n	f96 <m2m_wifi_cb+0x212>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
     f76:	1c10      	adds	r0, r2, #0
     f78:	a903      	add	r1, sp, #12
     f7a:	2204      	movs	r2, #4
     f7c:	2301      	movs	r3, #1
     f7e:	4c0d      	ldr	r4, [pc, #52]	; (fb4 <m2m_wifi_cb+0x230>)
     f80:	47a0      	blx	r4
     f82:	2800      	cmp	r0, #0
     f84:	d113      	bne.n	fae <m2m_wifi_cb+0x22a>
		{
			if(gpfAppWifiCb)
     f86:	4b0c      	ldr	r3, [pc, #48]	; (fb8 <m2m_wifi_cb+0x234>)
     f88:	681b      	ldr	r3, [r3, #0]
     f8a:	2b00      	cmp	r3, #0
     f8c:	d00f      	beq.n	fae <m2m_wifi_cb+0x22a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
     f8e:	302a      	adds	r0, #42	; 0x2a
     f90:	a903      	add	r1, sp, #12
     f92:	4798      	blx	r3
     f94:	e00b      	b.n	fae <m2m_wifi_cb+0x22a>
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     f96:	4810      	ldr	r0, [pc, #64]	; (fd8 <m2m_wifi_cb+0x254>)
     f98:	4910      	ldr	r1, [pc, #64]	; (fdc <m2m_wifi_cb+0x258>)
     f9a:	2218      	movs	r2, #24
     f9c:	32ff      	adds	r2, #255	; 0xff
     f9e:	4d09      	ldr	r5, [pc, #36]	; (fc4 <m2m_wifi_cb+0x240>)
     fa0:	47a8      	blx	r5
     fa2:	480f      	ldr	r0, [pc, #60]	; (fe0 <m2m_wifi_cb+0x25c>)
     fa4:	1c21      	adds	r1, r4, #0
     fa6:	47a8      	blx	r5
     fa8:	200d      	movs	r0, #13
     faa:	4b08      	ldr	r3, [pc, #32]	; (fcc <m2m_wifi_cb+0x248>)
     fac:	4798      	blx	r3
	}
}
     fae:	b01f      	add	sp, #124	; 0x7c
     fb0:	bd30      	pop	{r4, r5, pc}
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	00000b99 	.word	0x00000b99
     fb8:	20000184 	.word	0x20000184
     fbc:	00000539 	.word	0x00000539
     fc0:	0000a574 	.word	0x0000a574
     fc4:	00008bed 	.word	0x00008bed
     fc8:	0000a580 	.word	0x0000a580
     fcc:	00008c21 	.word	0x00008c21
     fd0:	20000188 	.word	0x20000188
     fd4:	20000189 	.word	0x20000189
     fd8:	0000a28c 	.word	0x0000a28c
     fdc:	0000a554 	.word	0x0000a554
     fe0:	0000a5a0 	.word	0x0000a5a0

00000fe4 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
     fe4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	
	if(param == NULL) {
     fe6:	2800      	cmp	r0, #0
     fe8:	d018      	beq.n	101c <m2m_wifi_init+0x38>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
     fea:	6802      	ldr	r2, [r0, #0]
     fec:	4b0d      	ldr	r3, [pc, #52]	; (1024 <m2m_wifi_init+0x40>)
     fee:	601a      	str	r2, [r3, #0]
#endif

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
     ff0:	2200      	movs	r2, #0
     ff2:	4b0d      	ldr	r3, [pc, #52]	; (1028 <m2m_wifi_init+0x44>)
     ff4:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(NULL);
     ff6:	2000      	movs	r0, #0
     ff8:	4b0c      	ldr	r3, [pc, #48]	; (102c <m2m_wifi_init+0x48>)
     ffa:	4798      	blx	r3
     ffc:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
     ffe:	d10e      	bne.n	101e <m2m_wifi_init+0x3a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    1000:	2000      	movs	r0, #0
    1002:	4b0b      	ldr	r3, [pc, #44]	; (1030 <m2m_wifi_init+0x4c>)
    1004:	4798      	blx	r3
    1006:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1008:	d104      	bne.n	1014 <m2m_wifi_init+0x30>

	hif_register_cb(M2M_REQ_GRP_WIFI,m2m_wifi_cb);
    100a:	2001      	movs	r0, #1
    100c:	4909      	ldr	r1, [pc, #36]	; (1034 <m2m_wifi_init+0x50>)
    100e:	4b0a      	ldr	r3, [pc, #40]	; (1038 <m2m_wifi_init+0x54>)
    1010:	4798      	blx	r3

	goto _EXIT0;
    1012:	e004      	b.n	101e <m2m_wifi_init+0x3a>

_EXIT1:
	nm_drv_deinit(NULL);
    1014:	2000      	movs	r0, #0
    1016:	4b09      	ldr	r3, [pc, #36]	; (103c <m2m_wifi_init+0x58>)
    1018:	4798      	blx	r3
    101a:	e000      	b.n	101e <m2m_wifi_init+0x3a>
sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
	sint8 ret = M2M_SUCCESS;
	
	if(param == NULL) {
		ret = M2M_ERR_FAIL;
    101c:	24f4      	movs	r4, #244	; 0xf4
	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    101e:	b260      	sxtb	r0, r4
}
    1020:	bd10      	pop	{r4, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	20000184 	.word	0x20000184
    1028:	20000188 	.word	0x20000188
    102c:	00001ab5 	.word	0x00001ab5
    1030:	00000d35 	.word	0x00000d35
    1034:	00000d85 	.word	0x00000d85
    1038:	00000cb5 	.word	0x00000cb5
    103c:	00001c11 	.word	0x00001c11

00001040 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1040:	b508      	push	{r3, lr}
	return hif_handle_isr();
    1042:	4b01      	ldr	r3, [pc, #4]	; (1048 <m2m_wifi_handle_events+0x8>)
    1044:	4798      	blx	r3
}
    1046:	bd08      	pop	{r3, pc}
    1048:	00000875 	.word	0x00000875

0000104c <m2m_wifi_default_connect>:

sint8 m2m_wifi_default_connect(void)
{
    104c:	b510      	push	{r4, lr}
    104e:	b084      	sub	sp, #16
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
    1050:	2300      	movs	r3, #0
    1052:	9300      	str	r3, [sp, #0]
    1054:	9301      	str	r3, [sp, #4]
    1056:	9302      	str	r3, [sp, #8]
    1058:	2001      	movs	r0, #1
    105a:	2129      	movs	r1, #41	; 0x29
    105c:	2200      	movs	r2, #0
    105e:	4c02      	ldr	r4, [pc, #8]	; (1068 <m2m_wifi_default_connect+0x1c>)
    1060:	47a0      	blx	r4
}
    1062:	b004      	add	sp, #16
    1064:	bd10      	pop	{r4, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	00000695 	.word	0x00000695

0000106c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
}
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    106c:	b5f0      	push	{r4, r5, r6, r7, lr}
    106e:	464f      	mov	r7, r9
    1070:	4646      	mov	r6, r8
    1072:	b4c0      	push	{r6, r7}
    1074:	b0a3      	sub	sp, #140	; 0x8c
    1076:	9005      	str	r0, [sp, #20]
    1078:	1c0c      	adds	r4, r1, #0
    107a:	1c15      	adds	r5, r2, #0
    107c:	1c1f      	adds	r7, r3, #0
    107e:	ab2a      	add	r3, sp, #168	; 0xa8
    1080:	881b      	ldrh	r3, [r3, #0]
    1082:	4699      	mov	r9, r3
    1084:	ab2b      	add	r3, sp, #172	; 0xac
    1086:	781b      	ldrb	r3, [r3, #0]
    1088:	4698      	mov	r8, r3
	sint8				ret = M2M_SUCCESS;
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    108a:	2a01      	cmp	r2, #1
    108c:	d00f      	beq.n	10ae <m2m_wifi_connect_sc+0x42>
	{
		if(pvAuthInfo == NULL)
    108e:	2f00      	cmp	r7, #0
    1090:	d10d      	bne.n	10ae <m2m_wifi_connect_sc+0x42>
		{
			M2M_ERR("Key is not valid\n");
    1092:	4865      	ldr	r0, [pc, #404]	; (1228 <m2m_wifi_connect_sc+0x1bc>)
    1094:	4965      	ldr	r1, [pc, #404]	; (122c <m2m_wifi_connect_sc+0x1c0>)
    1096:	22e4      	movs	r2, #228	; 0xe4
    1098:	32ff      	adds	r2, #255	; 0xff
    109a:	4b65      	ldr	r3, [pc, #404]	; (1230 <m2m_wifi_connect_sc+0x1c4>)
    109c:	4798      	blx	r3
    109e:	4865      	ldr	r0, [pc, #404]	; (1234 <m2m_wifi_connect_sc+0x1c8>)
    10a0:	4b65      	ldr	r3, [pc, #404]	; (1238 <m2m_wifi_connect_sc+0x1cc>)
    10a2:	4798      	blx	r3
    10a4:	200d      	movs	r0, #13
    10a6:	4b65      	ldr	r3, [pc, #404]	; (123c <m2m_wifi_connect_sc+0x1d0>)
    10a8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    10aa:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    10ac:	e0b5      	b.n	121a <m2m_wifi_connect_sc+0x1ae>
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    10ae:	1e63      	subs	r3, r4, #1
    10b0:	2b1f      	cmp	r3, #31
    10b2:	d90d      	bls.n	10d0 <m2m_wifi_connect_sc+0x64>
	{
		M2M_ERR("SSID LEN INVALID\n");
    10b4:	485c      	ldr	r0, [pc, #368]	; (1228 <m2m_wifi_connect_sc+0x1bc>)
    10b6:	495d      	ldr	r1, [pc, #372]	; (122c <m2m_wifi_connect_sc+0x1c0>)
    10b8:	22f5      	movs	r2, #245	; 0xf5
    10ba:	0052      	lsls	r2, r2, #1
    10bc:	4b5c      	ldr	r3, [pc, #368]	; (1230 <m2m_wifi_connect_sc+0x1c4>)
    10be:	4798      	blx	r3
    10c0:	485f      	ldr	r0, [pc, #380]	; (1240 <m2m_wifi_connect_sc+0x1d4>)
    10c2:	4b5d      	ldr	r3, [pc, #372]	; (1238 <m2m_wifi_connect_sc+0x1cc>)
    10c4:	4798      	blx	r3
    10c6:	200d      	movs	r0, #13
    10c8:	4b5c      	ldr	r3, [pc, #368]	; (123c <m2m_wifi_connect_sc+0x1d0>)
    10ca:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    10cc:	20f4      	movs	r0, #244	; 0xf4
		goto ERR1;
    10ce:	e0a4      	b.n	121a <m2m_wifi_connect_sc+0x1ae>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    10d0:	464b      	mov	r3, r9
    10d2:	2b0d      	cmp	r3, #13
    10d4:	d90f      	bls.n	10f6 <m2m_wifi_connect_sc+0x8a>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    10d6:	2bff      	cmp	r3, #255	; 0xff
    10d8:	d00d      	beq.n	10f6 <m2m_wifi_connect_sc+0x8a>
		{
			M2M_ERR("CH INVALID\n");
    10da:	4853      	ldr	r0, [pc, #332]	; (1228 <m2m_wifi_connect_sc+0x1bc>)
    10dc:	4953      	ldr	r1, [pc, #332]	; (122c <m2m_wifi_connect_sc+0x1c0>)
    10de:	22f4      	movs	r2, #244	; 0xf4
    10e0:	32ff      	adds	r2, #255	; 0xff
    10e2:	4b53      	ldr	r3, [pc, #332]	; (1230 <m2m_wifi_connect_sc+0x1c4>)
    10e4:	4798      	blx	r3
    10e6:	4857      	ldr	r0, [pc, #348]	; (1244 <m2m_wifi_connect_sc+0x1d8>)
    10e8:	4b53      	ldr	r3, [pc, #332]	; (1238 <m2m_wifi_connect_sc+0x1cc>)
    10ea:	4798      	blx	r3
    10ec:	200d      	movs	r0, #13
    10ee:	4b53      	ldr	r3, [pc, #332]	; (123c <m2m_wifi_connect_sc+0x1d0>)
    10f0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    10f2:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    10f4:	e091      	b.n	121a <m2m_wifi_connect_sc+0x1ae>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    10f6:	ae07      	add	r6, sp, #28
    10f8:	205a      	movs	r0, #90	; 0x5a
    10fa:	ab02      	add	r3, sp, #8
    10fc:	469c      	mov	ip, r3
    10fe:	4460      	add	r0, ip
    1100:	9905      	ldr	r1, [sp, #20]
    1102:	1c22      	adds	r2, r4, #0
    1104:	4b50      	ldr	r3, [pc, #320]	; (1248 <m2m_wifi_connect_sc+0x1dc>)
    1106:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    1108:	1934      	adds	r4, r6, r4
    110a:	3440      	adds	r4, #64	; 0x40
    110c:	2300      	movs	r3, #0
    110e:	71a3      	strb	r3, [r4, #6]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    1110:	3344      	adds	r3, #68	; 0x44
    1112:	464a      	mov	r2, r9
    1114:	52f2      	strh	r2, [r6, r3]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    1116:	4643      	mov	r3, r8
    1118:	1e5a      	subs	r2, r3, #1
    111a:	4193      	sbcs	r3, r2
    111c:	2267      	movs	r2, #103	; 0x67
    111e:	54b3      	strb	r3, [r6, r2]
	pstrAuthInfo = &strConnect.strSec;
	pstrAuthInfo->u8SecType		= u8SecType;
    1120:	2341      	movs	r3, #65	; 0x41
    1122:	54f5      	strb	r5, [r6, r3]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    1124:	2d03      	cmp	r5, #3
    1126:	d139      	bne.n	119c <m2m_wifi_connect_sc+0x130>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    1128:	783b      	ldrb	r3, [r7, #0]
    112a:	3b01      	subs	r3, #1
    112c:	b2db      	uxtb	r3, r3
    112e:	aa07      	add	r2, sp, #28
    1130:	7013      	strb	r3, [r2, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1132:	2b03      	cmp	r3, #3
    1134:	d90d      	bls.n	1152 <m2m_wifi_connect_sc+0xe6>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    1136:	483c      	ldr	r0, [pc, #240]	; (1228 <m2m_wifi_connect_sc+0x1bc>)
    1138:	493c      	ldr	r1, [pc, #240]	; (122c <m2m_wifi_connect_sc+0x1c0>)
    113a:	4a44      	ldr	r2, [pc, #272]	; (124c <m2m_wifi_connect_sc+0x1e0>)
    113c:	4c3c      	ldr	r4, [pc, #240]	; (1230 <m2m_wifi_connect_sc+0x1c4>)
    113e:	47a0      	blx	r4
    1140:	ab07      	add	r3, sp, #28
    1142:	7819      	ldrb	r1, [r3, #0]
    1144:	4842      	ldr	r0, [pc, #264]	; (1250 <m2m_wifi_connect_sc+0x1e4>)
    1146:	47a0      	blx	r4
    1148:	200d      	movs	r0, #13
    114a:	4b3c      	ldr	r3, [pc, #240]	; (123c <m2m_wifi_connect_sc+0x1d0>)
    114c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    114e:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    1150:	e063      	b.n	121a <m2m_wifi_connect_sc+0x1ae>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    1152:	787a      	ldrb	r2, [r7, #1]
    1154:	1e51      	subs	r1, r2, #1
    1156:	ab07      	add	r3, sp, #28
    1158:	7059      	strb	r1, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    115a:	2310      	movs	r3, #16
    115c:	1c11      	adds	r1, r2, #0
    115e:	4399      	bics	r1, r3
    1160:	290b      	cmp	r1, #11
    1162:	d00d      	beq.n	1180 <m2m_wifi_connect_sc+0x114>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1164:	4830      	ldr	r0, [pc, #192]	; (1228 <m2m_wifi_connect_sc+0x1bc>)
    1166:	4931      	ldr	r1, [pc, #196]	; (122c <m2m_wifi_connect_sc+0x1c0>)
    1168:	4a3a      	ldr	r2, [pc, #232]	; (1254 <m2m_wifi_connect_sc+0x1e8>)
    116a:	4c31      	ldr	r4, [pc, #196]	; (1230 <m2m_wifi_connect_sc+0x1c4>)
    116c:	47a0      	blx	r4
    116e:	ab07      	add	r3, sp, #28
    1170:	7859      	ldrb	r1, [r3, #1]
    1172:	4839      	ldr	r0, [pc, #228]	; (1258 <m2m_wifi_connect_sc+0x1ec>)
    1174:	47a0      	blx	r4
    1176:	200d      	movs	r0, #13
    1178:	4b30      	ldr	r3, [pc, #192]	; (123c <m2m_wifi_connect_sc+0x1d0>)
    117a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    117c:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    117e:	e04c      	b.n	121a <m2m_wifi_connect_sc+0x1ae>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    1180:	1cb9      	adds	r1, r7, #2
    1182:	2016      	movs	r0, #22
    1184:	ab02      	add	r3, sp, #8
    1186:	469c      	mov	ip, r3
    1188:	4460      	add	r0, ip
    118a:	4b2f      	ldr	r3, [pc, #188]	; (1248 <m2m_wifi_connect_sc+0x1dc>)
    118c:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    118e:	787b      	ldrb	r3, [r7, #1]
    1190:	aa07      	add	r2, sp, #28
    1192:	4694      	mov	ip, r2
    1194:	4463      	add	r3, ip
    1196:	2200      	movs	r2, #0
    1198:	709a      	strb	r2, [r3, #2]
    119a:	e034      	b.n	1206 <m2m_wifi_connect_sc+0x19a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    119c:	2d02      	cmp	r5, #2
    119e:	d11a      	bne.n	11d6 <m2m_wifi_connect_sc+0x16a>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    11a0:	1c38      	adds	r0, r7, #0
    11a2:	4b2e      	ldr	r3, [pc, #184]	; (125c <m2m_wifi_connect_sc+0x1f0>)
    11a4:	4798      	blx	r3
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    11a6:	1e43      	subs	r3, r0, #1
    11a8:	b29b      	uxth	r3, r3
    11aa:	2b3f      	cmp	r3, #63	; 0x3f
    11ac:	d90d      	bls.n	11ca <m2m_wifi_connect_sc+0x15e>
		{
			M2M_ERR("Incorrect PSK key length\n");
    11ae:	481e      	ldr	r0, [pc, #120]	; (1228 <m2m_wifi_connect_sc+0x1bc>)
    11b0:	491e      	ldr	r1, [pc, #120]	; (122c <m2m_wifi_connect_sc+0x1c0>)
    11b2:	2288      	movs	r2, #136	; 0x88
    11b4:	0092      	lsls	r2, r2, #2
    11b6:	4b1e      	ldr	r3, [pc, #120]	; (1230 <m2m_wifi_connect_sc+0x1c4>)
    11b8:	4798      	blx	r3
    11ba:	4829      	ldr	r0, [pc, #164]	; (1260 <m2m_wifi_connect_sc+0x1f4>)
    11bc:	4b1e      	ldr	r3, [pc, #120]	; (1238 <m2m_wifi_connect_sc+0x1cc>)
    11be:	4798      	blx	r3
    11c0:	200d      	movs	r0, #13
    11c2:	4b1e      	ldr	r3, [pc, #120]	; (123c <m2m_wifi_connect_sc+0x1d0>)
    11c4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    11c6:	20f4      	movs	r0, #244	; 0xf4
			goto ERR1;
    11c8:	e027      	b.n	121a <m2m_wifi_connect_sc+0x1ae>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    11ca:	1c42      	adds	r2, r0, #1
    11cc:	a807      	add	r0, sp, #28
    11ce:	1c39      	adds	r1, r7, #0
    11d0:	4b1d      	ldr	r3, [pc, #116]	; (1248 <m2m_wifi_connect_sc+0x1dc>)
    11d2:	4798      	blx	r3
    11d4:	e017      	b.n	1206 <m2m_wifi_connect_sc+0x19a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    11d6:	2d04      	cmp	r5, #4
    11d8:	d105      	bne.n	11e6 <m2m_wifi_connect_sc+0x17a>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    11da:	a807      	add	r0, sp, #28
    11dc:	1c39      	adds	r1, r7, #0
    11de:	223e      	movs	r2, #62	; 0x3e
    11e0:	4b19      	ldr	r3, [pc, #100]	; (1248 <m2m_wifi_connect_sc+0x1dc>)
    11e2:	4798      	blx	r3
    11e4:	e00f      	b.n	1206 <m2m_wifi_connect_sc+0x19a>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    11e6:	2d01      	cmp	r5, #1
    11e8:	d00d      	beq.n	1206 <m2m_wifi_connect_sc+0x19a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    11ea:	480f      	ldr	r0, [pc, #60]	; (1228 <m2m_wifi_connect_sc+0x1bc>)
    11ec:	490f      	ldr	r1, [pc, #60]	; (122c <m2m_wifi_connect_sc+0x1c0>)
    11ee:	228c      	movs	r2, #140	; 0x8c
    11f0:	0092      	lsls	r2, r2, #2
    11f2:	4b0f      	ldr	r3, [pc, #60]	; (1230 <m2m_wifi_connect_sc+0x1c4>)
    11f4:	4798      	blx	r3
    11f6:	481b      	ldr	r0, [pc, #108]	; (1264 <m2m_wifi_connect_sc+0x1f8>)
    11f8:	4b0f      	ldr	r3, [pc, #60]	; (1238 <m2m_wifi_connect_sc+0x1cc>)
    11fa:	4798      	blx	r3
    11fc:	200d      	movs	r0, #13
    11fe:	4b0f      	ldr	r3, [pc, #60]	; (123c <m2m_wifi_connect_sc+0x1d0>)
    1200:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1202:	20f4      	movs	r0, #244	; 0xf4
		goto ERR1;
    1204:	e009      	b.n	121a <m2m_wifi_connect_sc+0x1ae>
	}

	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    1206:	2300      	movs	r3, #0
    1208:	9300      	str	r3, [sp, #0]
    120a:	9301      	str	r3, [sp, #4]
    120c:	9302      	str	r3, [sp, #8]
    120e:	2001      	movs	r0, #1
    1210:	2128      	movs	r1, #40	; 0x28
    1212:	aa07      	add	r2, sp, #28
    1214:	336c      	adds	r3, #108	; 0x6c
    1216:	4c14      	ldr	r4, [pc, #80]	; (1268 <m2m_wifi_connect_sc+0x1fc>)
    1218:	47a0      	blx	r4

ERR1:
	return ret;
    121a:	b240      	sxtb	r0, r0
}
    121c:	b023      	add	sp, #140	; 0x8c
    121e:	bc0c      	pop	{r2, r3}
    1220:	4690      	mov	r8, r2
    1222:	4699      	mov	r9, r3
    1224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	0000a28c 	.word	0x0000a28c
    122c:	0000a560 	.word	0x0000a560
    1230:	00008bed 	.word	0x00008bed
    1234:	0000a64c 	.word	0x0000a64c
    1238:	00008d0d 	.word	0x00008d0d
    123c:	00008c21 	.word	0x00008c21
    1240:	0000a660 	.word	0x0000a660
    1244:	0000a674 	.word	0x0000a674
    1248:	00000525 	.word	0x00000525
    124c:	0000020a 	.word	0x0000020a
    1250:	0000a680 	.word	0x0000a680
    1254:	00000211 	.word	0x00000211
    1258:	0000a69c 	.word	0x0000a69c
    125c:	00000549 	.word	0x00000549
    1260:	0000a6b8 	.word	0x0000a6b8
    1264:	0000a6d4 	.word	0x0000a6d4
    1268:	00000695 	.word	0x00000695

0000126c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    126c:	b510      	push	{r4, lr}
    126e:	b082      	sub	sp, #8
    1270:	ac04      	add	r4, sp, #16
    1272:	8824      	ldrh	r4, [r4, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    1274:	9400      	str	r4, [sp, #0]
    1276:	2400      	movs	r4, #0
    1278:	9401      	str	r4, [sp, #4]
    127a:	4c02      	ldr	r4, [pc, #8]	; (1284 <m2m_wifi_connect+0x18>)
    127c:	47a0      	blx	r4
}
    127e:	b002      	add	sp, #8
    1280:	bd10      	pop	{r4, pc}
    1282:	46c0      	nop			; (mov r8, r8)
    1284:	0000106d 	.word	0x0000106d

00001288 <m2m_wifi_set_mac_address>:
sint8 m2m_wifi_disconnect(void)
{
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0,0);
}
sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
    1288:	b510      	push	{r4, lr}
    128a:	b086      	sub	sp, #24
    128c:	1c01      	adds	r1, r0, #0
	tstrM2mSetMacAddress strTmp;
	m2m_memcpy((uint8*) strTmp.au8Mac, (uint8*) au8MacAddress, 6);
    128e:	a804      	add	r0, sp, #16
    1290:	2206      	movs	r2, #6
    1292:	4b07      	ldr	r3, [pc, #28]	; (12b0 <m2m_wifi_set_mac_address+0x28>)
    1294:	4798      	blx	r3
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
    1296:	2300      	movs	r3, #0
    1298:	9300      	str	r3, [sp, #0]
    129a:	9301      	str	r3, [sp, #4]
    129c:	9302      	str	r3, [sp, #8]
    129e:	2001      	movs	r0, #1
    12a0:	2102      	movs	r1, #2
    12a2:	aa04      	add	r2, sp, #16
    12a4:	3308      	adds	r3, #8
    12a6:	4c03      	ldr	r4, [pc, #12]	; (12b4 <m2m_wifi_set_mac_address+0x2c>)
    12a8:	47a0      	blx	r4
		(uint8*) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0,0);
}
    12aa:	b006      	add	sp, #24
    12ac:	bd10      	pop	{r4, pc}
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	00000525 	.word	0x00000525
    12b4:	00000695 	.word	0x00000695

000012b8 <m2m_wifi_request_dhcp_client>:

sint8 m2m_wifi_request_dhcp_client(void)
{
	/*legacy API should be removed */
	return 0;
}
    12b8:	2000      	movs	r0, #0
    12ba:	4770      	bx	lr

000012bc <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    12bc:	b538      	push	{r3, r4, r5, lr}
    12be:	1c05      	adds	r5, r0, #0
    12c0:	1c0c      	adds	r4, r1, #0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    12c2:	4b07      	ldr	r3, [pc, #28]	; (12e0 <m2m_wifi_get_otp_mac_address+0x24>)
    12c4:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    12c6:	2800      	cmp	r0, #0
    12c8:	d107      	bne.n	12da <m2m_wifi_get_otp_mac_address+0x1e>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    12ca:	1c28      	adds	r0, r5, #0
    12cc:	1c21      	adds	r1, r4, #0
    12ce:	4b05      	ldr	r3, [pc, #20]	; (12e4 <m2m_wifi_get_otp_mac_address+0x28>)
    12d0:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    12d2:	2800      	cmp	r0, #0
    12d4:	d101      	bne.n	12da <m2m_wifi_get_otp_mac_address+0x1e>
		{
			ret = hif_chip_sleep();
    12d6:	4b04      	ldr	r3, [pc, #16]	; (12e8 <m2m_wifi_get_otp_mac_address+0x2c>)
    12d8:	4798      	blx	r3
		}
	}
	return ret;
    12da:	b240      	sxtb	r0, r0
}
    12dc:	bd38      	pop	{r3, r4, r5, pc}
    12de:	46c0      	nop			; (mov r8, r8)
    12e0:	000005b5 	.word	0x000005b5
    12e4:	00001855 	.word	0x00001855
    12e8:	00000619 	.word	0x00000619

000012ec <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    12ec:	b510      	push	{r4, lr}
    12ee:	1c04      	adds	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
    12f0:	4b06      	ldr	r3, [pc, #24]	; (130c <m2m_wifi_get_mac_address+0x20>)
    12f2:	4798      	blx	r3
	if(ret == M2M_SUCCESS)
    12f4:	2800      	cmp	r0, #0
    12f6:	d106      	bne.n	1306 <m2m_wifi_get_mac_address+0x1a>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
    12f8:	1c20      	adds	r0, r4, #0
    12fa:	4b05      	ldr	r3, [pc, #20]	; (1310 <m2m_wifi_get_mac_address+0x24>)
    12fc:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    12fe:	2800      	cmp	r0, #0
    1300:	d101      	bne.n	1306 <m2m_wifi_get_mac_address+0x1a>
		{
			ret = hif_chip_sleep();
    1302:	4b04      	ldr	r3, [pc, #16]	; (1314 <m2m_wifi_get_mac_address+0x28>)
    1304:	4798      	blx	r3
		}
	}

	return ret;
    1306:	b240      	sxtb	r0, r0
}
    1308:	bd10      	pop	{r4, pc}
    130a:	46c0      	nop			; (mov r8, r8)
    130c:	000005b5 	.word	0x000005b5
    1310:	000018c5 	.word	0x000018c5
    1314:	00000619 	.word	0x00000619

00001318 <m2m_wifi_set_sleep_mode>:
@return     The function SHALL return 0 for success and a negative value otherwise.
@sa			tenuPowerSaveModes
@warning    The function called once after initialization.
*/
sint8 m2m_wifi_set_sleep_mode(uint8 PsTyp, uint8 BcastEn)
{
    1318:	b570      	push	{r4, r5, r6, lr}
    131a:	b086      	sub	sp, #24
    131c:	1c04      	adds	r4, r0, #0
	sint8 ret = M2M_SUCCESS;
	tstrM2mPsType strPs;
	strPs.u8PsType = PsTyp;
    131e:	aa05      	add	r2, sp, #20
    1320:	7010      	strb	r0, [r2, #0]
	strPs.u8BcastEn = BcastEn;
    1322:	7051      	strb	r1, [r2, #1]
	ret = hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_SLEEP, (uint8*) &strPs,sizeof(tstrM2mPsType), NULL, 0, 0);
    1324:	2300      	movs	r3, #0
    1326:	9300      	str	r3, [sp, #0]
    1328:	9301      	str	r3, [sp, #4]
    132a:	9302      	str	r3, [sp, #8]
    132c:	2001      	movs	r0, #1
    132e:	212d      	movs	r1, #45	; 0x2d
    1330:	3304      	adds	r3, #4
    1332:	4d09      	ldr	r5, [pc, #36]	; (1358 <m2m_wifi_set_sleep_mode+0x40>)
    1334:	47a8      	blx	r5
    1336:	1c06      	adds	r6, r0, #0
	M2M_INFO("POWER SAVE %d\n",PsTyp);
    1338:	4808      	ldr	r0, [pc, #32]	; (135c <m2m_wifi_set_sleep_mode+0x44>)
    133a:	4d09      	ldr	r5, [pc, #36]	; (1360 <m2m_wifi_set_sleep_mode+0x48>)
    133c:	47a8      	blx	r5
    133e:	4809      	ldr	r0, [pc, #36]	; (1364 <m2m_wifi_set_sleep_mode+0x4c>)
    1340:	1c21      	adds	r1, r4, #0
    1342:	47a8      	blx	r5
    1344:	200d      	movs	r0, #13
    1346:	4b08      	ldr	r3, [pc, #32]	; (1368 <m2m_wifi_set_sleep_mode+0x50>)
    1348:	4798      	blx	r3
	hif_set_sleep_mode(PsTyp);
    134a:	1c20      	adds	r0, r4, #0
    134c:	4b07      	ldr	r3, [pc, #28]	; (136c <m2m_wifi_set_sleep_mode+0x54>)
    134e:	4798      	blx	r3
	return ret;
}
    1350:	1c30      	adds	r0, r6, #0
    1352:	b006      	add	sp, #24
    1354:	bd70      	pop	{r4, r5, r6, pc}
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	00000695 	.word	0x00000695
    135c:	0000a574 	.word	0x0000a574
    1360:	00008bed 	.word	0x00008bed
    1364:	0000a7ac 	.word	0x0000a7ac
    1368:	00008c21 	.word	0x00008c21
    136c:	0000060d 	.word	0x0000060d

00001370 <m2m_wifi_set_device_name>:
			Length of the device name.
@return		The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning	The Function called once after initialization.
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
    1370:	b510      	push	{r4, lr}
    1372:	b090      	sub	sp, #64	; 0x40
    1374:	1c03      	adds	r3, r0, #0
	tstrM2MDeviceNameConfig strDeviceName;
	if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
    1376:	292f      	cmp	r1, #47	; 0x2f
    1378:	d900      	bls.n	137c <m2m_wifi_set_device_name+0xc>
	{
		u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
    137a:	2130      	movs	r1, #48	; 0x30
	}
	//pu8DeviceName[u8DeviceNameLength] = '\0';
	u8DeviceNameLength ++;
    137c:	3101      	adds	r1, #1
	m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
    137e:	b2ca      	uxtb	r2, r1
    1380:	a804      	add	r0, sp, #16
    1382:	1c19      	adds	r1, r3, #0
    1384:	4b06      	ldr	r3, [pc, #24]	; (13a0 <m2m_wifi_set_device_name+0x30>)
    1386:	4798      	blx	r3
	return hif_send(M2M_REQ_GRP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
    1388:	2300      	movs	r3, #0
    138a:	9300      	str	r3, [sp, #0]
    138c:	9301      	str	r3, [sp, #4]
    138e:	9302      	str	r3, [sp, #8]
    1390:	2001      	movs	r0, #1
    1392:	2107      	movs	r1, #7
    1394:	aa04      	add	r2, sp, #16
    1396:	3330      	adds	r3, #48	; 0x30
    1398:	4c02      	ldr	r4, [pc, #8]	; (13a4 <m2m_wifi_set_device_name+0x34>)
    139a:	47a0      	blx	r4
		(uint8*)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0,0);
}
    139c:	b010      	add	sp, #64	; 0x40
    139e:	bd10      	pop	{r4, pc}
    13a0:	00000525 	.word	0x00000525
    13a4:	00000695 	.word	0x00000695

000013a8 <chip_apply_conf>:
#define M2M_DISABLE_PS        0xD0UL

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    13a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13aa:	b083      	sub	sp, #12
    13ac:	1c04      	adds	r4, r0, #0
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    13ae:	25a5      	movs	r5, #165	; 0xa5
    13b0:	016d      	lsls	r5, r5, #5
    13b2:	4e0a      	ldr	r6, [pc, #40]	; (13dc <chip_apply_conf+0x34>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    13b4:	4f0a      	ldr	r7, [pc, #40]	; (13e0 <chip_apply_conf+0x38>)
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    13b6:	1c28      	adds	r0, r5, #0
    13b8:	1c21      	adds	r1, r4, #0
    13ba:	47b0      	blx	r6
		if(val32 != 0) {		
    13bc:	2c00      	cmp	r4, #0
    13be:	d009      	beq.n	13d4 <chip_apply_conf+0x2c>
			uint32 reg = 0;
    13c0:	2300      	movs	r3, #0
    13c2:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    13c4:	1c28      	adds	r0, r5, #0
    13c6:	a901      	add	r1, sp, #4
    13c8:	47b8      	blx	r7
			if(ret == M2M_SUCCESS) {
    13ca:	2800      	cmp	r0, #0
    13cc:	d1f3      	bne.n	13b6 <chip_apply_conf+0xe>
				if(reg == val32)
    13ce:	9b01      	ldr	r3, [sp, #4]
    13d0:	429c      	cmp	r4, r3
    13d2:	d1f0      	bne.n	13b6 <chip_apply_conf+0xe>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    13d4:	2000      	movs	r0, #0
    13d6:	b003      	add	sp, #12
    13d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13da:	46c0      	nop			; (mov r8, r8)
    13dc:	0000193d 	.word	0x0000193d
    13e0:	00001931 	.word	0x00001931

000013e4 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    13e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e6:	465f      	mov	r7, fp
    13e8:	4656      	mov	r6, sl
    13ea:	4645      	mov	r5, r8
    13ec:	b4e0      	push	{r5, r6, r7}
    13ee:	b084      	sub	sp, #16
	sint8 ret = M2M_SUCCESS;
	uint32 reg, clk_status_reg,trials = 0;
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    13f0:	2001      	movs	r0, #1
    13f2:	4b3c      	ldr	r3, [pc, #240]	; (14e4 <nm_clkless_wake+0x100>)
    13f4:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    13f6:	2001      	movs	r0, #1
    13f8:	a903      	add	r1, sp, #12
    13fa:	4b3b      	ldr	r3, [pc, #236]	; (14e8 <nm_clkless_wake+0x104>)
    13fc:	4798      	blx	r3
    13fe:	9001      	str	r0, [sp, #4]
    1400:	2400      	movs	r4, #0
	if(ret != M2M_SUCCESS) {
    1402:	2800      	cmp	r0, #0
    1404:	d00b      	beq.n	141e <nm_clkless_wake+0x3a>
		M2M_ERR("Bus error (1). Wake up failed\n");
    1406:	4839      	ldr	r0, [pc, #228]	; (14ec <nm_clkless_wake+0x108>)
    1408:	4939      	ldr	r1, [pc, #228]	; (14f0 <nm_clkless_wake+0x10c>)
    140a:	2271      	movs	r2, #113	; 0x71
    140c:	4b39      	ldr	r3, [pc, #228]	; (14f4 <nm_clkless_wake+0x110>)
    140e:	4798      	blx	r3
    1410:	4839      	ldr	r0, [pc, #228]	; (14f8 <nm_clkless_wake+0x114>)
    1412:	4b3a      	ldr	r3, [pc, #232]	; (14fc <nm_clkless_wake+0x118>)
    1414:	4798      	blx	r3
    1416:	200d      	movs	r0, #13
    1418:	4b39      	ldr	r3, [pc, #228]	; (1500 <nm_clkless_wake+0x11c>)
    141a:	4798      	blx	r3
		goto _WAKE_EXIT;
    141c:	e059      	b.n	14d2 <nm_clkless_wake+0xee>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    141e:	4b39      	ldr	r3, [pc, #228]	; (1504 <nm_clkless_wake+0x120>)
    1420:	469b      	mov	fp, r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    1422:	4b30      	ldr	r3, [pc, #192]	; (14e4 <nm_clkless_wake+0x100>)
    1424:	469a      	mov	sl, r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1426:	4b38      	ldr	r3, [pc, #224]	; (1508 <nm_clkless_wake+0x124>)
    1428:	4698      	mov	r8, r3
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    142a:	2102      	movs	r1, #2
    142c:	9b03      	ldr	r3, [sp, #12]
    142e:	4319      	orrs	r1, r3
    1430:	2001      	movs	r0, #1
    1432:	47d8      	blx	fp
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    1434:	2001      	movs	r0, #1
    1436:	47d0      	blx	sl
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1438:	4643      	mov	r3, r8
    143a:	6818      	ldr	r0, [r3, #0]
    143c:	a902      	add	r1, sp, #8
    143e:	4b2a      	ldr	r3, [pc, #168]	; (14e8 <nm_clkless_wake+0x104>)
    1440:	4798      	blx	r3
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    1442:	2800      	cmp	r0, #0
    1444:	d106      	bne.n	1454 <nm_clkless_wake+0x70>
    1446:	9b02      	ldr	r3, [sp, #8]
    1448:	2b00      	cmp	r3, #0
    144a:	d003      	beq.n	1454 <nm_clkless_wake+0x70>
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    144c:	4d2f      	ldr	r5, [pc, #188]	; (150c <nm_clkless_wake+0x128>)
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    144e:	4f25      	ldr	r7, [pc, #148]	; (14e4 <nm_clkless_wake+0x100>)

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1450:	4e2d      	ldr	r6, [pc, #180]	; (1508 <nm_clkless_wake+0x124>)
    1452:	e02c      	b.n	14ae <nm_clkless_wake+0xca>
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    1454:	4d2c      	ldr	r5, [pc, #176]	; (1508 <nm_clkless_wake+0x124>)
    1456:	230e      	movs	r3, #14
    1458:	602b      	str	r3, [r5, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    145a:	2001      	movs	r0, #1
    145c:	4b21      	ldr	r3, [pc, #132]	; (14e4 <nm_clkless_wake+0x100>)
    145e:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1460:	6828      	ldr	r0, [r5, #0]
    1462:	a902      	add	r1, sp, #8
    1464:	4b20      	ldr	r3, [pc, #128]	; (14e8 <nm_clkless_wake+0x104>)
    1466:	4798      	blx	r3
    1468:	1e05      	subs	r5, r0, #0
			if(ret != M2M_SUCCESS) {
    146a:	d0ef      	beq.n	144c <nm_clkless_wake+0x68>
				M2M_ERR("Bus error (2). Wake up failed\n");
    146c:	481f      	ldr	r0, [pc, #124]	; (14ec <nm_clkless_wake+0x108>)
    146e:	4920      	ldr	r1, [pc, #128]	; (14f0 <nm_clkless_wake+0x10c>)
    1470:	228b      	movs	r2, #139	; 0x8b
    1472:	4b20      	ldr	r3, [pc, #128]	; (14f4 <nm_clkless_wake+0x110>)
    1474:	4798      	blx	r3
    1476:	4826      	ldr	r0, [pc, #152]	; (1510 <nm_clkless_wake+0x12c>)
    1478:	4b20      	ldr	r3, [pc, #128]	; (14fc <nm_clkless_wake+0x118>)
    147a:	4798      	blx	r3
    147c:	200d      	movs	r0, #13
    147e:	4b20      	ldr	r3, [pc, #128]	; (1500 <nm_clkless_wake+0x11c>)
    1480:	4798      	blx	r3
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1482:	9501      	str	r5, [sp, #4]
			if(ret != M2M_SUCCESS) {
				M2M_ERR("Bus error (2). Wake up failed\n");
				goto _WAKE_EXIT;
    1484:	e025      	b.n	14d2 <nm_clkless_wake+0xee>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    1486:	2002      	movs	r0, #2
    1488:	47b8      	blx	r7

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    148a:	6830      	ldr	r0, [r6, #0]
    148c:	a902      	add	r1, sp, #8
    148e:	4b16      	ldr	r3, [pc, #88]	; (14e8 <nm_clkless_wake+0x104>)
    1490:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    1492:	9b02      	ldr	r3, [sp, #8]
    1494:	075b      	lsls	r3, r3, #29
    1496:	d40a      	bmi.n	14ae <nm_clkless_wake+0xca>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    1498:	4814      	ldr	r0, [pc, #80]	; (14ec <nm_clkless_wake+0x108>)
    149a:	4915      	ldr	r1, [pc, #84]	; (14f0 <nm_clkless_wake+0x10c>)
    149c:	229e      	movs	r2, #158	; 0x9e
    149e:	4b15      	ldr	r3, [pc, #84]	; (14f4 <nm_clkless_wake+0x110>)
    14a0:	4798      	blx	r3
    14a2:	481c      	ldr	r0, [pc, #112]	; (1514 <nm_clkless_wake+0x130>)
    14a4:	4b15      	ldr	r3, [pc, #84]	; (14fc <nm_clkless_wake+0x118>)
    14a6:	4798      	blx	r3
    14a8:	200d      	movs	r0, #13
    14aa:	4b15      	ldr	r3, [pc, #84]	; (1500 <nm_clkless_wake+0x11c>)
    14ac:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    14ae:	9b02      	ldr	r3, [sp, #8]
    14b0:	075b      	lsls	r3, r3, #29
    14b2:	d40e      	bmi.n	14d2 <nm_clkless_wake+0xee>
    14b4:	3401      	adds	r4, #1
    14b6:	1c20      	adds	r0, r4, #0
    14b8:	2103      	movs	r1, #3
    14ba:	47a8      	blx	r5
    14bc:	2900      	cmp	r1, #0
    14be:	d0e2      	beq.n	1486 <nm_clkless_wake+0xa2>
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    14c0:	2102      	movs	r1, #2
    14c2:	9b03      	ldr	r3, [sp, #12]
    14c4:	4319      	orrs	r1, r3
    14c6:	2001      	movs	r0, #1
    14c8:	4b0e      	ldr	r3, [pc, #56]	; (1504 <nm_clkless_wake+0x120>)
    14ca:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    14cc:	9b02      	ldr	r3, [sp, #8]
    14ce:	075b      	lsls	r3, r3, #29
    14d0:	d5ab      	bpl.n	142a <nm_clkless_wake+0x46>

_WAKE_EXIT:
	return ret;
    14d2:	466b      	mov	r3, sp
    14d4:	2004      	movs	r0, #4
    14d6:	5618      	ldrsb	r0, [r3, r0]
}
    14d8:	b004      	add	sp, #16
    14da:	bc1c      	pop	{r2, r3, r4}
    14dc:	4690      	mov	r8, r2
    14de:	469a      	mov	sl, r3
    14e0:	46a3      	mov	fp, r4
    14e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14e4:	0000018d 	.word	0x0000018d
    14e8:	00001931 	.word	0x00001931
    14ec:	0000a28c 	.word	0x0000a28c
    14f0:	0000a7d0 	.word	0x0000a7d0
    14f4:	00008bed 	.word	0x00008bed
    14f8:	0000a7e0 	.word	0x0000a7e0
    14fc:	00008d0d 	.word	0x00008d0d
    1500:	00008c21 	.word	0x00008c21
    1504:	0000193d 	.word	0x0000193d
    1508:	2000000c 	.word	0x2000000c
    150c:	00008151 	.word	0x00008151
    1510:	0000a800 	.word	0x0000a800
    1514:	0000a820 	.word	0x0000a820

00001518 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    1518:	b500      	push	{lr}
    151a:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    151c:	4816      	ldr	r0, [pc, #88]	; (1578 <enable_interrupts+0x60>)
    151e:	a901      	add	r1, sp, #4
    1520:	4b16      	ldr	r3, [pc, #88]	; (157c <enable_interrupts+0x64>)
    1522:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1524:	2800      	cmp	r0, #0
    1526:	d11c      	bne.n	1562 <enable_interrupts+0x4a>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 8);
    1528:	2180      	movs	r1, #128	; 0x80
    152a:	0049      	lsls	r1, r1, #1
    152c:	9b01      	ldr	r3, [sp, #4]
    152e:	4319      	orrs	r1, r3
    1530:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    1532:	4811      	ldr	r0, [pc, #68]	; (1578 <enable_interrupts+0x60>)
    1534:	4b12      	ldr	r3, [pc, #72]	; (1580 <enable_interrupts+0x68>)
    1536:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1538:	2800      	cmp	r0, #0
    153a:	d114      	bne.n	1566 <enable_interrupts+0x4e>
		return M2M_ERR_BUS_FAIL;
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    153c:	20d0      	movs	r0, #208	; 0xd0
    153e:	0140      	lsls	r0, r0, #5
    1540:	a901      	add	r1, sp, #4
    1542:	4b0e      	ldr	r3, [pc, #56]	; (157c <enable_interrupts+0x64>)
    1544:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    1546:	2800      	cmp	r0, #0
    1548:	d10f      	bne.n	156a <enable_interrupts+0x52>
		return M2M_ERR_BUS_FAIL;
	}
	reg |= ((uint32) 1 << 16);
    154a:	2180      	movs	r1, #128	; 0x80
    154c:	0249      	lsls	r1, r1, #9
    154e:	9b01      	ldr	r3, [sp, #4]
    1550:	4319      	orrs	r1, r3
    1552:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    1554:	20d0      	movs	r0, #208	; 0xd0
    1556:	0140      	lsls	r0, r0, #5
    1558:	4b09      	ldr	r3, [pc, #36]	; (1580 <enable_interrupts+0x68>)
    155a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) {
    155c:	2800      	cmp	r0, #0
    155e:	d106      	bne.n	156e <enable_interrupts+0x56>
    1560:	e006      	b.n	1570 <enable_interrupts+0x58>
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1562:	20fa      	movs	r0, #250	; 0xfa
    1564:	e004      	b.n	1570 <enable_interrupts+0x58>
	}
	reg |= ((uint32) 1 << 8);
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    1566:	20fa      	movs	r0, #250	; 0xfa
    1568:	e002      	b.n	1570 <enable_interrupts+0x58>
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    156a:	20fa      	movs	r0, #250	; 0xfa
    156c:	e000      	b.n	1570 <enable_interrupts+0x58>
	}
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) {
		return M2M_ERR_BUS_FAIL;
    156e:	20fa      	movs	r0, #250	; 0xfa
    1570:	b240      	sxtb	r0, r0
	}
	return M2M_SUCCESS;
}
    1572:	b003      	add	sp, #12
    1574:	bd00      	pop	{pc}
    1576:	46c0      	nop			; (mov r8, r8)
    1578:	00001408 	.word	0x00001408
    157c:	00001931 	.word	0x00001931
    1580:	0000193d 	.word	0x0000193d

00001584 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    1584:	b510      	push	{r4, lr}
    1586:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    1588:	4b20      	ldr	r3, [pc, #128]	; (160c <nmi_get_chipid+0x88>)
    158a:	681c      	ldr	r4, [r3, #0]
    158c:	2c00      	cmp	r4, #0
    158e:	d137      	bne.n	1600 <nmi_get_chipid+0x7c>
		//uint32 revid;
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    1590:	2080      	movs	r0, #128	; 0x80
    1592:	0140      	lsls	r0, r0, #5
    1594:	1c19      	adds	r1, r3, #0
    1596:	4b1e      	ldr	r3, [pc, #120]	; (1610 <nmi_get_chipid+0x8c>)
    1598:	4798      	blx	r3
    159a:	2800      	cmp	r0, #0
    159c:	d003      	beq.n	15a6 <nmi_get_chipid+0x22>
			chipid = 0;
    159e:	2200      	movs	r2, #0
    15a0:	4b1a      	ldr	r3, [pc, #104]	; (160c <nmi_get_chipid+0x88>)
    15a2:	601a      	str	r2, [r3, #0]
			return 0;
    15a4:	e02e      	b.n	1604 <nmi_get_chipid+0x80>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    15a6:	481b      	ldr	r0, [pc, #108]	; (1614 <nmi_get_chipid+0x90>)
    15a8:	a901      	add	r1, sp, #4
    15aa:	4b19      	ldr	r3, [pc, #100]	; (1610 <nmi_get_chipid+0x8c>)
    15ac:	4798      	blx	r3
    15ae:	2800      	cmp	r0, #0
    15b0:	d003      	beq.n	15ba <nmi_get_chipid+0x36>
			chipid = 0;
    15b2:	2200      	movs	r2, #0
    15b4:	4b15      	ldr	r3, [pc, #84]	; (160c <nmi_get_chipid+0x88>)
    15b6:	601a      	str	r2, [r3, #0]
			return 0;
    15b8:	e024      	b.n	1604 <nmi_get_chipid+0x80>
		}

		if (chipid == 0x1002a0)  {
    15ba:	4b14      	ldr	r3, [pc, #80]	; (160c <nmi_get_chipid+0x88>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	4a16      	ldr	r2, [pc, #88]	; (1618 <nmi_get_chipid+0x94>)
    15c0:	4293      	cmp	r3, r2
    15c2:	d106      	bne.n	15d2 <nmi_get_chipid+0x4e>
			if (rfrevid == 0x1) { /* 1002A0 */
    15c4:	9b01      	ldr	r3, [sp, #4]
    15c6:	2b01      	cmp	r3, #1
    15c8:	d012      	beq.n	15f0 <nmi_get_chipid+0x6c>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    15ca:	4a14      	ldr	r2, [pc, #80]	; (161c <nmi_get_chipid+0x98>)
    15cc:	4b0f      	ldr	r3, [pc, #60]	; (160c <nmi_get_chipid+0x88>)
    15ce:	601a      	str	r2, [r3, #0]
    15d0:	e00e      	b.n	15f0 <nmi_get_chipid+0x6c>
			}
		} else if(chipid == 0x1002b0) {
    15d2:	4a13      	ldr	r2, [pc, #76]	; (1620 <nmi_get_chipid+0x9c>)
    15d4:	4293      	cmp	r3, r2
    15d6:	d10b      	bne.n	15f0 <nmi_get_chipid+0x6c>
			if(rfrevid == 3) { /* 1002B0 */
    15d8:	9b01      	ldr	r3, [sp, #4]
    15da:	2b03      	cmp	r3, #3
    15dc:	d008      	beq.n	15f0 <nmi_get_chipid+0x6c>
			} else if(rfrevid == 4) { /* 1002B1 */
    15de:	2b04      	cmp	r3, #4
    15e0:	d103      	bne.n	15ea <nmi_get_chipid+0x66>
				chipid = 0x1002b1;
    15e2:	4a10      	ldr	r2, [pc, #64]	; (1624 <nmi_get_chipid+0xa0>)
    15e4:	4b09      	ldr	r3, [pc, #36]	; (160c <nmi_get_chipid+0x88>)
    15e6:	601a      	str	r2, [r3, #0]
    15e8:	e002      	b.n	15f0 <nmi_get_chipid+0x6c>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    15ea:	4a0f      	ldr	r2, [pc, #60]	; (1628 <nmi_get_chipid+0xa4>)
    15ec:	4b07      	ldr	r3, [pc, #28]	; (160c <nmi_get_chipid+0x88>)
    15ee:	601a      	str	r2, [r3, #0]
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
    15f0:	4a06      	ldr	r2, [pc, #24]	; (160c <nmi_get_chipid+0x88>)
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    15f2:	4b0e      	ldr	r3, [pc, #56]	; (162c <nmi_get_chipid+0xa8>)
    15f4:	6811      	ldr	r1, [r2, #0]
    15f6:	400b      	ands	r3, r1
		chipid |= 0x050000;
    15f8:	21a0      	movs	r1, #160	; 0xa0
    15fa:	02c9      	lsls	r1, r1, #11
    15fc:	430b      	orrs	r3, r1
    15fe:	6013      	str	r3, [r2, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    1600:	4b02      	ldr	r3, [pc, #8]	; (160c <nmi_get_chipid+0x88>)
    1602:	681c      	ldr	r4, [r3, #0]
}
    1604:	1c20      	adds	r0, r4, #0
    1606:	b002      	add	sp, #8
    1608:	bd10      	pop	{r4, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	2000018c 	.word	0x2000018c
    1610:	00001931 	.word	0x00001931
    1614:	000013f4 	.word	0x000013f4
    1618:	001002a0 	.word	0x001002a0
    161c:	001002a1 	.word	0x001002a1
    1620:	001002b0 	.word	0x001002b0
    1624:	001002b1 	.word	0x001002b1
    1628:	001002b2 	.word	0x001002b2
    162c:	fff0ffff 	.word	0xfff0ffff

00001630 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    1630:	b5f0      	push	{r4, r5, r6, r7, lr}
    1632:	4647      	mov	r7, r8
    1634:	b480      	push	{r7}
    1636:	4680      	mov	r8, r0
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    1638:	4d23      	ldr	r5, [pc, #140]	; (16c8 <wait_for_bootrom+0x98>)
    163a:	4c24      	ldr	r4, [pc, #144]	; (16cc <wait_for_bootrom+0x9c>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    163c:	4e24      	ldr	r6, [pc, #144]	; (16d0 <wait_for_bootrom+0xa0>)
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    163e:	1c28      	adds	r0, r5, #0
    1640:	47a0      	blx	r4
		if (reg & 0x80000000) {
    1642:	2800      	cmp	r0, #0
    1644:	db02      	blt.n	164c <wait_for_bootrom+0x1c>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    1646:	2001      	movs	r0, #1
    1648:	47b0      	blx	r6
	}
    164a:	e7f8      	b.n	163e <wait_for_bootrom+0xe>
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    164c:	4821      	ldr	r0, [pc, #132]	; (16d4 <wait_for_bootrom+0xa4>)
    164e:	4b1f      	ldr	r3, [pc, #124]	; (16cc <wait_for_bootrom+0x9c>)
    1650:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    1652:	07c3      	lsls	r3, r0, #31
    1654:	d527      	bpl.n	16a6 <wait_for_bootrom+0x76>
    1656:	e008      	b.n	166a <wait_for_bootrom+0x3a>
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    1658:	2001      	movs	r0, #1
    165a:	47b8      	blx	r7
			reg = nm_read_reg(BOOTROM_REG);
    165c:	481e      	ldr	r0, [pc, #120]	; (16d8 <wait_for_bootrom+0xa8>)
    165e:	47b0      	blx	r6
    1660:	3c01      	subs	r4, #1

			if(++cnt > TIMEOUT)
    1662:	2c00      	cmp	r4, #0
    1664:	d01d      	beq.n	16a2 <wait_for_bootrom+0x72>

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    1666:	42a8      	cmp	r0, r5
    1668:	d1f6      	bne.n	1658 <wait_for_bootrom+0x28>
				goto ERR2;
			}
		}
	}

	if(2 == arg) {
    166a:	4643      	mov	r3, r8
    166c:	2b02      	cmp	r3, #2
    166e:	d103      	bne.n	1678 <wait_for_bootrom+0x48>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1670:	481a      	ldr	r0, [pc, #104]	; (16dc <wait_for_bootrom+0xac>)
    1672:	491b      	ldr	r1, [pc, #108]	; (16e0 <wait_for_bootrom+0xb0>)
    1674:	4b1b      	ldr	r3, [pc, #108]	; (16e4 <wait_for_bootrom+0xb4>)
    1676:	4798      	blx	r3
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    1678:	4b1b      	ldr	r3, [pc, #108]	; (16e8 <wait_for_bootrom+0xb8>)
    167a:	4798      	blx	r3
    167c:	0500      	lsls	r0, r0, #20
    167e:	0d00      	lsrs	r0, r0, #20
    1680:	23e8      	movs	r3, #232	; 0xe8
    1682:	009b      	lsls	r3, r3, #2
    1684:	4298      	cmp	r0, r3
    1686:	d103      	bne.n	1690 <wait_for_bootrom+0x60>
	{
		chip_apply_conf(rHAVE_USE_PMU_BIT);
    1688:	2002      	movs	r0, #2
    168a:	4b18      	ldr	r3, [pc, #96]	; (16ec <wait_for_bootrom+0xbc>)
    168c:	4798      	blx	r3
    168e:	e002      	b.n	1696 <wait_for_bootrom+0x66>
	}
	else
	{
		chip_apply_conf(0);
    1690:	2000      	movs	r0, #0
    1692:	4b16      	ldr	r3, [pc, #88]	; (16ec <wait_for_bootrom+0xbc>)
    1694:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    1696:	4810      	ldr	r0, [pc, #64]	; (16d8 <wait_for_bootrom+0xa8>)
    1698:	4915      	ldr	r1, [pc, #84]	; (16f0 <wait_for_bootrom+0xc0>)
    169a:	4b12      	ldr	r3, [pc, #72]	; (16e4 <wait_for_bootrom+0xb4>)
    169c:	4798      	blx	r3
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    169e:	2000      	movs	r0, #0
    16a0:	e00d      	b.n	16be <wait_for_bootrom+0x8e>
			reg = nm_read_reg(BOOTROM_REG);

			if(++cnt > TIMEOUT)
			{
				M2M_DBG("failed to load firmware from flash.\n");
				ret = M2M_ERR_INIT;
    16a2:	20fb      	movs	r0, #251	; 0xfb
    16a4:	e00b      	b.n	16be <wait_for_bootrom+0x8e>
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
		{
			nm_bsp_sleep(1);
    16a6:	2001      	movs	r0, #1
    16a8:	4b09      	ldr	r3, [pc, #36]	; (16d0 <wait_for_bootrom+0xa0>)
    16aa:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    16ac:	480a      	ldr	r0, [pc, #40]	; (16d8 <wait_for_bootrom+0xa8>)
    16ae:	4b07      	ldr	r3, [pc, #28]	; (16cc <wait_for_bootrom+0x9c>)
    16b0:	4798      	blx	r3
    16b2:	24fa      	movs	r4, #250	; 0xfa
    16b4:	00e4      	lsls	r4, r4, #3

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    16b6:	4d0f      	ldr	r5, [pc, #60]	; (16f4 <wait_for_bootrom+0xc4>)
		{
			nm_bsp_sleep(1);
    16b8:	4f05      	ldr	r7, [pc, #20]	; (16d0 <wait_for_bootrom+0xa0>)
			reg = nm_read_reg(BOOTROM_REG);
    16ba:	4e04      	ldr	r6, [pc, #16]	; (16cc <wait_for_bootrom+0x9c>)
    16bc:	e7d3      	b.n	1666 <wait_for_bootrom+0x36>
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    16be:	b240      	sxtb	r0, r0
}
    16c0:	bc04      	pop	{r2}
    16c2:	4690      	mov	r8, r2
    16c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16c6:	46c0      	nop			; (mov r8, r8)
    16c8:	00001014 	.word	0x00001014
    16cc:	00001925 	.word	0x00001925
    16d0:	0000018d 	.word	0x0000018d
    16d4:	000207bc 	.word	0x000207bc
    16d8:	000c000c 	.word	0x000c000c
    16dc:	000207ac 	.word	0x000207ac
    16e0:	3c1cd57d 	.word	0x3c1cd57d
    16e4:	0000193d 	.word	0x0000193d
    16e8:	00001585 	.word	0x00001585
    16ec:	000013a9 	.word	0x000013a9
    16f0:	ef522f61 	.word	0xef522f61
    16f4:	10add09e 	.word	0x10add09e

000016f8 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    16f8:	b570      	push	{r4, r5, r6, lr}
    16fa:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	volatile uint32 regAddress = NMI_STATE_REG;
    16fc:	4b14      	ldr	r3, [pc, #80]	; (1750 <wait_for_firmware_start+0x58>)
    16fe:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    1700:	4b14      	ldr	r3, [pc, #80]	; (1754 <wait_for_firmware_start+0x5c>)
    1702:	9300      	str	r3, [sp, #0]

	if(2 == arg) {
    1704:	2802      	cmp	r0, #2
    1706:	d10c      	bne.n	1722 <wait_for_firmware_start+0x2a>
		regAddress = NMI_REV_REG;
    1708:	4b13      	ldr	r3, [pc, #76]	; (1758 <wait_for_firmware_start+0x60>)
    170a:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    170c:	4b13      	ldr	r3, [pc, #76]	; (175c <wait_for_firmware_start+0x64>)
    170e:	9300      	str	r3, [sp, #0]
    1710:	e007      	b.n	1722 <wait_for_firmware_start+0x2a>
		/*bypass this step*/
	}

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1712:	2002      	movs	r0, #2
    1714:	47b0      	blx	r6
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1716:	9801      	ldr	r0, [sp, #4]
    1718:	47a8      	blx	r5
    171a:	3c01      	subs	r4, #1
		if(++cnt > TIMEOUT)
    171c:	2c00      	cmp	r4, #0
    171e:	d104      	bne.n	172a <wait_for_firmware_start+0x32>
    1720:	e011      	b.n	1746 <wait_for_firmware_start+0x4e>
ERR2:
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
    1722:	4c0f      	ldr	r4, [pc, #60]	; (1760 <wait_for_firmware_start+0x68>)
    1724:	2000      	movs	r0, #0
		/*bypass this step*/
	}

	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1726:	4e0f      	ldr	r6, [pc, #60]	; (1764 <wait_for_firmware_start+0x6c>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    1728:	4d0f      	ldr	r5, [pc, #60]	; (1768 <wait_for_firmware_start+0x70>)
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
	} else {
		/*bypass this step*/
	}

	while (checkValue != reg)
    172a:	9b00      	ldr	r3, [sp, #0]
    172c:	4283      	cmp	r3, r0
    172e:	d1f0      	bne.n	1712 <wait_for_firmware_start+0x1a>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1730:	9a00      	ldr	r2, [sp, #0]
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    1732:	2000      	movs	r0, #0
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1734:	4b07      	ldr	r3, [pc, #28]	; (1754 <wait_for_firmware_start+0x5c>)
    1736:	429a      	cmp	r2, r3
    1738:	d106      	bne.n	1748 <wait_for_firmware_start+0x50>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    173a:	4805      	ldr	r0, [pc, #20]	; (1750 <wait_for_firmware_start+0x58>)
    173c:	2100      	movs	r1, #0
    173e:	4b0b      	ldr	r3, [pc, #44]	; (176c <wait_for_firmware_start+0x74>)
    1740:	4798      	blx	r3
	return ret;
}

sint8 wait_for_firmware_start(uint8 arg)
{
	sint8 ret = M2M_SUCCESS;
    1742:	2000      	movs	r0, #0
    1744:	e000      	b.n	1748 <wait_for_firmware_start+0x50>
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
		if(++cnt > TIMEOUT)
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1746:	20fb      	movs	r0, #251	; 0xfb
	if(M2M_FINISH_INIT_STATE == checkValue)
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
    1748:	b240      	sxtb	r0, r0
}
    174a:	b002      	add	sp, #8
    174c:	bd70      	pop	{r4, r5, r6, pc}
    174e:	46c0      	nop			; (mov r8, r8)
    1750:	0000108c 	.word	0x0000108c
    1754:	02532636 	.word	0x02532636
    1758:	000207ac 	.word	0x000207ac
    175c:	d75dc1c3 	.word	0xd75dc1c3
    1760:	000007d1 	.word	0x000007d1
    1764:	0000018d 	.word	0x0000018d
    1768:	00001925 	.word	0x00001925
    176c:	0000193d 	.word	0x0000193d

00001770 <chip_deinit>:

sint8 chip_deinit(void)
{
    1770:	b5f0      	push	{r4, r5, r6, r7, lr}
    1772:	b083      	sub	sp, #12
	uint32 reg = 0;
    1774:	2300      	movs	r3, #0
    1776:	9301      	str	r3, [sp, #4]
	uint8 timeout = 10;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1778:	20a0      	movs	r0, #160	; 0xa0
    177a:	0140      	lsls	r0, r0, #5
    177c:	a901      	add	r1, sp, #4
    177e:	4b28      	ldr	r3, [pc, #160]	; (1820 <chip_deinit+0xb0>)
    1780:	4798      	blx	r3
	if (ret != M2M_SUCCESS) {
    1782:	2800      	cmp	r0, #0
    1784:	d00a      	beq.n	179c <chip_deinit+0x2c>
		M2M_ERR("failed to de-initialize\n");
    1786:	4827      	ldr	r0, [pc, #156]	; (1824 <chip_deinit+0xb4>)
    1788:	4927      	ldr	r1, [pc, #156]	; (1828 <chip_deinit+0xb8>)
    178a:	4a28      	ldr	r2, [pc, #160]	; (182c <chip_deinit+0xbc>)
    178c:	4b28      	ldr	r3, [pc, #160]	; (1830 <chip_deinit+0xc0>)
    178e:	4798      	blx	r3
    1790:	4828      	ldr	r0, [pc, #160]	; (1834 <chip_deinit+0xc4>)
    1792:	4b29      	ldr	r3, [pc, #164]	; (1838 <chip_deinit+0xc8>)
    1794:	4798      	blx	r3
    1796:	200d      	movs	r0, #13
    1798:	4b28      	ldr	r3, [pc, #160]	; (183c <chip_deinit+0xcc>)
    179a:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    179c:	4928      	ldr	r1, [pc, #160]	; (1840 <chip_deinit+0xd0>)
    179e:	9b01      	ldr	r3, [sp, #4]
    17a0:	4019      	ands	r1, r3
    17a2:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    17a4:	20a0      	movs	r0, #160	; 0xa0
    17a6:	0140      	lsls	r0, r0, #5
    17a8:	4b26      	ldr	r3, [pc, #152]	; (1844 <chip_deinit+0xd4>)
    17aa:	4798      	blx	r3
    17ac:	1c04      	adds	r4, r0, #0
    17ae:	260a      	movs	r6, #10

	if (ret != M2M_SUCCESS) {
    17b0:	2800      	cmp	r0, #0
    17b2:	d00c      	beq.n	17ce <chip_deinit+0x5e>
		M2M_ERR("Error while writing reg\n");
    17b4:	481b      	ldr	r0, [pc, #108]	; (1824 <chip_deinit+0xb4>)
    17b6:	491c      	ldr	r1, [pc, #112]	; (1828 <chip_deinit+0xb8>)
    17b8:	4a23      	ldr	r2, [pc, #140]	; (1848 <chip_deinit+0xd8>)
    17ba:	4b1d      	ldr	r3, [pc, #116]	; (1830 <chip_deinit+0xc0>)
    17bc:	4798      	blx	r3
    17be:	4823      	ldr	r0, [pc, #140]	; (184c <chip_deinit+0xdc>)
    17c0:	4b1d      	ldr	r3, [pc, #116]	; (1838 <chip_deinit+0xc8>)
    17c2:	4798      	blx	r3
    17c4:	200d      	movs	r0, #13
    17c6:	4b1d      	ldr	r3, [pc, #116]	; (183c <chip_deinit+0xcc>)
    17c8:	4798      	blx	r3
		return ret;
    17ca:	1c20      	adds	r0, r4, #0
    17cc:	e024      	b.n	1818 <chip_deinit+0xa8>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    17ce:	4f14      	ldr	r7, [pc, #80]	; (1820 <chip_deinit+0xb0>)
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    17d0:	4d1c      	ldr	r5, [pc, #112]	; (1844 <chip_deinit+0xd4>)
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    17d2:	20a0      	movs	r0, #160	; 0xa0
    17d4:	0140      	lsls	r0, r0, #5
    17d6:	a901      	add	r1, sp, #4
    17d8:	47b8      	blx	r7
    17da:	1e04      	subs	r4, r0, #0
		if (ret != M2M_SUCCESS) {
    17dc:	d00d      	beq.n	17fa <chip_deinit+0x8a>
			M2M_ERR("Error while reading reg\n");
    17de:	4811      	ldr	r0, [pc, #68]	; (1824 <chip_deinit+0xb4>)
    17e0:	4911      	ldr	r1, [pc, #68]	; (1828 <chip_deinit+0xb8>)
    17e2:	2287      	movs	r2, #135	; 0x87
    17e4:	0092      	lsls	r2, r2, #2
    17e6:	4b12      	ldr	r3, [pc, #72]	; (1830 <chip_deinit+0xc0>)
    17e8:	4798      	blx	r3
    17ea:	4819      	ldr	r0, [pc, #100]	; (1850 <chip_deinit+0xe0>)
    17ec:	4b12      	ldr	r3, [pc, #72]	; (1838 <chip_deinit+0xc8>)
    17ee:	4798      	blx	r3
    17f0:	200d      	movs	r0, #13
    17f2:	4b12      	ldr	r3, [pc, #72]	; (183c <chip_deinit+0xcc>)
    17f4:	4798      	blx	r3
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    17f6:	1c20      	adds	r0, r4, #0
		if (ret != M2M_SUCCESS) {
			M2M_ERR("Error while reading reg\n");
			return ret;
    17f8:	e00e      	b.n	1818 <chip_deinit+0xa8>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    17fa:	9901      	ldr	r1, [sp, #4]
    17fc:	054b      	lsls	r3, r1, #21
    17fe:	d50a      	bpl.n	1816 <chip_deinit+0xa6>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    1800:	4b0f      	ldr	r3, [pc, #60]	; (1840 <chip_deinit+0xd0>)
    1802:	4019      	ands	r1, r3
    1804:	9101      	str	r1, [sp, #4]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    1806:	20a0      	movs	r0, #160	; 0xa0
    1808:	0140      	lsls	r0, r0, #5
    180a:	47a8      	blx	r5
    180c:	3e01      	subs	r6, #1
    180e:	b2f6      	uxtb	r6, r6
			timeout--;
		} else {
			break;
		}

	} while (timeout);
    1810:	2e00      	cmp	r6, #0
    1812:	d1de      	bne.n	17d2 <chip_deinit+0x62>
    1814:	e000      	b.n	1818 <chip_deinit+0xa8>
		M2M_ERR("Error while writing reg\n");
		return ret;
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1816:	2000      	movs	r0, #0
    1818:	b240      	sxtb	r0, r0
		}

	} while (timeout);

	return ret;
}
    181a:	b003      	add	sp, #12
    181c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    181e:	46c0      	nop			; (mov r8, r8)
    1820:	00001931 	.word	0x00001931
    1824:	0000a28c 	.word	0x0000a28c
    1828:	0000a8f4 	.word	0x0000a8f4
    182c:	0000020f 	.word	0x0000020f
    1830:	00008bed 	.word	0x00008bed
    1834:	0000a86c 	.word	0x0000a86c
    1838:	00008d0d 	.word	0x00008d0d
    183c:	00008c21 	.word	0x00008c21
    1840:	fffffbff 	.word	0xfffffbff
    1844:	0000193d 	.word	0x0000193d
    1848:	00000215 	.word	0x00000215
    184c:	0000a884 	.word	0x0000a884
    1850:	0000a89c 	.word	0x0000a89c

00001854 <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    1854:	b570      	push	{r4, r5, r6, lr}
    1856:	b084      	sub	sp, #16
    1858:	1c06      	adds	r6, r0, #0
    185a:	1c0d      	adds	r5, r1, #0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];

	ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &u32RegValue);
    185c:	4814      	ldr	r0, [pc, #80]	; (18b0 <nmi_get_otp_mac_address+0x5c>)
    185e:	a903      	add	r1, sp, #12
    1860:	4b14      	ldr	r3, [pc, #80]	; (18b4 <nmi_get_otp_mac_address+0x60>)
    1862:	4798      	blx	r3
    1864:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    1866:	d11b      	bne.n	18a0 <nmi_get_otp_mac_address+0x4c>

	if(!EFUSED_MAC(u32RegValue)) {
    1868:	9803      	ldr	r0, [sp, #12]
    186a:	0c03      	lsrs	r3, r0, #16
    186c:	d105      	bne.n	187a <nmi_get_otp_mac_address+0x26>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
    186e:	1c30      	adds	r0, r6, #0
    1870:	2100      	movs	r1, #0
    1872:	2206      	movs	r2, #6
    1874:	4b10      	ldr	r3, [pc, #64]	; (18b8 <nmi_get_otp_mac_address+0x64>)
    1876:	4798      	blx	r3
		goto _EXIT_ERR;
    1878:	e012      	b.n	18a0 <nmi_get_otp_mac_address+0x4c>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
    187a:	0c00      	lsrs	r0, r0, #16
    187c:	9003      	str	r0, [sp, #12]
	nm_read_block(u32RegValue|0x30000, mac, 6);
    187e:	23c0      	movs	r3, #192	; 0xc0
    1880:	029b      	lsls	r3, r3, #10
    1882:	4318      	orrs	r0, r3
    1884:	a901      	add	r1, sp, #4
    1886:	2206      	movs	r2, #6
    1888:	4b0c      	ldr	r3, [pc, #48]	; (18bc <nmi_get_otp_mac_address+0x68>)
    188a:	4798      	blx	r3
	m2m_memcpy(pu8MacAddr,mac,6);
    188c:	1c30      	adds	r0, r6, #0
    188e:	a901      	add	r1, sp, #4
    1890:	2206      	movs	r2, #6
    1892:	4b0b      	ldr	r3, [pc, #44]	; (18c0 <nmi_get_otp_mac_address+0x6c>)
    1894:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    1896:	2d00      	cmp	r5, #0
    1898:	d006      	beq.n	18a8 <nmi_get_otp_mac_address+0x54>
    189a:	2301      	movs	r3, #1
    189c:	702b      	strb	r3, [r5, #0]
    189e:	e003      	b.n	18a8 <nmi_get_otp_mac_address+0x54>
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    18a0:	2d00      	cmp	r5, #0
    18a2:	d001      	beq.n	18a8 <nmi_get_otp_mac_address+0x54>
    18a4:	2300      	movs	r3, #0
    18a6:	702b      	strb	r3, [r5, #0]
	return ret;
}
    18a8:	1c20      	adds	r0, r4, #0
    18aa:	b004      	add	sp, #16
    18ac:	bd70      	pop	{r4, r5, r6, pc}
    18ae:	46c0      	nop			; (mov r8, r8)
    18b0:	0000149c 	.word	0x0000149c
    18b4:	00001931 	.word	0x00001931
    18b8:	00000539 	.word	0x00000539
    18bc:	00001949 	.word	0x00001949
    18c0:	00000525 	.word	0x00000525

000018c4 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    18c4:	b530      	push	{r4, r5, lr}
    18c6:	b085      	sub	sp, #20
    18c8:	1c05      	adds	r5, r0, #0
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];

	ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &u32RegValue);
    18ca:	480c      	ldr	r0, [pc, #48]	; (18fc <nmi_get_mac_address+0x38>)
    18cc:	a903      	add	r1, sp, #12
    18ce:	4b0c      	ldr	r3, [pc, #48]	; (1900 <nmi_get_mac_address+0x3c>)
    18d0:	4798      	blx	r3
    18d2:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    18d4:	d10f      	bne.n	18f6 <nmi_get_mac_address+0x32>

	u32RegValue &=0x0000ffff;
    18d6:	9b03      	ldr	r3, [sp, #12]
    18d8:	0418      	lsls	r0, r3, #16
    18da:	0c00      	lsrs	r0, r0, #16
    18dc:	9003      	str	r0, [sp, #12]
	nm_read_block(u32RegValue|0x30000, mac, 6);
    18de:	23c0      	movs	r3, #192	; 0xc0
    18e0:	029b      	lsls	r3, r3, #10
    18e2:	4318      	orrs	r0, r3
    18e4:	a901      	add	r1, sp, #4
    18e6:	2206      	movs	r2, #6
    18e8:	4b06      	ldr	r3, [pc, #24]	; (1904 <nmi_get_mac_address+0x40>)
    18ea:	4798      	blx	r3
	m2m_memcpy(pu8MacAddr, mac, 6);
    18ec:	1c28      	adds	r0, r5, #0
    18ee:	a901      	add	r1, sp, #4
    18f0:	2206      	movs	r2, #6
    18f2:	4b05      	ldr	r3, [pc, #20]	; (1908 <nmi_get_mac_address+0x44>)
    18f4:	4798      	blx	r3

	return ret;

_EXIT_ERR:
	return ret;
    18f6:	1c20      	adds	r0, r4, #0
    18f8:	b005      	add	sp, #20
    18fa:	bd30      	pop	{r4, r5, pc}
    18fc:	0000149c 	.word	0x0000149c
    1900:	00001931 	.word	0x00001931
    1904:	00001949 	.word	0x00001949
    1908:	00000525 	.word	0x00000525

0000190c <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    190c:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    190e:	4b01      	ldr	r3, [pc, #4]	; (1914 <nm_bus_iface_init+0x8>)
    1910:	4798      	blx	r3

	return ret;
}
    1912:	bd08      	pop	{r3, pc}
    1914:	000002b9 	.word	0x000002b9

00001918 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1918:	b508      	push	{r3, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    191a:	4b01      	ldr	r3, [pc, #4]	; (1920 <nm_bus_iface_deinit+0x8>)
    191c:	4798      	blx	r3

	return ret;
}
    191e:	bd08      	pop	{r3, pc}
    1920:	000004e9 	.word	0x000004e9

00001924 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    1924:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    1926:	4b01      	ldr	r3, [pc, #4]	; (192c <nm_read_reg+0x8>)
    1928:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    192a:	bd08      	pop	{r3, pc}
    192c:	00002211 	.word	0x00002211

00001930 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1930:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1932:	4b01      	ldr	r3, [pc, #4]	; (1938 <nm_read_reg_with_ret+0x8>)
    1934:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1936:	bd08      	pop	{r3, pc}
    1938:	00002225 	.word	0x00002225

0000193c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    193c:	b508      	push	{r3, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    193e:	4b01      	ldr	r3, [pc, #4]	; (1944 <nm_write_reg+0x8>)
    1940:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1942:	bd08      	pop	{r3, pc}
    1944:	0000223d 	.word	0x0000223d

00001948 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1948:	b5f0      	push	{r4, r5, r6, r7, lr}
    194a:	464f      	mov	r7, r9
    194c:	4646      	mov	r6, r8
    194e:	b4c0      	push	{r6, r7}
    1950:	b083      	sub	sp, #12
    1952:	1c06      	adds	r6, r0, #0
    1954:	4689      	mov	r9, r1
    1956:	1c15      	adds	r5, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1958:	4b14      	ldr	r3, [pc, #80]	; (19ac <nm_read_block+0x64>)
    195a:	881b      	ldrh	r3, [r3, #0]
    195c:	3b08      	subs	r3, #8
    195e:	b29b      	uxth	r3, r3
    1960:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1962:	1c1c      	adds	r4, r3, #0
    1964:	429a      	cmp	r2, r3
    1966:	d807      	bhi.n	1978 <nm_read_block+0x30>
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    1968:	2700      	movs	r7, #0

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    196a:	1c39      	adds	r1, r7, #0
    196c:	4449      	add	r1, r9
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    196e:	b2aa      	uxth	r2, r5
    1970:	1c30      	adds	r0, r6, #0
    1972:	4b0f      	ldr	r3, [pc, #60]	; (19b0 <nm_read_block+0x68>)
    1974:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    1976:	e012      	b.n	199e <nm_read_block+0x56>
    1978:	9b01      	ldr	r3, [sp, #4]
    197a:	1ad5      	subs	r5, r2, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    197c:	2700      	movs	r7, #0
static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    197e:	4b0c      	ldr	r3, [pc, #48]	; (19b0 <nm_read_block+0x68>)
    1980:	4698      	mov	r8, r3
    1982:	464b      	mov	r3, r9
    1984:	19d9      	adds	r1, r3, r7
    1986:	1c30      	adds	r0, r6, #0
    1988:	9a01      	ldr	r2, [sp, #4]
    198a:	47c0      	blx	r8
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    198c:	2800      	cmp	r0, #0
    198e:	d106      	bne.n	199e <nm_read_block+0x56>
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    1990:	193f      	adds	r7, r7, r4
			u32Addr += u16MaxTrxSz;
    1992:	1936      	adds	r6, r6, r4
    1994:	1b2b      	subs	r3, r5, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1996:	42ac      	cmp	r4, r5
    1998:	d2e7      	bcs.n	196a <nm_read_block+0x22>
    199a:	1c1d      	adds	r5, r3, #0
    199c:	e7f1      	b.n	1982 <nm_read_block+0x3a>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    199e:	b240      	sxtb	r0, r0
}
    19a0:	b003      	add	sp, #12
    19a2:	bc0c      	pop	{r2, r3}
    19a4:	4690      	mov	r8, r2
    19a6:	4699      	mov	r9, r3
    19a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	20000008 	.word	0x20000008
    19b0:	00002379 	.word	0x00002379

000019b4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    19b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19b6:	464f      	mov	r7, r9
    19b8:	4646      	mov	r6, r8
    19ba:	b4c0      	push	{r6, r7}
    19bc:	b083      	sub	sp, #12
    19be:	1c06      	adds	r6, r0, #0
    19c0:	4689      	mov	r9, r1
    19c2:	1c15      	adds	r5, r2, #0
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    19c4:	4b14      	ldr	r3, [pc, #80]	; (1a18 <nm_write_block+0x64>)
    19c6:	881b      	ldrh	r3, [r3, #0]
    19c8:	3b08      	subs	r3, #8
    19ca:	b29b      	uxth	r3, r3
    19cc:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19ce:	1c1c      	adds	r4, r3, #0
    19d0:	429a      	cmp	r2, r3
    19d2:	d807      	bhi.n	19e4 <nm_write_block+0x30>
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
	uint32 off = 0;
    19d4:	2700      	movs	r7, #0

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    19d6:	1c39      	adds	r1, r7, #0
    19d8:	4449      	add	r1, r9
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    19da:	b2aa      	uxth	r2, r5
    19dc:	1c30      	adds	r0, r6, #0
    19de:	4b0f      	ldr	r3, [pc, #60]	; (1a1c <nm_write_block+0x68>)
    19e0:	4798      	blx	r3
	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
			break;
    19e2:	e012      	b.n	1a0a <nm_write_block+0x56>
    19e4:	9b01      	ldr	r3, [sp, #4]
    19e6:	1ad5      	subs	r5, r2, r3
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19e8:	2700      	movs	r7, #0
static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    19ea:	4b0c      	ldr	r3, [pc, #48]	; (1a1c <nm_write_block+0x68>)
    19ec:	4698      	mov	r8, r3
    19ee:	464b      	mov	r3, r9
    19f0:	19d9      	adds	r1, r3, r7
    19f2:	1c30      	adds	r0, r6, #0
    19f4:	9a01      	ldr	r2, [sp, #4]
    19f6:	47c0      	blx	r8
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    19f8:	2800      	cmp	r0, #0
    19fa:	d106      	bne.n	1a0a <nm_write_block+0x56>
			u32Sz -= u16MaxTrxSz;
			off += u16MaxTrxSz;
    19fc:	193f      	adds	r7, r7, r4
			u32Addr += u16MaxTrxSz;
    19fe:	1936      	adds	r6, r6, r4
    1a00:	1b2b      	subs	r3, r5, r4
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1a02:	42ac      	cmp	r4, r5
    1a04:	d2e7      	bcs.n	19d6 <nm_write_block+0x22>
    1a06:	1c1d      	adds	r5, r3, #0
    1a08:	e7f1      	b.n	19ee <nm_write_block+0x3a>
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1a0a:	b240      	sxtb	r0, r0
}
    1a0c:	b003      	add	sp, #12
    1a0e:	bc0c      	pop	{r2, r3}
    1a10:	4690      	mov	r8, r2
    1a12:	4699      	mov	r9, r3
    1a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	20000008 	.word	0x20000008
    1a1c:	00002451 	.word	0x00002451

00001a20 <nm_get_firmware_info>:
*   @author		Ahmad.Mohammad.Yahya
*   @date		27 MARCH 2013
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    1a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a22:	b083      	sub	sp, #12
    1a24:	1c04      	adds	r4, r0, #0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1a26:	2300      	movs	r3, #0
    1a28:	9301      	str	r3, [sp, #4]
	sint8	ret = M2M_SUCCESS;

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    1a2a:	481d      	ldr	r0, [pc, #116]	; (1aa0 <nm_get_firmware_info+0x80>)
    1a2c:	a901      	add	r1, sp, #4
    1a2e:	4b1d      	ldr	r3, [pc, #116]	; (1aa4 <nm_get_firmware_info+0x84>)
    1a30:	4798      	blx	r3
    1a32:	1c05      	adds	r5, r0, #0

	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    1a34:	9a01      	ldr	r2, [sp, #4]
    1a36:	0c11      	lsrs	r1, r2, #16
    1a38:	b28b      	uxth	r3, r1
    1a3a:	0a18      	lsrs	r0, r3, #8
    1a3c:	70e0      	strb	r0, [r4, #3]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    1a3e:	091b      	lsrs	r3, r3, #4
    1a40:	260f      	movs	r6, #15
    1a42:	4033      	ands	r3, r6
    1a44:	7123      	strb	r3, [r4, #4]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    1a46:	4031      	ands	r1, r6
    1a48:	7161      	strb	r1, [r4, #5]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    1a4a:	b293      	uxth	r3, r2
    1a4c:	0a19      	lsrs	r1, r3, #8
    1a4e:	7021      	strb	r1, [r4, #0]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    1a50:	091b      	lsrs	r3, r3, #4
    1a52:	4033      	ands	r3, r6
    1a54:	7063      	strb	r3, [r4, #1]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    1a56:	4032      	ands	r2, r6
    1a58:	70a2      	strb	r2, [r4, #2]
	M2mRev->u32Chipid	= nmi_get_chipid();
    1a5a:	4b13      	ldr	r3, [pc, #76]	; (1aa8 <nm_get_firmware_info+0x88>)
    1a5c:	4798      	blx	r3
    1a5e:	61e0      	str	r0, [r4, #28]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    1a60:	7823      	ldrb	r3, [r4, #0]
    1a62:	021a      	lsls	r2, r3, #8
    1a64:	78a3      	ldrb	r3, [r4, #2]
    1a66:	4033      	ands	r3, r6
    1a68:	4313      	orrs	r3, r2
    1a6a:	7860      	ldrb	r0, [r4, #1]
    1a6c:	0100      	lsls	r0, r0, #4
    1a6e:	27ff      	movs	r7, #255	; 0xff
    1a70:	4038      	ands	r0, r7
    1a72:	4303      	orrs	r3, r0
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    1a74:	78e0      	ldrb	r0, [r4, #3]
    1a76:	0200      	lsls	r0, r0, #8
    1a78:	7962      	ldrb	r2, [r4, #5]
    1a7a:	4016      	ands	r6, r2
    1a7c:	4306      	orrs	r6, r0
    1a7e:	7921      	ldrb	r1, [r4, #4]
    1a80:	0109      	lsls	r1, r1, #4
    1a82:	4039      	ands	r1, r7
	if(curr_drv_ver <  min_req_drv_ver) {
    1a84:	1c32      	adds	r2, r6, #0
    1a86:	430a      	orrs	r2, r1
    1a88:	4908      	ldr	r1, [pc, #32]	; (1aac <nm_get_firmware_info+0x8c>)
    1a8a:	428a      	cmp	r2, r1
    1a8c:	d900      	bls.n	1a90 <nm_get_firmware_info+0x70>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    1a8e:	25f3      	movs	r5, #243	; 0xf3
	}
	if(curr_drv_ver >  curr_firm_ver) {
    1a90:	4a07      	ldr	r2, [pc, #28]	; (1ab0 <nm_get_firmware_info+0x90>)
    1a92:	4293      	cmp	r3, r2
    1a94:	d800      	bhi.n	1a98 <nm_get_firmware_info+0x78>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    1a96:	25f3      	movs	r5, #243	; 0xf3
	}
	return ret;
    1a98:	b268      	sxtb	r0, r5
}
    1a9a:	b003      	add	sp, #12
    1a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	000207ac 	.word	0x000207ac
    1aa4:	00001931 	.word	0x00001931
    1aa8:	00001585 	.word	0x00001585
    1aac:	00001330 	.word	0x00001330
    1ab0:	0000132f 	.word	0x0000132f

00001ab4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    1ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab6:	b089      	sub	sp, #36	; 0x24
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
	
	if(NULL != arg) {
    1ab8:	2800      	cmp	r0, #0
    1aba:	d006      	beq.n	1aca <nm_drv_init+0x16>
		if(M2M_WIFI_MODE_CONFIG == *((uint8 *)arg)) {
    1abc:	7803      	ldrb	r3, [r0, #0]
			u8Mode = M2M_WIFI_MODE_CONFIG;
    1abe:	3b02      	subs	r3, #2
    1ac0:	1e5a      	subs	r2, r3, #1
    1ac2:	4193      	sbcs	r3, r2
    1ac4:	2002      	movs	r0, #2
    1ac6:	1ac5      	subs	r5, r0, r3
    1ac8:	e000      	b.n	1acc <nm_drv_init+0x18>
*/
sint8 nm_drv_init(void * arg)
{
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
    1aca:	2501      	movs	r5, #1
		}
	} else {
		/*continue running*/
	}
	
	ret = nm_bus_iface_init(NULL);
    1acc:	2000      	movs	r0, #0
    1ace:	4a3a      	ldr	r2, [pc, #232]	; (1bb8 <nm_drv_init+0x104>)
    1ad0:	4790      	blx	r2
    1ad2:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1ad4:	d00b      	beq.n	1aee <nm_drv_init+0x3a>
		M2M_ERR("[nmi start]: fail init bus\n");
    1ad6:	4839      	ldr	r0, [pc, #228]	; (1bbc <nm_drv_init+0x108>)
    1ad8:	4939      	ldr	r1, [pc, #228]	; (1bc0 <nm_drv_init+0x10c>)
    1ada:	22a0      	movs	r2, #160	; 0xa0
    1adc:	4b39      	ldr	r3, [pc, #228]	; (1bc4 <nm_drv_init+0x110>)
    1ade:	4798      	blx	r3
    1ae0:	4839      	ldr	r0, [pc, #228]	; (1bc8 <nm_drv_init+0x114>)
    1ae2:	4b3a      	ldr	r3, [pc, #232]	; (1bcc <nm_drv_init+0x118>)
    1ae4:	4798      	blx	r3
    1ae6:	200d      	movs	r0, #13
    1ae8:	4b39      	ldr	r3, [pc, #228]	; (1bd0 <nm_drv_init+0x11c>)
    1aea:	4798      	blx	r3
		goto ERR1;
    1aec:	e060      	b.n	1bb0 <nm_drv_init+0xfc>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1aee:	4839      	ldr	r0, [pc, #228]	; (1bd4 <nm_drv_init+0x120>)
    1af0:	4c34      	ldr	r4, [pc, #208]	; (1bc4 <nm_drv_init+0x110>)
    1af2:	47a0      	blx	r4
    1af4:	4b38      	ldr	r3, [pc, #224]	; (1bd8 <nm_drv_init+0x124>)
    1af6:	4798      	blx	r3
    1af8:	1c01      	adds	r1, r0, #0
    1afa:	4838      	ldr	r0, [pc, #224]	; (1bdc <nm_drv_init+0x128>)
    1afc:	47a0      	blx	r4
    1afe:	200d      	movs	r0, #13
    1b00:	4b33      	ldr	r3, [pc, #204]	; (1bd0 <nm_drv_init+0x11c>)
    1b02:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1b04:	4b36      	ldr	r3, [pc, #216]	; (1be0 <nm_drv_init+0x12c>)
    1b06:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    1b08:	1c28      	adds	r0, r5, #0
    1b0a:	4b36      	ldr	r3, [pc, #216]	; (1be4 <nm_drv_init+0x130>)
    1b0c:	4798      	blx	r3
    1b0e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b10:	d14c      	bne.n	1bac <nm_drv_init+0xf8>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1b12:	1c28      	adds	r0, r5, #0
    1b14:	4b34      	ldr	r3, [pc, #208]	; (1be8 <nm_drv_init+0x134>)
    1b16:	4798      	blx	r3
    1b18:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b1a:	d147      	bne.n	1bac <nm_drv_init+0xf8>
		goto ERR2;
	}
	
	if(M2M_WIFI_MODE_CONFIG == u8Mode) {
    1b1c:	2d02      	cmp	r5, #2
    1b1e:	d047      	beq.n	1bb0 <nm_drv_init+0xfc>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    1b20:	4b32      	ldr	r3, [pc, #200]	; (1bec <nm_drv_init+0x138>)
    1b22:	4798      	blx	r3
    1b24:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b26:	d00b      	beq.n	1b40 <nm_drv_init+0x8c>
		M2M_ERR("failed to enable interrupts..\n");
    1b28:	4824      	ldr	r0, [pc, #144]	; (1bbc <nm_drv_init+0x108>)
    1b2a:	4925      	ldr	r1, [pc, #148]	; (1bc0 <nm_drv_init+0x10c>)
    1b2c:	22d8      	movs	r2, #216	; 0xd8
    1b2e:	4b25      	ldr	r3, [pc, #148]	; (1bc4 <nm_drv_init+0x110>)
    1b30:	4798      	blx	r3
    1b32:	482f      	ldr	r0, [pc, #188]	; (1bf0 <nm_drv_init+0x13c>)
    1b34:	4b25      	ldr	r3, [pc, #148]	; (1bcc <nm_drv_init+0x118>)
    1b36:	4798      	blx	r3
    1b38:	200d      	movs	r0, #13
    1b3a:	4b25      	ldr	r3, [pc, #148]	; (1bd0 <nm_drv_init+0x11c>)
    1b3c:	4798      	blx	r3
		goto ERR2;
    1b3e:	e035      	b.n	1bac <nm_drv_init+0xf8>
	}
	
	ret = nm_get_firmware_info(&strtmp);
    1b40:	4668      	mov	r0, sp
    1b42:	4b2c      	ldr	r3, [pc, #176]	; (1bf4 <nm_drv_init+0x140>)
    1b44:	4798      	blx	r3
    1b46:	1c04      	adds	r4, r0, #0

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    1b48:	4f22      	ldr	r7, [pc, #136]	; (1bd4 <nm_drv_init+0x120>)
    1b4a:	1c38      	adds	r0, r7, #0
    1b4c:	4e1d      	ldr	r6, [pc, #116]	; (1bc4 <nm_drv_init+0x110>)
    1b4e:	47b0      	blx	r6
    1b50:	466b      	mov	r3, sp
    1b52:	7819      	ldrb	r1, [r3, #0]
    1b54:	785a      	ldrb	r2, [r3, #1]
    1b56:	789b      	ldrb	r3, [r3, #2]
    1b58:	4827      	ldr	r0, [pc, #156]	; (1bf8 <nm_drv_init+0x144>)
    1b5a:	47b0      	blx	r6
    1b5c:	200d      	movs	r0, #13
    1b5e:	4d1c      	ldr	r5, [pc, #112]	; (1bd0 <nm_drv_init+0x11c>)
    1b60:	47a8      	blx	r5
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    1b62:	1c38      	adds	r0, r7, #0
    1b64:	47b0      	blx	r6
    1b66:	466b      	mov	r3, sp
    1b68:	78d9      	ldrb	r1, [r3, #3]
    1b6a:	791a      	ldrb	r2, [r3, #4]
    1b6c:	795b      	ldrb	r3, [r3, #5]
    1b6e:	4823      	ldr	r0, [pc, #140]	; (1bfc <nm_drv_init+0x148>)
    1b70:	47b0      	blx	r6
    1b72:	200d      	movs	r0, #13
    1b74:	47a8      	blx	r5
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    1b76:	1c38      	adds	r0, r7, #0
    1b78:	47b0      	blx	r6
    1b7a:	4821      	ldr	r0, [pc, #132]	; (1c00 <nm_drv_init+0x14c>)
    1b7c:	2113      	movs	r1, #19
    1b7e:	2203      	movs	r2, #3
    1b80:	2300      	movs	r3, #0
    1b82:	47b0      	blx	r6
    1b84:	200d      	movs	r0, #13
    1b86:	47a8      	blx	r5

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
    1b88:	466b      	mov	r3, sp
    1b8a:	881a      	ldrh	r2, [r3, #0]
    1b8c:	4b1d      	ldr	r3, [pc, #116]	; (1c04 <nm_drv_init+0x150>)
    1b8e:	429a      	cmp	r2, r3
    1b90:	d00e      	beq.n	1bb0 <nm_drv_init+0xfc>
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
		M2M_ERR("Firmware version mismatch!\n");
    1b92:	480a      	ldr	r0, [pc, #40]	; (1bbc <nm_drv_init+0x108>)
    1b94:	490a      	ldr	r1, [pc, #40]	; (1bc0 <nm_drv_init+0x10c>)
    1b96:	22e6      	movs	r2, #230	; 0xe6
    1b98:	4b0a      	ldr	r3, [pc, #40]	; (1bc4 <nm_drv_init+0x110>)
    1b9a:	4798      	blx	r3
    1b9c:	481a      	ldr	r0, [pc, #104]	; (1c08 <nm_drv_init+0x154>)
    1b9e:	4b0b      	ldr	r3, [pc, #44]	; (1bcc <nm_drv_init+0x118>)
    1ba0:	4798      	blx	r3
    1ba2:	200d      	movs	r0, #13
    1ba4:	4b0a      	ldr	r3, [pc, #40]	; (1bd0 <nm_drv_init+0x11c>)
    1ba6:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);

	if(strtmp.u8FirmwareMajor != M2M_DRIVER_VERSION_MAJOR_NO
			|| strtmp.u8FirmwareMinor != M2M_DRIVER_VERSION_MINOR_NO)
	{
		ret = M2M_ERR_FW_VER_MISMATCH;
    1ba8:	24f3      	movs	r4, #243	; 0xf3
    1baa:	e001      	b.n	1bb0 <nm_drv_init+0xfc>
		M2M_ERR("Firmware version mismatch!\n");
	}
	return ret;
ERR2:
	nm_bus_iface_deinit();
    1bac:	4b17      	ldr	r3, [pc, #92]	; (1c0c <nm_drv_init+0x158>)
    1bae:	4798      	blx	r3
    1bb0:	b260      	sxtb	r0, r4
ERR1:
	return ret;
}
    1bb2:	b009      	add	sp, #36	; 0x24
    1bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bb6:	46c0      	nop			; (mov r8, r8)
    1bb8:	0000190d 	.word	0x0000190d
    1bbc:	0000a28c 	.word	0x0000a28c
    1bc0:	0000a900 	.word	0x0000a900
    1bc4:	00008bed 	.word	0x00008bed
    1bc8:	0000a91c 	.word	0x0000a91c
    1bcc:	00008d0d 	.word	0x00008d0d
    1bd0:	00008c21 	.word	0x00008c21
    1bd4:	0000a574 	.word	0x0000a574
    1bd8:	00001585 	.word	0x00001585
    1bdc:	0000a938 	.word	0x0000a938
    1be0:	00002255 	.word	0x00002255
    1be4:	00001631 	.word	0x00001631
    1be8:	000016f9 	.word	0x000016f9
    1bec:	00001519 	.word	0x00001519
    1bf0:	0000a948 	.word	0x0000a948
    1bf4:	00001a21 	.word	0x00001a21
    1bf8:	0000a968 	.word	0x0000a968
    1bfc:	0000a984 	.word	0x0000a984
    1c00:	0000a9a0 	.word	0x0000a9a0
    1c04:	00000313 	.word	0x00000313
    1c08:	0000a9bc 	.word	0x0000a9bc
    1c0c:	00001919 	.word	0x00001919

00001c10 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1c10:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1c12:	4b12      	ldr	r3, [pc, #72]	; (1c5c <nm_drv_deinit+0x4c>)
    1c14:	4798      	blx	r3
    1c16:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c18:	d00b      	beq.n	1c32 <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1c1a:	4811      	ldr	r0, [pc, #68]	; (1c60 <nm_drv_deinit+0x50>)
    1c1c:	4911      	ldr	r1, [pc, #68]	; (1c64 <nm_drv_deinit+0x54>)
    1c1e:	22fc      	movs	r2, #252	; 0xfc
    1c20:	4b11      	ldr	r3, [pc, #68]	; (1c68 <nm_drv_deinit+0x58>)
    1c22:	4798      	blx	r3
    1c24:	4811      	ldr	r0, [pc, #68]	; (1c6c <nm_drv_deinit+0x5c>)
    1c26:	4b12      	ldr	r3, [pc, #72]	; (1c70 <nm_drv_deinit+0x60>)
    1c28:	4798      	blx	r3
    1c2a:	200d      	movs	r0, #13
    1c2c:	4b11      	ldr	r3, [pc, #68]	; (1c74 <nm_drv_deinit+0x64>)
    1c2e:	4798      	blx	r3
		goto ERR1;
    1c30:	e012      	b.n	1c58 <nm_drv_deinit+0x48>
	}

	ret = nm_bus_iface_deinit();
    1c32:	4b11      	ldr	r3, [pc, #68]	; (1c78 <nm_drv_deinit+0x68>)
    1c34:	4798      	blx	r3
    1c36:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c38:	d00c      	beq.n	1c54 <nm_drv_deinit+0x44>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1c3a:	4809      	ldr	r0, [pc, #36]	; (1c60 <nm_drv_deinit+0x50>)
    1c3c:	4909      	ldr	r1, [pc, #36]	; (1c64 <nm_drv_deinit+0x54>)
    1c3e:	2281      	movs	r2, #129	; 0x81
    1c40:	0052      	lsls	r2, r2, #1
    1c42:	4b09      	ldr	r3, [pc, #36]	; (1c68 <nm_drv_deinit+0x58>)
    1c44:	4798      	blx	r3
    1c46:	480d      	ldr	r0, [pc, #52]	; (1c7c <nm_drv_deinit+0x6c>)
    1c48:	4b09      	ldr	r3, [pc, #36]	; (1c70 <nm_drv_deinit+0x60>)
    1c4a:	4798      	blx	r3
    1c4c:	200d      	movs	r0, #13
    1c4e:	4b09      	ldr	r3, [pc, #36]	; (1c74 <nm_drv_deinit+0x64>)
    1c50:	4798      	blx	r3
		goto ERR1;
    1c52:	e001      	b.n	1c58 <nm_drv_deinit+0x48>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1c54:	4b0a      	ldr	r3, [pc, #40]	; (1c80 <nm_drv_deinit+0x70>)
    1c56:	4798      	blx	r3
#endif

ERR1:
	return ret;
    1c58:	b260      	sxtb	r0, r4
}
    1c5a:	bd10      	pop	{r4, pc}
    1c5c:	00001771 	.word	0x00001771
    1c60:	0000a28c 	.word	0x0000a28c
    1c64:	0000a90c 	.word	0x0000a90c
    1c68:	00008bed 	.word	0x00008bed
    1c6c:	0000a9d8 	.word	0x0000a9d8
    1c70:	00008d0d 	.word	0x00008d0d
    1c74:	00008c21 	.word	0x00008c21
    1c78:	00001919 	.word	0x00001919
    1c7c:	0000a9f8 	.word	0x0000a9f8
    1c80:	00002201 	.word	0x00002201

00001c84 <nmi_spi_read>:
#endif

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    1c84:	b500      	push	{lr}
    1c86:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    1c88:	ab01      	add	r3, sp, #4
    1c8a:	2200      	movs	r2, #0
    1c8c:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1c8e:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1c90:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1c92:	2003      	movs	r0, #3
    1c94:	1c19      	adds	r1, r3, #0
    1c96:	4b02      	ldr	r3, [pc, #8]	; (1ca0 <nmi_spi_read+0x1c>)
    1c98:	4798      	blx	r3
}
    1c9a:	b005      	add	sp, #20
    1c9c:	bd00      	pop	{pc}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	000003b5 	.word	0x000003b5

00001ca4 <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ca6:	b083      	sub	sp, #12
    1ca8:	1e06      	subs	r6, r0, #0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1caa:	2ecf      	cmp	r6, #207	; 0xcf
    1cac:	d004      	beq.n	1cb8 <spi_cmd_rsp+0x14>
    1cae:	1c03      	adds	r3, r0, #0
    1cb0:	333b      	adds	r3, #59	; 0x3b
    1cb2:	b2db      	uxtb	r3, r3
    1cb4:	2b01      	cmp	r3, #1
    1cb6:	d807      	bhi.n	1cc8 <spi_cmd_rsp+0x24>
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1cb8:	466b      	mov	r3, sp
    1cba:	1dd8      	adds	r0, r3, #7
    1cbc:	2101      	movs	r1, #1
    1cbe:	4b24      	ldr	r3, [pc, #144]	; (1d50 <spi_cmd_rsp+0xac>)
    1cc0:	4798      	blx	r3
			result = N_FAIL;
    1cc2:	2300      	movs	r3, #0
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
		 (cmd == CMD_TERMINATE) ||
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1cc4:	2800      	cmp	r0, #0
    1cc6:	d140      	bne.n	1d4a <spi_cmd_rsp+0xa6>

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1cc8:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1cca:	466b      	mov	r3, sp
    1ccc:	1ddd      	adds	r5, r3, #7
    1cce:	4f20      	ldr	r7, [pc, #128]	; (1d50 <spi_cmd_rsp+0xac>)
    1cd0:	1c28      	adds	r0, r5, #0
    1cd2:	2101      	movs	r1, #1
    1cd4:	47b8      	blx	r7
    1cd6:	2800      	cmp	r0, #0
    1cd8:	d00d      	beq.n	1cf6 <spi_cmd_rsp+0x52>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1cda:	481e      	ldr	r0, [pc, #120]	; (1d54 <spi_cmd_rsp+0xb0>)
    1cdc:	491e      	ldr	r1, [pc, #120]	; (1d58 <spi_cmd_rsp+0xb4>)
    1cde:	2240      	movs	r2, #64	; 0x40
    1ce0:	32ff      	adds	r2, #255	; 0xff
    1ce2:	4b1e      	ldr	r3, [pc, #120]	; (1d5c <spi_cmd_rsp+0xb8>)
    1ce4:	4798      	blx	r3
    1ce6:	481e      	ldr	r0, [pc, #120]	; (1d60 <spi_cmd_rsp+0xbc>)
    1ce8:	4b1e      	ldr	r3, [pc, #120]	; (1d64 <spi_cmd_rsp+0xc0>)
    1cea:	4798      	blx	r3
    1cec:	200d      	movs	r0, #13
    1cee:	4b1e      	ldr	r3, [pc, #120]	; (1d68 <spi_cmd_rsp+0xc4>)
    1cf0:	4798      	blx	r3
			result = N_FAIL;
    1cf2:	2300      	movs	r3, #0
			goto _fail_;
    1cf4:	e029      	b.n	1d4a <spi_cmd_rsp+0xa6>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1cf6:	782b      	ldrb	r3, [r5, #0]
    1cf8:	42b3      	cmp	r3, r6
    1cfa:	d005      	beq.n	1d08 <spi_cmd_rsp+0x64>
    1cfc:	3c01      	subs	r4, #1
    1cfe:	b2e4      	uxtb	r4, r4
    1d00:	2c00      	cmp	r4, #0
    1d02:	d1e5      	bne.n	1cd0 <spi_cmd_rsp+0x2c>
    1d04:	340b      	adds	r4, #11
    1d06:	e000      	b.n	1d0a <spi_cmd_rsp+0x66>
    1d08:	240b      	movs	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = 10;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d0a:	466b      	mov	r3, sp
    1d0c:	1ddd      	adds	r5, r3, #7
    1d0e:	4e10      	ldr	r6, [pc, #64]	; (1d50 <spi_cmd_rsp+0xac>)
    1d10:	1c28      	adds	r0, r5, #0
    1d12:	2101      	movs	r1, #1
    1d14:	47b0      	blx	r6
    1d16:	2800      	cmp	r0, #0
    1d18:	d00d      	beq.n	1d36 <spi_cmd_rsp+0x92>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1d1a:	480e      	ldr	r0, [pc, #56]	; (1d54 <spi_cmd_rsp+0xb0>)
    1d1c:	490e      	ldr	r1, [pc, #56]	; (1d58 <spi_cmd_rsp+0xb4>)
    1d1e:	224e      	movs	r2, #78	; 0x4e
    1d20:	32ff      	adds	r2, #255	; 0xff
    1d22:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <spi_cmd_rsp+0xb8>)
    1d24:	4798      	blx	r3
    1d26:	480e      	ldr	r0, [pc, #56]	; (1d60 <spi_cmd_rsp+0xbc>)
    1d28:	4b0e      	ldr	r3, [pc, #56]	; (1d64 <spi_cmd_rsp+0xc0>)
    1d2a:	4798      	blx	r3
    1d2c:	200d      	movs	r0, #13
    1d2e:	4b0e      	ldr	r3, [pc, #56]	; (1d68 <spi_cmd_rsp+0xc4>)
    1d30:	4798      	blx	r3
			result = N_FAIL;
    1d32:	2300      	movs	r3, #0
			goto _fail_;
    1d34:	e009      	b.n	1d4a <spi_cmd_rsp+0xa6>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1d36:	782b      	ldrb	r3, [r5, #0]
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d005      	beq.n	1d48 <spi_cmd_rsp+0xa4>
    1d3c:	3c01      	subs	r4, #1
    1d3e:	b2e4      	uxtb	r4, r4
    1d40:	2c00      	cmp	r4, #0
    1d42:	d1e5      	bne.n	1d10 <spi_cmd_rsp+0x6c>
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
	uint8 rsp;
	sint8 result = N_OK;
    1d44:	2301      	movs	r3, #1
    1d46:	e000      	b.n	1d4a <spi_cmd_rsp+0xa6>
    1d48:	2301      	movs	r3, #1
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));

_fail_:

	return result;
    1d4a:	b258      	sxtb	r0, r3
}
    1d4c:	b003      	add	sp, #12
    1d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d50:	00001c85 	.word	0x00001c85
    1d54:	0000a28c 	.word	0x0000a28c
    1d58:	0000aa78 	.word	0x0000aa78
    1d5c:	00008bed 	.word	0x00008bed
    1d60:	0000aaa0 	.word	0x0000aaa0
    1d64:	00008d0d 	.word	0x00008d0d
    1d68:	00008c21 	.word	0x00008c21

00001d6c <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d6e:	465f      	mov	r7, fp
    1d70:	4656      	mov	r6, sl
    1d72:	464d      	mov	r5, r9
    1d74:	4644      	mov	r4, r8
    1d76:	b4f0      	push	{r4, r5, r6, r7}
    1d78:	b085      	sub	sp, #20
    1d7a:	4682      	mov	sl, r0
    1d7c:	4689      	mov	r9, r1
    1d7e:	4693      	mov	fp, r2
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1d80:	2300      	movs	r3, #0
    1d82:	4698      	mov	r8, r3
		/**
			Data Respnose header
		**/
		retry = 10;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d84:	4f41      	ldr	r7, [pc, #260]	; (1e8c <spi_data_read+0x120>)
	/**
		Data
	**/
	ix = 0;
	do {
		if (sz <= DATA_PKT_SZ)
    1d86:	2380      	movs	r3, #128	; 0x80
    1d88:	019b      	lsls	r3, r3, #6
    1d8a:	4599      	cmp	r9, r3
    1d8c:	d804      	bhi.n	1d98 <spi_data_read+0x2c>
			nbytes = sz;
    1d8e:	464b      	mov	r3, r9
    1d90:	466a      	mov	r2, sp
    1d92:	80d3      	strh	r3, [r2, #6]
    1d94:	88d6      	ldrh	r6, [r2, #6]
    1d96:	e001      	b.n	1d9c <spi_data_read+0x30>
		else
			nbytes = DATA_PKT_SZ;
    1d98:	2680      	movs	r6, #128	; 0x80
    1d9a:	01b6      	lsls	r6, r6, #6

		/**
			Data Respnose header
		**/
		retry = 10;
    1d9c:	240a      	movs	r4, #10
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1d9e:	ab02      	add	r3, sp, #8
    1da0:	1cdd      	adds	r5, r3, #3
    1da2:	1c28      	adds	r0, r5, #0
    1da4:	2101      	movs	r1, #1
    1da6:	47b8      	blx	r7
    1da8:	2800      	cmp	r0, #0
    1daa:	d00d      	beq.n	1dc8 <spi_data_read+0x5c>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1dac:	4838      	ldr	r0, [pc, #224]	; (1e90 <spi_data_read+0x124>)
    1dae:	4939      	ldr	r1, [pc, #228]	; (1e94 <spi_data_read+0x128>)
    1db0:	2270      	movs	r2, #112	; 0x70
    1db2:	32ff      	adds	r2, #255	; 0xff
    1db4:	4b38      	ldr	r3, [pc, #224]	; (1e98 <spi_data_read+0x12c>)
    1db6:	4798      	blx	r3
    1db8:	4838      	ldr	r0, [pc, #224]	; (1e9c <spi_data_read+0x130>)
    1dba:	4b39      	ldr	r3, [pc, #228]	; (1ea0 <spi_data_read+0x134>)
    1dbc:	4798      	blx	r3
    1dbe:	200d      	movs	r0, #13
    1dc0:	4b38      	ldr	r3, [pc, #224]	; (1ea4 <spi_data_read+0x138>)
    1dc2:	4798      	blx	r3
    1dc4:	2000      	movs	r0, #0
    1dc6:	e058      	b.n	1e7a <spi_data_read+0x10e>
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    1dc8:	782b      	ldrb	r3, [r5, #0]
    1dca:	091b      	lsrs	r3, r3, #4
    1dcc:	2b0f      	cmp	r3, #15
    1dce:	d005      	beq.n	1ddc <spi_data_read+0x70>
    1dd0:	3c01      	subs	r4, #1
    1dd2:	b2a4      	uxth	r4, r4
				break;
		} while (retry--);
    1dd4:	b223      	sxth	r3, r4
    1dd6:	3301      	adds	r3, #1
    1dd8:	d1e3      	bne.n	1da2 <spi_data_read+0x36>
    1dda:	e002      	b.n	1de2 <spi_data_read+0x76>

		if (result == N_FAIL)
			break;

		if (retry <= 0) {
    1ddc:	b224      	sxth	r4, r4
    1dde:	2c00      	cmp	r4, #0
    1de0:	dc0e      	bgt.n	1e00 <spi_data_read+0x94>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    1de2:	482b      	ldr	r0, [pc, #172]	; (1e90 <spi_data_read+0x124>)
    1de4:	492b      	ldr	r1, [pc, #172]	; (1e94 <spi_data_read+0x128>)
    1de6:	227c      	movs	r2, #124	; 0x7c
    1de8:	32ff      	adds	r2, #255	; 0xff
    1dea:	4c2b      	ldr	r4, [pc, #172]	; (1e98 <spi_data_read+0x12c>)
    1dec:	47a0      	blx	r4
    1dee:	ab02      	add	r3, sp, #8
    1df0:	78d9      	ldrb	r1, [r3, #3]
    1df2:	482d      	ldr	r0, [pc, #180]	; (1ea8 <spi_data_read+0x13c>)
    1df4:	47a0      	blx	r4
    1df6:	200d      	movs	r0, #13
    1df8:	4b2a      	ldr	r3, [pc, #168]	; (1ea4 <spi_data_read+0x138>)
    1dfa:	4798      	blx	r3
			result = N_FAIL;
    1dfc:	2000      	movs	r0, #0
			break;
    1dfe:	e03c      	b.n	1e7a <spi_data_read+0x10e>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    1e00:	b2b6      	uxth	r6, r6
    1e02:	4643      	mov	r3, r8
    1e04:	b218      	sxth	r0, r3
    1e06:	4450      	add	r0, sl
    1e08:	1c31      	adds	r1, r6, #0
    1e0a:	4b20      	ldr	r3, [pc, #128]	; (1e8c <spi_data_read+0x120>)
    1e0c:	4798      	blx	r3
    1e0e:	2800      	cmp	r0, #0
    1e10:	d00d      	beq.n	1e2e <spi_data_read+0xc2>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    1e12:	481f      	ldr	r0, [pc, #124]	; (1e90 <spi_data_read+0x124>)
    1e14:	491f      	ldr	r1, [pc, #124]	; (1e94 <spi_data_read+0x128>)
    1e16:	22c2      	movs	r2, #194	; 0xc2
    1e18:	0052      	lsls	r2, r2, #1
    1e1a:	4b1f      	ldr	r3, [pc, #124]	; (1e98 <spi_data_read+0x12c>)
    1e1c:	4798      	blx	r3
    1e1e:	4823      	ldr	r0, [pc, #140]	; (1eac <spi_data_read+0x140>)
    1e20:	4b1f      	ldr	r3, [pc, #124]	; (1ea0 <spi_data_read+0x134>)
    1e22:	4798      	blx	r3
    1e24:	200d      	movs	r0, #13
    1e26:	4b1f      	ldr	r3, [pc, #124]	; (1ea4 <spi_data_read+0x138>)
    1e28:	4798      	blx	r3
			result = N_FAIL;
    1e2a:	2000      	movs	r0, #0
			break;
    1e2c:	e025      	b.n	1e7a <spi_data_read+0x10e>
		}
		if(!clockless)
    1e2e:	465b      	mov	r3, fp
    1e30:	2b00      	cmp	r3, #0
    1e32:	d117      	bne.n	1e64 <spi_data_read+0xf8>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    1e34:	4b1e      	ldr	r3, [pc, #120]	; (1eb0 <spi_data_read+0x144>)
    1e36:	781b      	ldrb	r3, [r3, #0]
    1e38:	2b00      	cmp	r3, #0
    1e3a:	d113      	bne.n	1e64 <spi_data_read+0xf8>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    1e3c:	a803      	add	r0, sp, #12
    1e3e:	2102      	movs	r1, #2
    1e40:	4b12      	ldr	r3, [pc, #72]	; (1e8c <spi_data_read+0x120>)
    1e42:	4798      	blx	r3
    1e44:	2800      	cmp	r0, #0
    1e46:	d00d      	beq.n	1e64 <spi_data_read+0xf8>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    1e48:	4811      	ldr	r0, [pc, #68]	; (1e90 <spi_data_read+0x124>)
    1e4a:	4912      	ldr	r1, [pc, #72]	; (1e94 <spi_data_read+0x128>)
    1e4c:	2290      	movs	r2, #144	; 0x90
    1e4e:	32ff      	adds	r2, #255	; 0xff
    1e50:	4b11      	ldr	r3, [pc, #68]	; (1e98 <spi_data_read+0x12c>)
    1e52:	4798      	blx	r3
    1e54:	4817      	ldr	r0, [pc, #92]	; (1eb4 <spi_data_read+0x148>)
    1e56:	4b12      	ldr	r3, [pc, #72]	; (1ea0 <spi_data_read+0x134>)
    1e58:	4798      	blx	r3
    1e5a:	200d      	movs	r0, #13
    1e5c:	4b11      	ldr	r3, [pc, #68]	; (1ea4 <spi_data_read+0x138>)
    1e5e:	4798      	blx	r3
					result = N_FAIL;
    1e60:	2000      	movs	r0, #0
					break;
    1e62:	e00a      	b.n	1e7a <spi_data_read+0x10e>
				}
			}
		}
		ix += nbytes;
    1e64:	4643      	mov	r3, r8
    1e66:	18f3      	adds	r3, r6, r3
    1e68:	b29b      	uxth	r3, r3
    1e6a:	4698      	mov	r8, r3
		sz -= nbytes;
    1e6c:	464b      	mov	r3, r9
    1e6e:	1b9e      	subs	r6, r3, r6
    1e70:	b2b3      	uxth	r3, r6
    1e72:	4699      	mov	r9, r3

	} while (sz);
    1e74:	2b00      	cmp	r3, #0
    1e76:	d186      	bne.n	1d86 <spi_data_read+0x1a>
    1e78:	2001      	movs	r0, #1

	return result;
    1e7a:	b240      	sxtb	r0, r0
}
    1e7c:	b005      	add	sp, #20
    1e7e:	bc3c      	pop	{r2, r3, r4, r5}
    1e80:	4690      	mov	r8, r2
    1e82:	4699      	mov	r9, r3
    1e84:	46a2      	mov	sl, r4
    1e86:	46ab      	mov	fp, r5
    1e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e8a:	46c0      	nop			; (mov r8, r8)
    1e8c:	00001c85 	.word	0x00001c85
    1e90:	0000a28c 	.word	0x0000a28c
    1e94:	0000b060 	.word	0x0000b060
    1e98:	00008bed 	.word	0x00008bed
    1e9c:	0000aad4 	.word	0x0000aad4
    1ea0:	00008d0d 	.word	0x00008d0d
    1ea4:	00008c21 	.word	0x00008c21
    1ea8:	0000ab08 	.word	0x0000ab08
    1eac:	0000ab38 	.word	0x0000ab38
    1eb0:	20000190 	.word	0x20000190
    1eb4:	0000ab68 	.word	0x0000ab68

00001eb8 <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1eb8:	b500      	push	{lr}
    1eba:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1ebc:	ab01      	add	r3, sp, #4
    1ebe:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1ec0:	2200      	movs	r2, #0
    1ec2:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1ec4:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1ec6:	2003      	movs	r0, #3
    1ec8:	1c19      	adds	r1, r3, #0
    1eca:	4b02      	ldr	r3, [pc, #8]	; (1ed4 <nmi_spi_write+0x1c>)
    1ecc:	4798      	blx	r3
}
    1ece:	b005      	add	sp, #20
    1ed0:	bd00      	pop	{pc}
    1ed2:	46c0      	nop			; (mov r8, r8)
    1ed4:	000003b5 	.word	0x000003b5

00001ed8 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1ed8:	b570      	push	{r4, r5, r6, lr}
    1eda:	b084      	sub	sp, #16
    1edc:	ac08      	add	r4, sp, #32
    1ede:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1ee0:	ac01      	add	r4, sp, #4
    1ee2:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1ee4:	303f      	adds	r0, #63	; 0x3f
    1ee6:	b2c4      	uxtb	r4, r0
    1ee8:	2c0e      	cmp	r4, #14
    1eea:	d900      	bls.n	1eee <spi_cmd+0x16>
    1eec:	e092      	b.n	2014 <STACK_SIZE+0x14>
    1eee:	00a0      	lsls	r0, r4, #2
    1ef0:	4c50      	ldr	r4, [pc, #320]	; (2034 <STACK_SIZE+0x34>)
    1ef2:	5820      	ldr	r0, [r4, r0]
    1ef4:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1ef6:	ab01      	add	r3, sp, #4
    1ef8:	0c0a      	lsrs	r2, r1, #16
    1efa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1efc:	0a0a      	lsrs	r2, r1, #8
    1efe:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1f00:	70d9      	strb	r1, [r3, #3]
		len = 5;
    1f02:	2105      	movs	r1, #5
		break;
    1f04:	e08e      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    1f06:	0a0b      	lsrs	r3, r1, #8
    1f08:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1f0a:	2d00      	cmp	r5, #0
    1f0c:	d102      	bne.n	1f14 <spi_cmd+0x3c>
		bc[2] = (uint8)(adr >> 8);
		bc[3] = (uint8)adr;
		len = 5;
		break;
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    1f0e:	aa01      	add	r2, sp, #4
    1f10:	7053      	strb	r3, [r2, #1]
    1f12:	e004      	b.n	1f1e <spi_cmd+0x46>
		if(clockless)  bc[1] |= (1 << 7);
    1f14:	2280      	movs	r2, #128	; 0x80
    1f16:	4252      	negs	r2, r2
    1f18:	4313      	orrs	r3, r2
    1f1a:	aa01      	add	r2, sp, #4
    1f1c:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1f1e:	ab01      	add	r3, sp, #4
    1f20:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1f22:	2200      	movs	r2, #0
    1f24:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f26:	2105      	movs	r1, #5
		break;
    1f28:	e07c      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    1f2a:	ab01      	add	r3, sp, #4
    1f2c:	2200      	movs	r2, #0
    1f2e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1f30:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1f32:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f34:	2105      	movs	r1, #5
		break;
    1f36:	e075      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    1f38:	ab01      	add	r3, sp, #4
    1f3a:	2200      	movs	r2, #0
    1f3c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1f3e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1f40:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f42:	2105      	movs	r1, #5
		break;
    1f44:	e06e      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    1f46:	ab01      	add	r3, sp, #4
    1f48:	22ff      	movs	r2, #255	; 0xff
    1f4a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1f4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1f4e:	70da      	strb	r2, [r3, #3]
		len = 5;
    1f50:	2105      	movs	r1, #5
		break;
    1f52:	e067      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    1f54:	aa01      	add	r2, sp, #4
    1f56:	0c08      	lsrs	r0, r1, #16
    1f58:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1f5a:	0a08      	lsrs	r0, r1, #8
    1f5c:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1f5e:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    1f60:	0a19      	lsrs	r1, r3, #8
    1f62:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1f64:	7153      	strb	r3, [r2, #5]
		len = 7;
    1f66:	2107      	movs	r1, #7
		break;
    1f68:	e05c      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    1f6a:	aa01      	add	r2, sp, #4
    1f6c:	0c08      	lsrs	r0, r1, #16
    1f6e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1f70:	0a08      	lsrs	r0, r1, #8
    1f72:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1f74:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1f76:	0c19      	lsrs	r1, r3, #16
    1f78:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1f7a:	0a19      	lsrs	r1, r3, #8
    1f7c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    1f7e:	7193      	strb	r3, [r2, #6]
		len = 8;
    1f80:	2108      	movs	r1, #8
		break;
    1f82:	e04f      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    1f84:	0a0b      	lsrs	r3, r1, #8
    1f86:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1f88:	2d00      	cmp	r5, #0
    1f8a:	d102      	bne.n	1f92 <spi_cmd+0xba>
		bc[5] = (uint8)(sz >> 8);
		bc[6] = (uint8)(sz);
		len = 8;
		break;
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    1f8c:	a801      	add	r0, sp, #4
    1f8e:	7043      	strb	r3, [r0, #1]
    1f90:	e004      	b.n	1f9c <spi_cmd+0xc4>
		if(clockless)  bc[1] |= (1 << 7);
    1f92:	2080      	movs	r0, #128	; 0x80
    1f94:	4240      	negs	r0, r0
    1f96:	4303      	orrs	r3, r0
    1f98:	a801      	add	r0, sp, #4
    1f9a:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    1f9c:	ab01      	add	r3, sp, #4
    1f9e:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1fa0:	0e11      	lsrs	r1, r2, #24
    1fa2:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1fa4:	0c11      	lsrs	r1, r2, #16
    1fa6:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1fa8:	0a11      	lsrs	r1, r2, #8
    1faa:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    1fac:	719a      	strb	r2, [r3, #6]
		len = 8;
    1fae:	2108      	movs	r1, #8
		break;
    1fb0:	e038      	b.n	2024 <STACK_SIZE+0x24>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    1fb2:	ab01      	add	r3, sp, #4
    1fb4:	0c08      	lsrs	r0, r1, #16
    1fb6:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1fb8:	0a08      	lsrs	r0, r1, #8
    1fba:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    1fbc:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1fbe:	0e11      	lsrs	r1, r2, #24
    1fc0:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1fc2:	0c11      	lsrs	r1, r2, #16
    1fc4:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    1fc6:	0a11      	lsrs	r1, r2, #8
    1fc8:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    1fca:	71da      	strb	r2, [r3, #7]
		len = 9;
    1fcc:	2109      	movs	r1, #9
		break;
    1fce:	e029      	b.n	2024 <STACK_SIZE+0x24>
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    1fd0:	7810      	ldrb	r0, [r2, #0]
    1fd2:	005b      	lsls	r3, r3, #1
    1fd4:	4043      	eors	r3, r0
    1fd6:	5ce3      	ldrb	r3, [r4, r3]
    1fd8:	3201      	adds	r2, #1
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    1fda:	42aa      	cmp	r2, r5
    1fdc:	d1f8      	bne.n	1fd0 <spi_cmd+0xf8>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1fde:	005b      	lsls	r3, r3, #1
    1fe0:	aa01      	add	r2, sp, #4
    1fe2:	5593      	strb	r3, [r2, r6]
    1fe4:	e001      	b.n	1fea <spi_cmd+0x112>
		else
			len-=1;
    1fe6:	3901      	subs	r1, #1
    1fe8:	b2c9      	uxtb	r1, r1

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    1fea:	b289      	uxth	r1, r1
    1fec:	a801      	add	r0, sp, #4
    1fee:	4b12      	ldr	r3, [pc, #72]	; (2038 <STACK_SIZE+0x38>)
    1ff0:	4798      	blx	r3
    1ff2:	2301      	movs	r3, #1
    1ff4:	2800      	cmp	r0, #0
    1ff6:	d01a      	beq.n	202e <STACK_SIZE+0x2e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1ff8:	4810      	ldr	r0, [pc, #64]	; (203c <STACK_SIZE+0x3c>)
    1ffa:	4911      	ldr	r1, [pc, #68]	; (2040 <STACK_SIZE+0x40>)
    1ffc:	2290      	movs	r2, #144	; 0x90
    1ffe:	0052      	lsls	r2, r2, #1
    2000:	4b10      	ldr	r3, [pc, #64]	; (2044 <STACK_SIZE+0x44>)
    2002:	4798      	blx	r3
    2004:	4810      	ldr	r0, [pc, #64]	; (2048 <STACK_SIZE+0x48>)
    2006:	4b11      	ldr	r3, [pc, #68]	; (204c <STACK_SIZE+0x4c>)
    2008:	4798      	blx	r3
    200a:	200d      	movs	r0, #13
    200c:	4b10      	ldr	r3, [pc, #64]	; (2050 <STACK_SIZE+0x50>)
    200e:	4798      	blx	r3
			result = N_FAIL;
    2010:	2300      	movs	r3, #0
    2012:	e00c      	b.n	202e <STACK_SIZE+0x2e>
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
	switch (cmd) {
    2014:	2300      	movs	r3, #0
    2016:	e00a      	b.n	202e <STACK_SIZE+0x2e>
		break;
	}

	if (result) {
		if (!gu8Crc_off)
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    2018:	1e4e      	subs	r6, r1, #1
    201a:	aa01      	add	r2, sp, #4
    201c:	1995      	adds	r5, r2, r6
    201e:	237f      	movs	r3, #127	; 0x7f
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
	return crc7_syndrome_table[(crc << 1) ^ data];
    2020:	4c0c      	ldr	r4, [pc, #48]	; (2054 <STACK_SIZE+0x54>)
    2022:	e7d5      	b.n	1fd0 <spi_cmd+0xf8>
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    2024:	4b0c      	ldr	r3, [pc, #48]	; (2058 <STACK_SIZE+0x58>)
    2026:	781b      	ldrb	r3, [r3, #0]
    2028:	2b00      	cmp	r3, #0
    202a:	d0f5      	beq.n	2018 <STACK_SIZE+0x18>
    202c:	e7db      	b.n	1fe6 <spi_cmd+0x10e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
			result = N_FAIL;
		}
	}

	return result;
    202e:	b258      	sxtb	r0, r3
}
    2030:	b004      	add	sp, #16
    2032:	bd70      	pop	{r4, r5, r6, pc}
    2034:	0000aa14 	.word	0x0000aa14
    2038:	00001eb9 	.word	0x00001eb9
    203c:	0000a28c 	.word	0x0000a28c
    2040:	0000aa60 	.word	0x0000aa60
    2044:	00008bed 	.word	0x00008bed
    2048:	0000ab9c 	.word	0x0000ab9c
    204c:	00008d0d 	.word	0x00008d0d
    2050:	00008c21 	.word	0x00008c21
    2054:	0000af60 	.word	0x0000af60
    2058:	20000190 	.word	0x20000190

0000205c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    205c:	b570      	push	{r4, r5, r6, lr}
    205e:	b082      	sub	sp, #8
    2060:	1c04      	adds	r4, r0, #0
    2062:	1c0a      	adds	r2, r1, #0
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_WRITE;
	uint8 clockless = 0;
	if (addr <= 0x30)
    2064:	2830      	cmp	r0, #48	; 0x30
    2066:	d902      	bls.n	206e <spi_write_reg+0x12>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
    2068:	2300      	movs	r3, #0
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    206a:	25c9      	movs	r5, #201	; 0xc9
    206c:	e001      	b.n	2072 <spi_write_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
		clockless = 1;
    206e:	2301      	movs	r3, #1
	if (addr <= 0x30)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    2070:	25c3      	movs	r5, #195	; 0xc3
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2072:	9300      	str	r3, [sp, #0]
    2074:	1c28      	adds	r0, r5, #0
    2076:	1c21      	adds	r1, r4, #0
    2078:	2304      	movs	r3, #4
    207a:	4e16      	ldr	r6, [pc, #88]	; (20d4 <spi_write_reg+0x78>)
    207c:	47b0      	blx	r6
	if (result != N_OK) {
    207e:	2801      	cmp	r0, #1
    2080:	d00c      	beq.n	209c <spi_write_reg+0x40>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2082:	4815      	ldr	r0, [pc, #84]	; (20d8 <spi_write_reg+0x7c>)
    2084:	4915      	ldr	r1, [pc, #84]	; (20dc <spi_write_reg+0x80>)
    2086:	4a16      	ldr	r2, [pc, #88]	; (20e0 <spi_write_reg+0x84>)
    2088:	4d16      	ldr	r5, [pc, #88]	; (20e4 <spi_write_reg+0x88>)
    208a:	47a8      	blx	r5
    208c:	4816      	ldr	r0, [pc, #88]	; (20e8 <spi_write_reg+0x8c>)
    208e:	1c21      	adds	r1, r4, #0
    2090:	47a8      	blx	r5
    2092:	200d      	movs	r0, #13
    2094:	4b15      	ldr	r3, [pc, #84]	; (20ec <spi_write_reg+0x90>)
    2096:	4798      	blx	r3
		return N_FAIL;
    2098:	2300      	movs	r3, #0
    209a:	e018      	b.n	20ce <spi_write_reg+0x72>
	}

	result = spi_cmd_rsp(cmd);
    209c:	1c28      	adds	r0, r5, #0
    209e:	4b14      	ldr	r3, [pc, #80]	; (20f0 <spi_write_reg+0x94>)
    20a0:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
		return N_FAIL;
	}

	return N_OK;
    20a2:	2301      	movs	r3, #1
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
    20a4:	2801      	cmp	r0, #1
    20a6:	d012      	beq.n	20ce <spi_write_reg+0x72>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20a8:	480b      	ldr	r0, [pc, #44]	; (20d8 <spi_write_reg+0x7c>)
    20aa:	490c      	ldr	r1, [pc, #48]	; (20dc <spi_write_reg+0x80>)
    20ac:	4a11      	ldr	r2, [pc, #68]	; (20f4 <spi_write_reg+0x98>)
    20ae:	4d0d      	ldr	r5, [pc, #52]	; (20e4 <spi_write_reg+0x88>)
    20b0:	47a8      	blx	r5
    20b2:	4811      	ldr	r0, [pc, #68]	; (20f8 <spi_write_reg+0x9c>)
    20b4:	1c21      	adds	r1, r4, #0
    20b6:	47a8      	blx	r5
    20b8:	200d      	movs	r0, #13
    20ba:	4b0c      	ldr	r3, [pc, #48]	; (20ec <spi_write_reg+0x90>)
    20bc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    20be:	2300      	movs	r3, #0
    20c0:	9300      	str	r3, [sp, #0]
    20c2:	20cf      	movs	r0, #207	; 0xcf
    20c4:	2100      	movs	r1, #0
    20c6:	2200      	movs	r2, #0
    20c8:	4c02      	ldr	r4, [pc, #8]	; (20d4 <spi_write_reg+0x78>)
    20ca:	47a0      	blx	r4
		return N_FAIL;
    20cc:	2300      	movs	r3, #0
    20ce:	b258      	sxtb	r0, r3
	}

	return result;

#endif
}
    20d0:	b002      	add	sp, #8
    20d2:	bd70      	pop	{r4, r5, r6, pc}
    20d4:	00001ed9 	.word	0x00001ed9
    20d8:	0000a28c 	.word	0x0000a28c
    20dc:	0000aa50 	.word	0x0000aa50
    20e0:	00000203 	.word	0x00000203
    20e4:	00008bed 	.word	0x00008bed
    20e8:	0000abc8 	.word	0x0000abc8
    20ec:	00008c21 	.word	0x00008c21
    20f0:	00001ca5 	.word	0x00001ca5
    20f4:	00000209 	.word	0x00000209
    20f8:	0000abf4 	.word	0x0000abf4

000020fc <spi_read_reg>:

	return N_OK;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    20fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    20fe:	b087      	sub	sp, #28
    2100:	1e04      	subs	r4, r0, #0
    2102:	9103      	str	r1, [sp, #12]
	sint8 result = N_OK;
	uint8 cmd = CMD_SINGLE_READ;
	uint8 tmp[4];
	uint8 clockless = 0;

	if (addr <= 0xff)
    2104:	2cff      	cmp	r4, #255	; 0xff
    2106:	d902      	bls.n	210e <spi_read_reg+0x12>
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
		clockless = 0;
    2108:	2600      	movs	r6, #0
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    210a:	25ca      	movs	r5, #202	; 0xca
    210c:	e001      	b.n	2112 <spi_read_reg+0x16>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
		clockless = 1;
    210e:	2601      	movs	r6, #1
	if (addr <= 0xff)
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    2110:	25c4      	movs	r5, #196	; 0xc4
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2112:	9600      	str	r6, [sp, #0]
    2114:	1c28      	adds	r0, r5, #0
    2116:	1c21      	adds	r1, r4, #0
    2118:	2200      	movs	r2, #0
    211a:	2304      	movs	r3, #4
    211c:	4f2a      	ldr	r7, [pc, #168]	; (21c8 <spi_read_reg+0xcc>)
    211e:	47b8      	blx	r7
	if (result != N_OK) {
    2120:	2801      	cmp	r0, #1
    2122:	d00c      	beq.n	213e <spi_read_reg+0x42>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2124:	4829      	ldr	r0, [pc, #164]	; (21cc <spi_read_reg+0xd0>)
    2126:	492a      	ldr	r1, [pc, #168]	; (21d0 <spi_read_reg+0xd4>)
    2128:	4a2a      	ldr	r2, [pc, #168]	; (21d4 <spi_read_reg+0xd8>)
    212a:	4d2b      	ldr	r5, [pc, #172]	; (21d8 <spi_read_reg+0xdc>)
    212c:	47a8      	blx	r5
    212e:	482b      	ldr	r0, [pc, #172]	; (21dc <spi_read_reg+0xe0>)
    2130:	1c21      	adds	r1, r4, #0
    2132:	47a8      	blx	r5
    2134:	200d      	movs	r0, #13
    2136:	4b2a      	ldr	r3, [pc, #168]	; (21e0 <spi_read_reg+0xe4>)
    2138:	4798      	blx	r3
		return N_FAIL;
    213a:	2000      	movs	r0, #0
    213c:	e041      	b.n	21c2 <spi_read_reg+0xc6>
	}

	result = spi_cmd_rsp(cmd);
    213e:	1c28      	adds	r0, r5, #0
    2140:	4b28      	ldr	r3, [pc, #160]	; (21e4 <spi_read_reg+0xe8>)
    2142:	4798      	blx	r3
	if (result != N_OK) {
    2144:	2801      	cmp	r0, #1
    2146:	d013      	beq.n	2170 <spi_read_reg+0x74>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2148:	4820      	ldr	r0, [pc, #128]	; (21cc <spi_read_reg+0xd0>)
    214a:	4921      	ldr	r1, [pc, #132]	; (21d0 <spi_read_reg+0xd4>)
    214c:	4a26      	ldr	r2, [pc, #152]	; (21e8 <spi_read_reg+0xec>)
    214e:	4d22      	ldr	r5, [pc, #136]	; (21d8 <spi_read_reg+0xdc>)
    2150:	47a8      	blx	r5
    2152:	4826      	ldr	r0, [pc, #152]	; (21ec <spi_read_reg+0xf0>)
    2154:	1c21      	adds	r1, r4, #0
    2156:	47a8      	blx	r5
    2158:	200d      	movs	r0, #13
    215a:	4b21      	ldr	r3, [pc, #132]	; (21e0 <spi_read_reg+0xe4>)
    215c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    215e:	2300      	movs	r3, #0
    2160:	9300      	str	r3, [sp, #0]
    2162:	20cf      	movs	r0, #207	; 0xcf
    2164:	2100      	movs	r1, #0
    2166:	2200      	movs	r2, #0
    2168:	4c17      	ldr	r4, [pc, #92]	; (21c8 <spi_read_reg+0xcc>)
    216a:	47a0      	blx	r4
		return N_FAIL;
    216c:	2000      	movs	r0, #0
    216e:	e028      	b.n	21c2 <spi_read_reg+0xc6>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2170:	a805      	add	r0, sp, #20
    2172:	2104      	movs	r1, #4
    2174:	1c32      	adds	r2, r6, #0
    2176:	4b1e      	ldr	r3, [pc, #120]	; (21f0 <spi_read_reg+0xf4>)
    2178:	4798      	blx	r3
	if (result != N_OK) {
    217a:	2801      	cmp	r0, #1
    217c:	d013      	beq.n	21a6 <spi_read_reg+0xaa>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    217e:	4813      	ldr	r0, [pc, #76]	; (21cc <spi_read_reg+0xd0>)
    2180:	4913      	ldr	r1, [pc, #76]	; (21d0 <spi_read_reg+0xd4>)
    2182:	4a1c      	ldr	r2, [pc, #112]	; (21f4 <spi_read_reg+0xf8>)
    2184:	4b14      	ldr	r3, [pc, #80]	; (21d8 <spi_read_reg+0xdc>)
    2186:	4798      	blx	r3
    2188:	481b      	ldr	r0, [pc, #108]	; (21f8 <spi_read_reg+0xfc>)
    218a:	4b1c      	ldr	r3, [pc, #112]	; (21fc <spi_read_reg+0x100>)
    218c:	4798      	blx	r3
    218e:	200d      	movs	r0, #13
    2190:	4b13      	ldr	r3, [pc, #76]	; (21e0 <spi_read_reg+0xe4>)
    2192:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2194:	2300      	movs	r3, #0
    2196:	9300      	str	r3, [sp, #0]
    2198:	20cf      	movs	r0, #207	; 0xcf
    219a:	2100      	movs	r1, #0
    219c:	2200      	movs	r2, #0
    219e:	4c0a      	ldr	r4, [pc, #40]	; (21c8 <spi_read_reg+0xcc>)
    21a0:	47a0      	blx	r4
		return N_FAIL;
    21a2:	2000      	movs	r0, #0
    21a4:	e00d      	b.n	21c2 <spi_read_reg+0xc6>
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    21a6:	aa05      	add	r2, sp, #20
    21a8:	7853      	ldrb	r3, [r2, #1]
    21aa:	0219      	lsls	r1, r3, #8
		((uint32)tmp[2] << 16) |
    21ac:	7893      	ldrb	r3, [r2, #2]
    21ae:	041b      	lsls	r3, r3, #16
    21b0:	430b      	orrs	r3, r1
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    21b2:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    21b4:	430b      	orrs	r3, r1
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    21b6:	78d2      	ldrb	r2, [r2, #3]
    21b8:	0612      	lsls	r2, r2, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    21ba:	4313      	orrs	r3, r2
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    21bc:	9a03      	ldr	r2, [sp, #12]
    21be:	6013      	str	r3, [r2, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    21c0:	2001      	movs	r0, #1
    21c2:	b240      	sxtb	r0, r0
}
    21c4:	b007      	add	sp, #28
    21c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21c8:	00001ed9 	.word	0x00001ed9
    21cc:	0000a28c 	.word	0x0000a28c
    21d0:	0000aa84 	.word	0x0000aa84
    21d4:	0000025d 	.word	0x0000025d
    21d8:	00008bed 	.word	0x00008bed
    21dc:	0000ac2c 	.word	0x0000ac2c
    21e0:	00008c21 	.word	0x00008c21
    21e4:	00001ca5 	.word	0x00001ca5
    21e8:	00000263 	.word	0x00000263
    21ec:	0000ac58 	.word	0x0000ac58
    21f0:	00001d6d 	.word	0x00001d6d
    21f4:	0000026b 	.word	0x0000026b
    21f8:	0000ac8c 	.word	0x0000ac8c
    21fc:	00008d0d 	.word	0x00008d0d

00002200 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2200:	2200      	movs	r2, #0
    2202:	4b02      	ldr	r3, [pc, #8]	; (220c <nm_spi_deinit+0xc>)
    2204:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    2206:	2000      	movs	r0, #0
    2208:	4770      	bx	lr
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	20000190 	.word	0x20000190

00002210 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2210:	b500      	push	{lr}
    2212:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2214:	a901      	add	r1, sp, #4
    2216:	4b02      	ldr	r3, [pc, #8]	; (2220 <nm_spi_read_reg+0x10>)
    2218:	4798      	blx	r3

	return u32Val;
}
    221a:	9801      	ldr	r0, [sp, #4]
    221c:	b003      	add	sp, #12
    221e:	bd00      	pop	{pc}
    2220:	000020fd 	.word	0x000020fd

00002224 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2224:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2226:	4b04      	ldr	r3, [pc, #16]	; (2238 <nm_spi_read_reg_with_ret+0x14>)
    2228:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    222a:	2300      	movs	r3, #0
    222c:	2801      	cmp	r0, #1
    222e:	d000      	beq.n	2232 <nm_spi_read_reg_with_ret+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2230:	33fa      	adds	r3, #250	; 0xfa

	return s8Ret;
    2232:	b258      	sxtb	r0, r3
}
    2234:	bd08      	pop	{r3, pc}
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	000020fd 	.word	0x000020fd

0000223c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    223c:	b508      	push	{r3, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    223e:	4b04      	ldr	r3, [pc, #16]	; (2250 <nm_spi_write_reg+0x14>)
    2240:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2242:	2300      	movs	r3, #0
    2244:	2801      	cmp	r0, #1
    2246:	d000      	beq.n	224a <nm_spi_write_reg+0xe>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2248:	33fa      	adds	r3, #250	; 0xfa

	return s8Ret;
    224a:	b258      	sxtb	r0, r3
}
    224c:	bd08      	pop	{r3, pc}
    224e:	46c0      	nop			; (mov r8, r8)
    2250:	0000205d 	.word	0x0000205d

00002254 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    2254:	b510      	push	{r4, lr}
    2256:	b082      	sub	sp, #8
	uint32 chipid;
	uint32 reg =0;
    2258:	2300      	movs	r3, #0
    225a:	9300      	str	r3, [sp, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    225c:	4a35      	ldr	r2, [pc, #212]	; (2334 <nm_spi_init+0xe0>)
    225e:	7013      	strb	r3, [r2, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2260:	4835      	ldr	r0, [pc, #212]	; (2338 <nm_spi_init+0xe4>)
    2262:	4669      	mov	r1, sp
    2264:	4b35      	ldr	r3, [pc, #212]	; (233c <nm_spi_init+0xe8>)
    2266:	4798      	blx	r3
    2268:	2800      	cmp	r0, #0
    226a:	d120      	bne.n	22ae <nm_spi_init+0x5a>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    226c:	2201      	movs	r2, #1
    226e:	4b31      	ldr	r3, [pc, #196]	; (2334 <nm_spi_init+0xe0>)
    2270:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    2272:	4833      	ldr	r0, [pc, #204]	; (2340 <nm_spi_init+0xec>)
    2274:	4933      	ldr	r1, [pc, #204]	; (2344 <nm_spi_init+0xf0>)
    2276:	4a34      	ldr	r2, [pc, #208]	; (2348 <nm_spi_init+0xf4>)
    2278:	4b34      	ldr	r3, [pc, #208]	; (234c <nm_spi_init+0xf8>)
    227a:	4798      	blx	r3
    227c:	4834      	ldr	r0, [pc, #208]	; (2350 <nm_spi_init+0xfc>)
    227e:	4b35      	ldr	r3, [pc, #212]	; (2354 <nm_spi_init+0x100>)
    2280:	4798      	blx	r3
    2282:	200d      	movs	r0, #13
    2284:	4b34      	ldr	r3, [pc, #208]	; (2358 <nm_spi_init+0x104>)
    2286:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    2288:	482b      	ldr	r0, [pc, #172]	; (2338 <nm_spi_init+0xe4>)
    228a:	4669      	mov	r1, sp
    228c:	4b2b      	ldr	r3, [pc, #172]	; (233c <nm_spi_init+0xe8>)
    228e:	4798      	blx	r3
    2290:	1e04      	subs	r4, r0, #0
    2292:	d10c      	bne.n	22ae <nm_spi_init+0x5a>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    2294:	482a      	ldr	r0, [pc, #168]	; (2340 <nm_spi_init+0xec>)
    2296:	492b      	ldr	r1, [pc, #172]	; (2344 <nm_spi_init+0xf0>)
    2298:	22b8      	movs	r2, #184	; 0xb8
    229a:	0092      	lsls	r2, r2, #2
    229c:	4b2b      	ldr	r3, [pc, #172]	; (234c <nm_spi_init+0xf8>)
    229e:	4798      	blx	r3
    22a0:	482e      	ldr	r0, [pc, #184]	; (235c <nm_spi_init+0x108>)
    22a2:	4b2c      	ldr	r3, [pc, #176]	; (2354 <nm_spi_init+0x100>)
    22a4:	4798      	blx	r3
    22a6:	200d      	movs	r0, #13
    22a8:	4b2b      	ldr	r3, [pc, #172]	; (2358 <nm_spi_init+0x104>)
    22aa:	4798      	blx	r3
			return 0;
    22ac:	e03f      	b.n	232e <nm_spi_init+0xda>
		}
	}
	if(gu8Crc_off == 0)
    22ae:	4b21      	ldr	r3, [pc, #132]	; (2334 <nm_spi_init+0xe0>)
    22b0:	781b      	ldrb	r3, [r3, #0]
    22b2:	2b00      	cmp	r3, #0
    22b4:	d119      	bne.n	22ea <nm_spi_init+0x96>
	{
		reg &= ~0xc;	/* disable crc checking */
		reg &= ~0x70;
    22b6:	337c      	adds	r3, #124	; 0x7c
    22b8:	9900      	ldr	r1, [sp, #0]
    22ba:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    22bc:	3b2c      	subs	r3, #44	; 0x2c
    22be:	4319      	orrs	r1, r3
    22c0:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    22c2:	481d      	ldr	r0, [pc, #116]	; (2338 <nm_spi_init+0xe4>)
    22c4:	4b26      	ldr	r3, [pc, #152]	; (2360 <nm_spi_init+0x10c>)
    22c6:	4798      	blx	r3
    22c8:	1e04      	subs	r4, r0, #0
    22ca:	d10b      	bne.n	22e4 <nm_spi_init+0x90>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    22cc:	481c      	ldr	r0, [pc, #112]	; (2340 <nm_spi_init+0xec>)
    22ce:	491d      	ldr	r1, [pc, #116]	; (2344 <nm_spi_init+0xf0>)
    22d0:	4a24      	ldr	r2, [pc, #144]	; (2364 <nm_spi_init+0x110>)
    22d2:	4b1e      	ldr	r3, [pc, #120]	; (234c <nm_spi_init+0xf8>)
    22d4:	4798      	blx	r3
    22d6:	4824      	ldr	r0, [pc, #144]	; (2368 <nm_spi_init+0x114>)
    22d8:	4b1e      	ldr	r3, [pc, #120]	; (2354 <nm_spi_init+0x100>)
    22da:	4798      	blx	r3
    22dc:	200d      	movs	r0, #13
    22de:	4b1e      	ldr	r3, [pc, #120]	; (2358 <nm_spi_init+0x104>)
    22e0:	4798      	blx	r3
			return 0;
    22e2:	e024      	b.n	232e <nm_spi_init+0xda>
		}
		gu8Crc_off = 1;
    22e4:	2201      	movs	r2, #1
    22e6:	4b13      	ldr	r3, [pc, #76]	; (2334 <nm_spi_init+0xe0>)
    22e8:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    22ea:	2080      	movs	r0, #128	; 0x80
    22ec:	0140      	lsls	r0, r0, #5
    22ee:	a901      	add	r1, sp, #4
    22f0:	4b12      	ldr	r3, [pc, #72]	; (233c <nm_spi_init+0xe8>)
    22f2:	4798      	blx	r3
    22f4:	2800      	cmp	r0, #0
    22f6:	d10d      	bne.n	2314 <nm_spi_init+0xc0>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    22f8:	4811      	ldr	r0, [pc, #68]	; (2340 <nm_spi_init+0xec>)
    22fa:	4912      	ldr	r1, [pc, #72]	; (2344 <nm_spi_init+0xf0>)
    22fc:	22bd      	movs	r2, #189	; 0xbd
    22fe:	0092      	lsls	r2, r2, #2
    2300:	4b12      	ldr	r3, [pc, #72]	; (234c <nm_spi_init+0xf8>)
    2302:	4798      	blx	r3
    2304:	4819      	ldr	r0, [pc, #100]	; (236c <nm_spi_init+0x118>)
    2306:	4b13      	ldr	r3, [pc, #76]	; (2354 <nm_spi_init+0x100>)
    2308:	4798      	blx	r3
    230a:	200d      	movs	r0, #13
    230c:	4b12      	ldr	r3, [pc, #72]	; (2358 <nm_spi_init+0x104>)
    230e:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    2310:	24fa      	movs	r4, #250	; 0xfa
    2312:	e00c      	b.n	232e <nm_spi_init+0xda>
static void spi_init_pkt_sz(void)
{
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    2314:	4c08      	ldr	r4, [pc, #32]	; (2338 <nm_spi_init+0xe4>)
    2316:	1c20      	adds	r0, r4, #0
    2318:	4b15      	ldr	r3, [pc, #84]	; (2370 <nm_spi_init+0x11c>)
    231a:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    231c:	2370      	movs	r3, #112	; 0x70
    231e:	1c01      	adds	r1, r0, #0
    2320:	4399      	bics	r1, r3
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    2322:	3b20      	subs	r3, #32
    2324:	4319      	orrs	r1, r3

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    2326:	1c20      	adds	r0, r4, #0
    2328:	4b12      	ldr	r3, [pc, #72]	; (2374 <nm_spi_init+0x120>)
    232a:	4798      	blx	r3

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();


	return M2M_SUCCESS;
    232c:	2400      	movs	r4, #0
    232e:	b260      	sxtb	r0, r4
}
    2330:	b002      	add	sp, #8
    2332:	bd10      	pop	{r4, pc}
    2334:	20000190 	.word	0x20000190
    2338:	0000e824 	.word	0x0000e824
    233c:	000020fd 	.word	0x000020fd
    2340:	0000a28c 	.word	0x0000a28c
    2344:	0000af44 	.word	0x0000af44
    2348:	000002dd 	.word	0x000002dd
    234c:	00008bed 	.word	0x00008bed
    2350:	0000acac 	.word	0x0000acac
    2354:	00008d0d 	.word	0x00008d0d
    2358:	00008c21 	.word	0x00008c21
    235c:	0000acfc 	.word	0x0000acfc
    2360:	0000205d 	.word	0x0000205d
    2364:	000002ea 	.word	0x000002ea
    2368:	0000ad28 	.word	0x0000ad28
    236c:	0000ad5c 	.word	0x0000ad5c
    2370:	00002211 	.word	0x00002211
    2374:	0000223d 	.word	0x0000223d

00002378 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2378:	b5f0      	push	{r4, r5, r6, r7, lr}
    237a:	b083      	sub	sp, #12
    237c:	1c04      	adds	r4, r0, #0
    237e:	1c0e      	adds	r6, r1, #0
    2380:	1c15      	adds	r5, r2, #0

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2382:	2300      	movs	r3, #0
    2384:	9300      	str	r3, [sp, #0]
    2386:	20c8      	movs	r0, #200	; 0xc8
    2388:	1c21      	adds	r1, r4, #0
    238a:	2200      	movs	r2, #0
    238c:	1c2b      	adds	r3, r5, #0
    238e:	4f24      	ldr	r7, [pc, #144]	; (2420 <nm_spi_read_block+0xa8>)
    2390:	47b8      	blx	r7
	if (result != N_OK) {
    2392:	2801      	cmp	r0, #1
    2394:	d00c      	beq.n	23b0 <nm_spi_read_block+0x38>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2396:	4823      	ldr	r0, [pc, #140]	; (2424 <nm_spi_read_block+0xac>)
    2398:	4923      	ldr	r1, [pc, #140]	; (2428 <nm_spi_read_block+0xb0>)
    239a:	22a3      	movs	r2, #163	; 0xa3
    239c:	0092      	lsls	r2, r2, #2
    239e:	4d23      	ldr	r5, [pc, #140]	; (242c <nm_spi_read_block+0xb4>)
    23a0:	47a8      	blx	r5
    23a2:	4823      	ldr	r0, [pc, #140]	; (2430 <nm_spi_read_block+0xb8>)
    23a4:	1c21      	adds	r1, r4, #0
    23a6:	47a8      	blx	r5
    23a8:	200d      	movs	r0, #13
    23aa:	4b22      	ldr	r3, [pc, #136]	; (2434 <nm_spi_read_block+0xbc>)
    23ac:	4798      	blx	r3
    23ae:	e032      	b.n	2416 <nm_spi_read_block+0x9e>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    23b0:	20c8      	movs	r0, #200	; 0xc8
    23b2:	4b21      	ldr	r3, [pc, #132]	; (2438 <nm_spi_read_block+0xc0>)
    23b4:	4798      	blx	r3
	if (result != N_OK) {
    23b6:	2801      	cmp	r0, #1
    23b8:	d012      	beq.n	23e0 <nm_spi_read_block+0x68>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    23ba:	481a      	ldr	r0, [pc, #104]	; (2424 <nm_spi_read_block+0xac>)
    23bc:	491a      	ldr	r1, [pc, #104]	; (2428 <nm_spi_read_block+0xb0>)
    23be:	4a1f      	ldr	r2, [pc, #124]	; (243c <nm_spi_read_block+0xc4>)
    23c0:	4d1a      	ldr	r5, [pc, #104]	; (242c <nm_spi_read_block+0xb4>)
    23c2:	47a8      	blx	r5
    23c4:	481e      	ldr	r0, [pc, #120]	; (2440 <nm_spi_read_block+0xc8>)
    23c6:	1c21      	adds	r1, r4, #0
    23c8:	47a8      	blx	r5
    23ca:	200d      	movs	r0, #13
    23cc:	4b19      	ldr	r3, [pc, #100]	; (2434 <nm_spi_read_block+0xbc>)
    23ce:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    23d0:	2300      	movs	r3, #0
    23d2:	9300      	str	r3, [sp, #0]
    23d4:	20cf      	movs	r0, #207	; 0xcf
    23d6:	2100      	movs	r1, #0
    23d8:	2200      	movs	r2, #0
    23da:	4c11      	ldr	r4, [pc, #68]	; (2420 <nm_spi_read_block+0xa8>)
    23dc:	47a0      	blx	r4
    23de:	e01a      	b.n	2416 <nm_spi_read_block+0x9e>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    23e0:	1c30      	adds	r0, r6, #0
    23e2:	1c29      	adds	r1, r5, #0
    23e4:	2200      	movs	r2, #0
    23e6:	4b17      	ldr	r3, [pc, #92]	; (2444 <nm_spi_read_block+0xcc>)
    23e8:	4798      	blx	r3
{
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    23ea:	2300      	movs	r3, #0

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
	if (result != N_OK) {
    23ec:	2801      	cmp	r0, #1
    23ee:	d013      	beq.n	2418 <nm_spi_read_block+0xa0>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    23f0:	480c      	ldr	r0, [pc, #48]	; (2424 <nm_spi_read_block+0xac>)
    23f2:	490d      	ldr	r1, [pc, #52]	; (2428 <nm_spi_read_block+0xb0>)
    23f4:	22a7      	movs	r2, #167	; 0xa7
    23f6:	0092      	lsls	r2, r2, #2
    23f8:	4b0c      	ldr	r3, [pc, #48]	; (242c <nm_spi_read_block+0xb4>)
    23fa:	4798      	blx	r3
    23fc:	4812      	ldr	r0, [pc, #72]	; (2448 <nm_spi_read_block+0xd0>)
    23fe:	4b13      	ldr	r3, [pc, #76]	; (244c <nm_spi_read_block+0xd4>)
    2400:	4798      	blx	r3
    2402:	200d      	movs	r0, #13
    2404:	4b0b      	ldr	r3, [pc, #44]	; (2434 <nm_spi_read_block+0xbc>)
    2406:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2408:	2300      	movs	r3, #0
    240a:	9300      	str	r3, [sp, #0]
    240c:	20cf      	movs	r0, #207	; 0xcf
    240e:	2100      	movs	r1, #0
    2410:	2200      	movs	r2, #0
    2412:	4c03      	ldr	r4, [pc, #12]	; (2420 <nm_spi_read_block+0xa8>)
    2414:	47a0      	blx	r4
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
	else s8Ret = M2M_ERR_BUS_FAIL;
    2416:	23fa      	movs	r3, #250	; 0xfa

	return s8Ret;
    2418:	b258      	sxtb	r0, r3
}
    241a:	b003      	add	sp, #12
    241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    241e:	46c0      	nop			; (mov r8, r8)
    2420:	00001ed9 	.word	0x00001ed9
    2424:	0000a28c 	.word	0x0000a28c
    2428:	0000aa94 	.word	0x0000aa94
    242c:	00008bed 	.word	0x00008bed
    2430:	0000ad80 	.word	0x0000ad80
    2434:	00008c21 	.word	0x00008c21
    2438:	00001ca5 	.word	0x00001ca5
    243c:	00000292 	.word	0x00000292
    2440:	0000adb0 	.word	0x0000adb0
    2444:	00001d6d 	.word	0x00001d6d
    2448:	0000ade8 	.word	0x0000ade8
    244c:	00008d0d 	.word	0x00008d0d

00002450 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2450:	b5f0      	push	{r4, r5, r6, r7, lr}
    2452:	464f      	mov	r7, r9
    2454:	4646      	mov	r6, r8
    2456:	b4c0      	push	{r6, r7}
    2458:	b087      	sub	sp, #28
    245a:	1c04      	adds	r4, r0, #0
    245c:	4689      	mov	r9, r1
    245e:	1c15      	adds	r5, r2, #0

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2460:	2300      	movs	r3, #0
    2462:	9300      	str	r3, [sp, #0]
    2464:	20c7      	movs	r0, #199	; 0xc7
    2466:	1c21      	adds	r1, r4, #0
    2468:	2200      	movs	r2, #0
    246a:	1c2b      	adds	r3, r5, #0
    246c:	4e55      	ldr	r6, [pc, #340]	; (25c4 <nm_spi_write_block+0x174>)
    246e:	47b0      	blx	r6
	if (result != N_OK) {
    2470:	2801      	cmp	r0, #1
    2472:	d00b      	beq.n	248c <nm_spi_write_block+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    2474:	4854      	ldr	r0, [pc, #336]	; (25c8 <nm_spi_write_block+0x178>)
    2476:	4955      	ldr	r1, [pc, #340]	; (25cc <nm_spi_write_block+0x17c>)
    2478:	4a55      	ldr	r2, [pc, #340]	; (25d0 <nm_spi_write_block+0x180>)
    247a:	4d56      	ldr	r5, [pc, #344]	; (25d4 <nm_spi_write_block+0x184>)
    247c:	47a8      	blx	r5
    247e:	4856      	ldr	r0, [pc, #344]	; (25d8 <nm_spi_write_block+0x188>)
    2480:	1c21      	adds	r1, r4, #0
    2482:	47a8      	blx	r5
    2484:	200d      	movs	r0, #13
    2486:	4b55      	ldr	r3, [pc, #340]	; (25dc <nm_spi_write_block+0x18c>)
    2488:	4798      	blx	r3
    248a:	e094      	b.n	25b6 <nm_spi_write_block+0x166>
		return N_FAIL;
	}

	result = spi_cmd_rsp(cmd);
    248c:	20c7      	movs	r0, #199	; 0xc7
    248e:	4b54      	ldr	r3, [pc, #336]	; (25e0 <nm_spi_write_block+0x190>)
    2490:	4798      	blx	r3
	if (result != N_OK) {
    2492:	2801      	cmp	r0, #1
    2494:	d012      	beq.n	24bc <nm_spi_write_block+0x6c>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2496:	484c      	ldr	r0, [pc, #304]	; (25c8 <nm_spi_write_block+0x178>)
    2498:	494c      	ldr	r1, [pc, #304]	; (25cc <nm_spi_write_block+0x17c>)
    249a:	4a52      	ldr	r2, [pc, #328]	; (25e4 <nm_spi_write_block+0x194>)
    249c:	4d4d      	ldr	r5, [pc, #308]	; (25d4 <nm_spi_write_block+0x184>)
    249e:	47a8      	blx	r5
    24a0:	4851      	ldr	r0, [pc, #324]	; (25e8 <nm_spi_write_block+0x198>)
    24a2:	1c21      	adds	r1, r4, #0
    24a4:	47a8      	blx	r5
    24a6:	200d      	movs	r0, #13
    24a8:	4b4c      	ldr	r3, [pc, #304]	; (25dc <nm_spi_write_block+0x18c>)
    24aa:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    24ac:	2300      	movs	r3, #0
    24ae:	9300      	str	r3, [sp, #0]
    24b0:	20cf      	movs	r0, #207	; 0xcf
    24b2:	2100      	movs	r1, #0
    24b4:	2200      	movs	r2, #0
    24b6:	4c43      	ldr	r4, [pc, #268]	; (25c4 <nm_spi_write_block+0x174>)
    24b8:	47a0      	blx	r4
    24ba:	e07c      	b.n	25b6 <nm_spi_write_block+0x166>
static sint8 spi_data_write(uint8 *b, uint16 sz)
{
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
	uint8 cmd, order, crc[2] = {0};
    24bc:	2200      	movs	r2, #0
    24be:	ab05      	add	r3, sp, #20
    24c0:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    24c2:	2700      	movs	r7, #0
    24c4:	2380      	movs	r3, #128	; 0x80
    24c6:	019b      	lsls	r3, r3, #6
    24c8:	4698      	mov	r8, r3
    24ca:	466a      	mov	r2, sp
    24cc:	81d3      	strh	r3, [r2, #14]
				order = 0x3;
			else
				order = 0x2;
		}
		cmd |= order;
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    24ce:	4e47      	ldr	r6, [pc, #284]	; (25ec <nm_spi_write_block+0x19c>)
    24d0:	1c2c      	adds	r4, r5, #0
    24d2:	4545      	cmp	r5, r8
    24d4:	d901      	bls.n	24da <nm_spi_write_block+0x8a>
    24d6:	466b      	mov	r3, sp
    24d8:	89dc      	ldrh	r4, [r3, #14]
    24da:	b2a4      	uxth	r4, r4

		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
    24dc:	2f00      	cmp	r7, #0
    24de:	d104      	bne.n	24ea <nm_spi_write_block+0x9a>
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
    24e0:	2303      	movs	r3, #3
		/**
			Write command
		**/
		cmd = 0xf0;
		if (ix == 0)  {
			if (sz <= DATA_PKT_SZ)
    24e2:	4545      	cmp	r5, r8
    24e4:	d906      	bls.n	24f4 <nm_spi_write_block+0xa4>
				order = 0x3;
			else
				order = 0x1;
    24e6:	3b02      	subs	r3, #2
    24e8:	e004      	b.n	24f4 <nm_spi_write_block+0xa4>
		} else {
			if (sz <= DATA_PKT_SZ)
				order = 0x3;
			else
				order = 0x2;
    24ea:	2300      	movs	r3, #0
    24ec:	4642      	mov	r2, r8
    24ee:	42aa      	cmp	r2, r5
    24f0:	415b      	adcs	r3, r3
    24f2:	3302      	adds	r3, #2
		}
		cmd |= order;
    24f4:	200b      	movs	r0, #11
    24f6:	aa02      	add	r2, sp, #8
    24f8:	4694      	mov	ip, r2
    24fa:	4460      	add	r0, ip
    24fc:	2210      	movs	r2, #16
    24fe:	4252      	negs	r2, r2
    2500:	4313      	orrs	r3, r2
    2502:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2504:	2101      	movs	r1, #1
    2506:	47b0      	blx	r6
    2508:	2800      	cmp	r0, #0
    250a:	d00c      	beq.n	2526 <nm_spi_write_block+0xd6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    250c:	482e      	ldr	r0, [pc, #184]	; (25c8 <nm_spi_write_block+0x178>)
    250e:	4938      	ldr	r1, [pc, #224]	; (25f0 <nm_spi_write_block+0x1a0>)
    2510:	22e0      	movs	r2, #224	; 0xe0
    2512:	0052      	lsls	r2, r2, #1
    2514:	4b2f      	ldr	r3, [pc, #188]	; (25d4 <nm_spi_write_block+0x184>)
    2516:	4798      	blx	r3
    2518:	4836      	ldr	r0, [pc, #216]	; (25f4 <nm_spi_write_block+0x1a4>)
    251a:	4b37      	ldr	r3, [pc, #220]	; (25f8 <nm_spi_write_block+0x1a8>)
    251c:	4798      	blx	r3
    251e:	200d      	movs	r0, #13
    2520:	4b2e      	ldr	r3, [pc, #184]	; (25dc <nm_spi_write_block+0x18c>)
    2522:	4798      	blx	r3
    2524:	e031      	b.n	258a <nm_spi_write_block+0x13a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    2526:	b238      	sxth	r0, r7
    2528:	4448      	add	r0, r9
    252a:	1c21      	adds	r1, r4, #0
    252c:	4b2f      	ldr	r3, [pc, #188]	; (25ec <nm_spi_write_block+0x19c>)
    252e:	4798      	blx	r3
    2530:	2800      	cmp	r0, #0
    2532:	d00c      	beq.n	254e <nm_spi_write_block+0xfe>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    2534:	4824      	ldr	r0, [pc, #144]	; (25c8 <nm_spi_write_block+0x178>)
    2536:	492e      	ldr	r1, [pc, #184]	; (25f0 <nm_spi_write_block+0x1a0>)
    2538:	22ca      	movs	r2, #202	; 0xca
    253a:	32ff      	adds	r2, #255	; 0xff
    253c:	4b25      	ldr	r3, [pc, #148]	; (25d4 <nm_spi_write_block+0x184>)
    253e:	4798      	blx	r3
    2540:	482e      	ldr	r0, [pc, #184]	; (25fc <nm_spi_write_block+0x1ac>)
    2542:	4b2d      	ldr	r3, [pc, #180]	; (25f8 <nm_spi_write_block+0x1a8>)
    2544:	4798      	blx	r3
    2546:	200d      	movs	r0, #13
    2548:	4b24      	ldr	r3, [pc, #144]	; (25dc <nm_spi_write_block+0x18c>)
    254a:	4798      	blx	r3
    254c:	e01d      	b.n	258a <nm_spi_write_block+0x13a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    254e:	4b2c      	ldr	r3, [pc, #176]	; (2600 <nm_spi_write_block+0x1b0>)
    2550:	781b      	ldrb	r3, [r3, #0]
    2552:	2b00      	cmp	r3, #0
    2554:	d112      	bne.n	257c <nm_spi_write_block+0x12c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    2556:	a805      	add	r0, sp, #20
    2558:	2102      	movs	r1, #2
    255a:	4b24      	ldr	r3, [pc, #144]	; (25ec <nm_spi_write_block+0x19c>)
    255c:	4798      	blx	r3
    255e:	2800      	cmp	r0, #0
    2560:	d00c      	beq.n	257c <nm_spi_write_block+0x12c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2562:	4819      	ldr	r0, [pc, #100]	; (25c8 <nm_spi_write_block+0x178>)
    2564:	4922      	ldr	r1, [pc, #136]	; (25f0 <nm_spi_write_block+0x1a0>)
    2566:	22d4      	movs	r2, #212	; 0xd4
    2568:	32ff      	adds	r2, #255	; 0xff
    256a:	4b1a      	ldr	r3, [pc, #104]	; (25d4 <nm_spi_write_block+0x184>)
    256c:	4798      	blx	r3
    256e:	4825      	ldr	r0, [pc, #148]	; (2604 <nm_spi_write_block+0x1b4>)
    2570:	4b21      	ldr	r3, [pc, #132]	; (25f8 <nm_spi_write_block+0x1a8>)
    2572:	4798      	blx	r3
    2574:	200d      	movs	r0, #13
    2576:	4b19      	ldr	r3, [pc, #100]	; (25dc <nm_spi_write_block+0x18c>)
    2578:	4798      	blx	r3
    257a:	e006      	b.n	258a <nm_spi_write_block+0x13a>
				result = N_FAIL;
				break;
			}
		}

		ix += nbytes;
    257c:	19e7      	adds	r7, r4, r7
    257e:	b2bf      	uxth	r7, r7
		sz -= nbytes;
    2580:	1b2d      	subs	r5, r5, r4
    2582:	b2ad      	uxth	r5, r5
	} while (sz);
    2584:	2d00      	cmp	r5, #0
    2586:	d1a3      	bne.n	24d0 <nm_spi_write_block+0x80>
    2588:	e013      	b.n	25b2 <nm_spi_write_block+0x162>
	/**
		Data
	**/
	result = spi_data_write(buf, size);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    258a:	480f      	ldr	r0, [pc, #60]	; (25c8 <nm_spi_write_block+0x178>)
    258c:	490f      	ldr	r1, [pc, #60]	; (25cc <nm_spi_write_block+0x17c>)
    258e:	4a1e      	ldr	r2, [pc, #120]	; (2608 <nm_spi_write_block+0x1b8>)
    2590:	4b10      	ldr	r3, [pc, #64]	; (25d4 <nm_spi_write_block+0x184>)
    2592:	4798      	blx	r3
    2594:	481d      	ldr	r0, [pc, #116]	; (260c <nm_spi_write_block+0x1bc>)
    2596:	4b18      	ldr	r3, [pc, #96]	; (25f8 <nm_spi_write_block+0x1a8>)
    2598:	4798      	blx	r3
    259a:	200d      	movs	r0, #13
    259c:	4b0f      	ldr	r3, [pc, #60]	; (25dc <nm_spi_write_block+0x18c>)
    259e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    25a0:	2300      	movs	r3, #0
    25a2:	9300      	str	r3, [sp, #0]
    25a4:	20cf      	movs	r0, #207	; 0xcf
    25a6:	2100      	movs	r1, #0
    25a8:	2200      	movs	r2, #0
    25aa:	4c06      	ldr	r4, [pc, #24]	; (25c4 <nm_spi_write_block+0x174>)
    25ac:	47a0      	blx	r4
{
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    25ae:	2000      	movs	r0, #0
    25b0:	e002      	b.n	25b8 <nm_spi_write_block+0x168>
    25b2:	2000      	movs	r0, #0
    25b4:	e000      	b.n	25b8 <nm_spi_write_block+0x168>
	else s8Ret = M2M_ERR_BUS_FAIL;
    25b6:	20fa      	movs	r0, #250	; 0xfa

	return s8Ret;
    25b8:	b240      	sxtb	r0, r0
}
    25ba:	b007      	add	sp, #28
    25bc:	bc0c      	pop	{r2, r3}
    25be:	4690      	mov	r8, r2
    25c0:	4699      	mov	r9, r3
    25c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25c4:	00001ed9 	.word	0x00001ed9
    25c8:	0000a28c 	.word	0x0000a28c
    25cc:	0000aa68 	.word	0x0000aa68
    25d0:	00000227 	.word	0x00000227
    25d4:	00008bed 	.word	0x00008bed
    25d8:	0000ae10 	.word	0x0000ae10
    25dc:	00008c21 	.word	0x00008c21
    25e0:	00001ca5 	.word	0x00001ca5
    25e4:	0000022d 	.word	0x0000022d
    25e8:	0000ae40 	.word	0x0000ae40
    25ec:	00001eb9 	.word	0x00001eb9
    25f0:	0000af50 	.word	0x0000af50
    25f4:	0000ae78 	.word	0x0000ae78
    25f8:	00008d0d 	.word	0x00008d0d
    25fc:	0000aeb0 	.word	0x0000aeb0
    2600:	20000190 	.word	0x20000190
    2604:	0000aee4 	.word	0x0000aee4
    2608:	0000023e 	.word	0x0000023e
    260c:	0000af1c 	.word	0x0000af1c

00002610 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    2610:	b5f0      	push	{r4, r5, r6, r7, lr}
    2612:	465f      	mov	r7, fp
    2614:	4656      	mov	r6, sl
    2616:	464d      	mov	r5, r9
    2618:	4644      	mov	r4, r8
    261a:	b4f0      	push	{r4, r5, r6, r7}
    261c:	b083      	sub	sp, #12
    261e:	1c0e      	adds	r6, r1, #0
    2620:	9200      	str	r2, [sp, #0]
    2622:	4699      	mov	r9, r3
    2624:	ab0c      	add	r3, sp, #48	; 0x30
    2626:	881c      	ldrh	r4, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    2628:	2c00      	cmp	r4, #0
    262a:	d057      	beq.n	26dc <Socket_ReadSocketData+0xcc>
    262c:	0043      	lsls	r3, r0, #1
    262e:	181b      	adds	r3, r3, r0
    2630:	009b      	lsls	r3, r3, #2
    2632:	492e      	ldr	r1, [pc, #184]	; (26ec <Socket_ReadSocketData+0xdc>)
    2634:	585b      	ldr	r3, [r3, r1]
    2636:	2b00      	cmp	r3, #0
    2638:	d050      	beq.n	26dc <Socket_ReadSocketData+0xcc>
    263a:	0043      	lsls	r3, r0, #1
    263c:	181b      	adds	r3, r3, r0
    263e:	009b      	lsls	r3, r3, #2
    2640:	18cb      	adds	r3, r1, r3
    2642:	889b      	ldrh	r3, [r3, #4]
    2644:	b29b      	uxth	r3, r3
    2646:	2b00      	cmp	r3, #0
    2648:	d048      	beq.n	26dc <Socket_ReadSocketData+0xcc>
    264a:	0043      	lsls	r3, r0, #1
    264c:	181b      	adds	r3, r3, r0
    264e:	009b      	lsls	r3, r3, #2
    2650:	18cb      	adds	r3, r1, r3
    2652:	799b      	ldrb	r3, [r3, #6]
    2654:	2b01      	cmp	r3, #1
    2656:	d141      	bne.n	26dc <Socket_ReadSocketData+0xcc>
		uint32	u32Address = u32StartAddress;
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    2658:	80f4      	strh	r4, [r6, #6]
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    265a:	0043      	lsls	r3, r0, #1
    265c:	181a      	adds	r2, r3, r0
    265e:	0093      	lsls	r3, r2, #2
    2660:	4698      	mov	r8, r3
    2662:	1c0b      	adds	r3, r1, #0
    2664:	4443      	add	r3, r8
    2666:	469a      	mov	sl, r3
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    2668:	468b      	mov	fp, r1
    266a:	9001      	str	r0, [sp, #4]
		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    266c:	4653      	mov	r3, sl
    266e:	889b      	ldrh	r3, [r3, #4]
    2670:	1ae3      	subs	r3, r4, r3
			if(s16Diff > 0)
    2672:	b21b      	sxth	r3, r3
    2674:	2b00      	cmp	r3, #0
    2676:	dd05      	ble.n	2684 <Socket_ReadSocketData+0x74>
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    2678:	4b1c      	ldr	r3, [pc, #112]	; (26ec <Socket_ReadSocketData+0xdc>)
    267a:	4443      	add	r3, r8
    267c:	889d      	ldrh	r5, [r3, #4]
    267e:	b2ad      	uxth	r5, r5
			u8SetRxDone = 1;
			u16Read = u16ReadCount;
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
    2680:	2300      	movs	r3, #0
    2682:	e001      	b.n	2688 <Socket_ReadSocketData+0x78>
    2684:	1c25      	adds	r5, r4, #0
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
		do
		{
			u8SetRxDone = 1;
    2686:	2301      	movs	r3, #1
			if(s16Diff > 0)
			{
				u8SetRxDone = 0;
				u16Read		= gastrSockets[sock].u16UserBufferSize;
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    2688:	465a      	mov	r2, fp
    268a:	4641      	mov	r1, r8
    268c:	5889      	ldr	r1, [r1, r2]
    268e:	4648      	mov	r0, r9
    2690:	1c2a      	adds	r2, r5, #0
    2692:	4f17      	ldr	r7, [pc, #92]	; (26f0 <Socket_ReadSocketData+0xe0>)
    2694:	47b8      	blx	r7
    2696:	2800      	cmp	r0, #0
    2698:	d117      	bne.n	26ca <Socket_ReadSocketData+0xba>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    269a:	4b14      	ldr	r3, [pc, #80]	; (26ec <Socket_ReadSocketData+0xdc>)
    269c:	4642      	mov	r2, r8
    269e:	58d3      	ldr	r3, [r2, r3]
    26a0:	6033      	str	r3, [r6, #0]
				pstrRecv->s16BufferSize		= u16Read;
    26a2:	80b5      	strh	r5, [r6, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    26a4:	88f3      	ldrh	r3, [r6, #6]
    26a6:	1b5b      	subs	r3, r3, r5
    26a8:	80f3      	strh	r3, [r6, #6]

				if (gpfAppSocketCb)
    26aa:	4b12      	ldr	r3, [pc, #72]	; (26f4 <Socket_ReadSocketData+0xe4>)
    26ac:	681b      	ldr	r3, [r3, #0]
    26ae:	2b00      	cmp	r3, #0
    26b0:	d005      	beq.n	26be <Socket_ReadSocketData+0xae>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    26b2:	4b10      	ldr	r3, [pc, #64]	; (26f4 <Socket_ReadSocketData+0xe4>)
    26b4:	681b      	ldr	r3, [r3, #0]
    26b6:	9801      	ldr	r0, [sp, #4]
    26b8:	9900      	ldr	r1, [sp, #0]
    26ba:	1c32      	adds	r2, r6, #0
    26bc:	4798      	blx	r3

				u16ReadCount -= u16Read;
    26be:	1b64      	subs	r4, r4, r5
    26c0:	b2a4      	uxth	r4, r4
				u32Address += u16Read;
    26c2:	44a9      	add	r9, r5
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    26c4:	2c00      	cmp	r4, #0
    26c6:	d1d1      	bne.n	266c <Socket_ReadSocketData+0x5c>
    26c8:	e008      	b.n	26dc <Socket_ReadSocketData+0xcc>
				u16ReadCount -= u16Read;
				u32Address += u16Read;
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    26ca:	480b      	ldr	r0, [pc, #44]	; (26f8 <Socket_ReadSocketData+0xe8>)
    26cc:	4d0b      	ldr	r5, [pc, #44]	; (26fc <Socket_ReadSocketData+0xec>)
    26ce:	47a8      	blx	r5
    26d0:	480b      	ldr	r0, [pc, #44]	; (2700 <Socket_ReadSocketData+0xf0>)
    26d2:	1c21      	adds	r1, r4, #0
    26d4:	47a8      	blx	r5
    26d6:	200d      	movs	r0, #13
    26d8:	4b0a      	ldr	r3, [pc, #40]	; (2704 <Socket_ReadSocketData+0xf4>)
    26da:	4798      	blx	r3
				break;
			}
		}while(u16ReadCount != 0);
	}
}
    26dc:	b003      	add	sp, #12
    26de:	bc3c      	pop	{r2, r3, r4, r5}
    26e0:	4690      	mov	r8, r2
    26e2:	4699      	mov	r9, r3
    26e4:	46a2      	mov	sl, r4
    26e6:	46ab      	mov	fp, r5
    26e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ea:	46c0      	nop			; (mov r8, r8)
    26ec:	200003b0 	.word	0x200003b0
    26f0:	00000b99 	.word	0x00000b99
    26f4:	20000434 	.word	0x20000434
    26f8:	0000a574 	.word	0x0000a574
    26fc:	00008bed 	.word	0x00008bed
    2700:	0000b070 	.word	0x0000b070
    2704:	00008c21 	.word	0x00008c21

00002708 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    2708:	b5f0      	push	{r4, r5, r6, r7, lr}
    270a:	465f      	mov	r7, fp
    270c:	4656      	mov	r6, sl
    270e:	464d      	mov	r5, r9
    2710:	4644      	mov	r4, r8
    2712:	b4f0      	push	{r4, r5, r6, r7}
    2714:	b09b      	sub	sp, #108	; 0x6c
    2716:	1c0d      	adds	r5, r1, #0
    2718:	1c14      	adds	r4, r2, #0
	if(u8OpCode == SOCKET_CMD_BIND)
    271a:	2841      	cmp	r0, #65	; 0x41
    271c:	d11a      	bne.n	2754 <m2m_ip_cb+0x4c>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    271e:	1c10      	adds	r0, r2, #0
    2720:	a909      	add	r1, sp, #36	; 0x24
    2722:	2204      	movs	r2, #4
    2724:	2300      	movs	r3, #0
    2726:	4cb3      	ldr	r4, [pc, #716]	; (29f4 <m2m_ip_cb+0x2ec>)
    2728:	47a0      	blx	r4
    272a:	2800      	cmp	r0, #0
    272c:	d000      	beq.n	2730 <m2m_ip_cb+0x28>
    272e:	e159      	b.n	29e4 <m2m_ip_cb+0x2dc>
		{
			strBind.status = strBindReply.s8Status;
    2730:	ab09      	add	r3, sp, #36	; 0x24
    2732:	785a      	ldrb	r2, [r3, #1]
    2734:	ab05      	add	r3, sp, #20
    2736:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2738:	4baf      	ldr	r3, [pc, #700]	; (29f8 <m2m_ip_cb+0x2f0>)
    273a:	681b      	ldr	r3, [r3, #0]
    273c:	2b00      	cmp	r3, #0
    273e:	d100      	bne.n	2742 <m2m_ip_cb+0x3a>
    2740:	e150      	b.n	29e4 <m2m_ip_cb+0x2dc>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    2742:	4bad      	ldr	r3, [pc, #692]	; (29f8 <m2m_ip_cb+0x2f0>)
    2744:	681b      	ldr	r3, [r3, #0]
    2746:	aa09      	add	r2, sp, #36	; 0x24
    2748:	2000      	movs	r0, #0
    274a:	5610      	ldrsb	r0, [r2, r0]
    274c:	2101      	movs	r1, #1
    274e:	aa05      	add	r2, sp, #20
    2750:	4798      	blx	r3
    2752:	e147      	b.n	29e4 <m2m_ip_cb+0x2dc>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    2754:	2842      	cmp	r0, #66	; 0x42
    2756:	d11a      	bne.n	278e <m2m_ip_cb+0x86>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    2758:	1c10      	adds	r0, r2, #0
    275a:	a909      	add	r1, sp, #36	; 0x24
    275c:	2204      	movs	r2, #4
    275e:	2300      	movs	r3, #0
    2760:	4ca4      	ldr	r4, [pc, #656]	; (29f4 <m2m_ip_cb+0x2ec>)
    2762:	47a0      	blx	r4
    2764:	2800      	cmp	r0, #0
    2766:	d000      	beq.n	276a <m2m_ip_cb+0x62>
    2768:	e13c      	b.n	29e4 <m2m_ip_cb+0x2dc>
		{
			strListen.status = strListenReply.s8Status;
    276a:	ab09      	add	r3, sp, #36	; 0x24
    276c:	785a      	ldrb	r2, [r3, #1]
    276e:	ab05      	add	r3, sp, #20
    2770:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    2772:	4ba1      	ldr	r3, [pc, #644]	; (29f8 <m2m_ip_cb+0x2f0>)
    2774:	681b      	ldr	r3, [r3, #0]
    2776:	2b00      	cmp	r3, #0
    2778:	d100      	bne.n	277c <m2m_ip_cb+0x74>
    277a:	e133      	b.n	29e4 <m2m_ip_cb+0x2dc>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    277c:	4b9e      	ldr	r3, [pc, #632]	; (29f8 <m2m_ip_cb+0x2f0>)
    277e:	681b      	ldr	r3, [r3, #0]
    2780:	aa09      	add	r2, sp, #36	; 0x24
    2782:	2000      	movs	r0, #0
    2784:	5610      	ldrsb	r0, [r2, r0]
    2786:	2102      	movs	r1, #2
    2788:	aa05      	add	r2, sp, #20
    278a:	4798      	blx	r3
    278c:	e12a      	b.n	29e4 <m2m_ip_cb+0x2dc>
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    278e:	2843      	cmp	r0, #67	; 0x43
    2790:	d143      	bne.n	281a <m2m_ip_cb+0x112>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    2792:	1c10      	adds	r0, r2, #0
    2794:	a905      	add	r1, sp, #20
    2796:	220c      	movs	r2, #12
    2798:	2300      	movs	r3, #0
    279a:	4c96      	ldr	r4, [pc, #600]	; (29f4 <m2m_ip_cb+0x2ec>)
    279c:	47a0      	blx	r4
    279e:	2800      	cmp	r0, #0
    27a0:	d000      	beq.n	27a4 <m2m_ip_cb+0x9c>
    27a2:	e11f      	b.n	29e4 <m2m_ip_cb+0x2dc>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    27a4:	ab05      	add	r3, sp, #20
    27a6:	7a59      	ldrb	r1, [r3, #9]
    27a8:	b24b      	sxtb	r3, r1
    27aa:	2b00      	cmp	r3, #0
    27ac:	db1e      	blt.n	27ec <m2m_ip_cb+0xe4>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    27ae:	005a      	lsls	r2, r3, #1
    27b0:	18d2      	adds	r2, r2, r3
    27b2:	0092      	lsls	r2, r2, #2
    27b4:	4891      	ldr	r0, [pc, #580]	; (29fc <m2m_ip_cb+0x2f4>)
    27b6:	1882      	adds	r2, r0, r2
    27b8:	2000      	movs	r0, #0
    27ba:	71d0      	strb	r0, [r2, #7]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    27bc:	3001      	adds	r0, #1
    27be:	7190      	strb	r0, [r2, #6]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    27c0:	488f      	ldr	r0, [pc, #572]	; (2a00 <m2m_ip_cb+0x2f8>)
    27c2:	8802      	ldrh	r2, [r0, #0]
    27c4:	3201      	adds	r2, #1
    27c6:	b292      	uxth	r2, r2
    27c8:	8002      	strh	r2, [r0, #0]
				if(gu16SessionID == 0)
    27ca:	8802      	ldrh	r2, [r0, #0]
    27cc:	b292      	uxth	r2, r2
    27ce:	2a00      	cmp	r2, #0
    27d0:	d103      	bne.n	27da <m2m_ip_cb+0xd2>
					++gu16SessionID;
    27d2:	8802      	ldrh	r2, [r0, #0]
    27d4:	3201      	adds	r2, #1
    27d6:	b292      	uxth	r2, r2
    27d8:	8002      	strh	r2, [r0, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    27da:	4a89      	ldr	r2, [pc, #548]	; (2a00 <m2m_ip_cb+0x2f8>)
    27dc:	8812      	ldrh	r2, [r2, #0]
    27de:	b292      	uxth	r2, r2
    27e0:	0058      	lsls	r0, r3, #1
    27e2:	18c3      	adds	r3, r0, r3
    27e4:	009b      	lsls	r3, r3, #2
    27e6:	4885      	ldr	r0, [pc, #532]	; (29fc <m2m_ip_cb+0x2f4>)
    27e8:	18c3      	adds	r3, r0, r3
    27ea:	815a      	strh	r2, [r3, #10]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    27ec:	ab09      	add	r3, sp, #36	; 0x24
    27ee:	7019      	strb	r1, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    27f0:	2202      	movs	r2, #2
    27f2:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    27f4:	aa05      	add	r2, sp, #20
    27f6:	8851      	ldrh	r1, [r2, #2]
    27f8:	80d9      	strh	r1, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    27fa:	9a06      	ldr	r2, [sp, #24]
    27fc:	920b      	str	r2, [sp, #44]	; 0x2c
			if(gpfAppSocketCb)
    27fe:	4b7e      	ldr	r3, [pc, #504]	; (29f8 <m2m_ip_cb+0x2f0>)
    2800:	681b      	ldr	r3, [r3, #0]
    2802:	2b00      	cmp	r3, #0
    2804:	d100      	bne.n	2808 <m2m_ip_cb+0x100>
    2806:	e0ed      	b.n	29e4 <m2m_ip_cb+0x2dc>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    2808:	4b7b      	ldr	r3, [pc, #492]	; (29f8 <m2m_ip_cb+0x2f0>)
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	aa05      	add	r2, sp, #20
    280e:	2008      	movs	r0, #8
    2810:	5610      	ldrsb	r0, [r2, r0]
    2812:	2104      	movs	r1, #4
    2814:	aa09      	add	r2, sp, #36	; 0x24
    2816:	4798      	blx	r3
    2818:	e0e4      	b.n	29e4 <m2m_ip_cb+0x2dc>
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    281a:	2844      	cmp	r0, #68	; 0x44
    281c:	d001      	beq.n	2822 <m2m_ip_cb+0x11a>
    281e:	284b      	cmp	r0, #75	; 0x4b
    2820:	d11a      	bne.n	2858 <m2m_ip_cb+0x150>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    2822:	1c20      	adds	r0, r4, #0
    2824:	a909      	add	r1, sp, #36	; 0x24
    2826:	2204      	movs	r2, #4
    2828:	2300      	movs	r3, #0
    282a:	4c72      	ldr	r4, [pc, #456]	; (29f4 <m2m_ip_cb+0x2ec>)
    282c:	47a0      	blx	r4
    282e:	2800      	cmp	r0, #0
    2830:	d000      	beq.n	2834 <m2m_ip_cb+0x12c>
    2832:	e0d7      	b.n	29e4 <m2m_ip_cb+0x2dc>
		{
			strConnMsg.sock		= strConnectReply.sock;
    2834:	aa09      	add	r2, sp, #36	; 0x24
    2836:	7810      	ldrb	r0, [r2, #0]
    2838:	ab05      	add	r3, sp, #20
    283a:	7018      	strb	r0, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    283c:	7852      	ldrb	r2, [r2, #1]
    283e:	705a      	strb	r2, [r3, #1]
			if(gpfAppSocketCb)
    2840:	4b6d      	ldr	r3, [pc, #436]	; (29f8 <m2m_ip_cb+0x2f0>)
    2842:	681b      	ldr	r3, [r3, #0]
    2844:	2b00      	cmp	r3, #0
    2846:	d100      	bne.n	284a <m2m_ip_cb+0x142>
    2848:	e0cc      	b.n	29e4 <m2m_ip_cb+0x2dc>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    284a:	4b6b      	ldr	r3, [pc, #428]	; (29f8 <m2m_ip_cb+0x2f0>)
    284c:	681b      	ldr	r3, [r3, #0]
    284e:	b240      	sxtb	r0, r0
    2850:	2105      	movs	r1, #5
    2852:	aa05      	add	r2, sp, #20
    2854:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    2856:	e0c5      	b.n	29e4 <m2m_ip_cb+0x2dc>
			strConnMsg.s8Error	= strConnectReply.s8Error;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    2858:	284a      	cmp	r0, #74	; 0x4a
    285a:	d113      	bne.n	2884 <m2m_ip_cb+0x17c>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    285c:	1c10      	adds	r0, r2, #0
    285e:	a909      	add	r1, sp, #36	; 0x24
    2860:	2244      	movs	r2, #68	; 0x44
    2862:	2300      	movs	r3, #0
    2864:	4c63      	ldr	r4, [pc, #396]	; (29f4 <m2m_ip_cb+0x2ec>)
    2866:	47a0      	blx	r4
    2868:	2800      	cmp	r0, #0
    286a:	d000      	beq.n	286e <m2m_ip_cb+0x166>
    286c:	e0ba      	b.n	29e4 <m2m_ip_cb+0x2dc>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    286e:	9919      	ldr	r1, [sp, #100]	; 0x64
			if(gpfAppResolveCb)
    2870:	4b64      	ldr	r3, [pc, #400]	; (2a04 <m2m_ip_cb+0x2fc>)
    2872:	681b      	ldr	r3, [r3, #0]
    2874:	2b00      	cmp	r3, #0
    2876:	d100      	bne.n	287a <m2m_ip_cb+0x172>
    2878:	e0b4      	b.n	29e4 <m2m_ip_cb+0x2dc>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    287a:	4b62      	ldr	r3, [pc, #392]	; (2a04 <m2m_ip_cb+0x2fc>)
    287c:	681b      	ldr	r3, [r3, #0]
    287e:	a809      	add	r0, sp, #36	; 0x24
    2880:	4798      	blx	r3
    2882:	e0af      	b.n	29e4 <m2m_ip_cb+0x2dc>
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    2884:	2846      	cmp	r0, #70	; 0x46
    2886:	d006      	beq.n	2896 <m2m_ip_cb+0x18e>
    2888:	2848      	cmp	r0, #72	; 0x48
    288a:	d007      	beq.n	289c <m2m_ip_cb+0x194>
    288c:	284d      	cmp	r0, #77	; 0x4d
    288e:	d163      	bne.n	2958 <m2m_ip_cb+0x250>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    2890:	2306      	movs	r3, #6
    2892:	4699      	mov	r9, r3
    2894:	e004      	b.n	28a0 <m2m_ip_cb+0x198>
    2896:	2306      	movs	r3, #6
    2898:	4699      	mov	r9, r3
    289a:	e001      	b.n	28a0 <m2m_ip_cb+0x198>
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    289c:	2309      	movs	r3, #9
    289e:	4699      	mov	r9, r3

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    28a0:	1c20      	adds	r0, r4, #0
    28a2:	a905      	add	r1, sp, #20
    28a4:	2210      	movs	r2, #16
    28a6:	2300      	movs	r3, #0
    28a8:	4f52      	ldr	r7, [pc, #328]	; (29f4 <m2m_ip_cb+0x2ec>)
    28aa:	47b8      	blx	r7
    28ac:	2800      	cmp	r0, #0
    28ae:	d000      	beq.n	28b2 <m2m_ip_cb+0x1aa>
    28b0:	e098      	b.n	29e4 <m2m_ip_cb+0x2dc>
		{
			uint16 u16SessionID = 0;

			sock			= strRecvReply.sock;
    28b2:	a905      	add	r1, sp, #20
    28b4:	7b0b      	ldrb	r3, [r1, #12]
    28b6:	4698      	mov	r8, r3
			u16SessionID = strRecvReply.u16SessionID;
    28b8:	89cf      	ldrh	r7, [r1, #14]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    28ba:	466a      	mov	r2, sp
    28bc:	73d3      	strb	r3, [r2, #15]
    28be:	466b      	mov	r3, sp
    28c0:	220f      	movs	r2, #15
    28c2:	569a      	ldrsb	r2, [r3, r2]
    28c4:	0050      	lsls	r0, r2, #1
    28c6:	1883      	adds	r3, r0, r2
    28c8:	009b      	lsls	r3, r3, #2
    28ca:	4e4c      	ldr	r6, [pc, #304]	; (29fc <m2m_ip_cb+0x2f4>)
    28cc:	46b4      	mov	ip, r6
    28ce:	4463      	add	r3, ip
    28d0:	2600      	movs	r6, #0
    28d2:	721e      	strb	r6, [r3, #8]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    28d4:	890b      	ldrh	r3, [r1, #8]
    28d6:	469a      	mov	sl, r3
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    28d8:	894b      	ldrh	r3, [r1, #10]
    28da:	469c      	mov	ip, r3
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    28dc:	ab09      	add	r3, sp, #36	; 0x24
    28de:	884e      	ldrh	r6, [r1, #2]
    28e0:	815e      	strh	r6, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    28e2:	9906      	ldr	r1, [sp, #24]
    28e4:	910c      	str	r1, [sp, #48]	; 0x30

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    28e6:	1882      	adds	r2, r0, r2
    28e8:	0092      	lsls	r2, r2, #2
    28ea:	4b44      	ldr	r3, [pc, #272]	; (29fc <m2m_ip_cb+0x2f4>)
    28ec:	469b      	mov	fp, r3
    28ee:	445a      	add	r2, fp
    28f0:	3208      	adds	r2, #8
    28f2:	8852      	ldrh	r2, [r2, #2]
    28f4:	b292      	uxth	r2, r2
    28f6:	42ba      	cmp	r2, r7
    28f8:	d125      	bne.n	2946 <m2m_ip_cb+0x23e>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    28fa:	4653      	mov	r3, sl
    28fc:	b21a      	sxth	r2, r3
    28fe:	2a00      	cmp	r2, #0
    2900:	dd0d      	ble.n	291e <m2m_ip_cb+0x216>
    2902:	42aa      	cmp	r2, r5
    2904:	da0b      	bge.n	291e <m2m_ip_cb+0x216>
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    2906:	466a      	mov	r2, sp
    2908:	200f      	movs	r0, #15
    290a:	5610      	ldrsb	r0, [r2, r0]
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    290c:	4464      	add	r4, ip
					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    290e:	4653      	mov	r3, sl
    2910:	9300      	str	r3, [sp, #0]
    2912:	a909      	add	r1, sp, #36	; 0x24
    2914:	464a      	mov	r2, r9
    2916:	1c23      	adds	r3, r4, #0
    2918:	4c3b      	ldr	r4, [pc, #236]	; (2a08 <m2m_ip_cb+0x300>)
    291a:	47a0      	blx	r4
    291c:	e062      	b.n	29e4 <m2m_ip_cb+0x2dc>
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    291e:	aa09      	add	r2, sp, #36	; 0x24
    2920:	4653      	mov	r3, sl
    2922:	8093      	strh	r3, [r2, #4]
					strRecvMsg.pu8Buffer		= NULL;
    2924:	2300      	movs	r3, #0
    2926:	9309      	str	r3, [sp, #36]	; 0x24
					if(gpfAppSocketCb)
    2928:	4b33      	ldr	r3, [pc, #204]	; (29f8 <m2m_ip_cb+0x2f0>)
    292a:	681b      	ldr	r3, [r3, #0]
    292c:	2b00      	cmp	r3, #0
    292e:	d059      	beq.n	29e4 <m2m_ip_cb+0x2dc>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    2930:	4b31      	ldr	r3, [pc, #196]	; (29f8 <m2m_ip_cb+0x2f0>)
    2932:	681b      	ldr	r3, [r3, #0]
    2934:	4642      	mov	r2, r8
    2936:	4669      	mov	r1, sp
    2938:	73ca      	strb	r2, [r1, #15]
    293a:	200f      	movs	r0, #15
    293c:	5608      	ldrsb	r0, [r1, r0]
    293e:	4649      	mov	r1, r9
    2940:	aa09      	add	r2, sp, #36	; 0x24
    2942:	4798      	blx	r3
    2944:	e04e      	b.n	29e4 <m2m_ip_cb+0x2dc>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    2946:	2d10      	cmp	r5, #16
    2948:	d94c      	bls.n	29e4 <m2m_ip_cb+0x2dc>
					hif_receive(0, NULL, 0, 1);
    294a:	2000      	movs	r0, #0
    294c:	2100      	movs	r1, #0
    294e:	2200      	movs	r2, #0
    2950:	2301      	movs	r3, #1
    2952:	4c28      	ldr	r4, [pc, #160]	; (29f4 <m2m_ip_cb+0x2ec>)
    2954:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    2956:	e045      	b.n	29e4 <m2m_ip_cb+0x2dc>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2958:	2845      	cmp	r0, #69	; 0x45
    295a:	d005      	beq.n	2968 <m2m_ip_cb+0x260>
    295c:	2847      	cmp	r0, #71	; 0x47
    295e:	d005      	beq.n	296c <m2m_ip_cb+0x264>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2960:	2507      	movs	r5, #7
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    2962:	284c      	cmp	r0, #76	; 0x4c
    2964:	d003      	beq.n	296e <m2m_ip_cb+0x266>
    2966:	e026      	b.n	29b6 <m2m_ip_cb+0x2ae>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    2968:	2507      	movs	r5, #7
    296a:	e000      	b.n	296e <m2m_ip_cb+0x266>

		if(u8OpCode == SOCKET_CMD_SENDTO)
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    296c:	2508      	movs	r5, #8

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    296e:	1c20      	adds	r0, r4, #0
    2970:	a909      	add	r1, sp, #36	; 0x24
    2972:	2208      	movs	r2, #8
    2974:	2300      	movs	r3, #0
    2976:	4c1f      	ldr	r4, [pc, #124]	; (29f4 <m2m_ip_cb+0x2ec>)
    2978:	47a0      	blx	r4
    297a:	2800      	cmp	r0, #0
    297c:	d132      	bne.n	29e4 <m2m_ip_cb+0x2dc>
		{
			uint16 u16SessionID = 0;
			
			sock = strReply.sock;
    297e:	ab09      	add	r3, sp, #36	; 0x24
    2980:	7818      	ldrb	r0, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    2982:	889a      	ldrh	r2, [r3, #4]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    2984:	8859      	ldrh	r1, [r3, #2]
    2986:	ab05      	add	r3, sp, #20
    2988:	8019      	strh	r1, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    298a:	b243      	sxtb	r3, r0
    298c:	0059      	lsls	r1, r3, #1
    298e:	18cb      	adds	r3, r1, r3
    2990:	009b      	lsls	r3, r3, #2
    2992:	491a      	ldr	r1, [pc, #104]	; (29fc <m2m_ip_cb+0x2f4>)
    2994:	18cb      	adds	r3, r1, r3
    2996:	3308      	adds	r3, #8
    2998:	885b      	ldrh	r3, [r3, #2]
    299a:	b29b      	uxth	r3, r3
    299c:	4293      	cmp	r3, r2
    299e:	d121      	bne.n	29e4 <m2m_ip_cb+0x2dc>
			{
				if(gpfAppSocketCb)
    29a0:	4b15      	ldr	r3, [pc, #84]	; (29f8 <m2m_ip_cb+0x2f0>)
    29a2:	681b      	ldr	r3, [r3, #0]
    29a4:	2b00      	cmp	r3, #0
    29a6:	d01d      	beq.n	29e4 <m2m_ip_cb+0x2dc>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    29a8:	4b13      	ldr	r3, [pc, #76]	; (29f8 <m2m_ip_cb+0x2f0>)
    29aa:	681b      	ldr	r3, [r3, #0]
    29ac:	b240      	sxtb	r0, r0
    29ae:	1c29      	adds	r1, r5, #0
    29b0:	aa05      	add	r2, sp, #20
    29b2:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    29b4:	e016      	b.n	29e4 <m2m_ip_cb+0x2dc>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    29b6:	2852      	cmp	r0, #82	; 0x52
    29b8:	d114      	bne.n	29e4 <m2m_ip_cb+0x2dc>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    29ba:	1c10      	adds	r0, r2, #0
    29bc:	a909      	add	r1, sp, #36	; 0x24
    29be:	2214      	movs	r2, #20
    29c0:	2301      	movs	r3, #1
    29c2:	4c0c      	ldr	r4, [pc, #48]	; (29f4 <m2m_ip_cb+0x2ec>)
    29c4:	47a0      	blx	r4
    29c6:	2800      	cmp	r0, #0
    29c8:	d10c      	bne.n	29e4 <m2m_ip_cb+0x2dc>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    29ca:	4b10      	ldr	r3, [pc, #64]	; (2a0c <m2m_ip_cb+0x304>)
    29cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    29ce:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	2b00      	cmp	r3, #0
    29d4:	d006      	beq.n	29e4 <m2m_ip_cb+0x2dc>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    29d6:	4b0d      	ldr	r3, [pc, #52]	; (2a0c <m2m_ip_cb+0x304>)
    29d8:	681c      	ldr	r4, [r3, #0]
    29da:	ab09      	add	r3, sp, #36	; 0x24
    29dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    29de:	7c1a      	ldrb	r2, [r3, #16]
    29e0:	9809      	ldr	r0, [sp, #36]	; 0x24
    29e2:	47a0      	blx	r4
			}
		}
	}
}
    29e4:	b01b      	add	sp, #108	; 0x6c
    29e6:	bc3c      	pop	{r2, r3, r4, r5}
    29e8:	4690      	mov	r8, r2
    29ea:	4699      	mov	r9, r3
    29ec:	46a2      	mov	sl, r4
    29ee:	46ab      	mov	fp, r5
    29f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29f2:	46c0      	nop			; (mov r8, r8)
    29f4:	00000b99 	.word	0x00000b99
    29f8:	20000434 	.word	0x20000434
    29fc:	200003b0 	.word	0x200003b0
    2a00:	20000192 	.word	0x20000192
    2a04:	2000043c 	.word	0x2000043c
    2a08:	00002611 	.word	0x00002611
    2a0c:	20000438 	.word	0x20000438

00002a10 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    2a10:	b508      	push	{r3, lr}
	if(gbSocketInit==0)
    2a12:	4b0a      	ldr	r3, [pc, #40]	; (2a3c <socketInit+0x2c>)
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d10e      	bne.n	2a38 <socketInit+0x28>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    2a1a:	4809      	ldr	r0, [pc, #36]	; (2a40 <socketInit+0x30>)
    2a1c:	2100      	movs	r1, #0
    2a1e:	2284      	movs	r2, #132	; 0x84
    2a20:	4b08      	ldr	r3, [pc, #32]	; (2a44 <socketInit+0x34>)
    2a22:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GRP_IP,m2m_ip_cb);
    2a24:	2002      	movs	r0, #2
    2a26:	4908      	ldr	r1, [pc, #32]	; (2a48 <socketInit+0x38>)
    2a28:	4b08      	ldr	r3, [pc, #32]	; (2a4c <socketInit+0x3c>)
    2a2a:	4798      	blx	r3
		gbSocketInit=1;
    2a2c:	2201      	movs	r2, #1
    2a2e:	4b03      	ldr	r3, [pc, #12]	; (2a3c <socketInit+0x2c>)
    2a30:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    2a32:	2200      	movs	r2, #0
    2a34:	4b06      	ldr	r3, [pc, #24]	; (2a50 <socketInit+0x40>)
    2a36:	801a      	strh	r2, [r3, #0]
	}
}
    2a38:	bd08      	pop	{r3, pc}
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	20000191 	.word	0x20000191
    2a40:	200003b0 	.word	0x200003b0
    2a44:	00000539 	.word	0x00000539
    2a48:	00002709 	.word	0x00002709
    2a4c:	00000cb5 	.word	0x00000cb5
    2a50:	20000192 	.word	0x20000192

00002a54 <registerSocketCallback>:
Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
	gpfAppSocketCb = pfAppSocketCb;
    2a54:	4b02      	ldr	r3, [pc, #8]	; (2a60 <registerSocketCallback+0xc>)
    2a56:	6018      	str	r0, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    2a58:	4b02      	ldr	r3, [pc, #8]	; (2a64 <registerSocketCallback+0x10>)
    2a5a:	6019      	str	r1, [r3, #0]
}
    2a5c:	4770      	bx	lr
    2a5e:	46c0      	nop			; (mov r8, r8)
    2a60:	20000434 	.word	0x20000434
    2a64:	2000043c 	.word	0x2000043c

00002a68 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2a68:	b530      	push	{r4, r5, lr}
    2a6a:	b087      	sub	sp, #28
	SOCKET	sock = -1;
    2a6c:	24ff      	movs	r4, #255	; 0xff
	uint8	u8Count,u8SocketCount = MAX_SOCKET;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2a6e:	2802      	cmp	r0, #2
    2a70:	d153      	bne.n	2b1a <socket+0xb2>
	{
		if(u8Type == SOCK_STREAM)
    2a72:	2901      	cmp	r1, #1
    2a74:	d045      	beq.n	2b02 <socket+0x9a>
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    2a76:	3cf4      	subs	r4, #244	; 0xf4
			u8Count = TCP_SOCK_MAX;
    2a78:	3005      	adds	r0, #5
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
			u8Count = 0;
		}
		else if(u8Type == SOCK_DGRAM)
    2a7a:	2902      	cmp	r1, #2
    2a7c:	d043      	beq.n	2b06 <socket+0x9e>
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;
    2a7e:	34f4      	adds	r4, #244	; 0xf4
    2a80:	e04b      	b.n	2b1a <socket+0xb2>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    2a82:	1c01      	adds	r1, r0, #0
    2a84:	0043      	lsls	r3, r0, #1
    2a86:	181b      	adds	r3, r3, r0
    2a88:	009b      	lsls	r3, r3, #2
    2a8a:	18eb      	adds	r3, r5, r3
    2a8c:	799b      	ldrb	r3, [r3, #6]
    2a8e:	2b00      	cmp	r3, #0
    2a90:	d131      	bne.n	2af6 <socket+0x8e>
			{
				gastrSockets[u8Count].bIsUsed = 1;
    2a92:	004b      	lsls	r3, r1, #1
    2a94:	185b      	adds	r3, r3, r1
    2a96:	009b      	lsls	r3, r3, #2
    2a98:	4c21      	ldr	r4, [pc, #132]	; (2b20 <socket+0xb8>)
    2a9a:	18e3      	adds	r3, r4, r3
    2a9c:	2401      	movs	r4, #1
    2a9e:	719c      	strb	r4, [r3, #6]
				
				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2aa0:	4c20      	ldr	r4, [pc, #128]	; (2b24 <socket+0xbc>)
    2aa2:	8823      	ldrh	r3, [r4, #0]
    2aa4:	3301      	adds	r3, #1
    2aa6:	b29b      	uxth	r3, r3
    2aa8:	8023      	strh	r3, [r4, #0]
				if(gu16SessionID == 0)
    2aaa:	8823      	ldrh	r3, [r4, #0]
    2aac:	b29b      	uxth	r3, r3
    2aae:	2b00      	cmp	r3, #0
    2ab0:	d103      	bne.n	2aba <socket+0x52>
					++gu16SessionID;
    2ab2:	8823      	ldrh	r3, [r4, #0]
    2ab4:	3301      	adds	r3, #1
    2ab6:	b29b      	uxth	r3, r3
    2ab8:	8023      	strh	r3, [r4, #0]
				
				gastrSockets[u8Count].u16SessionID = gu16SessionID;
    2aba:	4b1a      	ldr	r3, [pc, #104]	; (2b24 <socket+0xbc>)
    2abc:	881c      	ldrh	r4, [r3, #0]
    2abe:	b2a4      	uxth	r4, r4
    2ac0:	004b      	lsls	r3, r1, #1
    2ac2:	185b      	adds	r3, r3, r1
    2ac4:	009b      	lsls	r3, r3, #2
    2ac6:	4d16      	ldr	r5, [pc, #88]	; (2b20 <socket+0xb8>)
    2ac8:	18eb      	adds	r3, r5, r3
    2aca:	815c      	strh	r4, [r3, #10]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    2acc:	b2c4      	uxtb	r4, r0

				if(u8Flags & SOCKET_FLAGS_SSL)
    2ace:	07d3      	lsls	r3, r2, #31
    2ad0:	d523      	bpl.n	2b1a <socket+0xb2>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    2ad2:	aa05      	add	r2, sp, #20
    2ad4:	7014      	strb	r4, [r2, #0]
					gastrSockets[u8Count].u8SSLFlags = SSL_FLAGS_ACTIVE;
    2ad6:	004b      	lsls	r3, r1, #1
    2ad8:	1859      	adds	r1, r3, r1
    2ada:	0089      	lsls	r1, r1, #2
    2adc:	186b      	adds	r3, r5, r1
    2ade:	2101      	movs	r1, #1
    2ae0:	71d9      	strb	r1, [r3, #7]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2ae2:	2300      	movs	r3, #0
    2ae4:	9300      	str	r3, [sp, #0]
    2ae6:	9301      	str	r3, [sp, #4]
    2ae8:	9302      	str	r3, [sp, #8]
    2aea:	2002      	movs	r0, #2
    2aec:	314f      	adds	r1, #79	; 0x4f
    2aee:	3304      	adds	r3, #4
    2af0:	4d0d      	ldr	r5, [pc, #52]	; (2b28 <socket+0xc0>)
    2af2:	47a8      	blx	r5
    2af4:	e011      	b.n	2b1a <socket+0xb2>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    2af6:	3001      	adds	r0, #1
    2af8:	b2c0      	uxtb	r0, r0
    2afa:	42a0      	cmp	r0, r4
    2afc:	d3c1      	bcc.n	2a82 <socket+0x1a>
Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
	SOCKET	sock = -1;
    2afe:	24ff      	movs	r4, #255	; 0xff
    2b00:	e00b      	b.n	2b1a <socket+0xb2>
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
	{
		if(u8Type == SOCK_STREAM)
		{
			u8SocketCount = TCP_SOCK_MAX;
    2b02:	2407      	movs	r4, #7
			u8Count = 0;
    2b04:	2000      	movs	r0, #0
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			if(gastrSockets[u8Count].bIsUsed == 0)
    2b06:	1c01      	adds	r1, r0, #0
    2b08:	0043      	lsls	r3, r0, #1
    2b0a:	181b      	adds	r3, r3, r0
    2b0c:	009b      	lsls	r3, r3, #2
    2b0e:	4d04      	ldr	r5, [pc, #16]	; (2b20 <socket+0xb8>)
    2b10:	18eb      	adds	r3, r5, r3
    2b12:	799b      	ldrb	r3, [r3, #6]
    2b14:	2b00      	cmp	r3, #0
    2b16:	d0bc      	beq.n	2a92 <socket+0x2a>
    2b18:	e7ed      	b.n	2af6 <socket+0x8e>
    2b1a:	b260      	sxtb	r0, r4
				break;
			}
		}
	}
	return sock;
}
    2b1c:	b007      	add	sp, #28
    2b1e:	bd30      	pop	{r4, r5, pc}
    2b20:	200003b0 	.word	0x200003b0
    2b24:	20000192 	.word	0x20000192
    2b28:	00000695 	.word	0x00000695

00002b2c <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2b2c:	b570      	push	{r4, r5, r6, lr}
    2b2e:	b088      	sub	sp, #32
    2b30:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2b32:	db36      	blt.n	2ba2 <connect+0x76>
    2b34:	2900      	cmp	r1, #0
    2b36:	d036      	beq.n	2ba6 <connect+0x7a>
    2b38:	0043      	lsls	r3, r0, #1
    2b3a:	181b      	adds	r3, r3, r0
    2b3c:	009b      	lsls	r3, r3, #2
    2b3e:	481e      	ldr	r0, [pc, #120]	; (2bb8 <connect+0x8c>)
    2b40:	18c3      	adds	r3, r0, r3
    2b42:	799b      	ldrb	r3, [r3, #6]
    2b44:	2b01      	cmp	r3, #1
    2b46:	d130      	bne.n	2baa <connect+0x7e>
    2b48:	2a00      	cmp	r2, #0
    2b4a:	d030      	beq.n	2bae <connect+0x82>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2b4c:	0063      	lsls	r3, r4, #1
    2b4e:	191b      	adds	r3, r3, r4
    2b50:	009b      	lsls	r3, r3, #2
    2b52:	18c3      	adds	r3, r0, r3
    2b54:	79db      	ldrb	r3, [r3, #7]
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2b56:	2644      	movs	r6, #68	; 0x44
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2b58:	07db      	lsls	r3, r3, #31
    2b5a:	d507      	bpl.n	2b6c <connect+0x40>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    2b5c:	0063      	lsls	r3, r4, #1
    2b5e:	191b      	adds	r3, r3, r4
    2b60:	009b      	lsls	r3, r3, #2
    2b62:	18c3      	adds	r3, r0, r3
    2b64:	79da      	ldrb	r2, [r3, #7]
    2b66:	ab05      	add	r3, sp, #20
    2b68:	725a      	strb	r2, [r3, #9]
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    2b6a:	3607      	adds	r6, #7
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
		}
		strConnect.sock = sock;
    2b6c:	ad05      	add	r5, sp, #20
    2b6e:	722c      	strb	r4, [r5, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    2b70:	1c28      	adds	r0, r5, #0
    2b72:	2208      	movs	r2, #8
    2b74:	4b11      	ldr	r3, [pc, #68]	; (2bbc <connect+0x90>)
    2b76:	4798      	blx	r3

		strConnect.strAddr.u16Family	= strConnect.strAddr.u16Family;
		strConnect.strAddr.u16Port		= strConnect.strAddr.u16Port;
		strConnect.strAddr.u32IPAddr	= strConnect.strAddr.u32IPAddr;
		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    2b78:	0063      	lsls	r3, r4, #1
    2b7a:	191c      	adds	r4, r3, r4
    2b7c:	00a4      	lsls	r4, r4, #2
    2b7e:	4b0e      	ldr	r3, [pc, #56]	; (2bb8 <connect+0x8c>)
    2b80:	191c      	adds	r4, r3, r4
    2b82:	8963      	ldrh	r3, [r4, #10]
    2b84:	816b      	strh	r3, [r5, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    2b86:	2300      	movs	r3, #0
    2b88:	9300      	str	r3, [sp, #0]
    2b8a:	9301      	str	r3, [sp, #4]
    2b8c:	9302      	str	r3, [sp, #8]
    2b8e:	2002      	movs	r0, #2
    2b90:	1c31      	adds	r1, r6, #0
    2b92:	1c2a      	adds	r2, r5, #0
    2b94:	330c      	adds	r3, #12
    2b96:	4c0a      	ldr	r4, [pc, #40]	; (2bc0 <connect+0x94>)
    2b98:	47a0      	blx	r4
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2b9a:	2800      	cmp	r0, #0
    2b9c:	d008      	beq.n	2bb0 <connect+0x84>
		{
			s8Ret = SOCK_ERR_INVALID;
    2b9e:	20f7      	movs	r0, #247	; 0xf7
    2ba0:	e006      	b.n	2bb0 <connect+0x84>
Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2ba2:	20fa      	movs	r0, #250	; 0xfa
    2ba4:	e004      	b.n	2bb0 <connect+0x84>
    2ba6:	20fa      	movs	r0, #250	; 0xfa
    2ba8:	e002      	b.n	2bb0 <connect+0x84>
    2baa:	20fa      	movs	r0, #250	; 0xfa
    2bac:	e000      	b.n	2bb0 <connect+0x84>
    2bae:	20fa      	movs	r0, #250	; 0xfa
		if(s8Ret != SOCK_ERR_NO_ERROR)
		{
			s8Ret = SOCK_ERR_INVALID;
		}
	}
	return s8Ret;
    2bb0:	b240      	sxtb	r0, r0
}
    2bb2:	b008      	add	sp, #32
    2bb4:	bd70      	pop	{r4, r5, r6, pc}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	200003b0 	.word	0x200003b0
    2bbc:	00000525 	.word	0x00000525
    2bc0:	00000695 	.word	0x00000695

00002bc4 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    2bc4:	b530      	push	{r4, r5, lr}
    2bc6:	b089      	sub	sp, #36	; 0x24
    2bc8:	1c0d      	adds	r5, r1, #0
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    2bca:	2800      	cmp	r0, #0
    2bcc:	db35      	blt.n	2c3a <send+0x76>
    2bce:	2900      	cmp	r1, #0
    2bd0:	d035      	beq.n	2c3e <send+0x7a>
    2bd2:	23af      	movs	r3, #175	; 0xaf
    2bd4:	00db      	lsls	r3, r3, #3
    2bd6:	429a      	cmp	r2, r3
    2bd8:	d833      	bhi.n	2c42 <send+0x7e>
    2bda:	0043      	lsls	r3, r0, #1
    2bdc:	181b      	adds	r3, r3, r0
    2bde:	009b      	lsls	r3, r3, #2
    2be0:	491b      	ldr	r1, [pc, #108]	; (2c50 <send+0x8c>)
    2be2:	18cb      	adds	r3, r1, r3
    2be4:	799b      	ldrb	r3, [r3, #6]
    2be6:	2b01      	cmp	r3, #1
    2be8:	d12d      	bne.n	2c46 <send+0x82>
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;

		strSend.sock		= sock;
    2bea:	ac04      	add	r4, sp, #16
    2bec:	7020      	strb	r0, [r4, #0]
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
    2bee:	8062      	strh	r2, [r4, #2]
		strSend.u16SessionID		= gastrSockets[sock].u16SessionID;
    2bf0:	0043      	lsls	r3, r0, #1
    2bf2:	181b      	adds	r3, r3, r0
    2bf4:	009b      	lsls	r3, r3, #2
    2bf6:	18cb      	adds	r3, r1, r3
    2bf8:	3308      	adds	r3, #8
    2bfa:	885b      	ldrh	r3, [r3, #2]
    2bfc:	81a3      	strh	r3, [r4, #12]
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    2bfe:	2450      	movs	r4, #80	; 0x50

		strSend.sock		= sock;
		strSend.u16DataSize	= NM_BSP_B_L_16(u16SendLength);
		strSend.u16SessionID		= gastrSockets[sock].u16SessionID;

		if(sock >= TCP_SOCK_MAX)
    2c00:	2806      	cmp	r0, #6
    2c02:	dd00      	ble.n	2c06 <send+0x42>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    2c04:	3c0c      	subs	r4, #12
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2c06:	0043      	lsls	r3, r0, #1
    2c08:	1818      	adds	r0, r3, r0
    2c0a:	0080      	lsls	r0, r0, #2
    2c0c:	4b10      	ldr	r3, [pc, #64]	; (2c50 <send+0x8c>)
    2c0e:	1818      	adds	r0, r3, r0
    2c10:	79c3      	ldrb	r3, [r0, #7]
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    2c12:	2145      	movs	r1, #69	; 0x45

		if(sock >= TCP_SOCK_MAX)
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2c14:	07db      	lsls	r3, r3, #31
    2c16:	d501      	bpl.n	2c1c <send+0x58>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    2c18:	3107      	adds	r1, #7
			u16DataOffset	= SSL_TX_PACKET_OFFSET;
    2c1a:	2455      	movs	r4, #85	; 0x55
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    2c1c:	2380      	movs	r3, #128	; 0x80
    2c1e:	4319      	orrs	r1, r3
    2c20:	9500      	str	r5, [sp, #0]
    2c22:	9201      	str	r2, [sp, #4]
    2c24:	9402      	str	r4, [sp, #8]
    2c26:	2002      	movs	r0, #2
    2c28:	aa04      	add	r2, sp, #16
    2c2a:	3b70      	subs	r3, #112	; 0x70
    2c2c:	4c09      	ldr	r4, [pc, #36]	; (2c54 <send+0x90>)
    2c2e:	47a0      	blx	r4
    2c30:	2300      	movs	r3, #0
		if(s16Ret != SOCK_ERR_NO_ERROR)
    2c32:	2800      	cmp	r0, #0
    2c34:	d008      	beq.n	2c48 <send+0x84>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    2c36:	4b08      	ldr	r3, [pc, #32]	; (2c58 <send+0x94>)
    2c38:	e006      	b.n	2c48 <send+0x84>
Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    2c3a:	4b08      	ldr	r3, [pc, #32]	; (2c5c <send+0x98>)
    2c3c:	e004      	b.n	2c48 <send+0x84>
    2c3e:	4b07      	ldr	r3, [pc, #28]	; (2c5c <send+0x98>)
    2c40:	e002      	b.n	2c48 <send+0x84>
    2c42:	4b06      	ldr	r3, [pc, #24]	; (2c5c <send+0x98>)
    2c44:	e000      	b.n	2c48 <send+0x84>
    2c46:	4b05      	ldr	r3, [pc, #20]	; (2c5c <send+0x98>)
		if(s16Ret != SOCK_ERR_NO_ERROR)
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
		}
	}
	return s16Ret;
    2c48:	b218      	sxth	r0, r3
}
    2c4a:	b009      	add	sp, #36	; 0x24
    2c4c:	bd30      	pop	{r4, r5, pc}
    2c4e:	46c0      	nop			; (mov r8, r8)
    2c50:	200003b0 	.word	0x200003b0
    2c54:	00000695 	.word	0x00000695
    2c58:	0000fff2 	.word	0x0000fff2
    2c5c:	0000fffa 	.word	0x0000fffa

00002c60 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    2c60:	b570      	push	{r4, r5, r6, lr}
    2c62:	b086      	sub	sp, #24
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    2c64:	2800      	cmp	r0, #0
    2c66:	db3a      	blt.n	2cde <recv+0x7e>
    2c68:	2900      	cmp	r1, #0
    2c6a:	d03a      	beq.n	2ce2 <recv+0x82>
    2c6c:	2a00      	cmp	r2, #0
    2c6e:	d03a      	beq.n	2ce6 <recv+0x86>
    2c70:	0044      	lsls	r4, r0, #1
    2c72:	1824      	adds	r4, r4, r0
    2c74:	00a4      	lsls	r4, r4, #2
    2c76:	4d1f      	ldr	r5, [pc, #124]	; (2cf4 <recv+0x94>)
    2c78:	192c      	adds	r4, r5, r4
    2c7a:	79a4      	ldrb	r4, [r4, #6]
    2c7c:	2c01      	cmp	r4, #1
    2c7e:	d134      	bne.n	2cea <recv+0x8a>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    2c80:	1c2e      	adds	r6, r5, #0
    2c82:	0044      	lsls	r4, r0, #1
    2c84:	1825      	adds	r5, r4, r0
    2c86:	00ad      	lsls	r5, r5, #2
    2c88:	51a9      	str	r1, [r5, r6]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    2c8a:	1971      	adds	r1, r6, r5
    2c8c:	808a      	strh	r2, [r1, #4]

		if(!gastrSockets[sock].bIsRecvPending)
    2c8e:	7a09      	ldrb	r1, [r1, #8]
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    2c90:	2200      	movs	r2, #0
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
    2c92:	2900      	cmp	r1, #0
    2c94:	d12a      	bne.n	2cec <recv+0x8c>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;

			gastrSockets[sock].bIsRecvPending = 1;
    2c96:	1972      	adds	r2, r6, r5
    2c98:	2101      	movs	r1, #1
    2c9a:	7211      	strb	r1, [r2, #8]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2c9c:	79d2      	ldrb	r2, [r2, #7]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;

		if(!gastrSockets[sock].bIsRecvPending)
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    2c9e:	3145      	adds	r1, #69	; 0x45

			gastrSockets[sock].bIsRecvPending = 1;
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2ca0:	07d2      	lsls	r2, r2, #31
    2ca2:	d500      	bpl.n	2ca6 <recv+0x46>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    2ca4:	3107      	adds	r1, #7
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    2ca6:	2b00      	cmp	r3, #0
    2ca8:	d102      	bne.n	2cb0 <recv+0x50>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    2caa:	3b01      	subs	r3, #1
    2cac:	9304      	str	r3, [sp, #16]
    2cae:	e000      	b.n	2cb2 <recv+0x52>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    2cb0:	9304      	str	r3, [sp, #16]
			strRecv.sock = sock;
    2cb2:	aa04      	add	r2, sp, #16
    2cb4:	7110      	strb	r0, [r2, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    2cb6:	0043      	lsls	r3, r0, #1
    2cb8:	1818      	adds	r0, r3, r0
    2cba:	0080      	lsls	r0, r0, #2
    2cbc:	4b0d      	ldr	r3, [pc, #52]	; (2cf4 <recv+0x94>)
    2cbe:	1818      	adds	r0, r3, r0
    2cc0:	8943      	ldrh	r3, [r0, #10]
    2cc2:	80d3      	strh	r3, [r2, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    2cc4:	2300      	movs	r3, #0
    2cc6:	9300      	str	r3, [sp, #0]
    2cc8:	9301      	str	r3, [sp, #4]
    2cca:	9302      	str	r3, [sp, #8]
    2ccc:	2002      	movs	r0, #2
    2cce:	3308      	adds	r3, #8
    2cd0:	4c09      	ldr	r4, [pc, #36]	; (2cf8 <recv+0x98>)
    2cd2:	47a0      	blx	r4
    2cd4:	2200      	movs	r2, #0
			if(s16Ret != SOCK_ERR_NO_ERROR)
    2cd6:	2800      	cmp	r0, #0
    2cd8:	d008      	beq.n	2cec <recv+0x8c>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    2cda:	4a08      	ldr	r2, [pc, #32]	; (2cfc <recv+0x9c>)
    2cdc:	e006      	b.n	2cec <recv+0x8c>
Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    2cde:	4a08      	ldr	r2, [pc, #32]	; (2d00 <recv+0xa0>)
    2ce0:	e004      	b.n	2cec <recv+0x8c>
    2ce2:	4a07      	ldr	r2, [pc, #28]	; (2d00 <recv+0xa0>)
    2ce4:	e002      	b.n	2cec <recv+0x8c>
    2ce6:	4a06      	ldr	r2, [pc, #24]	; (2d00 <recv+0xa0>)
    2ce8:	e000      	b.n	2cec <recv+0x8c>
    2cea:	4a05      	ldr	r2, [pc, #20]	; (2d00 <recv+0xa0>)
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
			}
		}
	}
	return s16Ret;
    2cec:	b210      	sxth	r0, r2
}
    2cee:	b006      	add	sp, #24
    2cf0:	bd70      	pop	{r4, r5, r6, pc}
    2cf2:	46c0      	nop			; (mov r8, r8)
    2cf4:	200003b0 	.word	0x200003b0
    2cf8:	00000695 	.word	0x00000695
    2cfc:	0000fff2 	.word	0x0000fff2
    2d00:	0000fffa 	.word	0x0000fffa

00002d04 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    2d04:	b530      	push	{r4, r5, lr}
    2d06:	b087      	sub	sp, #28
    2d08:	1e04      	subs	r4, r0, #0
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    2d0a:	db2d      	blt.n	2d68 <close+0x64>
    2d0c:	0043      	lsls	r3, r0, #1
    2d0e:	181b      	adds	r3, r3, r0
    2d10:	009b      	lsls	r3, r3, #2
    2d12:	4a18      	ldr	r2, [pc, #96]	; (2d74 <close+0x70>)
    2d14:	18d3      	adds	r3, r2, r3
    2d16:	799b      	ldrb	r3, [r3, #6]
    2d18:	2b01      	cmp	r3, #1
    2d1a:	d127      	bne.n	2d6c <close+0x68>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    2d1c:	a905      	add	r1, sp, #20
    2d1e:	7008      	strb	r0, [r1, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    2d20:	0043      	lsls	r3, r0, #1
    2d22:	181b      	adds	r3, r3, r0
    2d24:	009b      	lsls	r3, r3, #2
    2d26:	18d3      	adds	r3, r2, r3
    2d28:	8958      	ldrh	r0, [r3, #10]
    2d2a:	8048      	strh	r0, [r1, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    2d2c:	2100      	movs	r1, #0
    2d2e:	7199      	strb	r1, [r3, #6]
		gastrSockets[sock].u16SessionID =0;
    2d30:	8159      	strh	r1, [r3, #10]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2d32:	79db      	ldrb	r3, [r3, #7]
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    2d34:	3149      	adds	r1, #73	; 0x49
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
		
		gastrSockets[sock].bIsUsed = 0;
		gastrSockets[sock].u16SessionID =0;
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    2d36:	07db      	lsls	r3, r3, #31
    2d38:	d500      	bpl.n	2d3c <close+0x38>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    2d3a:	3105      	adds	r1, #5
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    2d3c:	2300      	movs	r3, #0
    2d3e:	9300      	str	r3, [sp, #0]
    2d40:	9301      	str	r3, [sp, #4]
    2d42:	9302      	str	r3, [sp, #8]
    2d44:	2002      	movs	r0, #2
    2d46:	aa05      	add	r2, sp, #20
    2d48:	3304      	adds	r3, #4
    2d4a:	4d0b      	ldr	r5, [pc, #44]	; (2d78 <close+0x74>)
    2d4c:	47a8      	blx	r5
    2d4e:	1e05      	subs	r5, r0, #0
		if(s8Ret != SOCK_ERR_NO_ERROR)
    2d50:	d000      	beq.n	2d54 <close+0x50>
		{
			s8Ret = SOCK_ERR_INVALID;
    2d52:	25f7      	movs	r5, #247	; 0xf7
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    2d54:	0060      	lsls	r0, r4, #1
    2d56:	1904      	adds	r4, r0, r4
    2d58:	00a4      	lsls	r4, r4, #2
    2d5a:	4806      	ldr	r0, [pc, #24]	; (2d74 <close+0x70>)
    2d5c:	1820      	adds	r0, r4, r0
    2d5e:	2100      	movs	r1, #0
    2d60:	220c      	movs	r2, #12
    2d62:	4b06      	ldr	r3, [pc, #24]	; (2d7c <close+0x78>)
    2d64:	4798      	blx	r3
    2d66:	e002      	b.n	2d6e <close+0x6a>
Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2d68:	25fa      	movs	r5, #250	; 0xfa
    2d6a:	e000      	b.n	2d6e <close+0x6a>
    2d6c:	25fa      	movs	r5, #250	; 0xfa
		{
			s8Ret = SOCK_ERR_INVALID;
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
	}
	return s8Ret;
    2d6e:	b268      	sxtb	r0, r5
}
    2d70:	b007      	add	sp, #28
    2d72:	bd30      	pop	{r4, r5, pc}
    2d74:	200003b0 	.word	0x200003b0
    2d78:	00000695 	.word	0x00000695
    2d7c:	00000539 	.word	0x00000539

00002d80 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
    2d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d82:	b083      	sub	sp, #12
	uint8	tmp;
	uint32	u32IP = 0;
    2d84:	2300      	movs	r3, #0
    2d86:	9301      	str	r3, [sp, #4]
    2d88:	2400      	movs	r4, #0
    2d8a:	1c43      	adds	r3, r0, #1
    2d8c:	1d47      	adds	r7, r0, #5
    2d8e:	2600      	movs	r6, #0
    2d90:	1c18      	adds	r0, r3, #0
    2d92:	1e5d      	subs	r5, r3, #1
	for(i = 0; i < 4; ++i)
	{
		j = 0;
		do
		{
			c = *pcIpAddr;
    2d94:	782a      	ldrb	r2, [r5, #0]
			++j;
			if(j > 4)
    2d96:	42bb      	cmp	r3, r7
    2d98:	d019      	beq.n	2dce <nmi_inet_addr+0x4e>
			{
				return 0;
			}
			if(c == '.' || c == 0)
    2d9a:	2a2e      	cmp	r2, #46	; 0x2e
    2d9c:	d01b      	beq.n	2dd6 <nmi_inet_addr+0x56>
    2d9e:	2a00      	cmp	r2, #0
    2da0:	d01c      	beq.n	2ddc <nmi_inet_addr+0x5c>
			{
				au8IP[i] = tmp;
				tmp = 0;
			}
			else if(c >= '0' && c <= '9')
    2da2:	1c11      	adds	r1, r2, #0
    2da4:	3930      	subs	r1, #48	; 0x30
    2da6:	2909      	cmp	r1, #9
    2da8:	d813      	bhi.n	2dd2 <nmi_inet_addr+0x52>
			{
				tmp = (tmp * 10) + (c - '0');
    2daa:	00b1      	lsls	r1, r6, #2
    2dac:	1871      	adds	r1, r6, r1
    2dae:	0049      	lsls	r1, r1, #1
    2db0:	3930      	subs	r1, #48	; 0x30
    2db2:	188a      	adds	r2, r1, r2
    2db4:	b2d6      	uxtb	r6, r2
    2db6:	3301      	adds	r3, #1
    2db8:	e7ea      	b.n	2d90 <nmi_inet_addr+0x10>
    2dba:	3401      	adds	r4, #1
	uint8 	c;
	uint8	i, j;

	tmp = 0;

	for(i = 0; i < 4; ++i)
    2dbc:	2c04      	cmp	r4, #4
    2dbe:	d1e4      	bne.n	2d8a <nmi_inet_addr+0xa>
				return 0;
			}
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
    2dc0:	a801      	add	r0, sp, #4
    2dc2:	4669      	mov	r1, sp
    2dc4:	2204      	movs	r2, #4
    2dc6:	4b08      	ldr	r3, [pc, #32]	; (2de8 <nmi_inet_addr+0x68>)
    2dc8:	4798      	blx	r3
	return u32IP;
    2dca:	9801      	ldr	r0, [sp, #4]
    2dcc:	e009      	b.n	2de2 <nmi_inet_addr+0x62>
		{
			c = *pcIpAddr;
			++j;
			if(j > 4)
			{
				return 0;
    2dce:	2000      	movs	r0, #0
    2dd0:	e007      	b.n	2de2 <nmi_inet_addr+0x62>
			{
				tmp = (tmp * 10) + (c - '0');
			}
			else
			{
				return 0;
    2dd2:	2000      	movs	r0, #0
    2dd4:	e005      	b.n	2de2 <nmi_inet_addr+0x62>
			{
				return 0;
			}
			if(c == '.' || c == 0)
			{
				au8IP[i] = tmp;
    2dd6:	466b      	mov	r3, sp
    2dd8:	54e6      	strb	r6, [r4, r3]
    2dda:	e7ee      	b.n	2dba <nmi_inet_addr+0x3a>
    2ddc:	466b      	mov	r3, sp
    2dde:	54e6      	strb	r6, [r4, r3]
    2de0:	e7eb      	b.n	2dba <nmi_inet_addr+0x3a>
			++pcIpAddr;
		} while(c != '.' && c != 0);
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
	return u32IP;
}
    2de2:	b003      	add	sp, #12
    2de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de6:	46c0      	nop			; (mov r8, r8)
    2de8:	00000525 	.word	0x00000525

00002dec <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    2dec:	b510      	push	{r4, lr}
    2dee:	b084      	sub	sp, #16
    2df0:	1c04      	adds	r4, r0, #0
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    2df2:	4b0c      	ldr	r3, [pc, #48]	; (2e24 <gethostbyname+0x38>)
    2df4:	4798      	blx	r3
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    2df6:	b2c3      	uxtb	r3, r0
    2df8:	2b40      	cmp	r3, #64	; 0x40
    2dfa:	d80f      	bhi.n	2e1c <gethostbyname+0x30>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    2dfc:	23ff      	movs	r3, #255	; 0xff
    2dfe:	4018      	ands	r0, r3
    2e00:	1c43      	adds	r3, r0, #1
    2e02:	2200      	movs	r2, #0
    2e04:	9200      	str	r2, [sp, #0]
    2e06:	9201      	str	r2, [sp, #4]
    2e08:	9202      	str	r2, [sp, #8]
    2e0a:	2002      	movs	r0, #2
    2e0c:	21ca      	movs	r1, #202	; 0xca
    2e0e:	1c22      	adds	r2, r4, #0
    2e10:	4c05      	ldr	r4, [pc, #20]	; (2e28 <gethostbyname+0x3c>)
    2e12:	47a0      	blx	r4
		if(s8Err != SOCK_ERR_NO_ERROR)
    2e14:	2800      	cmp	r0, #0
    2e16:	d002      	beq.n	2e1e <gethostbyname+0x32>
		{
			s8Err = SOCK_ERR_INVALID;
    2e18:	20f7      	movs	r0, #247	; 0xf7
    2e1a:	e000      	b.n	2e1e <gethostbyname+0x32>
Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    2e1c:	20fa      	movs	r0, #250	; 0xfa
		if(s8Err != SOCK_ERR_NO_ERROR)
		{
			s8Err = SOCK_ERR_INVALID;
		}
	}
	return s8Err;
    2e1e:	b240      	sxtb	r0, r0
}
    2e20:	b004      	add	sp, #16
    2e22:	bd10      	pop	{r4, pc}
    2e24:	00000549 	.word	0x00000549
    2e28:	00000695 	.word	0x00000695

00002e2c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2e2c:	4b0c      	ldr	r3, [pc, #48]	; (2e60 <cpu_irq_enter_critical+0x34>)
    2e2e:	681b      	ldr	r3, [r3, #0]
    2e30:	2b00      	cmp	r3, #0
    2e32:	d110      	bne.n	2e56 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2e34:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d109      	bne.n	2e50 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2e3c:	b672      	cpsid	i
    2e3e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2e42:	2200      	movs	r2, #0
    2e44:	4b07      	ldr	r3, [pc, #28]	; (2e64 <cpu_irq_enter_critical+0x38>)
    2e46:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2e48:	3201      	adds	r2, #1
    2e4a:	4b07      	ldr	r3, [pc, #28]	; (2e68 <cpu_irq_enter_critical+0x3c>)
    2e4c:	701a      	strb	r2, [r3, #0]
    2e4e:	e002      	b.n	2e56 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2e50:	2200      	movs	r2, #0
    2e52:	4b05      	ldr	r3, [pc, #20]	; (2e68 <cpu_irq_enter_critical+0x3c>)
    2e54:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2e56:	4a02      	ldr	r2, [pc, #8]	; (2e60 <cpu_irq_enter_critical+0x34>)
    2e58:	6813      	ldr	r3, [r2, #0]
    2e5a:	3301      	adds	r3, #1
    2e5c:	6013      	str	r3, [r2, #0]
}
    2e5e:	4770      	bx	lr
    2e60:	20000194 	.word	0x20000194
    2e64:	20000010 	.word	0x20000010
    2e68:	20000198 	.word	0x20000198

00002e6c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2e6c:	4b08      	ldr	r3, [pc, #32]	; (2e90 <cpu_irq_leave_critical+0x24>)
    2e6e:	681a      	ldr	r2, [r3, #0]
    2e70:	3a01      	subs	r2, #1
    2e72:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2e74:	681b      	ldr	r3, [r3, #0]
    2e76:	2b00      	cmp	r3, #0
    2e78:	d109      	bne.n	2e8e <cpu_irq_leave_critical+0x22>
    2e7a:	4b06      	ldr	r3, [pc, #24]	; (2e94 <cpu_irq_leave_critical+0x28>)
    2e7c:	781b      	ldrb	r3, [r3, #0]
    2e7e:	2b00      	cmp	r3, #0
    2e80:	d005      	beq.n	2e8e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2e82:	2201      	movs	r2, #1
    2e84:	4b04      	ldr	r3, [pc, #16]	; (2e98 <cpu_irq_leave_critical+0x2c>)
    2e86:	701a      	strb	r2, [r3, #0]
    2e88:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2e8c:	b662      	cpsie	i
	}
}
    2e8e:	4770      	bx	lr
    2e90:	20000194 	.word	0x20000194
    2e94:	20000198 	.word	0x20000198
    2e98:	20000010 	.word	0x20000010

00002e9c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e9e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    2ea0:	ac01      	add	r4, sp, #4
    2ea2:	2501      	movs	r5, #1
    2ea4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2ea6:	2700      	movs	r7, #0
    2ea8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2eaa:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2eac:	203e      	movs	r0, #62	; 0x3e
    2eae:	1c21      	adds	r1, r4, #0
    2eb0:	4e06      	ldr	r6, [pc, #24]	; (2ecc <system_board_init+0x30>)
    2eb2:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    2eb4:	2280      	movs	r2, #128	; 0x80
    2eb6:	05d2      	lsls	r2, r2, #23
    2eb8:	4b05      	ldr	r3, [pc, #20]	; (2ed0 <system_board_init+0x34>)
    2eba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2ebc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2ebe:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2ec0:	200f      	movs	r0, #15
    2ec2:	1c21      	adds	r1, r4, #0
    2ec4:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    2ec6:	b003      	add	sp, #12
    2ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	000035b9 	.word	0x000035b9
    2ed0:	41004480 	.word	0x41004480

00002ed4 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
    2ed4:	b530      	push	{r4, r5, lr}
    2ed6:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument. */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2ed8:	aa01      	add	r2, sp, #4
    2eda:	2364      	movs	r3, #100	; 0x64
    2edc:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2ede:	4b22      	ldr	r3, [pc, #136]	; (2f68 <at30tse_init+0x94>)
    2ee0:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2ee2:	2300      	movs	r3, #0
    2ee4:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2ee6:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2ee8:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2eea:	2180      	movs	r1, #128	; 0x80
    2eec:	0389      	lsls	r1, r1, #14
    2eee:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2ef0:	2101      	movs	r1, #1
    2ef2:	4249      	negs	r1, r1
    2ef4:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    2ef6:	3125      	adds	r1, #37	; 0x25
    2ef8:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2efa:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2efc:	3108      	adds	r1, #8
    2efe:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2f00:	3101      	adds	r1, #1
    2f02:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2f04:	3101      	adds	r1, #1
    2f06:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2f08:	33d7      	adds	r3, #215	; 0xd7
    2f0a:	8613      	strh	r3, [r2, #48]	; 0x30
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
    2f0c:	4b17      	ldr	r3, [pc, #92]	; (2f6c <at30tse_init+0x98>)
    2f0e:	82d3      	strh	r3, [r2, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
    2f10:	4b17      	ldr	r3, [pc, #92]	; (2f70 <at30tse_init+0x9c>)
    2f12:	61d3      	str	r3, [r2, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
    2f14:	4b17      	ldr	r3, [pc, #92]	; (2f74 <at30tse_init+0xa0>)
    2f16:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
    2f18:	4c17      	ldr	r4, [pc, #92]	; (2f78 <at30tse_init+0xa4>)
    2f1a:	1c20      	adds	r0, r4, #0
    2f1c:	4917      	ldr	r1, [pc, #92]	; (2f7c <at30tse_init+0xa8>)
    2f1e:	4b18      	ldr	r3, [pc, #96]	; (2f80 <at30tse_init+0xac>)
    2f20:	4798      	blx	r3
{
	/* Sanity check of arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2f22:	6824      	ldr	r4, [r4, #0]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2f24:	2207      	movs	r2, #7
    2f26:	69e3      	ldr	r3, [r4, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    2f28:	421a      	tst	r2, r3
    2f2a:	d1fc      	bne.n	2f26 <at30tse_init+0x52>

	/* Wait for module to sync. */
	_i2c_master_wait_for_sync(module);

	/* Enable module. */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2f2c:	6822      	ldr	r2, [r4, #0]
    2f2e:	2302      	movs	r3, #2
    2f30:	4313      	orrs	r3, r2
    2f32:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2f34:	4d10      	ldr	r5, [pc, #64]	; (2f78 <at30tse_init+0xa4>)
    2f36:	6828      	ldr	r0, [r5, #0]
    2f38:	4b12      	ldr	r3, [pc, #72]	; (2f84 <at30tse_init+0xb0>)
    2f3a:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2f3c:	231f      	movs	r3, #31
    2f3e:	4018      	ands	r0, r3
    2f40:	3b1e      	subs	r3, #30
    2f42:	4083      	lsls	r3, r0
    2f44:	1c18      	adds	r0, r3, #0
    2f46:	4b10      	ldr	r3, [pc, #64]	; (2f88 <at30tse_init+0xb4>)
    2f48:	6018      	str	r0, [r3, #0]
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2f4a:	88e8      	ldrh	r0, [r5, #6]
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Timeout counter used to force bus state. */
	uint32_t timeout_counter = 0;
    2f4c:	2300      	movs	r3, #0
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2f4e:	2110      	movs	r1, #16
    2f50:	e005      	b.n	2f5e <at30tse_init+0x8a>
		timeout_counter++;
    2f52:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2f54:	4283      	cmp	r3, r0
    2f56:	d302      	bcc.n	2f5e <at30tse_init+0x8a>
			/* Timeout, force bus state to idle. */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2f58:	2310      	movs	r3, #16
    2f5a:	8363      	strh	r3, [r4, #26]
    2f5c:	e002      	b.n	2f64 <at30tse_init+0x90>
#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#endif
	/* Start timeout if bus state is unknown. */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2f5e:	8b62      	ldrh	r2, [r4, #26]
    2f60:	420a      	tst	r2, r1
    2f62:	d0f6      	beq.n	2f52 <at30tse_init+0x7e>
	i2c_master_enable(&dev_inst_at30tse75x);
}
    2f64:	b00f      	add	sp, #60	; 0x3c
    2f66:	bd30      	pop	{r4, r5, pc}
    2f68:	00000d48 	.word	0x00000d48
    2f6c:	00002710 	.word	0x00002710
    2f70:	00080003 	.word	0x00080003
    2f74:	00090003 	.word	0x00090003
    2f78:	20000440 	.word	0x20000440
    2f7c:	42001000 	.word	0x42001000
    2f80:	00003625 	.word	0x00003625
    2f84:	00004239 	.word	0x00004239
    2f88:	e000e100 	.word	0xe000e100

00002f8c <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
    2f8c:	b570      	push	{r4, r5, r6, lr}
    2f8e:	b088      	sub	sp, #32
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
    2f90:	ad07      	add	r5, sp, #28
    2f92:	4301      	orrs	r1, r0
    2f94:	7029      	strb	r1, [r5, #0]
	buffer[1] = 0;
    2f96:	2300      	movs	r3, #0
    2f98:	706b      	strb	r3, [r5, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
    2f9a:	a904      	add	r1, sp, #16
    2f9c:	204f      	movs	r0, #79	; 0x4f
    2f9e:	8008      	strh	r0, [r1, #0]
    2fa0:	2401      	movs	r4, #1
    2fa2:	804c      	strh	r4, [r1, #2]
    2fa4:	604d      	str	r5, [r1, #4]
    2fa6:	720b      	strb	r3, [r1, #8]
    2fa8:	724b      	strb	r3, [r1, #9]
    2faa:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
    2fac:	ac01      	add	r4, sp, #4
    2fae:	8020      	strh	r0, [r4, #0]
    2fb0:	8062      	strh	r2, [r4, #2]
    2fb2:	9502      	str	r5, [sp, #8]
    2fb4:	7223      	strb	r3, [r4, #8]
    2fb6:	7263      	strb	r3, [r4, #9]
    2fb8:	72a3      	strb	r3, [r4, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
    2fba:	4e07      	ldr	r6, [pc, #28]	; (2fd8 <at30tse_read_register+0x4c>)
    2fbc:	1c30      	adds	r0, r6, #0
    2fbe:	4b07      	ldr	r3, [pc, #28]	; (2fdc <at30tse_read_register+0x50>)
    2fc0:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
    2fc2:	1c30      	adds	r0, r6, #0
    2fc4:	1c21      	adds	r1, r4, #0
    2fc6:	4b06      	ldr	r3, [pc, #24]	; (2fe0 <at30tse_read_register+0x54>)
    2fc8:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
    2fca:	7828      	ldrb	r0, [r5, #0]
    2fcc:	0200      	lsls	r0, r0, #8
    2fce:	786b      	ldrb	r3, [r5, #1]
    2fd0:	4318      	orrs	r0, r3
}
    2fd2:	b008      	add	sp, #32
    2fd4:	bd70      	pop	{r4, r5, r6, pc}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	20000440 	.word	0x20000440
    2fdc:	00003b39 	.word	0x00003b39
    2fe0:	00003b19 	.word	0x00003b19

00002fe4 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
    2fe4:	b510      	push	{r4, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
    2fe6:	2000      	movs	r0, #0
    2fe8:	2100      	movs	r1, #0
    2fea:	2202      	movs	r2, #2
    2fec:	4b21      	ldr	r3, [pc, #132]	; (3074 <at30tse_read_temperature+0x90>)
    2fee:	4798      	blx	r3
    2ff0:	1c02      	adds	r2, r0, #0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
    2ff2:	2301      	movs	r3, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
    2ff4:	0401      	lsls	r1, r0, #16
    2ff6:	d502      	bpl.n	2ffe <at30tse_read_temperature+0x1a>
		sign *= -1;
		data &= ~(1 << 15);
    2ff8:	0440      	lsls	r0, r0, #17
    2ffa:	0c42      	lsrs	r2, r0, #17
	double temperature = 0;
	int8_t sign = 1;

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
		sign *= -1;
    2ffc:	33fe      	adds	r3, #254	; 0xfe
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
    2ffe:	491e      	ldr	r1, [pc, #120]	; (3078 <at30tse_read_temperature+0x94>)
    3000:	7809      	ldrb	r1, [r1, #0]
    3002:	2901      	cmp	r1, #1
    3004:	d011      	beq.n	302a <at30tse_read_temperature+0x46>
    3006:	2900      	cmp	r1, #0
    3008:	d004      	beq.n	3014 <at30tse_read_temperature+0x30>
    300a:	2902      	cmp	r1, #2
    300c:	d018      	beq.n	3040 <at30tse_read_temperature+0x5c>
    300e:	2903      	cmp	r1, #3
    3010:	d022      	beq.n	3058 <at30tse_read_temperature+0x74>
    3012:	e02c      	b.n	306e <at30tse_read_temperature+0x8a>
		case AT30TSE_CONFIG_RES_9_bit:
			data = (data >> 7);
    3014:	09d2      	lsrs	r2, r2, #7
			temperature = data * sign * 0.5;
    3016:	b292      	uxth	r2, r2
    3018:	b258      	sxtb	r0, r3
    301a:	4350      	muls	r0, r2
    301c:	4b17      	ldr	r3, [pc, #92]	; (307c <at30tse_read_temperature+0x98>)
    301e:	4798      	blx	r3
    3020:	2200      	movs	r2, #0
    3022:	4b17      	ldr	r3, [pc, #92]	; (3080 <at30tse_read_temperature+0x9c>)
    3024:	4c17      	ldr	r4, [pc, #92]	; (3084 <at30tse_read_temperature+0xa0>)
    3026:	47a0      	blx	r4
			break;
    3028:	e023      	b.n	3072 <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_10_bit:
			data = (data >> 6);
    302a:	0992      	lsrs	r2, r2, #6
			temperature = data * sign * 0.25;
    302c:	b292      	uxth	r2, r2
    302e:	b258      	sxtb	r0, r3
    3030:	4350      	muls	r0, r2
    3032:	4b12      	ldr	r3, [pc, #72]	; (307c <at30tse_read_temperature+0x98>)
    3034:	4798      	blx	r3
    3036:	2200      	movs	r2, #0
    3038:	4b13      	ldr	r3, [pc, #76]	; (3088 <at30tse_read_temperature+0xa4>)
    303a:	4c12      	ldr	r4, [pc, #72]	; (3084 <at30tse_read_temperature+0xa0>)
    303c:	47a0      	blx	r4
			break;
    303e:	e018      	b.n	3072 <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_11_bit:
			data = (data >> 5);
    3040:	0952      	lsrs	r2, r2, #5
			temperature = data * sign * 0.125;
    3042:	b292      	uxth	r2, r2
    3044:	b258      	sxtb	r0, r3
    3046:	4350      	muls	r0, r2
    3048:	4b0c      	ldr	r3, [pc, #48]	; (307c <at30tse_read_temperature+0x98>)
    304a:	4798      	blx	r3
    304c:	2200      	movs	r2, #0
    304e:	23ff      	movs	r3, #255	; 0xff
    3050:	059b      	lsls	r3, r3, #22
    3052:	4c0c      	ldr	r4, [pc, #48]	; (3084 <at30tse_read_temperature+0xa0>)
    3054:	47a0      	blx	r4
			break;
    3056:	e00c      	b.n	3072 <at30tse_read_temperature+0x8e>
		case AT30TSE_CONFIG_RES_12_bit:
			data = (data >> 4);
    3058:	0912      	lsrs	r2, r2, #4
			temperature = data * sign * 0.0625;
    305a:	b292      	uxth	r2, r2
    305c:	b258      	sxtb	r0, r3
    305e:	4350      	muls	r0, r2
    3060:	4b06      	ldr	r3, [pc, #24]	; (307c <at30tse_read_temperature+0x98>)
    3062:	4798      	blx	r3
    3064:	2200      	movs	r2, #0
    3066:	4b09      	ldr	r3, [pc, #36]	; (308c <at30tse_read_temperature+0xa8>)
    3068:	4c06      	ldr	r4, [pc, #24]	; (3084 <at30tse_read_temperature+0xa0>)
    306a:	47a0      	blx	r4
			break;
    306c:	e001      	b.n	3072 <at30tse_read_temperature+0x8e>
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
    306e:	2000      	movs	r0, #0
    3070:	2100      	movs	r1, #0
			break;
		default:
			break;
	}
	return temperature;
}
    3072:	bd10      	pop	{r4, pc}
    3074:	00002f8d 	.word	0x00002f8d
    3078:	20000199 	.word	0x20000199
    307c:	0000893d 	.word	0x0000893d
    3080:	3fe00000 	.word	0x3fe00000
    3084:	0000839d 	.word	0x0000839d
    3088:	3fd00000 	.word	0x3fd00000
    308c:	3fb00000 	.word	0x3fb00000

00003090 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    3090:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
    3092:	4b2d      	ldr	r3, [pc, #180]	; (3148 <ADC_Handler+0xb8>)
    3094:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    3096:	6823      	ldr	r3, [r4, #0]
    3098:	7e1d      	ldrb	r5, [r3, #24]
    309a:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
    309c:	07ea      	lsls	r2, r5, #31
    309e:	d535      	bpl.n	310c <ADC_Handler+0x7c>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    30a0:	7ee2      	ldrb	r2, [r4, #27]
    30a2:	07d2      	lsls	r2, r2, #31
    30a4:	d532      	bpl.n	310c <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    30a6:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    30a8:	07d2      	lsls	r2, r2, #31
    30aa:	d52f      	bpl.n	310c <ADC_Handler+0x7c>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    30ac:	2201      	movs	r2, #1
    30ae:	761a      	strb	r2, [r3, #24]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    30b0:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    30b2:	7e53      	ldrb	r3, [r2, #25]

			while (adc_is_syncing(module)) {
    30b4:	b25b      	sxtb	r3, r3
    30b6:	2b00      	cmp	r3, #0
    30b8:	dbfb      	blt.n	30b2 <ADC_Handler+0x22>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    30ba:	6961      	ldr	r1, [r4, #20]
    30bc:	1c8b      	adds	r3, r1, #2
    30be:	6163      	str	r3, [r4, #20]
    30c0:	8b53      	ldrh	r3, [r2, #26]
    30c2:	b29b      	uxth	r3, r3
    30c4:	800b      	strh	r3, [r1, #0]

			if (--module->remaining_conversions > 0) {
    30c6:	8b23      	ldrh	r3, [r4, #24]
    30c8:	3b01      	subs	r3, #1
    30ca:	b29b      	uxth	r3, r3
    30cc:	8323      	strh	r3, [r4, #24]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d011      	beq.n	30f6 <ADC_Handler+0x66>
				if (module->software_trigger == true) {
    30d2:	7f63      	ldrb	r3, [r4, #29]
    30d4:	2b00      	cmp	r3, #0
    30d6:	d019      	beq.n	310c <ADC_Handler+0x7c>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    30d8:	6822      	ldr	r2, [r4, #0]
    30da:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    30dc:	b25b      	sxtb	r3, r3
    30de:	2b00      	cmp	r3, #0
    30e0:	dbfb      	blt.n	30da <ADC_Handler+0x4a>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    30e2:	7b11      	ldrb	r1, [r2, #12]
    30e4:	2302      	movs	r3, #2
    30e6:	430b      	orrs	r3, r1
    30e8:	7313      	strb	r3, [r2, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    30ea:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    30ec:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
    30ee:	b25b      	sxtb	r3, r3
    30f0:	2b00      	cmp	r3, #0
    30f2:	dbfb      	blt.n	30ec <ADC_Handler+0x5c>
    30f4:	e00a      	b.n	310c <ADC_Handler+0x7c>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    30f6:	7f23      	ldrb	r3, [r4, #28]
    30f8:	2b05      	cmp	r3, #5
    30fa:	d107      	bne.n	310c <ADC_Handler+0x7c>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    30fc:	2300      	movs	r3, #0
    30fe:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    3100:	3301      	adds	r3, #1
    3102:	6822      	ldr	r2, [r4, #0]
    3104:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    3106:	1c20      	adds	r0, r4, #0
    3108:	68a3      	ldr	r3, [r4, #8]
    310a:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    310c:	076b      	lsls	r3, r5, #29
    310e:	d50b      	bpl.n	3128 <ADC_Handler+0x98>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    3110:	2304      	movs	r3, #4
    3112:	6822      	ldr	r2, [r4, #0]
    3114:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3116:	7ee3      	ldrb	r3, [r4, #27]
    3118:	079b      	lsls	r3, r3, #30
    311a:	d505      	bpl.n	3128 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    311c:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    311e:	079b      	lsls	r3, r3, #30
    3120:	d502      	bpl.n	3128 <ADC_Handler+0x98>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    3122:	1c20      	adds	r0, r4, #0
    3124:	68e3      	ldr	r3, [r4, #12]
    3126:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    3128:	07ab      	lsls	r3, r5, #30
    312a:	d50b      	bpl.n	3144 <ADC_Handler+0xb4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    312c:	2302      	movs	r3, #2
    312e:	6822      	ldr	r2, [r4, #0]
    3130:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    3132:	7ee3      	ldrb	r3, [r4, #27]
    3134:	075b      	lsls	r3, r3, #29
    3136:	d505      	bpl.n	3144 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    3138:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    313a:	075b      	lsls	r3, r3, #29
    313c:	d502      	bpl.n	3144 <ADC_Handler+0xb4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    313e:	6923      	ldr	r3, [r4, #16]
    3140:	1c20      	adds	r0, r4, #0
    3142:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
    3144:	bd38      	pop	{r3, r4, r5, pc}
    3146:	46c0      	nop			; (mov r8, r8)
    3148:	20000468 	.word	0x20000468

0000314c <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    314c:	2317      	movs	r3, #23
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    314e:	2a00      	cmp	r2, #0
    3150:	d10d      	bne.n	316e <extint_register_callback+0x22>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    3152:	008b      	lsls	r3, r1, #2
    3154:	4a07      	ldr	r2, [pc, #28]	; (3174 <extint_register_callback+0x28>)
    3156:	589b      	ldr	r3, [r3, r2]
    3158:	2b00      	cmp	r3, #0
    315a:	d103      	bne.n	3164 <extint_register_callback+0x18>
		_extint_dev.callbacks[channel] = callback;
    315c:	0089      	lsls	r1, r1, #2
    315e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    3160:	2300      	movs	r3, #0
    3162:	e004      	b.n	316e <extint_register_callback+0x22>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3164:	4283      	cmp	r3, r0
    3166:	d001      	beq.n	316c <extint_register_callback+0x20>
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    3168:	231d      	movs	r3, #29
    316a:	e000      	b.n	316e <extint_register_callback+0x22>

	if (_extint_dev.callbacks[channel] == NULL) {
		_extint_dev.callbacks[channel] = callback;
		return STATUS_OK;
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
    316c:	2300      	movs	r3, #0
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    316e:	1c18      	adds	r0, r3, #0
    3170:	4770      	bx	lr
    3172:	46c0      	nop			; (mov r8, r8)
    3174:	20000470 	.word	0x20000470

00003178 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3178:	2317      	movs	r3, #23
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    317a:	2900      	cmp	r1, #0
    317c:	d107      	bne.n	318e <extint_chan_enable_callback+0x16>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    317e:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    3180:	281f      	cmp	r0, #31
    3182:	d800      	bhi.n	3186 <extint_chan_enable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    3184:	4a03      	ldr	r2, [pc, #12]	; (3194 <extint_chan_enable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENSET.reg = (1UL << channel);
    3186:	2301      	movs	r3, #1
    3188:	4083      	lsls	r3, r0
    318a:	60d3      	str	r3, [r2, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    318c:	2300      	movs	r3, #0
}
    318e:	1c18      	adds	r0, r3, #0
    3190:	4770      	bx	lr
    3192:	46c0      	nop			; (mov r8, r8)
    3194:	40001800 	.word	0x40001800

00003198 <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3198:	2317      	movs	r3, #23
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    319a:	2900      	cmp	r1, #0
    319c:	d107      	bne.n	31ae <extint_chan_disable_callback+0x16>
	} else {
		Assert(false);
		return NULL;
    319e:	2200      	movs	r2, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    31a0:	281f      	cmp	r0, #31
    31a2:	d800      	bhi.n	31a6 <extint_chan_disable_callback+0xe>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    31a4:	4a03      	ldr	r2, [pc, #12]	; (31b4 <extint_chan_disable_callback+0x1c>)
		Eic *const eic = _extint_get_eic_from_channel(channel);

		eic->INTENCLR.reg = (1UL << channel);
    31a6:	2301      	movs	r3, #1
    31a8:	4083      	lsls	r3, r0
    31aa:	6093      	str	r3, [r2, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    31ac:	2300      	movs	r3, #0
}
    31ae:	1c18      	adds	r0, r3, #0
    31b0:	4770      	bx	lr
    31b2:	46c0      	nop			; (mov r8, r8)
    31b4:	40001800 	.word	0x40001800

000031b8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    31b8:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    31ba:	2200      	movs	r2, #0
    31bc:	4b15      	ldr	r3, [pc, #84]	; (3214 <EIC_Handler+0x5c>)
    31be:	701a      	strb	r2, [r3, #0]
    31c0:	2300      	movs	r3, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    31c2:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    31c4:	4e14      	ldr	r6, [pc, #80]	; (3218 <EIC_Handler+0x60>)

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    31c6:	4c13      	ldr	r4, [pc, #76]	; (3214 <EIC_Handler+0x5c>)
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    31c8:	2b1f      	cmp	r3, #31
    31ca:	d919      	bls.n	3200 <EIC_Handler+0x48>
    31cc:	e00f      	b.n	31ee <EIC_Handler+0x36>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    31ce:	2100      	movs	r1, #0
    31d0:	e000      	b.n	31d4 <EIC_Handler+0x1c>

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    31d2:	4912      	ldr	r1, [pc, #72]	; (321c <EIC_Handler+0x64>)
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    31d4:	610a      	str	r2, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    31d6:	009b      	lsls	r3, r3, #2
    31d8:	599b      	ldr	r3, [r3, r6]
    31da:	2b00      	cmp	r3, #0
    31dc:	d000      	beq.n	31e0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    31de:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    31e0:	7823      	ldrb	r3, [r4, #0]
    31e2:	3301      	adds	r3, #1
    31e4:	b2db      	uxtb	r3, r3
    31e6:	7023      	strb	r3, [r4, #0]
    31e8:	2b0f      	cmp	r3, #15
    31ea:	d9ed      	bls.n	31c8 <EIC_Handler+0x10>
    31ec:	e011      	b.n	3212 <EIC_Handler+0x5a>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    31ee:	1c29      	adds	r1, r5, #0
    31f0:	4019      	ands	r1, r3
    31f2:	2201      	movs	r2, #1
    31f4:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    31f6:	2100      	movs	r1, #0
    31f8:	6909      	ldr	r1, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
    31fa:	4211      	tst	r1, r2
    31fc:	d1e7      	bne.n	31ce <EIC_Handler+0x16>
    31fe:	e7ef      	b.n	31e0 <EIC_Handler+0x28>
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    3200:	1c29      	adds	r1, r5, #0
    3202:	4019      	ands	r1, r3
    3204:	2201      	movs	r2, #1
    3206:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
    3208:	4904      	ldr	r1, [pc, #16]	; (321c <EIC_Handler+0x64>)
    320a:	6909      	ldr	r1, [r1, #16]
    320c:	4211      	tst	r1, r2
    320e:	d1e0      	bne.n	31d2 <EIC_Handler+0x1a>
    3210:	e7e6      	b.n	31e0 <EIC_Handler+0x28>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3212:	bd70      	pop	{r4, r5, r6, pc}
    3214:	2000046c 	.word	0x2000046c
    3218:	20000470 	.word	0x20000470
    321c:	40001800 	.word	0x40001800

00003220 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3220:	4a04      	ldr	r2, [pc, #16]	; (3234 <_extint_enable+0x14>)
    3222:	7811      	ldrb	r1, [r2, #0]
    3224:	2302      	movs	r3, #2
    3226:	430b      	orrs	r3, r1
    3228:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    322a:	7853      	ldrb	r3, [r2, #1]
    322c:	b25b      	sxtb	r3, r3
    322e:	2b00      	cmp	r3, #0
    3230:	dbfb      	blt.n	322a <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3232:	4770      	bx	lr
    3234:	40001800 	.word	0x40001800

00003238 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3238:	b500      	push	{lr}
    323a:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    323c:	4a12      	ldr	r2, [pc, #72]	; (3288 <_system_extint_init+0x50>)
    323e:	6991      	ldr	r1, [r2, #24]
    3240:	2340      	movs	r3, #64	; 0x40
    3242:	430b      	orrs	r3, r1
    3244:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3246:	a901      	add	r1, sp, #4
    3248:	2300      	movs	r3, #0
    324a:	700b      	strb	r3, [r1, #0]

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    324c:	2005      	movs	r0, #5
    324e:	4b0f      	ldr	r3, [pc, #60]	; (328c <_system_extint_init+0x54>)
    3250:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3252:	2005      	movs	r0, #5
    3254:	4b0e      	ldr	r3, [pc, #56]	; (3290 <_system_extint_init+0x58>)
    3256:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3258:	4a0e      	ldr	r2, [pc, #56]	; (3294 <_system_extint_init+0x5c>)
    325a:	7811      	ldrb	r1, [r2, #0]
    325c:	2301      	movs	r3, #1
    325e:	430b      	orrs	r3, r1
    3260:	7013      	strb	r3, [r2, #0]
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3262:	7853      	ldrb	r3, [r2, #1]
    3264:	b25b      	sxtb	r3, r3
    3266:	2b00      	cmp	r3, #0
    3268:	dbfb      	blt.n	3262 <_system_extint_init+0x2a>
    326a:	4b0b      	ldr	r3, [pc, #44]	; (3298 <_system_extint_init+0x60>)
    326c:	1c19      	adds	r1, r3, #0
    326e:	3140      	adds	r1, #64	; 0x40

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
		_extint_dev.callbacks[j] = NULL;
    3270:	2200      	movs	r2, #0
    3272:	c304      	stmia	r3!, {r2}
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3274:	428b      	cmp	r3, r1
    3276:	d1fc      	bne.n	3272 <_system_extint_init+0x3a>
    3278:	2210      	movs	r2, #16
    327a:	4b08      	ldr	r3, [pc, #32]	; (329c <_system_extint_init+0x64>)
    327c:	601a      	str	r2, [r3, #0]
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
#endif

	/* Enables the driver for further use */
	_extint_enable();
    327e:	4b08      	ldr	r3, [pc, #32]	; (32a0 <_system_extint_init+0x68>)
    3280:	4798      	blx	r3
}
    3282:	b003      	add	sp, #12
    3284:	bd00      	pop	{pc}
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	40000400 	.word	0x40000400
    328c:	000052f1 	.word	0x000052f1
    3290:	00005265 	.word	0x00005265
    3294:	40001800 	.word	0x40001800
    3298:	20000470 	.word	0x20000470
    329c:	e000e100 	.word	0xe000e100
    32a0:	00003221 	.word	0x00003221

000032a4 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    32a4:	2300      	movs	r3, #0
    32a6:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    32a8:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    32aa:	2201      	movs	r2, #1
    32ac:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    32ae:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
    32b0:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    32b2:	3302      	adds	r3, #2
    32b4:	72c3      	strb	r3, [r0, #11]
}
    32b6:	4770      	bx	lr

000032b8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    32b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ba:	b083      	sub	sp, #12
    32bc:	1c05      	adds	r5, r0, #0
    32be:	1c0c      	adds	r4, r1, #0
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    32c0:	a901      	add	r1, sp, #4
    32c2:	2300      	movs	r3, #0
    32c4:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    32c6:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    32c8:	7923      	ldrb	r3, [r4, #4]
    32ca:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    32cc:	7a23      	ldrb	r3, [r4, #8]
    32ce:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    32d0:	7820      	ldrb	r0, [r4, #0]
    32d2:	4b15      	ldr	r3, [pc, #84]	; (3328 <extint_chan_set_config+0x70>)
    32d4:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    32d6:	2600      	movs	r6, #0
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
    32d8:	2d1f      	cmp	r5, #31
    32da:	d800      	bhi.n	32de <extint_chan_set_config+0x26>
		/* Array of available EICs. */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
    32dc:	4e13      	ldr	r6, [pc, #76]	; (332c <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    32de:	2207      	movs	r2, #7
    32e0:	402a      	ands	r2, r5
    32e2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    32e4:	7ae0      	ldrb	r0, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    32e6:	7aa3      	ldrb	r3, [r4, #10]
    32e8:	2b00      	cmp	r3, #0
    32ea:	d001      	beq.n	32f0 <extint_chan_set_config+0x38>
		new_config |= EIC_CONFIG_FILTEN0;
    32ec:	2308      	movs	r3, #8
    32ee:	4318      	orrs	r0, r3
    32f0:	08eb      	lsrs	r3, r5, #3
    32f2:	009b      	lsls	r3, r3, #2
    32f4:	18f3      	adds	r3, r6, r3
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    32f6:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    32f8:	4090      	lsls	r0, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    32fa:	270f      	movs	r7, #15
    32fc:	4097      	lsls	r7, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    32fe:	43b9      	bics	r1, r7
    3300:	1c0a      	adds	r2, r1, #0
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3302:	4302      	orrs	r2, r0
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3304:	619a      	str	r2, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    3306:	7a63      	ldrb	r3, [r4, #9]
    3308:	2b00      	cmp	r3, #0
    330a:	d006      	beq.n	331a <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    330c:	6973      	ldr	r3, [r6, #20]
    330e:	2201      	movs	r2, #1
    3310:	40aa      	lsls	r2, r5
    3312:	1c15      	adds	r5, r2, #0
    3314:	431d      	orrs	r5, r3
    3316:	6175      	str	r5, [r6, #20]
    3318:	e004      	b.n	3324 <extint_chan_set_config+0x6c>
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    331a:	6973      	ldr	r3, [r6, #20]
    331c:	2201      	movs	r2, #1
    331e:	40aa      	lsls	r2, r5
    3320:	4393      	bics	r3, r2
    3322:	6173      	str	r3, [r6, #20]
	}
}
    3324:	b003      	add	sp, #12
    3326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3328:	000053e9 	.word	0x000053e9
    332c:	40001800 	.word	0x40001800

00003330 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    3330:	b510      	push	{r4, lr}
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3332:	4a1e      	ldr	r2, [pc, #120]	; (33ac <nvm_set_config+0x7c>)
    3334:	69d1      	ldr	r1, [r2, #28]
    3336:	2304      	movs	r3, #4
    3338:	430b      	orrs	r3, r1
    333a:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    333c:	4b1c      	ldr	r3, [pc, #112]	; (33b0 <nvm_set_config+0x80>)
    333e:	8b19      	ldrh	r1, [r3, #24]
    3340:	2220      	movs	r2, #32
    3342:	32ff      	adds	r2, #255	; 0xff
    3344:	430a      	orrs	r2, r1
    3346:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    3348:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    334a:	2305      	movs	r3, #5

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    334c:	07d2      	lsls	r2, r2, #31
    334e:	d52b      	bpl.n	33a8 <nvm_set_config+0x78>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    3350:	7802      	ldrb	r2, [r0, #0]
    3352:	0212      	lsls	r2, r2, #8
    3354:	21c0      	movs	r1, #192	; 0xc0
    3356:	0089      	lsls	r1, r1, #2
    3358:	400a      	ands	r2, r1
    335a:	1c14      	adds	r4, r2, #0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    335c:	7841      	ldrb	r1, [r0, #1]
    335e:	01c9      	lsls	r1, r1, #7
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    3360:	22ff      	movs	r2, #255	; 0xff
    3362:	1c13      	adds	r3, r2, #0
    3364:	400b      	ands	r3, r1
    3366:	1c22      	adds	r2, r4, #0
    3368:	431a      	orrs	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    336a:	78c3      	ldrb	r3, [r0, #3]
    336c:	049b      	lsls	r3, r3, #18
    336e:	4313      	orrs	r3, r2
#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    3370:	7882      	ldrb	r2, [r0, #2]
    3372:	0052      	lsls	r2, r2, #1
    3374:	211e      	movs	r1, #30
    3376:	400a      	ands	r2, r1
    3378:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    337a:	7902      	ldrb	r2, [r0, #4]
    337c:	0412      	lsls	r2, r2, #16
    337e:	21c0      	movs	r1, #192	; 0xc0
    3380:	0289      	lsls	r1, r1, #10
    3382:	400a      	ands	r2, r1
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    3384:	4313      	orrs	r3, r2
		return STATUS_BUSY;
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
    3386:	4a0a      	ldr	r2, [pc, #40]	; (33b0 <nvm_set_config+0x80>)
    3388:	6053      	str	r3, [r2, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    338a:	6893      	ldr	r3, [r2, #8]
    338c:	035b      	lsls	r3, r3, #13
    338e:	0f5b      	lsrs	r3, r3, #29
    3390:	4908      	ldr	r1, [pc, #32]	; (33b4 <nvm_set_config+0x84>)
    3392:	2408      	movs	r4, #8
    3394:	409c      	lsls	r4, r3
    3396:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    3398:	6893      	ldr	r3, [r2, #8]
    339a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    339c:	7843      	ldrb	r3, [r0, #1]
    339e:	710b      	strb	r3, [r1, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    33a0:	8b13      	ldrh	r3, [r2, #24]
    33a2:	05db      	lsls	r3, r3, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
    33a4:	0fdb      	lsrs	r3, r3, #31
    33a6:	011b      	lsls	r3, r3, #4
}
    33a8:	1c18      	adds	r0, r3, #0
    33aa:	bd10      	pop	{r4, pc}
    33ac:	40000400 	.word	0x40000400
    33b0:	41004000 	.word	0x41004000
    33b4:	2000019c 	.word	0x2000019c

000033b8 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    33b8:	b530      	push	{r4, r5, lr}
    33ba:	1c04      	adds	r4, r0, #0
	uint32_t temp;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    33bc:	4a1f      	ldr	r2, [pc, #124]	; (343c <nvm_execute_command+0x84>)
    33be:	8850      	ldrh	r0, [r2, #2]
    33c0:	8813      	ldrh	r3, [r2, #0]
    33c2:	4343      	muls	r3, r0
    33c4:	428b      	cmp	r3, r1
    33c6:	d206      	bcs.n	33d6 <nvm_execute_command+0x1e>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    33c8:	2018      	movs	r0, #24
{
	uint32_t temp;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    33ca:	2280      	movs	r2, #128	; 0x80
    33cc:	0192      	lsls	r2, r2, #6
    33ce:	4b1c      	ldr	r3, [pc, #112]	; (3440 <nvm_execute_command+0x88>)
    33d0:	18cb      	adds	r3, r1, r3
    33d2:	4293      	cmp	r3, r2
    33d4:	d831      	bhi.n	343a <nvm_execute_command+0x82>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* turn off cache before issuing flash commands */
	temp = nvm_module->CTRLB.reg;
    33d6:	4b1b      	ldr	r3, [pc, #108]	; (3444 <nvm_execute_command+0x8c>)
    33d8:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((temp &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = temp | NVMCTRL_CTRLB_CACHEDIS;
    33da:	2280      	movs	r2, #128	; 0x80
    33dc:	02d2      	lsls	r2, r2, #11
    33de:	432a      	orrs	r2, r5
    33e0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    33e2:	8b18      	ldrh	r0, [r3, #24]
    33e4:	2220      	movs	r2, #32
    33e6:	32ff      	adds	r2, #255	; 0xff
    33e8:	4302      	orrs	r2, r0
    33ea:	831a      	strh	r2, [r3, #24]
    33ec:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    33ee:	2005      	movs	r0, #5

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    33f0:	07db      	lsls	r3, r3, #31
    33f2:	d522      	bpl.n	343a <nvm_execute_command+0x82>
		return STATUS_BUSY;
	}

	switch (command) {
    33f4:	2c45      	cmp	r4, #69	; 0x45
    33f6:	d81f      	bhi.n	3438 <nvm_execute_command+0x80>
    33f8:	00a3      	lsls	r3, r4, #2
    33fa:	4a13      	ldr	r2, [pc, #76]	; (3448 <nvm_execute_command+0x90>)
    33fc:	58d3      	ldr	r3, [r2, r3]
    33fe:	469f      	mov	pc, r3
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    3400:	4b10      	ldr	r3, [pc, #64]	; (3444 <nvm_execute_command+0x8c>)
    3402:	8b1b      	ldrh	r3, [r3, #24]
				return STATUS_ERR_IO;
    3404:	2010      	movs	r0, #16
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    3406:	05db      	lsls	r3, r3, #23
    3408:	d417      	bmi.n	343a <nvm_execute_command+0x82>
				return STATUS_ERR_IO;
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    340a:	0889      	lsrs	r1, r1, #2
    340c:	0049      	lsls	r1, r1, #1
    340e:	4b0d      	ldr	r3, [pc, #52]	; (3444 <nvm_execute_command+0x8c>)
    3410:	61d9      	str	r1, [r3, #28]
			break;
    3412:	e003      	b.n	341c <nvm_execute_command+0x64>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    3414:	0889      	lsrs	r1, r1, #2
    3416:	0049      	lsls	r1, r1, #1
    3418:	4b0a      	ldr	r3, [pc, #40]	; (3444 <nvm_execute_command+0x8c>)
    341a:	61d9      	str	r1, [r3, #28]
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    341c:	20a5      	movs	r0, #165	; 0xa5
    341e:	0200      	lsls	r0, r0, #8
    3420:	4304      	orrs	r4, r0
    3422:	4b08      	ldr	r3, [pc, #32]	; (3444 <nvm_execute_command+0x8c>)
    3424:	801c      	strh	r4, [r3, #0]
    3426:	1c19      	adds	r1, r3, #0
    3428:	2201      	movs	r2, #1
    342a:	7d0b      	ldrb	r3, [r1, #20]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    342c:	4213      	tst	r3, r2
    342e:	d0fc      	beq.n	342a <nvm_execute_command+0x72>
	}

	/* restore the setting */
	nvm_module->CTRLB.reg = temp;
    3430:	4b04      	ldr	r3, [pc, #16]	; (3444 <nvm_execute_command+0x8c>)
    3432:	605d      	str	r5, [r3, #4]

	return STATUS_OK;
    3434:	2000      	movs	r0, #0
    3436:	e000      	b.n	343a <nvm_execute_command+0x82>
		case NVM_COMMAND_ENTER_LOW_POWER_MODE:
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
    3438:	2017      	movs	r0, #23

	/* restore the setting */
	nvm_module->CTRLB.reg = temp;

	return STATUS_OK;
}
    343a:	bd30      	pop	{r4, r5, pc}
    343c:	2000019c 	.word	0x2000019c
    3440:	ff7fc000 	.word	0xff7fc000
    3444:	41004000 	.word	0x41004000
    3448:	0000b0cc 	.word	0x0000b0cc

0000344c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    344e:	4b25      	ldr	r3, [pc, #148]	; (34e4 <nvm_write_buffer+0x98>)
    3450:	881d      	ldrh	r5, [r3, #0]
    3452:	885b      	ldrh	r3, [r3, #2]
    3454:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    3456:	2418      	movs	r4, #24
#ifdef FEATURE_NVM_RWWEE
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
    3458:	4283      	cmp	r3, r0
    345a:	d340      	bcc.n	34de <nvm_write_buffer+0x92>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    345c:	1e6b      	subs	r3, r5, #1
    345e:	4203      	tst	r3, r0
    3460:	d13d      	bne.n	34de <nvm_write_buffer+0x92>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    3462:	3c01      	subs	r4, #1
	if (destination_address & (_nvm_dev.page_size - 1)) {
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
    3464:	4295      	cmp	r5, r2
    3466:	d33a      	bcc.n	34de <nvm_write_buffer+0x92>
    3468:	4b1f      	ldr	r3, [pc, #124]	; (34e8 <nvm_write_buffer+0x9c>)
    346a:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    346c:	3c12      	subs	r4, #18

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    346e:	07db      	lsls	r3, r3, #31
    3470:	d535      	bpl.n	34de <nvm_write_buffer+0x92>
		return STATUS_BUSY;
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    3472:	4c1e      	ldr	r4, [pc, #120]	; (34ec <nvm_write_buffer+0xa0>)
    3474:	4b1c      	ldr	r3, [pc, #112]	; (34e8 <nvm_write_buffer+0x9c>)
    3476:	801c      	strh	r4, [r3, #0]
    3478:	1c1d      	adds	r5, r3, #0
    347a:	2401      	movs	r4, #1
    347c:	7d2b      	ldrb	r3, [r5, #20]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    347e:	4223      	tst	r3, r4
    3480:	d0fc      	beq.n	347c <nvm_write_buffer+0x30>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    3482:	4c19      	ldr	r4, [pc, #100]	; (34e8 <nvm_write_buffer+0x9c>)
    3484:	8b25      	ldrh	r5, [r4, #24]
    3486:	2320      	movs	r3, #32
    3488:	33ff      	adds	r3, #255	; 0xff
    348a:	432b      	orrs	r3, r5
    348c:	8323      	strh	r3, [r4, #24]

	uint32_t nvm_address = destination_address / 2;
    348e:	0846      	lsrs	r6, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    3490:	2a00      	cmp	r2, #0
    3492:	d01f      	beq.n	34d4 <nvm_write_buffer+0x88>
    3494:	0076      	lsls	r6, r6, #1
    3496:	2300      	movs	r3, #0
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    3498:	1e57      	subs	r7, r2, #1
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    349a:	5ccd      	ldrb	r5, [r1, r3]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    349c:	42bb      	cmp	r3, r7
    349e:	db01      	blt.n	34a4 <nvm_write_buffer+0x58>
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    34a0:	b2ac      	uxth	r4, r5
    34a2:	e003      	b.n	34ac <nvm_write_buffer+0x60>

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
			data |= (buffer[i + 1] << 8);
    34a4:	18cc      	adds	r4, r1, r3
    34a6:	7864      	ldrb	r4, [r4, #1]
    34a8:	0224      	lsls	r4, r4, #8
    34aa:	432c      	orrs	r4, r5
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    34ac:	8034      	strh	r4, [r6, #0]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    34ae:	3302      	adds	r3, #2
    34b0:	b29b      	uxth	r3, r3
    34b2:	3602      	adds	r6, #2
    34b4:	429a      	cmp	r2, r3
    34b6:	d8f0      	bhi.n	349a <nvm_write_buffer+0x4e>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    34b8:	4b0a      	ldr	r3, [pc, #40]	; (34e4 <nvm_write_buffer+0x98>)
    34ba:	791b      	ldrb	r3, [r3, #4]
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    34bc:	2400      	movs	r4, #0
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    34be:	2b00      	cmp	r3, #0
    34c0:	d10d      	bne.n	34de <nvm_write_buffer+0x92>
    34c2:	2a3f      	cmp	r2, #63	; 0x3f
    34c4:	d80b      	bhi.n	34de <nvm_write_buffer+0x92>
    34c6:	1c01      	adds	r1, r0, #0
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    34c8:	2004      	movs	r0, #4
    34ca:	2200      	movs	r2, #0
    34cc:	4b08      	ldr	r3, [pc, #32]	; (34f0 <nvm_write_buffer+0xa4>)
    34ce:	4798      	blx	r3
    34d0:	1c04      	adds	r4, r0, #0
    34d2:	e004      	b.n	34de <nvm_write_buffer+0x92>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    34d4:	4b03      	ldr	r3, [pc, #12]	; (34e4 <nvm_write_buffer+0x98>)
    34d6:	791b      	ldrb	r3, [r3, #4]
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    34d8:	2400      	movs	r4, #0
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    34da:	2b00      	cmp	r3, #0
    34dc:	d0f3      	beq.n	34c6 <nvm_write_buffer+0x7a>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    34de:	1c20      	adds	r0, r4, #0
    34e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34e2:	46c0      	nop			; (mov r8, r8)
    34e4:	2000019c 	.word	0x2000019c
    34e8:	41004000 	.word	0x41004000
    34ec:	ffffa544 	.word	0xffffa544
    34f0:	000033b9 	.word	0x000033b9

000034f4 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    34f4:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    34f6:	4b19      	ldr	r3, [pc, #100]	; (355c <nvm_read_buffer+0x68>)
    34f8:	881d      	ldrh	r5, [r3, #0]
    34fa:	885b      	ldrh	r3, [r3, #2]
    34fc:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    34fe:	2418      	movs	r4, #24
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
	/* Check if the source address is valid */
	if (source_address >
    3500:	4283      	cmp	r3, r0
    3502:	d328      	bcc.n	3556 <nvm_read_buffer+0x62>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    3504:	1e6b      	subs	r3, r5, #1
    3506:	4203      	tst	r3, r0
    3508:	d125      	bne.n	3556 <nvm_read_buffer+0x62>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    350a:	3c01      	subs	r4, #1
	if (source_address & (_nvm_dev.page_size - 1)) {
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than a NVM page */
	if (length > _nvm_dev.page_size) {
    350c:	4295      	cmp	r5, r2
    350e:	d322      	bcc.n	3556 <nvm_read_buffer+0x62>
    3510:	4b13      	ldr	r3, [pc, #76]	; (3560 <nvm_read_buffer+0x6c>)
    3512:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    3514:	3c12      	subs	r4, #18

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    3516:	07db      	lsls	r3, r3, #31
    3518:	d51d      	bpl.n	3556 <nvm_read_buffer+0x62>
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    351a:	4c11      	ldr	r4, [pc, #68]	; (3560 <nvm_read_buffer+0x6c>)
    351c:	8b25      	ldrh	r5, [r4, #24]
    351e:	2320      	movs	r3, #32
    3520:	33ff      	adds	r3, #255	; 0xff
    3522:	432b      	orrs	r3, r5
    3524:	8323      	strh	r3, [r4, #24]

	uint32_t page_address = source_address / 2;
    3526:	0840      	lsrs	r0, r0, #1

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    3528:	2a00      	cmp	r2, #0
    352a:	d013      	beq.n	3554 <nvm_read_buffer+0x60>
    352c:	0040      	lsls	r0, r0, #1
    352e:	2500      	movs	r5, #0
		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    3530:	1e56      	subs	r6, r2, #1
    3532:	182b      	adds	r3, r5, r0

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
		/* Fetch next 16-bit chunk from the NVM memory space */
		uint16_t data = NVM_MEMORY[page_address++];
    3534:	881c      	ldrh	r4, [r3, #0]
    3536:	b2a4      	uxth	r4, r4

		/* Copy first byte of the 16-bit chunk to the destination buffer */
		buffer[i] = (data & 0xFF);
    3538:	042b      	lsls	r3, r5, #16
    353a:	0c1b      	lsrs	r3, r3, #16
    353c:	54cc      	strb	r4, [r1, r3]

		/* If we are not at the end of a read request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    353e:	42b3      	cmp	r3, r6
    3540:	da02      	bge.n	3548 <nvm_read_buffer+0x54>
			buffer[i + 1] = (data >> 8);
    3542:	18cb      	adds	r3, r1, r3
    3544:	0a24      	lsrs	r4, r4, #8
    3546:	705c      	strb	r4, [r3, #1]
    3548:	3502      	adds	r5, #2

	uint32_t page_address = source_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    354a:	b2ab      	uxth	r3, r5
    354c:	429a      	cmp	r2, r3
    354e:	d8f0      	bhi.n	3532 <nvm_read_buffer+0x3e>
		if (i < (length - 1)) {
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
    3550:	2400      	movs	r4, #0
    3552:	e000      	b.n	3556 <nvm_read_buffer+0x62>
    3554:	2400      	movs	r4, #0
}
    3556:	1c20      	adds	r0, r4, #0
    3558:	bd70      	pop	{r4, r5, r6, pc}
    355a:	46c0      	nop			; (mov r8, r8)
    355c:	2000019c 	.word	0x2000019c
    3560:	41004000 	.word	0x41004000

00003564 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    3564:	4b11      	ldr	r3, [pc, #68]	; (35ac <nvm_erase_row+0x48>)
    3566:	881a      	ldrh	r2, [r3, #0]
    3568:	885b      	ldrh	r3, [r3, #2]
    356a:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    356c:	2118      	movs	r1, #24
#ifdef FEATURE_NVM_RWWEE
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
    356e:	4283      	cmp	r3, r0
    3570:	d319      	bcc.n	35a6 <nvm_erase_row+0x42>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    3572:	0092      	lsls	r2, r2, #2
    3574:	3a01      	subs	r2, #1
    3576:	4210      	tst	r0, r2
    3578:	d115      	bne.n	35a6 <nvm_erase_row+0x42>
    357a:	4b0d      	ldr	r3, [pc, #52]	; (35b0 <nvm_erase_row+0x4c>)
    357c:	7d1b      	ldrb	r3, [r3, #20]
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    357e:	3913      	subs	r1, #19

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    3580:	07db      	lsls	r3, r3, #31
    3582:	d510      	bpl.n	35a6 <nvm_erase_row+0x42>
		return STATUS_BUSY;
	}

	/* Clear error flags */
	nvm_module->STATUS.reg |= NVMCTRL_STATUS_MASK;
    3584:	4b0a      	ldr	r3, [pc, #40]	; (35b0 <nvm_erase_row+0x4c>)
    3586:	8b19      	ldrh	r1, [r3, #24]
    3588:	2220      	movs	r2, #32
    358a:	32ff      	adds	r2, #255	; 0xff
    358c:	430a      	orrs	r2, r1
    358e:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    3590:	0880      	lsrs	r0, r0, #2
    3592:	0040      	lsls	r0, r0, #1
    3594:	61d8      	str	r0, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    3596:	4a07      	ldr	r2, [pc, #28]	; (35b4 <nvm_erase_row+0x50>)
    3598:	801a      	strh	r2, [r3, #0]
    359a:	1c19      	adds	r1, r3, #0
    359c:	2201      	movs	r2, #1
    359e:	7d0b      	ldrb	r3, [r1, #20]
#endif

	while (!nvm_is_ready()) {
    35a0:	4213      	tst	r3, r2
    35a2:	d0fc      	beq.n	359e <nvm_erase_row+0x3a>
	}

	return STATUS_OK;
    35a4:	2100      	movs	r1, #0
}
    35a6:	1c08      	adds	r0, r1, #0
    35a8:	4770      	bx	lr
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	2000019c 	.word	0x2000019c
    35b0:	41004000 	.word	0x41004000
    35b4:	ffffa502 	.word	0xffffa502

000035b8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    35b8:	b500      	push	{lr}
    35ba:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    35bc:	ab01      	add	r3, sp, #4
    35be:	2280      	movs	r2, #128	; 0x80
    35c0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    35c2:	780a      	ldrb	r2, [r1, #0]
    35c4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    35c6:	784a      	ldrb	r2, [r1, #1]
    35c8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    35ca:	788a      	ldrb	r2, [r1, #2]
    35cc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    35ce:	1c19      	adds	r1, r3, #0
    35d0:	4b01      	ldr	r3, [pc, #4]	; (35d8 <port_pin_set_config+0x20>)
    35d2:	4798      	blx	r3
}
    35d4:	b003      	add	sp, #12
    35d6:	bd00      	pop	{pc}
    35d8:	000053e9 	.word	0x000053e9

000035dc <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    35dc:	b510      	push	{r4, lr}
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
	struct rtc_module *module = _rtc_instance[instance_index];
    35de:	4b0d      	ldr	r3, [pc, #52]	; (3614 <RTC_Handler+0x38>)
    35e0:	681a      	ldr	r2, [r3, #0]

	Rtc *const rtc_module = module->hw;
    35e2:	6814      	ldr	r4, [r2, #0]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    35e4:	8a53      	ldrh	r3, [r2, #18]
	callback_mask &= module->registered_callback;
    35e6:	8a11      	ldrh	r1, [r2, #16]
    35e8:	4019      	ands	r1, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    35ea:	7a23      	ldrb	r3, [r4, #8]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    35ec:	79e0      	ldrb	r0, [r4, #7]
    35ee:	4003      	ands	r3, r0

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    35f0:	09d8      	lsrs	r0, r3, #7
    35f2:	d006      	beq.n	3602 <RTC_Handler+0x26>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    35f4:	078b      	lsls	r3, r1, #30
    35f6:	d501      	bpl.n	35fc <RTC_Handler+0x20>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    35f8:	68d3      	ldr	r3, [r2, #12]
    35fa:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    35fc:	2380      	movs	r3, #128	; 0x80
    35fe:	7223      	strb	r3, [r4, #8]
    3600:	e007      	b.n	3612 <RTC_Handler+0x36>

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    3602:	07db      	lsls	r3, r3, #31
    3604:	d505      	bpl.n	3612 <RTC_Handler+0x36>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    3606:	07cb      	lsls	r3, r1, #31
    3608:	d501      	bpl.n	360e <RTC_Handler+0x32>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    360a:	6893      	ldr	r3, [r2, #8]
    360c:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    360e:	2301      	movs	r3, #1
    3610:	7223      	strb	r3, [r4, #8]
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
	_rtc_interrupt_handler(0);
}
    3612:	bd10      	pop	{r4, pc}
    3614:	200004b0 	.word	0x200004b0

00003618 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3618:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    361a:	2207      	movs	r2, #7
    361c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    361e:	421a      	tst	r2, r3
    3620:	d1fc      	bne.n	361c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    3622:	4770      	bx	lr

00003624 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3624:	b5f0      	push	{r4, r5, r6, r7, lr}
    3626:	464f      	mov	r7, r9
    3628:	4646      	mov	r6, r8
    362a:	b4c0      	push	{r6, r7}
    362c:	b083      	sub	sp, #12
    362e:	1c07      	adds	r7, r0, #0
    3630:	1c0d      	adds	r5, r1, #0
    3632:	1c16      	adds	r6, r2, #0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    3634:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3636:	1c08      	adds	r0, r1, #0
    3638:	4b6d      	ldr	r3, [pc, #436]	; (37f0 <i2c_master_init+0x1cc>)
    363a:	4798      	blx	r3
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    363c:	496d      	ldr	r1, [pc, #436]	; (37f4 <i2c_master_init+0x1d0>)
    363e:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    3640:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3642:	2301      	movs	r3, #1
    3644:	40a3      	lsls	r3, r4
    3646:	4313      	orrs	r3, r2
    3648:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    364a:	a901      	add	r1, sp, #4
    364c:	7b33      	ldrb	r3, [r6, #12]
    364e:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3650:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3652:	b2c4      	uxtb	r4, r0
    3654:	1c20      	adds	r0, r4, #0
    3656:	4b68      	ldr	r3, [pc, #416]	; (37f8 <i2c_master_init+0x1d4>)
    3658:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    365a:	1c20      	adds	r0, r4, #0
    365c:	4b67      	ldr	r3, [pc, #412]	; (37fc <i2c_master_init+0x1d8>)
    365e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3660:	7b30      	ldrb	r0, [r6, #12]
    3662:	2100      	movs	r1, #0
    3664:	4b66      	ldr	r3, [pc, #408]	; (3800 <i2c_master_init+0x1dc>)
    3666:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3668:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    366a:	201c      	movs	r0, #28
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
	system_gclk_chan_enable(gclk_index);
	sercom_set_gclk_generator(config->generator_source, false);

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    366c:	079b      	lsls	r3, r3, #30
    366e:	d500      	bpl.n	3672 <i2c_master_init+0x4e>
    3670:	e0b9      	b.n	37e6 <i2c_master_init+0x1c2>
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3672:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    3674:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
		return STATUS_ERR_DENIED;
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3676:	07db      	lsls	r3, r3, #31
    3678:	d500      	bpl.n	367c <i2c_master_init+0x58>
    367a:	e0b4      	b.n	37e6 <i2c_master_init+0x1c2>
		return STATUS_BUSY;
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    367c:	6838      	ldr	r0, [r7, #0]
    367e:	4b5c      	ldr	r3, [pc, #368]	; (37f0 <i2c_master_init+0x1cc>)
    3680:	4698      	mov	r8, r3
    3682:	4798      	blx	r3
    3684:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    3686:	495f      	ldr	r1, [pc, #380]	; (3804 <i2c_master_init+0x1e0>)
    3688:	4b5f      	ldr	r3, [pc, #380]	; (3808 <i2c_master_init+0x1e4>)
    368a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    368c:	00a4      	lsls	r4, r4, #2
    368e:	4b5f      	ldr	r3, [pc, #380]	; (380c <i2c_master_init+0x1e8>)
    3690:	50e7      	str	r7, [r4, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    3692:	2300      	movs	r3, #0
    3694:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    3696:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    3698:	2400      	movs	r4, #0
    369a:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    369c:	83bb      	strh	r3, [r7, #28]

	module->status = STATUS_OK;
    369e:	2225      	movs	r2, #37	; 0x25
    36a0:	54bc      	strb	r4, [r7, r2]
	module->buffer = NULL;
    36a2:	623b      	str	r3, [r7, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    36a4:	3314      	adds	r3, #20
    36a6:	602b      	str	r3, [r5, #0]
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    36a8:	683d      	ldr	r5, [r7, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    36aa:	1c28      	adds	r0, r5, #0
    36ac:	47c0      	blx	r8
    36ae:	4680      	mov	r8, r0
    36b0:	2380      	movs	r3, #128	; 0x80
    36b2:	466a      	mov	r2, sp
    36b4:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    36b6:	7054      	strb	r4, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    36b8:	2301      	movs	r3, #1
    36ba:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    36bc:	70d4      	strb	r4, [r2, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
    36be:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    36c0:	6a34      	ldr	r4, [r6, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    36c2:	2800      	cmp	r0, #0
    36c4:	d103      	bne.n	36ce <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    36c6:	1c28      	adds	r0, r5, #0
    36c8:	2100      	movs	r1, #0
    36ca:	4b51      	ldr	r3, [pc, #324]	; (3810 <i2c_master_init+0x1ec>)
    36cc:	4798      	blx	r3
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    36ce:	466b      	mov	r3, sp
    36d0:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    36d2:	2302      	movs	r3, #2
    36d4:	466a      	mov	r2, sp
    36d6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    36d8:	0c00      	lsrs	r0, r0, #16
    36da:	b2c0      	uxtb	r0, r0
    36dc:	4669      	mov	r1, sp
    36de:	4b4d      	ldr	r3, [pc, #308]	; (3814 <i2c_master_init+0x1f0>)
    36e0:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    36e2:	2c00      	cmp	r4, #0
    36e4:	d104      	bne.n	36f0 <i2c_master_init+0xcc>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    36e6:	1c28      	adds	r0, r5, #0
    36e8:	2101      	movs	r1, #1
    36ea:	4b49      	ldr	r3, [pc, #292]	; (3810 <i2c_master_init+0x1ec>)
    36ec:	4798      	blx	r3
    36ee:	1c04      	adds	r4, r0, #0
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    36f0:	466b      	mov	r3, sp
    36f2:	701c      	strb	r4, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    36f4:	2302      	movs	r3, #2
    36f6:	466a      	mov	r2, sp
    36f8:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    36fa:	0c24      	lsrs	r4, r4, #16
    36fc:	b2e0      	uxtb	r0, r4
    36fe:	4669      	mov	r1, sp
    3700:	4b44      	ldr	r3, [pc, #272]	; (3814 <i2c_master_init+0x1f0>)
    3702:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3704:	8ab3      	ldrh	r3, [r6, #20]
    3706:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    3708:	8af3      	ldrh	r3, [r6, #22]
    370a:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    370c:	7e32      	ldrb	r2, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    370e:	2380      	movs	r3, #128	; 0x80

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    3710:	2a00      	cmp	r2, #0
    3712:	d104      	bne.n	371e <i2c_master_init+0xfa>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3714:	4b40      	ldr	r3, [pc, #256]	; (3818 <i2c_master_init+0x1f4>)
    3716:	789b      	ldrb	r3, [r3, #2]
    3718:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    371a:	0fdb      	lsrs	r3, r3, #31
    371c:	01db      	lsls	r3, r3, #7
	} else {
		tmp_ctrla = 0;
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    371e:	6932      	ldr	r2, [r6, #16]
    3720:	2a00      	cmp	r2, #0
    3722:	d000      	beq.n	3726 <i2c_master_init+0x102>
		tmp_ctrla |= config->start_hold_time;
    3724:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    3726:	68b2      	ldr	r2, [r6, #8]
    3728:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    372a:	2224      	movs	r2, #36	; 0x24
    372c:	5cb2      	ldrb	r2, [r6, r2]
    372e:	2a00      	cmp	r2, #0
    3730:	d002      	beq.n	3738 <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3732:	2280      	movs	r2, #128	; 0x80
    3734:	05d2      	lsls	r2, r2, #23
    3736:	4313      	orrs	r3, r2
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    3738:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    373a:	2a00      	cmp	r2, #0
    373c:	d000      	beq.n	3740 <i2c_master_init+0x11c>
		tmp_ctrla |= config->inactive_timeout;
    373e:	4313      	orrs	r3, r2
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit) {
    3740:	222c      	movs	r2, #44	; 0x2c
    3742:	5cb2      	ldrb	r2, [r6, r2]
    3744:	2a00      	cmp	r2, #0
    3746:	d002      	beq.n	374e <i2c_master_init+0x12a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3748:	2280      	movs	r2, #128	; 0x80
    374a:	0512      	lsls	r2, r2, #20
    374c:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    374e:	222d      	movs	r2, #45	; 0x2d
    3750:	5cb2      	ldrb	r2, [r6, r2]
    3752:	2a00      	cmp	r2, #0
    3754:	d002      	beq.n	375c <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3756:	2280      	movs	r2, #128	; 0x80
    3758:	0412      	lsls	r2, r2, #16
    375a:	4313      	orrs	r3, r2
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    375c:	222e      	movs	r2, #46	; 0x2e
    375e:	5cb2      	ldrb	r2, [r6, r2]
    3760:	2a00      	cmp	r2, #0
    3762:	d002      	beq.n	376a <i2c_master_init+0x146>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3764:	2280      	movs	r2, #128	; 0x80
    3766:	03d2      	lsls	r2, r2, #15
    3768:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    376a:	682a      	ldr	r2, [r5, #0]
    376c:	4313      	orrs	r3, r2
    376e:	602b      	str	r3, [r5, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3770:	2380      	movs	r3, #128	; 0x80
    3772:	005b      	lsls	r3, r3, #1
    3774:	606b      	str	r3, [r5, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3776:	4647      	mov	r7, r8
    3778:	3714      	adds	r7, #20
    377a:	b2fb      	uxtb	r3, r7
    377c:	4698      	mov	r8, r3
    377e:	1c18      	adds	r0, r3, #0
    3780:	4b26      	ldr	r3, [pc, #152]	; (381c <i2c_master_init+0x1f8>)
    3782:	4798      	blx	r3
    3784:	1c04      	adds	r4, r0, #0
	uint32_t fscl        = 1000*config->baud_rate;
    3786:	20fa      	movs	r0, #250	; 0xfa
    3788:	0080      	lsls	r0, r0, #2
    378a:	6833      	ldr	r3, [r6, #0]
    378c:	4343      	muls	r3, r0
    378e:	4699      	mov	r9, r3
	uint32_t trise       = config->sda_scl_rise_time_ns;
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
	int32_t  denominator = 2*fscl;
    3790:	005f      	lsls	r7, r3, #1
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
	uint32_t fscl        = 1000*config->baud_rate;
	uint32_t trise       = config->sda_scl_rise_time_ns;
    3792:	8e30      	ldrh	r0, [r6, #48]	; 0x30
	int32_t  numerator   = fgclk - fscl*(10 + fgclk*trise/1000000000);
    3794:	4360      	muls	r0, r4
    3796:	4922      	ldr	r1, [pc, #136]	; (3820 <i2c_master_init+0x1fc>)
    3798:	4b22      	ldr	r3, [pc, #136]	; (3824 <i2c_master_init+0x200>)
    379a:	4798      	blx	r3
    379c:	300a      	adds	r0, #10
    379e:	464b      	mov	r3, r9
    37a0:	4358      	muls	r0, r3
    37a2:	1a20      	subs	r0, r4, r0
	int32_t  denominator = 2*fscl;
	/* For more accurate result, can use round div. */
	tmp_baud = (int32_t)(div_ceil(numerator, denominator));
    37a4:	19c0      	adds	r0, r0, r7
    37a6:	3801      	subs	r0, #1
    37a8:	1c39      	adds	r1, r7, #0
    37aa:	4b1f      	ldr	r3, [pc, #124]	; (3828 <i2c_master_init+0x204>)
    37ac:	4798      	blx	r3
    37ae:	1e04      	subs	r4, r0, #0
	 
	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0) {
    37b0:	2cff      	cmp	r4, #255	; 0xff
    37b2:	d80d      	bhi.n	37d0 <i2c_master_init+0x1ac>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		/* Find baudrate for high speed */
		tmp_baud_hs = (int32_t)(div_ceil(
    37b4:	4640      	mov	r0, r8
    37b6:	4b19      	ldr	r3, [pc, #100]	; (381c <i2c_master_init+0x1f8>)
    37b8:	4798      	blx	r3
    37ba:	6871      	ldr	r1, [r6, #4]
    37bc:	23fa      	movs	r3, #250	; 0xfa
    37be:	00db      	lsls	r3, r3, #3
    37c0:	4359      	muls	r1, r3
    37c2:	1e4b      	subs	r3, r1, #1
    37c4:	1818      	adds	r0, r3, r0
    37c6:	4b17      	ldr	r3, [pc, #92]	; (3824 <i2c_master_init+0x200>)
    37c8:	4798      	blx	r3
				system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index),
				(2000*(config->baud_rate_high_speed))) - 1);
    37ca:	3801      	subs	r0, #1

		/* Check that baudrate is supported at current speed. */
		if (tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    37cc:	28ff      	cmp	r0, #255	; 0xff
    37ce:	d901      	bls.n	37d4 <i2c_master_init+0x1b0>
	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    37d0:	2040      	movs	r0, #64	; 0x40
    37d2:	e008      	b.n	37e6 <i2c_master_init+0x1c2>
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs);
    37d4:	0400      	lsls	r0, r0, #16
    37d6:	23ff      	movs	r3, #255	; 0xff
    37d8:	041b      	lsls	r3, r3, #16
    37da:	4018      	ands	r0, r3
			tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    37dc:	23ff      	movs	r3, #255	; 0xff
    37de:	401c      	ands	r4, r3
    37e0:	4304      	orrs	r4, r0
    37e2:	60ec      	str	r4, [r5, #12]

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud;
	int32_t tmp_baud_hs;
	enum status_code tmp_status_code = STATUS_OK;
    37e4:	2000      	movs	r0, #0
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    37e6:	b003      	add	sp, #12
    37e8:	bc0c      	pop	{r2, r3}
    37ea:	4690      	mov	r8, r2
    37ec:	4699      	mov	r9, r3
    37ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37f0:	000041bd 	.word	0x000041bd
    37f4:	40000400 	.word	0x40000400
    37f8:	000052f1 	.word	0x000052f1
    37fc:	00005265 	.word	0x00005265
    3800:	00003fe9 	.word	0x00003fe9
    3804:	00003c25 	.word	0x00003c25
    3808:	000041fd 	.word	0x000041fd
    380c:	200004b4 	.word	0x200004b4
    3810:	00004035 	.word	0x00004035
    3814:	000053e9 	.word	0x000053e9
    3818:	41002000 	.word	0x41002000
    381c:	0000530d 	.word	0x0000530d
    3820:	3b9aca00 	.word	0x3b9aca00
    3824:	00008045 	.word	0x00008045
    3828:	00008165 	.word	0x00008165

0000382c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    382c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    382e:	7e1a      	ldrb	r2, [r3, #24]
    3830:	0792      	lsls	r2, r2, #30
    3832:	d507      	bpl.n	3844 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3834:	2202      	movs	r2, #2
    3836:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3838:	8b5b      	ldrh	r3, [r3, #26]
    383a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    383c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    383e:	17db      	asrs	r3, r3, #31
    3840:	4018      	ands	r0, r3
    3842:	e00a      	b.n	385a <_i2c_master_address_response+0x2e>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3844:	8b5a      	ldrh	r2, [r3, #26]
    3846:	0752      	lsls	r2, r2, #29
    3848:	d506      	bpl.n	3858 <_i2c_master_address_response+0x2c>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    384a:	685a      	ldr	r2, [r3, #4]
    384c:	21c0      	movs	r1, #192	; 0xc0
    384e:	0289      	lsls	r1, r1, #10
    3850:	430a      	orrs	r2, r1
    3852:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
    3854:	2018      	movs	r0, #24
    3856:	e000      	b.n	385a <_i2c_master_address_response+0x2e>
	}

	return STATUS_OK;
    3858:	2000      	movs	r0, #0
}
    385a:	4770      	bx	lr

0000385c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    385c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    385e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3860:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3862:	2401      	movs	r4, #1
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3864:	2502      	movs	r5, #2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3866:	e004      	b.n	3872 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3868:	3301      	adds	r3, #1
    386a:	b29b      	uxth	r3, r3
    386c:	8901      	ldrh	r1, [r0, #8]
    386e:	4299      	cmp	r1, r3
    3870:	d907      	bls.n	3882 <_i2c_master_wait_for_bus+0x26>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3872:	7e11      	ldrb	r1, [r2, #24]
    3874:	4221      	tst	r1, r4
    3876:	d106      	bne.n	3886 <_i2c_master_wait_for_bus+0x2a>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3878:	7e11      	ldrb	r1, [r2, #24]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    387a:	4229      	tst	r1, r5
    387c:	d0f4      	beq.n	3868 <_i2c_master_wait_for_bus+0xc>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    387e:	2000      	movs	r0, #0
    3880:	e002      	b.n	3888 <_i2c_master_wait_for_bus+0x2c>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
    3882:	2012      	movs	r0, #18
    3884:	e000      	b.n	3888 <_i2c_master_wait_for_bus+0x2c>
		}
	}
	return STATUS_OK;
    3886:	2000      	movs	r0, #0
}
    3888:	bd30      	pop	{r4, r5, pc}
    388a:	46c0      	nop			; (mov r8, r8)

0000388c <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    388c:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    388e:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3890:	6863      	ldr	r3, [r4, #4]
    3892:	2280      	movs	r2, #128	; 0x80
    3894:	02d2      	lsls	r2, r2, #11
    3896:	4313      	orrs	r3, r2
    3898:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    389a:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    389c:	4b02      	ldr	r3, [pc, #8]	; (38a8 <_i2c_master_send_hs_master_code+0x1c>)
    389e:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    38a0:	2301      	movs	r3, #1
    38a2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    38a4:	bd10      	pop	{r4, pc}
    38a6:	46c0      	nop			; (mov r8, r8)
    38a8:	0000385d 	.word	0x0000385d

000038ac <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	465f      	mov	r7, fp
    38b0:	4656      	mov	r6, sl
    38b2:	464d      	mov	r5, r9
    38b4:	4644      	mov	r4, r8
    38b6:	b4f0      	push	{r4, r5, r6, r7}
    38b8:	b083      	sub	sp, #12
    38ba:	1c06      	adds	r6, r0, #0
    38bc:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    38be:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    38c0:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    38c2:	682b      	ldr	r3, [r5, #0]
    38c4:	011b      	lsls	r3, r3, #4
    38c6:	0fdb      	lsrs	r3, r3, #31
    38c8:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    38ca:	7a4b      	ldrb	r3, [r1, #9]
    38cc:	2b00      	cmp	r3, #0
    38ce:	d002      	beq.n	38d6 <_i2c_master_read_packet+0x2a>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    38d0:	7a89      	ldrb	r1, [r1, #10]
    38d2:	4b4f      	ldr	r3, [pc, #316]	; (3a10 <_i2c_master_read_packet+0x164>)
    38d4:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    38d6:	686a      	ldr	r2, [r5, #4]
    38d8:	4b4e      	ldr	r3, [pc, #312]	; (3a14 <_i2c_master_read_packet+0x168>)
    38da:	4013      	ands	r3, r2
    38dc:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    38de:	464b      	mov	r3, r9
    38e0:	7a1b      	ldrb	r3, [r3, #8]
    38e2:	2b00      	cmp	r3, #0
    38e4:	d026      	beq.n	3934 <_i2c_master_read_packet+0x88>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    38e6:	464b      	mov	r3, r9
    38e8:	7a5b      	ldrb	r3, [r3, #9]
    38ea:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    38ec:	464b      	mov	r3, r9
    38ee:	881b      	ldrh	r3, [r3, #0]
    38f0:	005b      	lsls	r3, r3, #1
    38f2:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    38f4:	2280      	movs	r2, #128	; 0x80
    38f6:	0212      	lsls	r2, r2, #8
    38f8:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
    38fa:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    38fc:	1c30      	adds	r0, r6, #0
    38fe:	4b46      	ldr	r3, [pc, #280]	; (3a18 <_i2c_master_read_packet+0x16c>)
    3900:	4798      	blx	r3

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3902:	686a      	ldr	r2, [r5, #4]
    3904:	4b43      	ldr	r3, [pc, #268]	; (3a14 <_i2c_master_read_packet+0x168>)
    3906:	4013      	ands	r3, r2
    3908:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
    390a:	1e03      	subs	r3, r0, #0
		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
    390c:	d178      	bne.n	3a00 <_i2c_master_read_packet+0x154>
			tmp_status = _i2c_master_address_response(module);
    390e:	1c30      	adds	r0, r6, #0
    3910:	4b42      	ldr	r3, [pc, #264]	; (3a1c <_i2c_master_read_packet+0x170>)
    3912:	4798      	blx	r3
    3914:	1e03      	subs	r3, r0, #0
		}

		if (tmp_status == STATUS_OK) {
    3916:	d173      	bne.n	3a00 <_i2c_master_read_packet+0x154>
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3918:	464b      	mov	r3, r9
    391a:	7a5b      	ldrb	r3, [r3, #9]
    391c:	039b      	lsls	r3, r3, #14
    391e:	2201      	movs	r2, #1
    3920:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3922:	464a      	mov	r2, r9
    3924:	8812      	ldrh	r2, [r2, #0]
    3926:	0a12      	lsrs	r2, r2, #8
    3928:	2178      	movs	r1, #120	; 0x78
    392a:	430a      	orrs	r2, r1
    392c:	0052      	lsls	r2, r2, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    392e:	4313      	orrs	r3, r2
		if (tmp_status == STATUS_OK) {
			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3930:	626b      	str	r3, [r5, #36]	; 0x24
    3932:	e009      	b.n	3948 <_i2c_master_read_packet+0x9c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3934:	464b      	mov	r3, r9
    3936:	881b      	ldrh	r3, [r3, #0]
    3938:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    393a:	464b      	mov	r3, r9
    393c:	7a5b      	ldrb	r3, [r3, #9]
    393e:	039b      	lsls	r3, r3, #14
    3940:	4313      	orrs	r3, r2
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3942:	2201      	movs	r2, #1
    3944:	4313      	orrs	r3, r2
    3946:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3948:	1c30      	adds	r0, r6, #0
    394a:	4b33      	ldr	r3, [pc, #204]	; (3a18 <_i2c_master_read_packet+0x16c>)
    394c:	4798      	blx	r3

	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    394e:	686a      	ldr	r2, [r5, #4]
    3950:	4b30      	ldr	r3, [pc, #192]	; (3a14 <_i2c_master_read_packet+0x168>)
    3952:	4013      	ands	r3, r2
    3954:	606b      	str	r3, [r5, #4]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3956:	1e03      	subs	r3, r0, #0
	/* Set action to ack. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3958:	d152      	bne.n	3a00 <_i2c_master_read_packet+0x154>
		tmp_status = _i2c_master_address_response(module);
    395a:	1c30      	adds	r0, r6, #0
    395c:	4b2f      	ldr	r3, [pc, #188]	; (3a1c <_i2c_master_read_packet+0x170>)
    395e:	4798      	blx	r3
    3960:	9001      	str	r0, [sp, #4]
    3962:	1e03      	subs	r3, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3964:	d14c      	bne.n	3a00 <_i2c_master_read_packet+0x154>
    3966:	3c01      	subs	r4, #1
    3968:	b2a4      	uxth	r4, r4
    396a:	2300      	movs	r3, #0
    396c:	4698      	mov	r8, r3
		/* Read data buffer. */
		while (tmp_data_length--) {
    396e:	4b2c      	ldr	r3, [pc, #176]	; (3a20 <_i2c_master_read_packet+0x174>)
    3970:	469b      	mov	fp, r3
    3972:	e029      	b.n	39c8 <_i2c_master_read_packet+0x11c>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3974:	8b6b      	ldrh	r3, [r5, #26]
    3976:	069b      	lsls	r3, r3, #26
    3978:	d541      	bpl.n	39fe <_i2c_master_read_packet+0x152>
				return STATUS_ERR_PACKET_COLLISION;
			}

			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    397a:	7af3      	ldrb	r3, [r6, #11]
    397c:	2b00      	cmp	r3, #0
    397e:	d00f      	beq.n	39a0 <_i2c_master_read_packet+0xf4>
    3980:	4653      	mov	r3, sl
    3982:	2b00      	cmp	r3, #0
    3984:	d102      	bne.n	398c <_i2c_master_read_packet+0xe0>
    3986:	2c00      	cmp	r4, #0
    3988:	d002      	beq.n	3990 <_i2c_master_read_packet+0xe4>
    398a:	e009      	b.n	39a0 <_i2c_master_read_packet+0xf4>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    398c:	2c01      	cmp	r4, #1
    398e:	d107      	bne.n	39a0 <_i2c_master_read_packet+0xf4>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3990:	686b      	ldr	r3, [r5, #4]
    3992:	2280      	movs	r2, #128	; 0x80
    3994:	02d2      	lsls	r2, r2, #11
    3996:	4313      	orrs	r3, r2
    3998:	606b      	str	r3, [r5, #4]
    399a:	3c01      	subs	r4, #1
    399c:	b2a4      	uxth	r4, r4
    399e:	e013      	b.n	39c8 <_i2c_master_read_packet+0x11c>
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
    39a0:	1c30      	adds	r0, r6, #0
    39a2:	4b20      	ldr	r3, [pc, #128]	; (3a24 <_i2c_master_read_packet+0x178>)
    39a4:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    39a6:	4643      	mov	r3, r8
    39a8:	1c5f      	adds	r7, r3, #1
    39aa:	b2bf      	uxth	r7, r7
    39ac:	2328      	movs	r3, #40	; 0x28
    39ae:	5ceb      	ldrb	r3, [r5, r3]
    39b0:	464a      	mov	r2, r9
    39b2:	6852      	ldr	r2, [r2, #4]
    39b4:	4641      	mov	r1, r8
    39b6:	5453      	strb	r3, [r2, r1]
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    39b8:	1c30      	adds	r0, r6, #0
    39ba:	4b17      	ldr	r3, [pc, #92]	; (3a18 <_i2c_master_read_packet+0x16c>)
    39bc:	4798      	blx	r3
    39be:	3c01      	subs	r4, #1
    39c0:	b2a4      	uxth	r4, r4
			}

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    39c2:	2800      	cmp	r0, #0
    39c4:	d103      	bne.n	39ce <_i2c_master_read_packet+0x122>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    39c6:	46b8      	mov	r8, r7
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
    39c8:	455c      	cmp	r4, fp
    39ca:	d1d3      	bne.n	3974 <_i2c_master_read_packet+0xc8>
    39cc:	e001      	b.n	39d2 <_i2c_master_read_packet+0x126>
				/* Set action to NACK */
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
			} else {
				/* Save data to buffer. */
				_i2c_master_wait_for_sync(module);
				packet->data[counter++] = i2c_module->DATA.reg;
    39ce:	46b8      	mov	r8, r7
				/* Wait for response. */
				tmp_status = _i2c_master_wait_for_bus(module);
    39d0:	9001      	str	r0, [sp, #4]
			if (tmp_status != STATUS_OK) {
				break;
			}
		}

		if (module->send_stop) {
    39d2:	7ab3      	ldrb	r3, [r6, #10]
    39d4:	2b00      	cmp	r3, #0
    39d6:	d007      	beq.n	39e8 <_i2c_master_read_packet+0x13c>
			/* Send stop command unless arbitration is lost. */
			_i2c_master_wait_for_sync(module);
    39d8:	1c30      	adds	r0, r6, #0
    39da:	4b12      	ldr	r3, [pc, #72]	; (3a24 <_i2c_master_read_packet+0x178>)
    39dc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    39de:	686b      	ldr	r3, [r5, #4]
    39e0:	22c0      	movs	r2, #192	; 0xc0
    39e2:	0292      	lsls	r2, r2, #10
    39e4:	4313      	orrs	r3, r2
    39e6:	606b      	str	r3, [r5, #4]
		}

		/* Save last data to buffer. */
		_i2c_master_wait_for_sync(module);
    39e8:	1c30      	adds	r0, r6, #0
    39ea:	4b0e      	ldr	r3, [pc, #56]	; (3a24 <_i2c_master_read_packet+0x178>)
    39ec:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    39ee:	2328      	movs	r3, #40	; 0x28
    39f0:	5cea      	ldrb	r2, [r5, r3]
    39f2:	464b      	mov	r3, r9
    39f4:	685b      	ldr	r3, [r3, #4]
    39f6:	4641      	mov	r1, r8
    39f8:	545a      	strb	r2, [r3, r1]
    39fa:	9b01      	ldr	r3, [sp, #4]
    39fc:	e000      	b.n	3a00 <_i2c_master_read_packet+0x154>
	if (tmp_status == STATUS_OK) {
		/* Read data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    39fe:	2341      	movs	r3, #65	; 0x41
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    3a00:	1c18      	adds	r0, r3, #0
    3a02:	b003      	add	sp, #12
    3a04:	bc3c      	pop	{r2, r3, r4, r5}
    3a06:	4690      	mov	r8, r2
    3a08:	4699      	mov	r9, r3
    3a0a:	46a2      	mov	sl, r4
    3a0c:	46ab      	mov	fp, r5
    3a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a10:	0000388d 	.word	0x0000388d
    3a14:	fffbffff 	.word	0xfffbffff
    3a18:	0000385d 	.word	0x0000385d
    3a1c:	0000382d 	.word	0x0000382d
    3a20:	0000ffff 	.word	0x0000ffff
    3a24:	00003619 	.word	0x00003619

00003a28 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3a28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a2a:	465f      	mov	r7, fp
    3a2c:	4656      	mov	r6, sl
    3a2e:	464d      	mov	r5, r9
    3a30:	4644      	mov	r4, r8
    3a32:	b4f0      	push	{r4, r5, r6, r7}
    3a34:	b083      	sub	sp, #12
    3a36:	1c06      	adds	r6, r0, #0
    3a38:	1c0f      	adds	r7, r1, #0
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3a3a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3a3c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    3a3e:	4b31      	ldr	r3, [pc, #196]	; (3b04 <_i2c_master_write_packet+0xdc>)
    3a40:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3a42:	7a7b      	ldrb	r3, [r7, #9]
    3a44:	2b00      	cmp	r3, #0
    3a46:	d003      	beq.n	3a50 <_i2c_master_write_packet+0x28>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3a48:	7ab9      	ldrb	r1, [r7, #10]
    3a4a:	1c30      	adds	r0, r6, #0
    3a4c:	4b2e      	ldr	r3, [pc, #184]	; (3b08 <_i2c_master_write_packet+0xe0>)
    3a4e:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3a50:	686a      	ldr	r2, [r5, #4]
    3a52:	4b2e      	ldr	r3, [pc, #184]	; (3b0c <_i2c_master_write_packet+0xe4>)
    3a54:	4013      	ands	r3, r2
    3a56:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3a58:	7a3b      	ldrb	r3, [r7, #8]
    3a5a:	2b00      	cmp	r3, #0
    3a5c:	d009      	beq.n	3a72 <_i2c_master_write_packet+0x4a>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a5e:	7a7b      	ldrb	r3, [r7, #9]
    3a60:	039a      	lsls	r2, r3, #14
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a62:	883b      	ldrh	r3, [r7, #0]
    3a64:	005b      	lsls	r3, r3, #1
    3a66:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3a68:	2280      	movs	r2, #128	; 0x80
    3a6a:	0212      	lsls	r2, r2, #8
    3a6c:	4313      	orrs	r3, r2
	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a6e:	626b      	str	r3, [r5, #36]	; 0x24
    3a70:	e005      	b.n	3a7e <_i2c_master_write_packet+0x56>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3a72:	7a7b      	ldrb	r3, [r7, #9]
    3a74:	039a      	lsls	r2, r3, #14
	if (packet->ten_bit_address) {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    3a76:	883b      	ldrh	r3, [r7, #0]
    3a78:	005b      	lsls	r3, r3, #1
    3a7a:	4313      	orrs	r3, r2
    3a7c:	626b      	str	r3, [r5, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3a7e:	1c30      	adds	r0, r6, #0
    3a80:	4b23      	ldr	r3, [pc, #140]	; (3b10 <_i2c_master_write_packet+0xe8>)
    3a82:	4798      	blx	r3
    3a84:	1e03      	subs	r3, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3a86:	d136      	bne.n	3af6 <_i2c_master_write_packet+0xce>
		tmp_status = _i2c_master_address_response(module);
    3a88:	1c30      	adds	r0, r6, #0
    3a8a:	4b22      	ldr	r3, [pc, #136]	; (3b14 <_i2c_master_write_packet+0xec>)
    3a8c:	4798      	blx	r3
    3a8e:	1e03      	subs	r3, r0, #0
    3a90:	9001      	str	r0, [sp, #4]
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    3a92:	d130      	bne.n	3af6 <_i2c_master_write_packet+0xce>
    3a94:	46a0      	mov	r8, r4
    3a96:	2400      	movs	r4, #0
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3a98:	3320      	adds	r3, #32
    3a9a:	4699      	mov	r9, r3
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3a9c:	4b19      	ldr	r3, [pc, #100]	; (3b04 <_i2c_master_write_packet+0xdc>)
    3a9e:	469b      	mov	fp, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3aa0:	4b1b      	ldr	r3, [pc, #108]	; (3b10 <_i2c_master_write_packet+0xe8>)
    3aa2:	469a      	mov	sl, r3
    3aa4:	e011      	b.n	3aca <_i2c_master_write_packet+0xa2>
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3aa6:	8b6b      	ldrh	r3, [r5, #26]
    3aa8:	464a      	mov	r2, r9
    3aaa:	4213      	tst	r3, r2
    3aac:	d022      	beq.n	3af4 <_i2c_master_write_packet+0xcc>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    3aae:	1c30      	adds	r0, r6, #0
    3ab0:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    3ab2:	687b      	ldr	r3, [r7, #4]
    3ab4:	5d1a      	ldrb	r2, [r3, r4]
    3ab6:	2328      	movs	r3, #40	; 0x28
    3ab8:	54ea      	strb	r2, [r5, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3aba:	1c30      	adds	r0, r6, #0
    3abc:	47d0      	blx	sl

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    3abe:	2800      	cmp	r0, #0
    3ac0:	d106      	bne.n	3ad0 <_i2c_master_write_packet+0xa8>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3ac2:	8b6b      	ldrh	r3, [r5, #26]
    3ac4:	3401      	adds	r4, #1
    3ac6:	075b      	lsls	r3, r3, #29
    3ac8:	d404      	bmi.n	3ad4 <_i2c_master_write_packet+0xac>
	if (tmp_status == STATUS_OK) {
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    3aca:	4544      	cmp	r4, r8
    3acc:	d1eb      	bne.n	3aa6 <_i2c_master_write_packet+0x7e>
    3ace:	e003      	b.n	3ad8 <_i2c_master_write_packet+0xb0>
			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
			i2c_module->DATA.reg = packet->data[buffer_counter++];

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    3ad0:	9001      	str	r0, [sp, #4]
    3ad2:	e001      	b.n	3ad8 <_i2c_master_write_packet+0xb0>
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    3ad4:	231e      	movs	r3, #30
    3ad6:	9301      	str	r3, [sp, #4]
				break;
			}
		}

		if (module->send_stop) {
    3ad8:	7ab3      	ldrb	r3, [r6, #10]
    3ada:	9801      	ldr	r0, [sp, #4]
    3adc:	2b00      	cmp	r3, #0
    3ade:	d00a      	beq.n	3af6 <_i2c_master_write_packet+0xce>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    3ae0:	1c30      	adds	r0, r6, #0
    3ae2:	4b08      	ldr	r3, [pc, #32]	; (3b04 <_i2c_master_write_packet+0xdc>)
    3ae4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3ae6:	686b      	ldr	r3, [r5, #4]
    3ae8:	22c0      	movs	r2, #192	; 0xc0
    3aea:	0292      	lsls	r2, r2, #10
    3aec:	4313      	orrs	r3, r2
    3aee:	606b      	str	r3, [r5, #4]
    3af0:	9801      	ldr	r0, [sp, #4]
    3af2:	e000      	b.n	3af6 <_i2c_master_write_packet+0xce>

		/* Write data buffer. */
		while (tmp_data_length--) {
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
				return STATUS_ERR_PACKET_COLLISION;
    3af4:	2041      	movs	r0, #65	; 0x41
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    3af6:	b003      	add	sp, #12
    3af8:	bc3c      	pop	{r2, r3, r4, r5}
    3afa:	4690      	mov	r8, r2
    3afc:	4699      	mov	r9, r3
    3afe:	46a2      	mov	sl, r4
    3b00:	46ab      	mov	fp, r5
    3b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b04:	00003619 	.word	0x00003619
    3b08:	0000388d 	.word	0x0000388d
    3b0c:	fffbffff 	.word	0xfffbffff
    3b10:	0000385d 	.word	0x0000385d
    3b14:	0000382d 	.word	0x0000382d

00003b18 <i2c_master_read_packet_wait>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3b18:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3b1a:	8b83      	ldrh	r3, [r0, #28]
    3b1c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3b1e:	2205      	movs	r2, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job. */
	if (module->buffer_remaining > 0) {
    3b20:	2b00      	cmp	r3, #0
    3b22:	d105      	bne.n	3b30 <i2c_master_read_packet_wait+0x18>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = true;
    3b24:	3301      	adds	r3, #1
    3b26:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3b28:	72c3      	strb	r3, [r0, #11]
	
	return _i2c_master_read_packet(module, packet);
    3b2a:	4b02      	ldr	r3, [pc, #8]	; (3b34 <i2c_master_read_packet_wait+0x1c>)
    3b2c:	4798      	blx	r3
    3b2e:	1c02      	adds	r2, r0, #0
}
    3b30:	1c10      	adds	r0, r2, #0
    3b32:	bd08      	pop	{r3, pc}
    3b34:	000038ad 	.word	0x000038ad

00003b38 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3b38:	b508      	push	{r3, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3b3a:	8b83      	ldrh	r3, [r0, #28]
    3b3c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    3b3e:	2205      	movs	r2, #5
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    3b40:	2b00      	cmp	r3, #0
    3b42:	d105      	bne.n	3b50 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_BUSY;
	}
#endif

	module->send_stop = false;
    3b44:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    3b46:	3301      	adds	r3, #1
    3b48:	72c3      	strb	r3, [r0, #11]

	return _i2c_master_write_packet(module, packet);
    3b4a:	4b02      	ldr	r3, [pc, #8]	; (3b54 <i2c_master_write_packet_wait_no_stop+0x1c>)
    3b4c:	4798      	blx	r3
    3b4e:	1c02      	adds	r2, r0, #0
}
    3b50:	1c10      	adds	r0, r2, #0
    3b52:	bd08      	pop	{r3, pc}
    3b54:	00003a29 	.word	0x00003a29

00003b58 <_i2c_master_wait_for_sync>:
{
	/* Sanity check. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3b58:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3b5a:	2207      	movs	r2, #7
    3b5c:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3b5e:	421a      	tst	r2, r3
    3b60:	d1fc      	bne.n	3b5c <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    3b62:	4770      	bx	lr

00003b64 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	1c04      	adds	r4, r0, #0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3b68:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3b6a:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    3b6c:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3b6e:	8b85      	ldrh	r5, [r0, #28]
    3b70:	1b5d      	subs	r5, r3, r5
    3b72:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    3b74:	8b83      	ldrh	r3, [r0, #28]
    3b76:	3b01      	subs	r3, #1
    3b78:	b29b      	uxth	r3, r3
    3b7a:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    3b7c:	0113      	lsls	r3, r2, #4
    3b7e:	d50c      	bpl.n	3b9a <_i2c_master_read+0x36>
		if (module->send_nack && module->buffer_remaining == 1) {
    3b80:	7ac3      	ldrb	r3, [r0, #11]
    3b82:	2b00      	cmp	r3, #0
    3b84:	d015      	beq.n	3bb2 <_i2c_master_read+0x4e>
    3b86:	8b83      	ldrh	r3, [r0, #28]
    3b88:	b29b      	uxth	r3, r3
    3b8a:	2b01      	cmp	r3, #1
    3b8c:	d111      	bne.n	3bb2 <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3b8e:	6873      	ldr	r3, [r6, #4]
    3b90:	2280      	movs	r2, #128	; 0x80
    3b92:	02d2      	lsls	r2, r2, #11
    3b94:	4313      	orrs	r3, r2
    3b96:	6073      	str	r3, [r6, #4]
    3b98:	e00b      	b.n	3bb2 <_i2c_master_read+0x4e>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    3b9a:	7ac3      	ldrb	r3, [r0, #11]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d008      	beq.n	3bb2 <_i2c_master_read+0x4e>
    3ba0:	8b83      	ldrh	r3, [r0, #28]
    3ba2:	b29b      	uxth	r3, r3
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d104      	bne.n	3bb2 <_i2c_master_read+0x4e>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3ba8:	6873      	ldr	r3, [r6, #4]
    3baa:	2280      	movs	r2, #128	; 0x80
    3bac:	02d2      	lsls	r2, r2, #11
    3bae:	4313      	orrs	r3, r2
    3bb0:	6073      	str	r3, [r6, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    3bb2:	8ba3      	ldrh	r3, [r4, #28]
    3bb4:	b29b      	uxth	r3, r3
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d10a      	bne.n	3bd0 <_i2c_master_read+0x6c>
		if (module->send_stop) {
    3bba:	7aa3      	ldrb	r3, [r4, #10]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	d007      	beq.n	3bd0 <_i2c_master_read+0x6c>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3bc0:	1c20      	adds	r0, r4, #0
    3bc2:	4b08      	ldr	r3, [pc, #32]	; (3be4 <_i2c_master_read+0x80>)
    3bc4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3bc6:	6873      	ldr	r3, [r6, #4]
    3bc8:	22c0      	movs	r2, #192	; 0xc0
    3bca:	0292      	lsls	r2, r2, #10
    3bcc:	4313      	orrs	r3, r2
    3bce:	6073      	str	r3, [r6, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    3bd0:	1c20      	adds	r0, r4, #0
    3bd2:	4b04      	ldr	r3, [pc, #16]	; (3be4 <_i2c_master_read+0x80>)
    3bd4:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    3bd6:	6a23      	ldr	r3, [r4, #32]
    3bd8:	195d      	adds	r5, r3, r5
    3bda:	2328      	movs	r3, #40	; 0x28
    3bdc:	5cf3      	ldrb	r3, [r6, r3]
    3bde:	b2db      	uxtb	r3, r3
    3be0:	702b      	strb	r3, [r5, #0]
}
    3be2:	bd70      	pop	{r4, r5, r6, pc}
    3be4:	00003b59 	.word	0x00003b59

00003be8 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    3be8:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3bea:	6806      	ldr	r6, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    3bec:	8b73      	ldrh	r3, [r6, #26]
    3bee:	075b      	lsls	r3, r3, #29
    3bf0:	d503      	bpl.n	3bfa <_i2c_master_write+0x12>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    3bf2:	221e      	movs	r2, #30
    3bf4:	2325      	movs	r3, #37	; 0x25
    3bf6:	54c2      	strb	r2, [r0, r3]
		/* Do not write more data */
		return;
    3bf8:	e010      	b.n	3c1c <_i2c_master_write+0x34>
    3bfa:	1c05      	adds	r5, r0, #0
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    3bfc:	8b43      	ldrh	r3, [r0, #26]
	buffer_index -= module->buffer_remaining;
    3bfe:	8b84      	ldrh	r4, [r0, #28]
    3c00:	1b1c      	subs	r4, r3, r4
    3c02:	b2a4      	uxth	r4, r4

	module->buffer_remaining--;
    3c04:	8b83      	ldrh	r3, [r0, #28]
    3c06:	3b01      	subs	r3, #1
    3c08:	b29b      	uxth	r3, r3
    3c0a:	8383      	strh	r3, [r0, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    3c0c:	4b04      	ldr	r3, [pc, #16]	; (3c20 <_i2c_master_write+0x38>)
    3c0e:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    3c10:	6a2b      	ldr	r3, [r5, #32]
    3c12:	191c      	adds	r4, r3, r4
    3c14:	7823      	ldrb	r3, [r4, #0]
    3c16:	b2db      	uxtb	r3, r3
    3c18:	2228      	movs	r2, #40	; 0x28
    3c1a:	54b3      	strb	r3, [r6, r2]
}
    3c1c:	bd70      	pop	{r4, r5, r6, pc}
    3c1e:	46c0      	nop			; (mov r8, r8)
    3c20:	00003b59 	.word	0x00003b59

00003c24 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    3c24:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    3c26:	0080      	lsls	r0, r0, #2
    3c28:	4b6f      	ldr	r3, [pc, #444]	; (3de8 <_i2c_master_interrupt_handler+0x1c4>)
    3c2a:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3c2c:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3c2e:	682b      	ldr	r3, [r5, #0]
    3c30:	011b      	lsls	r3, r3, #4
    3c32:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    3c34:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    3c36:	7e26      	ldrb	r6, [r4, #24]
    3c38:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    3c3a:	8b63      	ldrh	r3, [r4, #26]
    3c3c:	b29b      	uxth	r3, r3
    3c3e:	2b00      	cmp	r3, #0
    3c40:	d135      	bne.n	3cae <_i2c_master_interrupt_handler+0x8a>
    3c42:	8ba3      	ldrh	r3, [r4, #28]
    3c44:	b29b      	uxth	r3, r3
    3c46:	2b00      	cmp	r3, #0
    3c48:	d031      	beq.n	3cae <_i2c_master_interrupt_handler+0x8a>
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    3c4a:	7e2b      	ldrb	r3, [r5, #24]
    3c4c:	07db      	lsls	r3, r3, #31
    3c4e:	d508      	bpl.n	3c62 <_i2c_master_interrupt_handler+0x3e>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3c50:	2301      	movs	r3, #1
    3c52:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3c54:	8b6b      	ldrh	r3, [r5, #26]
    3c56:	079b      	lsls	r3, r3, #30
    3c58:	d516      	bpl.n	3c88 <_i2c_master_interrupt_handler+0x64>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    3c5a:	2241      	movs	r2, #65	; 0x41
    3c5c:	2325      	movs	r3, #37	; 0x25
    3c5e:	54e2      	strb	r2, [r4, r3]
    3c60:	e012      	b.n	3c88 <_i2c_master_interrupt_handler+0x64>
		}
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3c62:	8b6b      	ldrh	r3, [r5, #26]
    3c64:	075b      	lsls	r3, r3, #29
    3c66:	d50f      	bpl.n	3c88 <_i2c_master_interrupt_handler+0x64>
		/* Return bad address value */
		module->status           = STATUS_ERR_BAD_ADDRESS;
    3c68:	2218      	movs	r2, #24
    3c6a:	2325      	movs	r3, #37	; 0x25
    3c6c:	54e2      	strb	r2, [r4, r3]
		module->buffer_remaining = 0;
    3c6e:	2300      	movs	r3, #0
    3c70:	83a3      	strh	r3, [r4, #28]

		if (module->send_stop) {
    3c72:	7aa3      	ldrb	r3, [r4, #10]
    3c74:	2b00      	cmp	r3, #0
    3c76:	d007      	beq.n	3c88 <_i2c_master_interrupt_handler+0x64>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3c78:	1c20      	adds	r0, r4, #0
    3c7a:	4b5c      	ldr	r3, [pc, #368]	; (3dec <_i2c_master_interrupt_handler+0x1c8>)
    3c7c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3c7e:	686b      	ldr	r3, [r5, #4]
    3c80:	22c0      	movs	r2, #192	; 0xc0
    3c82:	0292      	lsls	r2, r2, #10
    3c84:	4313      	orrs	r3, r2
    3c86:	606b      	str	r3, [r5, #4]
		}
	}

	module->buffer_length = module->buffer_remaining;
    3c88:	8ba3      	ldrh	r3, [r4, #28]
    3c8a:	b29b      	uxth	r3, r3
    3c8c:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    3c8e:	2325      	movs	r3, #37	; 0x25
    3c90:	5ce3      	ldrb	r3, [r4, r3]
    3c92:	2b05      	cmp	r3, #5
    3c94:	d156      	bne.n	3d44 <_i2c_master_interrupt_handler+0x120>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3c96:	331f      	adds	r3, #31
    3c98:	5ce3      	ldrb	r3, [r4, r3]
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d103      	bne.n	3ca6 <_i2c_master_interrupt_handler+0x82>
			_i2c_master_write(module);
    3c9e:	1c20      	adds	r0, r4, #0
    3ca0:	4b53      	ldr	r3, [pc, #332]	; (3df0 <_i2c_master_interrupt_handler+0x1cc>)
    3ca2:	4798      	blx	r3
    3ca4:	e04e      	b.n	3d44 <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
    3ca6:	1c20      	adds	r0, r4, #0
    3ca8:	4b52      	ldr	r3, [pc, #328]	; (3df4 <_i2c_master_interrupt_handler+0x1d0>)
    3caa:	4798      	blx	r3
    3cac:	e04a      	b.n	3d44 <_i2c_master_interrupt_handler+0x120>
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3cae:	8b63      	ldrh	r3, [r4, #26]
    3cb0:	b29b      	uxth	r3, r3
    3cb2:	2b00      	cmp	r3, #0
    3cb4:	d026      	beq.n	3d04 <_i2c_master_interrupt_handler+0xe0>
    3cb6:	8ba3      	ldrh	r3, [r4, #28]
    3cb8:	b29b      	uxth	r3, r3
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d122      	bne.n	3d04 <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
    3cbe:	3325      	adds	r3, #37	; 0x25
    3cc0:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3cc2:	2b05      	cmp	r3, #5
    3cc4:	d11e      	bne.n	3d04 <_i2c_master_interrupt_handler+0xe0>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3cc6:	331f      	adds	r3, #31
    3cc8:	5ce3      	ldrb	r3, [r4, r3]
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    3cca:	2b00      	cmp	r3, #0
    3ccc:	d11a      	bne.n	3d04 <_i2c_master_interrupt_handler+0xe0>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    3cce:	3303      	adds	r3, #3
    3cd0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    3cd2:	2300      	movs	r3, #0
    3cd4:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3cd6:	3325      	adds	r3, #37	; 0x25
    3cd8:	2200      	movs	r2, #0
    3cda:	54e2      	strb	r2, [r4, r3]

		if (module->send_stop) {
    3cdc:	7aa3      	ldrb	r3, [r4, #10]
    3cde:	2b00      	cmp	r3, #0
    3ce0:	d008      	beq.n	3cf4 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    3ce2:	1c20      	adds	r0, r4, #0
    3ce4:	4b41      	ldr	r3, [pc, #260]	; (3dec <_i2c_master_interrupt_handler+0x1c8>)
    3ce6:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3ce8:	686b      	ldr	r3, [r5, #4]
    3cea:	22c0      	movs	r2, #192	; 0xc0
    3cec:	0292      	lsls	r2, r2, #10
    3cee:	4313      	orrs	r3, r2
    3cf0:	606b      	str	r3, [r5, #4]
    3cf2:	e001      	b.n	3cf8 <_i2c_master_interrupt_handler+0xd4>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    3cf4:	2301      	movs	r3, #1
    3cf6:	762b      	strb	r3, [r5, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    3cf8:	07f3      	lsls	r3, r6, #31
    3cfa:	d523      	bpl.n	3d44 <_i2c_master_interrupt_handler+0x120>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3cfc:	68e3      	ldr	r3, [r4, #12]
    3cfe:	1c20      	adds	r0, r4, #0
    3d00:	4798      	blx	r3
    3d02:	e01f      	b.n	3d44 <_i2c_master_interrupt_handler+0x120>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    3d04:	8b63      	ldrh	r3, [r4, #26]
    3d06:	b29b      	uxth	r3, r3
    3d08:	2b00      	cmp	r3, #0
    3d0a:	d01b      	beq.n	3d44 <_i2c_master_interrupt_handler+0x120>
    3d0c:	8ba3      	ldrh	r3, [r4, #28]
    3d0e:	b29b      	uxth	r3, r3
    3d10:	2b00      	cmp	r3, #0
    3d12:	d017      	beq.n	3d44 <_i2c_master_interrupt_handler+0x120>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    3d14:	8b6b      	ldrh	r3, [r5, #26]
    3d16:	069b      	lsls	r3, r3, #26
    3d18:	d409      	bmi.n	3d2e <_i2c_master_interrupt_handler+0x10a>
    3d1a:	2a00      	cmp	r2, #0
    3d1c:	d003      	beq.n	3d26 <_i2c_master_interrupt_handler+0x102>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    3d1e:	8ba3      	ldrh	r3, [r4, #28]
    3d20:	b29b      	uxth	r3, r3
    3d22:	2b01      	cmp	r3, #1
    3d24:	d003      	beq.n	3d2e <_i2c_master_interrupt_handler+0x10a>
			module->status = STATUS_ERR_PACKET_COLLISION;
    3d26:	2241      	movs	r2, #65	; 0x41
    3d28:	2325      	movs	r3, #37	; 0x25
    3d2a:	54e2      	strb	r2, [r4, r3]
    3d2c:	e00a      	b.n	3d44 <_i2c_master_interrupt_handler+0x120>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    3d2e:	2324      	movs	r3, #36	; 0x24
    3d30:	5ce3      	ldrb	r3, [r4, r3]
    3d32:	2b00      	cmp	r3, #0
    3d34:	d103      	bne.n	3d3e <_i2c_master_interrupt_handler+0x11a>
			_i2c_master_write(module);
    3d36:	1c20      	adds	r0, r4, #0
    3d38:	4b2d      	ldr	r3, [pc, #180]	; (3df0 <_i2c_master_interrupt_handler+0x1cc>)
    3d3a:	4798      	blx	r3
    3d3c:	e002      	b.n	3d44 <_i2c_master_interrupt_handler+0x120>
		} else {
			_i2c_master_read(module);
    3d3e:	1c20      	adds	r0, r4, #0
    3d40:	4b2c      	ldr	r3, [pc, #176]	; (3df4 <_i2c_master_interrupt_handler+0x1d0>)
    3d42:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3d44:	8b63      	ldrh	r3, [r4, #26]
    3d46:	b29b      	uxth	r3, r3
    3d48:	2b00      	cmp	r3, #0
    3d4a:	d02a      	beq.n	3da2 <_i2c_master_interrupt_handler+0x17e>
    3d4c:	8ba3      	ldrh	r3, [r4, #28]
    3d4e:	b29b      	uxth	r3, r3
    3d50:	2b00      	cmp	r3, #0
    3d52:	d126      	bne.n	3da2 <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
    3d54:	3325      	adds	r3, #37	; 0x25
    3d56:	5ce3      	ldrb	r3, [r4, r3]
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    3d58:	2b05      	cmp	r3, #5
    3d5a:	d122      	bne.n	3da2 <_i2c_master_interrupt_handler+0x17e>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    3d5c:	331f      	adds	r3, #31
    3d5e:	5ce3      	ldrb	r3, [r4, r3]
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    3d60:	2b01      	cmp	r3, #1
    3d62:	d11e      	bne.n	3da2 <_i2c_master_interrupt_handler+0x17e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3d64:	7e2b      	ldrb	r3, [r5, #24]
    3d66:	079b      	lsls	r3, r3, #30
    3d68:	d501      	bpl.n	3d6e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3d6a:	2302      	movs	r3, #2
    3d6c:	762b      	strb	r3, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    3d6e:	2303      	movs	r3, #3
    3d70:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    3d72:	2300      	movs	r3, #0
    3d74:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    3d76:	3325      	adds	r3, #37	; 0x25
    3d78:	2200      	movs	r2, #0
    3d7a:	54e2      	strb	r2, [r4, r3]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    3d7c:	07b3      	lsls	r3, r6, #30
    3d7e:	d507      	bpl.n	3d90 <_i2c_master_interrupt_handler+0x16c>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    3d80:	2324      	movs	r3, #36	; 0x24
    3d82:	5ce3      	ldrb	r3, [r4, r3]
    3d84:	2b01      	cmp	r3, #1
    3d86:	d103      	bne.n	3d90 <_i2c_master_interrupt_handler+0x16c>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    3d88:	6923      	ldr	r3, [r4, #16]
    3d8a:	1c20      	adds	r0, r4, #0
    3d8c:	4798      	blx	r3
    3d8e:	e008      	b.n	3da2 <_i2c_master_interrupt_handler+0x17e>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    3d90:	07f3      	lsls	r3, r6, #31
    3d92:	d506      	bpl.n	3da2 <_i2c_master_interrupt_handler+0x17e>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    3d94:	2324      	movs	r3, #36	; 0x24
    3d96:	5ce3      	ldrb	r3, [r4, r3]
    3d98:	2b00      	cmp	r3, #0
    3d9a:	d102      	bne.n	3da2 <_i2c_master_interrupt_handler+0x17e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    3d9c:	68e3      	ldr	r3, [r4, #12]
    3d9e:	1c20      	adds	r0, r4, #0
    3da0:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    3da2:	2325      	movs	r3, #37	; 0x25
    3da4:	5ce3      	ldrb	r3, [r4, r3]
    3da6:	2b05      	cmp	r3, #5
    3da8:	d01c      	beq.n	3de4 <_i2c_master_interrupt_handler+0x1c0>
    3daa:	2325      	movs	r3, #37	; 0x25
    3dac:	5ce3      	ldrb	r3, [r4, r3]
    3dae:	2b00      	cmp	r3, #0
    3db0:	d018      	beq.n	3de4 <_i2c_master_interrupt_handler+0x1c0>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    3db2:	2303      	movs	r3, #3
    3db4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    3db6:	2300      	movs	r3, #0
    3db8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    3dba:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    3dbc:	3325      	adds	r3, #37	; 0x25
    3dbe:	5ce3      	ldrb	r3, [r4, r3]
    3dc0:	2b41      	cmp	r3, #65	; 0x41
    3dc2:	d00a      	beq.n	3dda <_i2c_master_interrupt_handler+0x1b6>
    3dc4:	7aa3      	ldrb	r3, [r4, #10]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d007      	beq.n	3dda <_i2c_master_interrupt_handler+0x1b6>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    3dca:	1c20      	adds	r0, r4, #0
    3dcc:	4b07      	ldr	r3, [pc, #28]	; (3dec <_i2c_master_interrupt_handler+0x1c8>)
    3dce:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    3dd0:	686b      	ldr	r3, [r5, #4]
    3dd2:	22e0      	movs	r2, #224	; 0xe0
    3dd4:	02d2      	lsls	r2, r2, #11
    3dd6:	4313      	orrs	r3, r2
    3dd8:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    3dda:	0773      	lsls	r3, r6, #29
    3ddc:	d502      	bpl.n	3de4 <_i2c_master_interrupt_handler+0x1c0>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    3dde:	6963      	ldr	r3, [r4, #20]
    3de0:	1c20      	adds	r0, r4, #0
    3de2:	4798      	blx	r3
		}
	}
}
    3de4:	bd70      	pop	{r4, r5, r6, pc}
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	200004b4 	.word	0x200004b4
    3dec:	00003b59 	.word	0x00003b59
    3df0:	00003be9 	.word	0x00003be9
    3df4:	00003b65 	.word	0x00003b65

00003df8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    3df8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    3dfa:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3dfc:	2440      	movs	r4, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
    3dfe:	4281      	cmp	r1, r0
    3e00:	d30c      	bcc.n	3e1c <_sercom_get_sync_baud_val+0x24>
    3e02:	2300      	movs	r3, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
    3e04:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    3e06:	3301      	adds	r3, #1
    3e08:	b29b      	uxth	r3, r3
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    3e0a:	4288      	cmp	r0, r1
    3e0c:	d9fa      	bls.n	3e04 <_sercom_get_sync_baud_val+0xc>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    3e0e:	3b01      	subs	r3, #1
    3e10:	b29b      	uxth	r3, r3

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3e12:	2440      	movs	r4, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3e14:	2bff      	cmp	r3, #255	; 0xff
    3e16:	d801      	bhi.n	3e1c <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
    3e18:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    3e1a:	2400      	movs	r4, #0
	}
}
    3e1c:	1c20      	adds	r0, r4, #0
    3e1e:	bd10      	pop	{r4, pc}

00003e20 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    3e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e22:	465f      	mov	r7, fp
    3e24:	4656      	mov	r6, sl
    3e26:	464d      	mov	r5, r9
    3e28:	4644      	mov	r4, r8
    3e2a:	b4f0      	push	{r4, r5, r6, r7}
    3e2c:	b089      	sub	sp, #36	; 0x24
    3e2e:	1c1c      	adds	r4, r3, #0
    3e30:	ab12      	add	r3, sp, #72	; 0x48
    3e32:	781b      	ldrb	r3, [r3, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3e34:	1c06      	adds	r6, r0, #0
    3e36:	435e      	muls	r6, r3
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3e38:	2540      	movs	r5, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    3e3a:	428e      	cmp	r6, r1
    3e3c:	d900      	bls.n	3e40 <_sercom_get_async_baud_val+0x20>
    3e3e:	e0c7      	b.n	3fd0 <_sercom_get_async_baud_val+0x1b0>
    3e40:	1c25      	adds	r5, r4, #0
    3e42:	9207      	str	r2, [sp, #28]
    3e44:	1c0c      	adds	r4, r1, #0
    3e46:	1c02      	adds	r2, r0, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3e48:	2d00      	cmp	r5, #0
    3e4a:	d151      	bne.n	3ef0 <_sercom_get_async_baud_val+0xd0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    3e4c:	1c18      	adds	r0, r3, #0
    3e4e:	2100      	movs	r1, #0
    3e50:	2300      	movs	r3, #0
    3e52:	4d63      	ldr	r5, [pc, #396]	; (3fe0 <_sercom_get_async_baud_val+0x1c0>)
    3e54:	47a8      	blx	r5
    3e56:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
    3e58:	1c26      	adds	r6, r4, #0
    3e5a:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3e5c:	2300      	movs	r3, #0
    3e5e:	2400      	movs	r4, #0
    3e60:	9302      	str	r3, [sp, #8]
    3e62:	9403      	str	r4, [sp, #12]
    3e64:	2200      	movs	r2, #0
    3e66:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
    3e68:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    3e6a:	2120      	movs	r1, #32
    3e6c:	468c      	mov	ip, r1
    3e6e:	391f      	subs	r1, #31
    3e70:	9600      	str	r6, [sp, #0]
    3e72:	9701      	str	r7, [sp, #4]
    3e74:	2420      	movs	r4, #32
    3e76:	4264      	negs	r4, r4
    3e78:	1904      	adds	r4, r0, r4
    3e7a:	d403      	bmi.n	3e84 <_sercom_get_async_baud_val+0x64>
    3e7c:	1c0d      	adds	r5, r1, #0
    3e7e:	40a5      	lsls	r5, r4
    3e80:	46a8      	mov	r8, r5
    3e82:	e004      	b.n	3e8e <_sercom_get_async_baud_val+0x6e>
    3e84:	4664      	mov	r4, ip
    3e86:	1a24      	subs	r4, r4, r0
    3e88:	1c0d      	adds	r5, r1, #0
    3e8a:	40e5      	lsrs	r5, r4
    3e8c:	46a8      	mov	r8, r5
    3e8e:	1c0c      	adds	r4, r1, #0
    3e90:	4084      	lsls	r4, r0
    3e92:	46a1      	mov	r9, r4

		r = r << 1;
    3e94:	1c14      	adds	r4, r2, #0
    3e96:	1c1d      	adds	r5, r3, #0
    3e98:	18a4      	adds	r4, r4, r2
    3e9a:	415d      	adcs	r5, r3
    3e9c:	1c22      	adds	r2, r4, #0
    3e9e:	1c2b      	adds	r3, r5, #0

		if (n & bit_shift) {
    3ea0:	465e      	mov	r6, fp
    3ea2:	4647      	mov	r7, r8
    3ea4:	423e      	tst	r6, r7
    3ea6:	d003      	beq.n	3eb0 <_sercom_get_async_baud_val+0x90>
			r |= 0x01;
    3ea8:	1c0e      	adds	r6, r1, #0
    3eaa:	4326      	orrs	r6, r4
    3eac:	1c32      	adds	r2, r6, #0
    3eae:	1c2b      	adds	r3, r5, #0
		}

		if (r >= d) {
    3eb0:	9c01      	ldr	r4, [sp, #4]
    3eb2:	429c      	cmp	r4, r3
    3eb4:	d810      	bhi.n	3ed8 <_sercom_get_async_baud_val+0xb8>
    3eb6:	d102      	bne.n	3ebe <_sercom_get_async_baud_val+0x9e>
    3eb8:	9c00      	ldr	r4, [sp, #0]
    3eba:	4294      	cmp	r4, r2
    3ebc:	d80c      	bhi.n	3ed8 <_sercom_get_async_baud_val+0xb8>
			r = r - d;
    3ebe:	9c00      	ldr	r4, [sp, #0]
    3ec0:	9d01      	ldr	r5, [sp, #4]
    3ec2:	1b12      	subs	r2, r2, r4
    3ec4:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    3ec6:	464d      	mov	r5, r9
    3ec8:	9e02      	ldr	r6, [sp, #8]
    3eca:	9f03      	ldr	r7, [sp, #12]
    3ecc:	4335      	orrs	r5, r6
    3ece:	1c3c      	adds	r4, r7, #0
    3ed0:	4646      	mov	r6, r8
    3ed2:	4334      	orrs	r4, r6
    3ed4:	9502      	str	r5, [sp, #8]
    3ed6:	9403      	str	r4, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3ed8:	3801      	subs	r0, #1
    3eda:	d2cb      	bcs.n	3e74 <_sercom_get_async_baud_val+0x54>

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
    3edc:	2200      	movs	r2, #0
    3ede:	2301      	movs	r3, #1
    3ee0:	9802      	ldr	r0, [sp, #8]
    3ee2:	9903      	ldr	r1, [sp, #12]
    3ee4:	1a12      	subs	r2, r2, r0
    3ee6:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    3ee8:	0c11      	lsrs	r1, r2, #16
    3eea:	041b      	lsls	r3, r3, #16
    3eec:	4319      	orrs	r1, r3
    3eee:	e06c      	b.n	3fca <_sercom_get_async_baud_val+0x1aa>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
    3ef0:	2100      	movs	r1, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    3ef2:	2d01      	cmp	r5, #1
    3ef4:	d169      	bne.n	3fca <_sercom_get_async_baud_val+0x1aa>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    3ef6:	0f61      	lsrs	r1, r4, #29
    3ef8:	1c0f      	adds	r7, r1, #0
    3efa:	00e1      	lsls	r1, r4, #3
    3efc:	4688      	mov	r8, r1
			temp2 = ((uint64_t)baudrate * sample_num);
    3efe:	1c18      	adds	r0, r3, #0
    3f00:	2100      	movs	r1, #0
    3f02:	2300      	movs	r3, #0
    3f04:	4c36      	ldr	r4, [pc, #216]	; (3fe0 <_sercom_get_async_baud_val+0x1c0>)
    3f06:	47a0      	blx	r4
    3f08:	1c04      	adds	r4, r0, #0
    3f0a:	1c0d      	adds	r5, r1, #0
    3f0c:	2300      	movs	r3, #0
    3f0e:	469c      	mov	ip, r3
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
    3f10:	3320      	adds	r3, #32
    3f12:	469b      	mov	fp, r3
    3f14:	2601      	movs	r6, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
    3f16:	4663      	mov	r3, ip
    3f18:	9305      	str	r3, [sp, #20]
    3f1a:	46b9      	mov	r9, r7
    3f1c:	466b      	mov	r3, sp
    3f1e:	7d1b      	ldrb	r3, [r3, #20]
    3f20:	9306      	str	r3, [sp, #24]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    3f22:	2300      	movs	r3, #0
    3f24:	469c      	mov	ip, r3
    3f26:	2000      	movs	r0, #0
    3f28:	2100      	movs	r1, #0
	for (i = 63; i >= 0; i--) {
    3f2a:	223f      	movs	r2, #63	; 0x3f
    3f2c:	9400      	str	r4, [sp, #0]
    3f2e:	9501      	str	r5, [sp, #4]
		bit_shift = (uint64_t)1 << i;
    3f30:	2320      	movs	r3, #32
    3f32:	425b      	negs	r3, r3
    3f34:	18d3      	adds	r3, r2, r3
    3f36:	d403      	bmi.n	3f40 <_sercom_get_async_baud_val+0x120>
    3f38:	1c34      	adds	r4, r6, #0
    3f3a:	409c      	lsls	r4, r3
    3f3c:	1c23      	adds	r3, r4, #0
    3f3e:	e004      	b.n	3f4a <_sercom_get_async_baud_val+0x12a>
    3f40:	465b      	mov	r3, fp
    3f42:	1a9b      	subs	r3, r3, r2
    3f44:	1c34      	adds	r4, r6, #0
    3f46:	40dc      	lsrs	r4, r3
    3f48:	1c23      	adds	r3, r4, #0
    3f4a:	1c37      	adds	r7, r6, #0
    3f4c:	4097      	lsls	r7, r2

		r = r << 1;
    3f4e:	1c04      	adds	r4, r0, #0
    3f50:	1c0d      	adds	r5, r1, #0
    3f52:	1824      	adds	r4, r4, r0
    3f54:	414d      	adcs	r5, r1
    3f56:	1c20      	adds	r0, r4, #0
    3f58:	1c29      	adds	r1, r5, #0
    3f5a:	9002      	str	r0, [sp, #8]
    3f5c:	9103      	str	r1, [sp, #12]

		if (n & bit_shift) {
    3f5e:	4644      	mov	r4, r8
    3f60:	403c      	ands	r4, r7
    3f62:	46a2      	mov	sl, r4
    3f64:	464c      	mov	r4, r9
    3f66:	4023      	ands	r3, r4
    3f68:	4654      	mov	r4, sl
    3f6a:	4323      	orrs	r3, r4
    3f6c:	d005      	beq.n	3f7a <_sercom_get_async_baud_val+0x15a>
			r |= 0x01;
    3f6e:	9b02      	ldr	r3, [sp, #8]
    3f70:	9c03      	ldr	r4, [sp, #12]
    3f72:	1c1d      	adds	r5, r3, #0
    3f74:	4335      	orrs	r5, r6
    3f76:	1c28      	adds	r0, r5, #0
    3f78:	1c21      	adds	r1, r4, #0
		}

		if (r >= d) {
    3f7a:	9b01      	ldr	r3, [sp, #4]
    3f7c:	428b      	cmp	r3, r1
    3f7e:	d80a      	bhi.n	3f96 <_sercom_get_async_baud_val+0x176>
    3f80:	d102      	bne.n	3f88 <_sercom_get_async_baud_val+0x168>
    3f82:	9b00      	ldr	r3, [sp, #0]
    3f84:	4283      	cmp	r3, r0
    3f86:	d806      	bhi.n	3f96 <_sercom_get_async_baud_val+0x176>
			r = r - d;
    3f88:	9b00      	ldr	r3, [sp, #0]
    3f8a:	9c01      	ldr	r4, [sp, #4]
    3f8c:	1ac0      	subs	r0, r0, r3
    3f8e:	41a1      	sbcs	r1, r4
			q |= bit_shift;
    3f90:	4663      	mov	r3, ip
    3f92:	433b      	orrs	r3, r7
    3f94:	469c      	mov	ip, r3
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    3f96:	3a01      	subs	r2, #1
    3f98:	d2ca      	bcs.n	3f30 <_sercom_get_async_baud_val+0x110>
    3f9a:	9c00      	ldr	r4, [sp, #0]
    3f9c:	9d01      	ldr	r5, [sp, #4]
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
    3f9e:	4662      	mov	r2, ip
    3fa0:	9905      	ldr	r1, [sp, #20]
    3fa2:	1a53      	subs	r3, r2, r1
			baud_int = baud_int / BAUD_FP_MAX;
    3fa4:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
    3fa6:	4a0f      	ldr	r2, [pc, #60]	; (3fe4 <_sercom_get_async_baud_val+0x1c4>)
    3fa8:	4293      	cmp	r3, r2
    3faa:	d908      	bls.n	3fbe <_sercom_get_async_baud_val+0x19e>
    3fac:	9a06      	ldr	r2, [sp, #24]
    3fae:	3201      	adds	r2, #1
    3fb0:	b2d2      	uxtb	r2, r2
    3fb2:	9206      	str	r2, [sp, #24]
    3fb4:	1c0a      	adds	r2, r1, #0
    3fb6:	3201      	adds	r2, #1
    3fb8:	9205      	str	r2, [sp, #20]
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    3fba:	2a08      	cmp	r2, #8
    3fbc:	d1ae      	bne.n	3f1c <_sercom_get_async_baud_val+0xfc>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3fbe:	2540      	movs	r5, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    3fc0:	9a06      	ldr	r2, [sp, #24]
    3fc2:	2a08      	cmp	r2, #8
    3fc4:	d004      	beq.n	3fd0 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
    3fc6:	0351      	lsls	r1, r2, #13
    3fc8:	4319      	orrs	r1, r3
	}

	*baudval = baud_calculated;
    3fca:	9b07      	ldr	r3, [sp, #28]
    3fcc:	8019      	strh	r1, [r3, #0]
	return STATUS_OK;
    3fce:	2500      	movs	r5, #0
}
    3fd0:	1c28      	adds	r0, r5, #0
    3fd2:	b009      	add	sp, #36	; 0x24
    3fd4:	bc3c      	pop	{r2, r3, r4, r5}
    3fd6:	4690      	mov	r8, r2
    3fd8:	4699      	mov	r9, r3
    3fda:	46a2      	mov	sl, r4
    3fdc:	46ab      	mov	fp, r5
    3fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fe0:	00008349 	.word	0x00008349
    3fe4:	00001fff 	.word	0x00001fff

00003fe8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    3fe8:	b510      	push	{r4, lr}
    3fea:	b082      	sub	sp, #8
    3fec:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    3fee:	4b0e      	ldr	r3, [pc, #56]	; (4028 <sercom_set_gclk_generator+0x40>)
    3ff0:	781b      	ldrb	r3, [r3, #0]
    3ff2:	2b00      	cmp	r3, #0
    3ff4:	d001      	beq.n	3ffa <sercom_set_gclk_generator+0x12>
    3ff6:	2900      	cmp	r1, #0
    3ff8:	d00d      	beq.n	4016 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    3ffa:	a901      	add	r1, sp, #4
    3ffc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3ffe:	2013      	movs	r0, #19
    4000:	4b0a      	ldr	r3, [pc, #40]	; (402c <sercom_set_gclk_generator+0x44>)
    4002:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4004:	2013      	movs	r0, #19
    4006:	4b0a      	ldr	r3, [pc, #40]	; (4030 <sercom_set_gclk_generator+0x48>)
    4008:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    400a:	4b07      	ldr	r3, [pc, #28]	; (4028 <sercom_set_gclk_generator+0x40>)
    400c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    400e:	2201      	movs	r2, #1
    4010:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4012:	2000      	movs	r0, #0
    4014:	e006      	b.n	4024 <sercom_set_gclk_generator+0x3c>
	} else if (generator_source == _sercom_config.generator_source) {
    4016:	4b04      	ldr	r3, [pc, #16]	; (4028 <sercom_set_gclk_generator+0x40>)
    4018:	785b      	ldrb	r3, [r3, #1]
    401a:	4283      	cmp	r3, r0
    401c:	d001      	beq.n	4022 <sercom_set_gclk_generator+0x3a>
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    401e:	201d      	movs	r0, #29
    4020:	e000      	b.n	4024 <sercom_set_gclk_generator+0x3c>
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
    4022:	2000      	movs	r0, #0
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    4024:	b002      	add	sp, #8
    4026:	bd10      	pop	{r4, pc}
    4028:	200001a4 	.word	0x200001a4
    402c:	000052f1 	.word	0x000052f1
    4030:	00005265 	.word	0x00005265

00004034 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    4034:	4b44      	ldr	r3, [pc, #272]	; (4148 <_sercom_get_default_pad+0x114>)
    4036:	4298      	cmp	r0, r3
    4038:	d033      	beq.n	40a2 <_sercom_get_default_pad+0x6e>
    403a:	d806      	bhi.n	404a <_sercom_get_default_pad+0x16>
    403c:	4b43      	ldr	r3, [pc, #268]	; (414c <_sercom_get_default_pad+0x118>)
    403e:	4298      	cmp	r0, r3
    4040:	d00d      	beq.n	405e <_sercom_get_default_pad+0x2a>
    4042:	4b43      	ldr	r3, [pc, #268]	; (4150 <_sercom_get_default_pad+0x11c>)
    4044:	4298      	cmp	r0, r3
    4046:	d01b      	beq.n	4080 <_sercom_get_default_pad+0x4c>
    4048:	e06f      	b.n	412a <_sercom_get_default_pad+0xf6>
    404a:	4b42      	ldr	r3, [pc, #264]	; (4154 <_sercom_get_default_pad+0x120>)
    404c:	4298      	cmp	r0, r3
    404e:	d04a      	beq.n	40e6 <_sercom_get_default_pad+0xb2>
    4050:	4b41      	ldr	r3, [pc, #260]	; (4158 <_sercom_get_default_pad+0x124>)
    4052:	4298      	cmp	r0, r3
    4054:	d058      	beq.n	4108 <_sercom_get_default_pad+0xd4>
    4056:	4b41      	ldr	r3, [pc, #260]	; (415c <_sercom_get_default_pad+0x128>)
    4058:	4298      	cmp	r0, r3
    405a:	d166      	bne.n	412a <_sercom_get_default_pad+0xf6>
    405c:	e032      	b.n	40c4 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    405e:	2901      	cmp	r1, #1
    4060:	d006      	beq.n	4070 <_sercom_get_default_pad+0x3c>
    4062:	2900      	cmp	r1, #0
    4064:	d063      	beq.n	412e <_sercom_get_default_pad+0xfa>
    4066:	2902      	cmp	r1, #2
    4068:	d006      	beq.n	4078 <_sercom_get_default_pad+0x44>
    406a:	2903      	cmp	r1, #3
    406c:	d006      	beq.n	407c <_sercom_get_default_pad+0x48>
    406e:	e001      	b.n	4074 <_sercom_get_default_pad+0x40>
    4070:	483b      	ldr	r0, [pc, #236]	; (4160 <_sercom_get_default_pad+0x12c>)
    4072:	e067      	b.n	4144 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4074:	2000      	movs	r0, #0
    4076:	e065      	b.n	4144 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4078:	483a      	ldr	r0, [pc, #232]	; (4164 <_sercom_get_default_pad+0x130>)
    407a:	e063      	b.n	4144 <_sercom_get_default_pad+0x110>
    407c:	483a      	ldr	r0, [pc, #232]	; (4168 <_sercom_get_default_pad+0x134>)
    407e:	e061      	b.n	4144 <_sercom_get_default_pad+0x110>
    4080:	2901      	cmp	r1, #1
    4082:	d006      	beq.n	4092 <_sercom_get_default_pad+0x5e>
    4084:	2900      	cmp	r1, #0
    4086:	d054      	beq.n	4132 <_sercom_get_default_pad+0xfe>
    4088:	2902      	cmp	r1, #2
    408a:	d006      	beq.n	409a <_sercom_get_default_pad+0x66>
    408c:	2903      	cmp	r1, #3
    408e:	d006      	beq.n	409e <_sercom_get_default_pad+0x6a>
    4090:	e001      	b.n	4096 <_sercom_get_default_pad+0x62>
    4092:	4836      	ldr	r0, [pc, #216]	; (416c <_sercom_get_default_pad+0x138>)
    4094:	e056      	b.n	4144 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    4096:	2000      	movs	r0, #0
    4098:	e054      	b.n	4144 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    409a:	4835      	ldr	r0, [pc, #212]	; (4170 <_sercom_get_default_pad+0x13c>)
    409c:	e052      	b.n	4144 <_sercom_get_default_pad+0x110>
    409e:	4835      	ldr	r0, [pc, #212]	; (4174 <_sercom_get_default_pad+0x140>)
    40a0:	e050      	b.n	4144 <_sercom_get_default_pad+0x110>
    40a2:	2901      	cmp	r1, #1
    40a4:	d006      	beq.n	40b4 <_sercom_get_default_pad+0x80>
    40a6:	2900      	cmp	r1, #0
    40a8:	d045      	beq.n	4136 <_sercom_get_default_pad+0x102>
    40aa:	2902      	cmp	r1, #2
    40ac:	d006      	beq.n	40bc <_sercom_get_default_pad+0x88>
    40ae:	2903      	cmp	r1, #3
    40b0:	d006      	beq.n	40c0 <_sercom_get_default_pad+0x8c>
    40b2:	e001      	b.n	40b8 <_sercom_get_default_pad+0x84>
    40b4:	4830      	ldr	r0, [pc, #192]	; (4178 <_sercom_get_default_pad+0x144>)
    40b6:	e045      	b.n	4144 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    40b8:	2000      	movs	r0, #0
    40ba:	e043      	b.n	4144 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    40bc:	482f      	ldr	r0, [pc, #188]	; (417c <_sercom_get_default_pad+0x148>)
    40be:	e041      	b.n	4144 <_sercom_get_default_pad+0x110>
    40c0:	482f      	ldr	r0, [pc, #188]	; (4180 <_sercom_get_default_pad+0x14c>)
    40c2:	e03f      	b.n	4144 <_sercom_get_default_pad+0x110>
    40c4:	2901      	cmp	r1, #1
    40c6:	d006      	beq.n	40d6 <_sercom_get_default_pad+0xa2>
    40c8:	2900      	cmp	r1, #0
    40ca:	d036      	beq.n	413a <_sercom_get_default_pad+0x106>
    40cc:	2902      	cmp	r1, #2
    40ce:	d006      	beq.n	40de <_sercom_get_default_pad+0xaa>
    40d0:	2903      	cmp	r1, #3
    40d2:	d006      	beq.n	40e2 <_sercom_get_default_pad+0xae>
    40d4:	e001      	b.n	40da <_sercom_get_default_pad+0xa6>
    40d6:	482b      	ldr	r0, [pc, #172]	; (4184 <_sercom_get_default_pad+0x150>)
    40d8:	e034      	b.n	4144 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    40da:	2000      	movs	r0, #0
    40dc:	e032      	b.n	4144 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    40de:	482a      	ldr	r0, [pc, #168]	; (4188 <_sercom_get_default_pad+0x154>)
    40e0:	e030      	b.n	4144 <_sercom_get_default_pad+0x110>
    40e2:	482a      	ldr	r0, [pc, #168]	; (418c <_sercom_get_default_pad+0x158>)
    40e4:	e02e      	b.n	4144 <_sercom_get_default_pad+0x110>
    40e6:	2901      	cmp	r1, #1
    40e8:	d006      	beq.n	40f8 <_sercom_get_default_pad+0xc4>
    40ea:	2900      	cmp	r1, #0
    40ec:	d027      	beq.n	413e <_sercom_get_default_pad+0x10a>
    40ee:	2902      	cmp	r1, #2
    40f0:	d006      	beq.n	4100 <_sercom_get_default_pad+0xcc>
    40f2:	2903      	cmp	r1, #3
    40f4:	d006      	beq.n	4104 <_sercom_get_default_pad+0xd0>
    40f6:	e001      	b.n	40fc <_sercom_get_default_pad+0xc8>
    40f8:	4825      	ldr	r0, [pc, #148]	; (4190 <_sercom_get_default_pad+0x15c>)
    40fa:	e023      	b.n	4144 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    40fc:	2000      	movs	r0, #0
    40fe:	e021      	b.n	4144 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4100:	4824      	ldr	r0, [pc, #144]	; (4194 <_sercom_get_default_pad+0x160>)
    4102:	e01f      	b.n	4144 <_sercom_get_default_pad+0x110>
    4104:	4824      	ldr	r0, [pc, #144]	; (4198 <_sercom_get_default_pad+0x164>)
    4106:	e01d      	b.n	4144 <_sercom_get_default_pad+0x110>
    4108:	2901      	cmp	r1, #1
    410a:	d006      	beq.n	411a <_sercom_get_default_pad+0xe6>
    410c:	2900      	cmp	r1, #0
    410e:	d018      	beq.n	4142 <_sercom_get_default_pad+0x10e>
    4110:	2902      	cmp	r1, #2
    4112:	d006      	beq.n	4122 <_sercom_get_default_pad+0xee>
    4114:	2903      	cmp	r1, #3
    4116:	d006      	beq.n	4126 <_sercom_get_default_pad+0xf2>
    4118:	e001      	b.n	411e <_sercom_get_default_pad+0xea>
    411a:	4820      	ldr	r0, [pc, #128]	; (419c <_sercom_get_default_pad+0x168>)
    411c:	e012      	b.n	4144 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    411e:	2000      	movs	r0, #0
    4120:	e010      	b.n	4144 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4122:	481f      	ldr	r0, [pc, #124]	; (41a0 <_sercom_get_default_pad+0x16c>)
    4124:	e00e      	b.n	4144 <_sercom_get_default_pad+0x110>
    4126:	481f      	ldr	r0, [pc, #124]	; (41a4 <_sercom_get_default_pad+0x170>)
    4128:	e00c      	b.n	4144 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    412a:	2000      	movs	r0, #0
    412c:	e00a      	b.n	4144 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    412e:	481e      	ldr	r0, [pc, #120]	; (41a8 <_sercom_get_default_pad+0x174>)
    4130:	e008      	b.n	4144 <_sercom_get_default_pad+0x110>
    4132:	2003      	movs	r0, #3
    4134:	e006      	b.n	4144 <_sercom_get_default_pad+0x110>
    4136:	481d      	ldr	r0, [pc, #116]	; (41ac <_sercom_get_default_pad+0x178>)
    4138:	e004      	b.n	4144 <_sercom_get_default_pad+0x110>
    413a:	481d      	ldr	r0, [pc, #116]	; (41b0 <_sercom_get_default_pad+0x17c>)
    413c:	e002      	b.n	4144 <_sercom_get_default_pad+0x110>
    413e:	481d      	ldr	r0, [pc, #116]	; (41b4 <_sercom_get_default_pad+0x180>)
    4140:	e000      	b.n	4144 <_sercom_get_default_pad+0x110>
    4142:	481d      	ldr	r0, [pc, #116]	; (41b8 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    4144:	4770      	bx	lr
    4146:	46c0      	nop			; (mov r8, r8)
    4148:	42001000 	.word	0x42001000
    414c:	42000800 	.word	0x42000800
    4150:	42000c00 	.word	0x42000c00
    4154:	42001800 	.word	0x42001800
    4158:	42001c00 	.word	0x42001c00
    415c:	42001400 	.word	0x42001400
    4160:	00050003 	.word	0x00050003
    4164:	00060003 	.word	0x00060003
    4168:	00070003 	.word	0x00070003
    416c:	00010003 	.word	0x00010003
    4170:	001e0003 	.word	0x001e0003
    4174:	001f0003 	.word	0x001f0003
    4178:	00090003 	.word	0x00090003
    417c:	000a0003 	.word	0x000a0003
    4180:	000b0003 	.word	0x000b0003
    4184:	00110003 	.word	0x00110003
    4188:	00120003 	.word	0x00120003
    418c:	00130003 	.word	0x00130003
    4190:	000d0003 	.word	0x000d0003
    4194:	000e0003 	.word	0x000e0003
    4198:	000f0003 	.word	0x000f0003
    419c:	00170003 	.word	0x00170003
    41a0:	00180003 	.word	0x00180003
    41a4:	00190003 	.word	0x00190003
    41a8:	00040003 	.word	0x00040003
    41ac:	00080003 	.word	0x00080003
    41b0:	00100003 	.word	0x00100003
    41b4:	000c0003 	.word	0x000c0003
    41b8:	00160003 	.word	0x00160003

000041bc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    41bc:	b530      	push	{r4, r5, lr}
    41be:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    41c0:	4b0c      	ldr	r3, [pc, #48]	; (41f4 <_sercom_get_sercom_inst_index+0x38>)
    41c2:	466a      	mov	r2, sp
    41c4:	cb32      	ldmia	r3!, {r1, r4, r5}
    41c6:	c232      	stmia	r2!, {r1, r4, r5}
    41c8:	cb32      	ldmia	r3!, {r1, r4, r5}
    41ca:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    41cc:	9b00      	ldr	r3, [sp, #0]
    41ce:	4283      	cmp	r3, r0
    41d0:	d006      	beq.n	41e0 <_sercom_get_sercom_inst_index+0x24>
    41d2:	2301      	movs	r3, #1
    41d4:	009a      	lsls	r2, r3, #2
    41d6:	4669      	mov	r1, sp
    41d8:	5852      	ldr	r2, [r2, r1]
    41da:	4282      	cmp	r2, r0
    41dc:	d103      	bne.n	41e6 <_sercom_get_sercom_inst_index+0x2a>
    41de:	e000      	b.n	41e2 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41e0:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    41e2:	b2d8      	uxtb	r0, r3
    41e4:	e003      	b.n	41ee <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41e6:	3301      	adds	r3, #1
    41e8:	2b06      	cmp	r3, #6
    41ea:	d1f3      	bne.n	41d4 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    41ec:	2000      	movs	r0, #0
}
    41ee:	b007      	add	sp, #28
    41f0:	bd30      	pop	{r4, r5, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	0000b1e4 	.word	0x0000b1e4

000041f8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    41f8:	4770      	bx	lr
    41fa:	46c0      	nop			; (mov r8, r8)

000041fc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    41fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    41fe:	4b0a      	ldr	r3, [pc, #40]	; (4228 <_sercom_set_handler+0x2c>)
    4200:	781b      	ldrb	r3, [r3, #0]
    4202:	2b00      	cmp	r3, #0
    4204:	d10c      	bne.n	4220 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4206:	4f09      	ldr	r7, [pc, #36]	; (422c <_sercom_set_handler+0x30>)
    4208:	4e09      	ldr	r6, [pc, #36]	; (4230 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    420a:	4d0a      	ldr	r5, [pc, #40]	; (4234 <_sercom_set_handler+0x38>)
    420c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    420e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4210:	195a      	adds	r2, r3, r5
    4212:	6014      	str	r4, [r2, #0]
    4214:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4216:	2b18      	cmp	r3, #24
    4218:	d1f9      	bne.n	420e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    421a:	2201      	movs	r2, #1
    421c:	4b02      	ldr	r3, [pc, #8]	; (4228 <_sercom_set_handler+0x2c>)
    421e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4220:	0080      	lsls	r0, r0, #2
    4222:	4b02      	ldr	r3, [pc, #8]	; (422c <_sercom_set_handler+0x30>)
    4224:	50c1      	str	r1, [r0, r3]
}
    4226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4228:	200001a6 	.word	0x200001a6
    422c:	200001a8 	.word	0x200001a8
    4230:	000041f9 	.word	0x000041f9
    4234:	200004b4 	.word	0x200004b4

00004238 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4238:	b510      	push	{r4, lr}
    423a:	b082      	sub	sp, #8
    423c:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    423e:	4668      	mov	r0, sp
    4240:	4905      	ldr	r1, [pc, #20]	; (4258 <_sercom_get_interrupt_vector+0x20>)
    4242:	2206      	movs	r2, #6
    4244:	4b05      	ldr	r3, [pc, #20]	; (425c <_sercom_get_interrupt_vector+0x24>)
    4246:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4248:	1c20      	adds	r0, r4, #0
    424a:	4b05      	ldr	r3, [pc, #20]	; (4260 <_sercom_get_interrupt_vector+0x28>)
    424c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    424e:	466b      	mov	r3, sp
    4250:	5618      	ldrsb	r0, [r3, r0]
}
    4252:	b002      	add	sp, #8
    4254:	bd10      	pop	{r4, pc}
    4256:	46c0      	nop			; (mov r8, r8)
    4258:	0000b1fc 	.word	0x0000b1fc
    425c:	00008a65 	.word	0x00008a65
    4260:	000041bd 	.word	0x000041bd

00004264 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4264:	b508      	push	{r3, lr}
    4266:	4b02      	ldr	r3, [pc, #8]	; (4270 <SERCOM0_Handler+0xc>)
    4268:	681b      	ldr	r3, [r3, #0]
    426a:	2000      	movs	r0, #0
    426c:	4798      	blx	r3
    426e:	bd08      	pop	{r3, pc}
    4270:	200001a8 	.word	0x200001a8

00004274 <SERCOM1_Handler>:
    4274:	b508      	push	{r3, lr}
    4276:	4b02      	ldr	r3, [pc, #8]	; (4280 <SERCOM1_Handler+0xc>)
    4278:	685b      	ldr	r3, [r3, #4]
    427a:	2001      	movs	r0, #1
    427c:	4798      	blx	r3
    427e:	bd08      	pop	{r3, pc}
    4280:	200001a8 	.word	0x200001a8

00004284 <SERCOM2_Handler>:
    4284:	b508      	push	{r3, lr}
    4286:	4b02      	ldr	r3, [pc, #8]	; (4290 <SERCOM2_Handler+0xc>)
    4288:	689b      	ldr	r3, [r3, #8]
    428a:	2002      	movs	r0, #2
    428c:	4798      	blx	r3
    428e:	bd08      	pop	{r3, pc}
    4290:	200001a8 	.word	0x200001a8

00004294 <SERCOM3_Handler>:
    4294:	b508      	push	{r3, lr}
    4296:	4b02      	ldr	r3, [pc, #8]	; (42a0 <SERCOM3_Handler+0xc>)
    4298:	68db      	ldr	r3, [r3, #12]
    429a:	2003      	movs	r0, #3
    429c:	4798      	blx	r3
    429e:	bd08      	pop	{r3, pc}
    42a0:	200001a8 	.word	0x200001a8

000042a4 <SERCOM4_Handler>:
    42a4:	b508      	push	{r3, lr}
    42a6:	4b02      	ldr	r3, [pc, #8]	; (42b0 <SERCOM4_Handler+0xc>)
    42a8:	691b      	ldr	r3, [r3, #16]
    42aa:	2004      	movs	r0, #4
    42ac:	4798      	blx	r3
    42ae:	bd08      	pop	{r3, pc}
    42b0:	200001a8 	.word	0x200001a8

000042b4 <SERCOM5_Handler>:
    42b4:	b508      	push	{r3, lr}
    42b6:	4b02      	ldr	r3, [pc, #8]	; (42c0 <SERCOM5_Handler+0xc>)
    42b8:	695b      	ldr	r3, [r3, #20]
    42ba:	2005      	movs	r0, #5
    42bc:	4798      	blx	r3
    42be:	bd08      	pop	{r3, pc}
    42c0:	200001a8 	.word	0x200001a8

000042c4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    42c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42c6:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    42c8:	6001      	str	r1, [r0, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    42ca:	680c      	ldr	r4, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    42cc:	231c      	movs	r3, #28
	module->hw = hw;

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    42ce:	07a4      	lsls	r4, r4, #30
    42d0:	d500      	bpl.n	42d4 <spi_init+0x10>
    42d2:	e0c4      	b.n	445e <spi_init+0x19a>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    42d4:	680c      	ldr	r4, [r1, #0]
		return STATUS_BUSY;
    42d6:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    42d8:	07e4      	lsls	r4, r4, #31
    42da:	d500      	bpl.n	42de <spi_init+0x1a>
    42dc:	e0bf      	b.n	445e <spi_init+0x19a>
    42de:	1c16      	adds	r6, r2, #0
    42e0:	1c0c      	adds	r4, r1, #0
    42e2:	1c05      	adds	r5, r0, #0
		return STATUS_BUSY;
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    42e4:	1c08      	adds	r0, r1, #0
    42e6:	4b5f      	ldr	r3, [pc, #380]	; (4464 <spi_init+0x1a0>)
    42e8:	4798      	blx	r3
    42ea:	495f      	ldr	r1, [pc, #380]	; (4468 <spi_init+0x1a4>)
    42ec:	6a0a      	ldr	r2, [r1, #32]
	}
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    42ee:	1c87      	adds	r7, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    42f0:	2301      	movs	r3, #1
    42f2:	40bb      	lsls	r3, r7
    42f4:	4313      	orrs	r3, r2
    42f6:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    42f8:	a909      	add	r1, sp, #36	; 0x24
    42fa:	2724      	movs	r7, #36	; 0x24
    42fc:	5df3      	ldrb	r3, [r6, r7]
    42fe:	700b      	strb	r3, [r1, #0]
#elif (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4300:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4302:	b2c3      	uxtb	r3, r0
    4304:	9301      	str	r3, [sp, #4]
    4306:	1c18      	adds	r0, r3, #0
    4308:	4b58      	ldr	r3, [pc, #352]	; (446c <spi_init+0x1a8>)
    430a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    430c:	9801      	ldr	r0, [sp, #4]
    430e:	4b58      	ldr	r3, [pc, #352]	; (4470 <spi_init+0x1ac>)
    4310:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4312:	5df0      	ldrb	r0, [r6, r7]
    4314:	2100      	movs	r1, #0
    4316:	4b57      	ldr	r3, [pc, #348]	; (4474 <spi_init+0x1b0>)
    4318:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    431a:	7833      	ldrb	r3, [r6, #0]
    431c:	2b01      	cmp	r3, #1
    431e:	d000      	beq.n	4322 <spi_init+0x5e>
    4320:	e097      	b.n	4452 <spi_init+0x18e>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4322:	6822      	ldr	r2, [r4, #0]
    4324:	330b      	adds	r3, #11
    4326:	4313      	orrs	r3, r2
    4328:	6023      	str	r3, [r4, #0]
    432a:	e092      	b.n	4452 <spi_init+0x18e>
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    432c:	c304      	stmia	r3!, {r2}
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    432e:	428b      	cmp	r3, r1
    4330:	d1fc      	bne.n	432c <spi_init+0x68>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    4332:	2300      	movs	r3, #0
    4334:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    4336:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    4338:	2400      	movs	r4, #0
    433a:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    433c:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    433e:	3336      	adds	r3, #54	; 0x36
    4340:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    4342:	3301      	adds	r3, #1
    4344:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    4346:	3301      	adds	r3, #1
    4348:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    434a:	3b35      	subs	r3, #53	; 0x35
    434c:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    434e:	712c      	strb	r4, [r5, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4350:	6828      	ldr	r0, [r5, #0]
    4352:	4b44      	ldr	r3, [pc, #272]	; (4464 <spi_init+0x1a0>)
    4354:	4798      	blx	r3
    4356:	1c07      	adds	r7, r0, #0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4358:	4947      	ldr	r1, [pc, #284]	; (4478 <spi_init+0x1b4>)
    435a:	4b48      	ldr	r3, [pc, #288]	; (447c <spi_init+0x1b8>)
    435c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    435e:	00bf      	lsls	r7, r7, #2
    4360:	4b47      	ldr	r3, [pc, #284]	; (4480 <spi_init+0x1bc>)
    4362:	50fd      	str	r5, [r7, r3]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4364:	682f      	ldr	r7, [r5, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4366:	ab04      	add	r3, sp, #16
    4368:	2280      	movs	r2, #128	; 0x80
    436a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    436c:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    436e:	3a7f      	subs	r2, #127	; 0x7f
    4370:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4372:	70dc      	strb	r4, [r3, #3]
	Sercom *const hw = module->hw;

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
    4374:	7833      	ldrb	r3, [r6, #0]
    4376:	2b00      	cmp	r3, #0
    4378:	d102      	bne.n	4380 <spi_init+0xbc>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    437a:	2200      	movs	r2, #0
    437c:	ab04      	add	r3, sp, #16
    437e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
    4380:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    4382:	9305      	str	r3, [sp, #20]
    4384:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    4386:	9306      	str	r3, [sp, #24]
    4388:	6b33      	ldr	r3, [r6, #48]	; 0x30
    438a:	9307      	str	r3, [sp, #28]
    438c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    438e:	9308      	str	r3, [sp, #32]
    4390:	2400      	movs	r4, #0
    4392:	b2e1      	uxtb	r1, r4
    4394:	00a3      	lsls	r3, r4, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4396:	aa05      	add	r2, sp, #20
    4398:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    439a:	2800      	cmp	r0, #0
    439c:	d102      	bne.n	43a4 <spi_init+0xe0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    439e:	1c38      	adds	r0, r7, #0
    43a0:	4b38      	ldr	r3, [pc, #224]	; (4484 <spi_init+0x1c0>)
    43a2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    43a4:	1c43      	adds	r3, r0, #1
    43a6:	d006      	beq.n	43b6 <spi_init+0xf2>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    43a8:	ab02      	add	r3, sp, #8
    43aa:	7218      	strb	r0, [r3, #8]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    43ac:	0c00      	lsrs	r0, r0, #16
    43ae:	b2c0      	uxtb	r0, r0
    43b0:	a904      	add	r1, sp, #16
    43b2:	4b35      	ldr	r3, [pc, #212]	; (4488 <spi_init+0x1c4>)
    43b4:	4798      	blx	r3
    43b6:	3401      	adds	r4, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    43b8:	2c04      	cmp	r4, #4
    43ba:	d1ea      	bne.n	4392 <spi_init+0xce>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    43bc:	7833      	ldrb	r3, [r6, #0]
    43be:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    43c0:	7c33      	ldrb	r3, [r6, #16]
    43c2:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    43c4:	7cb3      	ldrb	r3, [r6, #18]
    43c6:	71eb      	strb	r3, [r5, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    43c8:	7d33      	ldrb	r3, [r6, #20]
    43ca:	722b      	strb	r3, [r5, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    43cc:	2200      	movs	r2, #0
    43ce:	ab02      	add	r3, sp, #8
    43d0:	80da      	strh	r2, [r3, #6]
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    43d2:	7833      	ldrb	r3, [r6, #0]
    43d4:	2b01      	cmp	r3, #1
    43d6:	d113      	bne.n	4400 <spi_init+0x13c>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    43d8:	6828      	ldr	r0, [r5, #0]
    43da:	4b22      	ldr	r3, [pc, #136]	; (4464 <spi_init+0x1a0>)
    43dc:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    43de:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    43e0:	b2c0      	uxtb	r0, r0
    43e2:	4b2a      	ldr	r3, [pc, #168]	; (448c <spi_init+0x1c8>)
    43e4:	4798      	blx	r3
    43e6:	1c01      	adds	r1, r0, #0

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    43e8:	69b0      	ldr	r0, [r6, #24]
    43ea:	ab02      	add	r3, sp, #8
    43ec:	1d9a      	adds	r2, r3, #6
    43ee:	4b28      	ldr	r3, [pc, #160]	; (4490 <spi_init+0x1cc>)
    43f0:	4798      	blx	r3
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    43f2:	2317      	movs	r3, #23
		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    43f4:	2800      	cmp	r0, #0
    43f6:	d132      	bne.n	445e <spi_init+0x19a>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    43f8:	ab02      	add	r3, sp, #8
    43fa:	3306      	adds	r3, #6
    43fc:	781b      	ldrb	r3, [r3, #0]
    43fe:	733b      	strb	r3, [r7, #12]
# endif
	/* Set data order */
	ctrla |= config->data_order;

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4400:	68b3      	ldr	r3, [r6, #8]
    4402:	6872      	ldr	r2, [r6, #4]
    4404:	4313      	orrs	r3, r2

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4406:	68f2      	ldr	r2, [r6, #12]
    4408:	4313      	orrs	r3, r2

	/* Set SPI character size */
	ctrlb |= config->character_size;
    440a:	7c32      	ldrb	r2, [r6, #16]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    440c:	7c71      	ldrb	r1, [r6, #17]
    440e:	2900      	cmp	r1, #0
    4410:	d103      	bne.n	441a <spi_init+0x156>
    4412:	4920      	ldr	r1, [pc, #128]	; (4494 <spi_init+0x1d0>)
    4414:	7889      	ldrb	r1, [r1, #2]
    4416:	0789      	lsls	r1, r1, #30
    4418:	d501      	bpl.n	441e <spi_init+0x15a>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    441a:	2180      	movs	r1, #128	; 0x80
    441c:	430b      	orrs	r3, r1
	}

	if (config->receiver_enable) {
    441e:	7cb1      	ldrb	r1, [r6, #18]
    4420:	2900      	cmp	r1, #0
    4422:	d002      	beq.n	442a <spi_init+0x166>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4424:	2180      	movs	r1, #128	; 0x80
    4426:	0289      	lsls	r1, r1, #10
    4428:	430a      	orrs	r2, r1
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    442a:	7cf1      	ldrb	r1, [r6, #19]
    442c:	2900      	cmp	r1, #0
    442e:	d002      	beq.n	4436 <spi_init+0x172>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4430:	2180      	movs	r1, #128	; 0x80
    4432:	0089      	lsls	r1, r1, #2
    4434:	430a      	orrs	r2, r1
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    4436:	7d31      	ldrb	r1, [r6, #20]
    4438:	2900      	cmp	r1, #0
    443a:	d002      	beq.n	4442 <spi_init+0x17e>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    443c:	2180      	movs	r1, #128	; 0x80
    443e:	0189      	lsls	r1, r1, #6
    4440:	430a      	orrs	r2, r1
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    4442:	6839      	ldr	r1, [r7, #0]
    4444:	430b      	orrs	r3, r1
    4446:	603b      	str	r3, [r7, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	431a      	orrs	r2, r3
    444c:	607a      	str	r2, [r7, #4]

	return STATUS_OK;
    444e:	2300      	movs	r3, #0
    4450:	e005      	b.n	445e <spi_init+0x19a>
    4452:	1c2b      	adds	r3, r5, #0
    4454:	330c      	adds	r3, #12
    4456:	1c29      	adds	r1, r5, #0
    4458:	3128      	adds	r1, #40	; 0x28
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    445a:	2200      	movs	r2, #0
    445c:	e766      	b.n	432c <spi_init+0x68>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    445e:	1c18      	adds	r0, r3, #0
    4460:	b00b      	add	sp, #44	; 0x2c
    4462:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4464:	000041bd 	.word	0x000041bd
    4468:	40000400 	.word	0x40000400
    446c:	000052f1 	.word	0x000052f1
    4470:	00005265 	.word	0x00005265
    4474:	00003fe9 	.word	0x00003fe9
    4478:	0000458d 	.word	0x0000458d
    447c:	000041fd 	.word	0x000041fd
    4480:	200004b4 	.word	0x200004b4
    4484:	00004035 	.word	0x00004035
    4488:	000053e9 	.word	0x000053e9
    448c:	0000530d 	.word	0x0000530d
    4490:	00003df9 	.word	0x00003df9
    4494:	41002000 	.word	0x41002000

00004498 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4498:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    449a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    449c:	2315      	movs	r3, #21
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    449e:	2c01      	cmp	r4, #1
    44a0:	d170      	bne.n	4584 <spi_select_slave+0xec>
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    44a2:	7a04      	ldrb	r4, [r0, #8]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    44a4:	2300      	movs	r3, #0
	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
		return STATUS_ERR_UNSUPPORTED_DEV;
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    44a6:	2c00      	cmp	r4, #0
    44a8:	d16c      	bne.n	4584 <spi_select_slave+0xec>
#  endif
	{
		if (select) {
    44aa:	2a00      	cmp	r2, #0
    44ac:	d05a      	beq.n	4564 <spi_select_slave+0xcc>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    44ae:	784b      	ldrb	r3, [r1, #1]
    44b0:	2b00      	cmp	r3, #0
    44b2:	d046      	beq.n	4542 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    44b4:	6803      	ldr	r3, [r0, #0]
    44b6:	7e1b      	ldrb	r3, [r3, #24]
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    44b8:	07db      	lsls	r3, r3, #31
    44ba:	d410      	bmi.n	44de <spi_select_slave+0x46>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    44bc:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44be:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    44c0:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44c2:	2900      	cmp	r1, #0
    44c4:	d104      	bne.n	44d0 <spi_select_slave+0x38>
		return &(ports[port_index]->Group[group_index]);
    44c6:	095a      	lsrs	r2, r3, #5
    44c8:	01d2      	lsls	r2, r2, #7
    44ca:	492f      	ldr	r1, [pc, #188]	; (4588 <spi_select_slave+0xf0>)
    44cc:	468c      	mov	ip, r1
    44ce:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44d0:	211f      	movs	r1, #31
    44d2:	400b      	ands	r3, r1
    44d4:	391e      	subs	r1, #30
    44d6:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    44d8:	6191      	str	r1, [r2, #24]
					return STATUS_BUSY;
    44da:	2305      	movs	r3, #5
    44dc:	e052      	b.n	4584 <spi_select_slave+0xec>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    44de:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44e0:	09dc      	lsrs	r4, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    44e2:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    44e4:	2c00      	cmp	r4, #0
    44e6:	d104      	bne.n	44f2 <spi_select_slave+0x5a>
		return &(ports[port_index]->Group[group_index]);
    44e8:	095a      	lsrs	r2, r3, #5
    44ea:	01d2      	lsls	r2, r2, #7
    44ec:	4c26      	ldr	r4, [pc, #152]	; (4588 <spi_select_slave+0xf0>)
    44ee:	46a4      	mov	ip, r4
    44f0:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    44f2:	241f      	movs	r4, #31
    44f4:	4023      	ands	r3, r4
    44f6:	3c1e      	subs	r4, #30
    44f8:	409c      	lsls	r4, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    44fa:	6154      	str	r4, [r2, #20]

				/* Write address to slave */
				spi_write(module, slave->address);
    44fc:	788a      	ldrb	r2, [r1, #2]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    44fe:	6803      	ldr	r3, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4500:	7e19      	ldrb	r1, [r3, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    4502:	07c9      	lsls	r1, r1, #31
    4504:	d500      	bpl.n	4508 <spi_select_slave+0x70>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4506:	629a      	str	r2, [r3, #40]	; 0x28

				if (!(module->receiver_enabled)) {
    4508:	79c2      	ldrb	r2, [r0, #7]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    450a:	2300      	movs	r3, #0
				port_pin_set_output_level(slave->ss_pin, false);

				/* Write address to slave */
				spi_write(module, slave->address);

				if (!(module->receiver_enabled)) {
    450c:	2a00      	cmp	r2, #0
    450e:	d139      	bne.n	4584 <spi_select_slave+0xec>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    4510:	6802      	ldr	r2, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4512:	2104      	movs	r1, #4
    4514:	7e13      	ldrb	r3, [r2, #24]
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4516:	420b      	tst	r3, r1
    4518:	d0fc      	beq.n	4514 <spi_select_slave+0x7c>
    451a:	7e11      	ldrb	r1, [r2, #24]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    451c:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    451e:	0749      	lsls	r1, r1, #29
    4520:	d530      	bpl.n	4584 <spi_select_slave+0xec>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4522:	8b53      	ldrh	r3, [r2, #26]
    4524:	075b      	lsls	r3, r3, #29
    4526:	d503      	bpl.n	4530 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4528:	8b51      	ldrh	r1, [r2, #26]
    452a:	2304      	movs	r3, #4
    452c:	430b      	orrs	r3, r1
    452e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4530:	7983      	ldrb	r3, [r0, #6]
    4532:	2b01      	cmp	r3, #1
    4534:	d102      	bne.n	453c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4536:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4538:	2300      	movs	r3, #0
    453a:	e023      	b.n	4584 <spi_select_slave+0xec>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    453c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    453e:	2300      	movs	r3, #0
    4540:	e020      	b.n	4584 <spi_select_slave+0xec>
					uint16_t flush = 0;
					spi_read(module, &flush);
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4542:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4544:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4546:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4548:	2900      	cmp	r1, #0
    454a:	d104      	bne.n	4556 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    454c:	095a      	lsrs	r2, r3, #5
    454e:	01d2      	lsls	r2, r2, #7
    4550:	490d      	ldr	r1, [pc, #52]	; (4588 <spi_select_slave+0xf0>)
    4552:	468c      	mov	ip, r1
    4554:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4556:	211f      	movs	r1, #31
    4558:	400b      	ands	r3, r1
    455a:	391e      	subs	r1, #30
    455c:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    455e:	6151      	str	r1, [r2, #20]
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    4560:	2300      	movs	r3, #0
    4562:	e00f      	b.n	4584 <spi_select_slave+0xec>
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    4564:	780b      	ldrb	r3, [r1, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    4566:	09d9      	lsrs	r1, r3, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    4568:	2200      	movs	r2, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    456a:	2900      	cmp	r1, #0
    456c:	d104      	bne.n	4578 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    456e:	095a      	lsrs	r2, r3, #5
    4570:	01d2      	lsls	r2, r2, #7
    4572:	4905      	ldr	r1, [pc, #20]	; (4588 <spi_select_slave+0xf0>)
    4574:	468c      	mov	ip, r1
    4576:	4462      	add	r2, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4578:	211f      	movs	r1, #31
    457a:	400b      	ands	r3, r1
    457c:	391e      	subs	r1, #30
    457e:	4099      	lsls	r1, r3

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    4580:	6191      	str	r1, [r2, #24]
		}
	}
	return STATUS_OK;
    4582:	2300      	movs	r3, #0
}
    4584:	1c18      	adds	r0, r3, #0
    4586:	bd10      	pop	{r4, pc}
    4588:	41004400 	.word	0x41004400

0000458c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    458e:	0080      	lsls	r0, r0, #2
    4590:	4b68      	ldr	r3, [pc, #416]	; (4734 <_spi_interrupt_handler+0x1a8>)
    4592:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4594:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    4596:	2336      	movs	r3, #54	; 0x36

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    4598:	5ce3      	ldrb	r3, [r4, r3]
    459a:	2237      	movs	r2, #55	; 0x37
    459c:	5ca7      	ldrb	r7, [r4, r2]
    459e:	401f      	ands	r7, r3
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    45a0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    45a2:	7db5      	ldrb	r5, [r6, #22]
    45a4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    45a6:	07eb      	lsls	r3, r5, #31
    45a8:	d53d      	bpl.n	4626 <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    45aa:	7963      	ldrb	r3, [r4, #5]
    45ac:	2b01      	cmp	r3, #1
    45ae:	d13a      	bne.n	4626 <_spi_interrupt_handler+0x9a>
			(module->dir == SPI_DIRECTION_READ)) {
    45b0:	7a63      	ldrb	r3, [r4, #9]
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    45b2:	2b00      	cmp	r3, #0
    45b4:	d10f      	bne.n	45d6 <_spi_interrupt_handler+0x4a>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    45b6:	4b60      	ldr	r3, [pc, #384]	; (4738 <_spi_interrupt_handler+0x1ac>)
    45b8:	881b      	ldrh	r3, [r3, #0]
    45ba:	62b3      	str	r3, [r6, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    45bc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    45be:	3b01      	subs	r3, #1
    45c0:	b29b      	uxth	r3, r3
    45c2:	8663      	strh	r3, [r4, #50]	; 0x32
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    45c4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    45c6:	b29b      	uxth	r3, r3
    45c8:	2b00      	cmp	r3, #0
    45ca:	d101      	bne.n	45d0 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    45cc:	3301      	adds	r3, #1
    45ce:	7533      	strb	r3, [r6, #20]
			}
		}
#  endif

		if (0
    45d0:	7963      	ldrb	r3, [r4, #5]
    45d2:	2b01      	cmp	r3, #1
    45d4:	d127      	bne.n	4626 <_spi_interrupt_handler+0x9a>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    45d6:	7a63      	ldrb	r3, [r4, #9]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    45d8:	2b00      	cmp	r3, #0
    45da:	d024      	beq.n	4626 <_spi_interrupt_handler+0x9a>
 */
static void _spi_write(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    45dc:	6820      	ldr	r0, [r4, #0]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    45de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    45e0:	780b      	ldrb	r3, [r1, #0]
    45e2:	b2da      	uxtb	r2, r3
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    45e4:	1c4b      	adds	r3, r1, #1
    45e6:	62e3      	str	r3, [r4, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    45e8:	79a3      	ldrb	r3, [r4, #6]
    45ea:	2b01      	cmp	r3, #1
    45ec:	d001      	beq.n	45f2 <_spi_interrupt_handler+0x66>
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    45ee:	b293      	uxth	r3, r2
    45f0:	e004      	b.n	45fc <_spi_interrupt_handler+0x70>
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    45f2:	784b      	ldrb	r3, [r1, #1]
    45f4:	021b      	lsls	r3, r3, #8
    45f6:	4313      	orrs	r3, r2
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    45f8:	3102      	adds	r1, #2
    45fa:	62e1      	str	r1, [r4, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    45fc:	05db      	lsls	r3, r3, #23
    45fe:	0ddb      	lsrs	r3, r3, #23
    4600:	6283      	str	r3, [r0, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4602:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    4604:	3b01      	subs	r3, #1
    4606:	b29b      	uxth	r3, r3
    4608:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    460a:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    460c:	b29b      	uxth	r3, r3
    460e:	2b00      	cmp	r3, #0
    4610:	d109      	bne.n	4626 <_spi_interrupt_handler+0x9a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    4612:	3301      	adds	r3, #1
    4614:	7533      	strb	r3, [r6, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4616:	7a63      	ldrb	r3, [r4, #9]
    4618:	2b01      	cmp	r3, #1
    461a:	d104      	bne.n	4626 <_spi_interrupt_handler+0x9a>
    461c:	79e3      	ldrb	r3, [r4, #7]
    461e:	2b00      	cmp	r3, #0
    4620:	d101      	bne.n	4626 <_spi_interrupt_handler+0x9a>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4622:	3302      	adds	r3, #2
    4624:	75b3      	strb	r3, [r6, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4626:	076b      	lsls	r3, r5, #29
    4628:	d561      	bpl.n	46ee <_spi_interrupt_handler+0x162>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    462a:	8b73      	ldrh	r3, [r6, #26]
    462c:	075b      	lsls	r3, r3, #29
    462e:	d514      	bpl.n	465a <_spi_interrupt_handler+0xce>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4630:	7a63      	ldrb	r3, [r4, #9]
    4632:	2b01      	cmp	r3, #1
    4634:	d00b      	beq.n	464e <_spi_interrupt_handler+0xc2>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4636:	221e      	movs	r2, #30
    4638:	2338      	movs	r3, #56	; 0x38
    463a:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    463c:	3b35      	subs	r3, #53	; 0x35
    463e:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4640:	3302      	adds	r3, #2
    4642:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4644:	073b      	lsls	r3, r7, #28
    4646:	d502      	bpl.n	464e <_spi_interrupt_handler+0xc2>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4648:	1c20      	adds	r0, r4, #0
    464a:	69a3      	ldr	r3, [r4, #24]
    464c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    464e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
    4650:	8b72      	ldrh	r2, [r6, #26]
    4652:	2304      	movs	r3, #4
    4654:	4313      	orrs	r3, r2
    4656:	8373      	strh	r3, [r6, #26]
    4658:	e049      	b.n	46ee <_spi_interrupt_handler+0x162>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    465a:	7a63      	ldrb	r3, [r4, #9]
    465c:	2b01      	cmp	r3, #1
    465e:	d116      	bne.n	468e <_spi_interrupt_handler+0x102>
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4660:	6823      	ldr	r3, [r4, #0]
	uint16_t flush = 0;

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    4662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4664:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    4666:	3b01      	subs	r3, #1
    4668:	b29b      	uxth	r3, r3
    466a:	8663      	strh	r3, [r4, #50]	; 0x32
			spi_hw->STATUS.reg |= SERCOM_SPI_STATUS_BUFOVF;
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
				if (module->remaining_dummy_buffer_length == 0) {
    466c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    466e:	b29b      	uxth	r3, r3
    4670:	2b00      	cmp	r3, #0
    4672:	d13c      	bne.n	46ee <_spi_interrupt_handler+0x162>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4674:	3304      	adds	r3, #4
    4676:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    4678:	2200      	movs	r2, #0
    467a:	3334      	adds	r3, #52	; 0x34
    467c:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    467e:	3b35      	subs	r3, #53	; 0x35
    4680:	7263      	strb	r3, [r4, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4682:	07fb      	lsls	r3, r7, #31
    4684:	d533      	bpl.n	46ee <_spi_interrupt_handler+0x162>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4686:	1c20      	adds	r0, r4, #0
    4688:	68e3      	ldr	r3, [r4, #12]
    468a:	4798      	blx	r3
    468c:	e02f      	b.n	46ee <_spi_interrupt_handler+0x162>
 */
static void _spi_read(
		struct spi_module *const module)
{
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    468e:	6823      	ldr	r3, [r4, #0]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    4690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4692:	05db      	lsls	r3, r3, #23
    4694:	0ddb      	lsrs	r3, r3, #23

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    4696:	b2da      	uxtb	r2, r3
    4698:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    469a:	700a      	strb	r2, [r1, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    469c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    469e:	1c51      	adds	r1, r2, #1
    46a0:	62a1      	str	r1, [r4, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    46a2:	79a1      	ldrb	r1, [r4, #6]
    46a4:	2901      	cmp	r1, #1
    46a6:	d104      	bne.n	46b2 <_spi_interrupt_handler+0x126>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    46a8:	0a1b      	lsrs	r3, r3, #8
    46aa:	7053      	strb	r3, [r2, #1]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    46ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    46ae:	3301      	adds	r3, #1
    46b0:	62a3      	str	r3, [r4, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    46b2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    46b4:	3b01      	subs	r3, #1
    46b6:	b29b      	uxth	r3, r3
    46b8:	8623      	strh	r3, [r4, #48]	; 0x30
			} else {
				/* Read data register */
				_spi_read(module);

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    46ba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    46bc:	b29b      	uxth	r3, r3
    46be:	2b00      	cmp	r3, #0
    46c0:	d115      	bne.n	46ee <_spi_interrupt_handler+0x162>
					module->status = STATUS_OK;
    46c2:	2200      	movs	r2, #0
    46c4:	3338      	adds	r3, #56	; 0x38
    46c6:	54e2      	strb	r2, [r4, r3]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    46c8:	3b34      	subs	r3, #52	; 0x34
    46ca:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    46cc:	7a63      	ldrb	r3, [r4, #9]
    46ce:	2b02      	cmp	r3, #2
    46d0:	d105      	bne.n	46de <_spi_interrupt_handler+0x152>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    46d2:	077b      	lsls	r3, r7, #29
    46d4:	d50b      	bpl.n	46ee <_spi_interrupt_handler+0x162>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    46d6:	1c20      	adds	r0, r4, #0
    46d8:	6963      	ldr	r3, [r4, #20]
    46da:	4798      	blx	r3
    46dc:	e007      	b.n	46ee <_spi_interrupt_handler+0x162>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    46de:	7a63      	ldrb	r3, [r4, #9]
    46e0:	2b00      	cmp	r3, #0
    46e2:	d104      	bne.n	46ee <_spi_interrupt_handler+0x162>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    46e4:	07bb      	lsls	r3, r7, #30
    46e6:	d502      	bpl.n	46ee <_spi_interrupt_handler+0x162>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    46e8:	1c20      	adds	r0, r4, #0
    46ea:	6923      	ldr	r3, [r4, #16]
    46ec:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    46ee:	07ab      	lsls	r3, r5, #30
    46f0:	d514      	bpl.n	471c <_spi_interrupt_handler+0x190>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    46f2:	7963      	ldrb	r3, [r4, #5]
    46f4:	2b01      	cmp	r3, #1
    46f6:	d111      	bne.n	471c <_spi_interrupt_handler+0x190>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    46f8:	7a63      	ldrb	r3, [r4, #9]
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    46fa:	2b01      	cmp	r3, #1
    46fc:	d10e      	bne.n	471c <_spi_interrupt_handler+0x190>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    46fe:	79e3      	ldrb	r3, [r4, #7]
    4700:	2b00      	cmp	r3, #0
    4702:	d10b      	bne.n	471c <_spi_interrupt_handler+0x190>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4704:	3302      	adds	r3, #2
    4706:	7533      	strb	r3, [r6, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4708:	3301      	adds	r3, #1
    470a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    470c:	2200      	movs	r2, #0
    470e:	3335      	adds	r3, #53	; 0x35
    4710:	54e2      	strb	r2, [r4, r3]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4712:	07fb      	lsls	r3, r7, #31
    4714:	d502      	bpl.n	471c <_spi_interrupt_handler+0x190>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4716:	1c20      	adds	r0, r4, #0
    4718:	68e3      	ldr	r3, [r4, #12]
    471a:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    471c:	09ed      	lsrs	r5, r5, #7
    471e:	d007      	beq.n	4730 <_spi_interrupt_handler+0x1a4>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4720:	2380      	movs	r3, #128	; 0x80
    4722:	7533      	strb	r3, [r6, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4724:	7633      	strb	r3, [r6, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4726:	067b      	lsls	r3, r7, #25
    4728:	d502      	bpl.n	4730 <_spi_interrupt_handler+0x1a4>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    472a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    472c:	1c20      	adds	r0, r4, #0
    472e:	4798      	blx	r3
		}
	}
#  endif
}
    4730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4732:	46c0      	nop			; (mov r8, r8)
    4734:	200004b4 	.word	0x200004b4
    4738:	200004cc 	.word	0x200004cc

0000473c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    473c:	b5f0      	push	{r4, r5, r6, r7, lr}
    473e:	465f      	mov	r7, fp
    4740:	4656      	mov	r6, sl
    4742:	464d      	mov	r5, r9
    4744:	4644      	mov	r4, r8
    4746:	b4f0      	push	{r4, r5, r6, r7}
    4748:	b091      	sub	sp, #68	; 0x44
    474a:	1c05      	adds	r5, r0, #0
    474c:	1c0c      	adds	r4, r1, #0
    474e:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4750:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4752:	1c08      	adds	r0, r1, #0
    4754:	4bb9      	ldr	r3, [pc, #740]	; (4a3c <usart_init+0x300>)
    4756:	4798      	blx	r3
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4758:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    475a:	2305      	movs	r3, #5
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    475c:	07d2      	lsls	r2, r2, #31
    475e:	d500      	bpl.n	4762 <usart_init+0x26>
    4760:	e164      	b.n	4a2c <usart_init+0x2f0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4762:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4764:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4766:	0792      	lsls	r2, r2, #30
    4768:	d500      	bpl.n	476c <usart_init+0x30>
    476a:	e15f      	b.n	4a2c <usart_init+0x2f0>
    476c:	49b4      	ldr	r1, [pc, #720]	; (4a40 <usart_init+0x304>)
    476e:	6a0a      	ldr	r2, [r1, #32]
#else
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4770:	1c87      	adds	r7, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4772:	3b1b      	subs	r3, #27
    4774:	40bb      	lsls	r3, r7
    4776:	4313      	orrs	r3, r2
    4778:	620b      	str	r3, [r1, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    477a:	a90f      	add	r1, sp, #60	; 0x3c
    477c:	272d      	movs	r7, #45	; 0x2d
    477e:	5df3      	ldrb	r3, [r6, r7]
    4780:	700b      	strb	r3, [r1, #0]
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4782:	3014      	adds	r0, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4784:	b2c3      	uxtb	r3, r0
    4786:	9303      	str	r3, [sp, #12]
    4788:	1c18      	adds	r0, r3, #0
    478a:	4bae      	ldr	r3, [pc, #696]	; (4a44 <usart_init+0x308>)
    478c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    478e:	9803      	ldr	r0, [sp, #12]
    4790:	4bad      	ldr	r3, [pc, #692]	; (4a48 <usart_init+0x30c>)
    4792:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4794:	5df0      	ldrb	r0, [r6, r7]
    4796:	2100      	movs	r1, #0
    4798:	4bac      	ldr	r3, [pc, #688]	; (4a4c <usart_init+0x310>)
    479a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    479c:	7af3      	ldrb	r3, [r6, #11]
    479e:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    47a0:	2324      	movs	r3, #36	; 0x24
    47a2:	5cf3      	ldrb	r3, [r6, r3]
    47a4:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    47a6:	2325      	movs	r3, #37	; 0x25
    47a8:	5cf3      	ldrb	r3, [r6, r3]
    47aa:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    47ac:	7ef3      	ldrb	r3, [r6, #27]
    47ae:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    47b0:	7f33      	ldrb	r3, [r6, #28]
    47b2:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    47b4:	682b      	ldr	r3, [r5, #0]
    47b6:	469a      	mov	sl, r3

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    47b8:	1c18      	adds	r0, r3, #0
    47ba:	4ba0      	ldr	r3, [pc, #640]	; (4a3c <usart_init+0x300>)
    47bc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    47be:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    47c0:	2200      	movs	r2, #0
    47c2:	230e      	movs	r3, #14
    47c4:	a906      	add	r1, sp, #24
    47c6:	468c      	mov	ip, r1
    47c8:	4463      	add	r3, ip
    47ca:	801a      	strh	r2, [r3, #0]

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    47cc:	8a33      	ldrh	r3, [r6, #16]
    47ce:	4699      	mov	r9, r3
    47d0:	2380      	movs	r3, #128	; 0x80
    47d2:	01db      	lsls	r3, r3, #7
    47d4:	4599      	cmp	r9, r3
    47d6:	d019      	beq.n	480c <usart_init+0xd0>
    47d8:	d804      	bhi.n	47e4 <usart_init+0xa8>
    47da:	2380      	movs	r3, #128	; 0x80
    47dc:	019b      	lsls	r3, r3, #6
    47de:	4599      	cmp	r9, r3
    47e0:	d00a      	beq.n	47f8 <usart_init+0xbc>
    47e2:	e105      	b.n	49f0 <usart_init+0x2b4>
    47e4:	23c0      	movs	r3, #192	; 0xc0
    47e6:	01db      	lsls	r3, r3, #7
    47e8:	4599      	cmp	r9, r3
    47ea:	d00a      	beq.n	4802 <usart_init+0xc6>
    47ec:	2380      	movs	r3, #128	; 0x80
    47ee:	021b      	lsls	r3, r3, #8
    47f0:	4599      	cmp	r9, r3
    47f2:	d100      	bne.n	47f6 <usart_init+0xba>
    47f4:	e101      	b.n	49fa <usart_init+0x2be>
    47f6:	e0fb      	b.n	49f0 <usart_init+0x2b4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    47f8:	2310      	movs	r3, #16
    47fa:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    47fc:	3b0f      	subs	r3, #15
    47fe:	9307      	str	r3, [sp, #28]
    4800:	e0ff      	b.n	4a02 <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4802:	2308      	movs	r3, #8
    4804:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4806:	3b07      	subs	r3, #7
    4808:	9307      	str	r3, [sp, #28]
    480a:	e0fa      	b.n	4a02 <usart_init+0x2c6>
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    480c:	6833      	ldr	r3, [r6, #0]
    480e:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    4810:	68f3      	ldr	r3, [r6, #12]
    4812:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4814:	6973      	ldr	r3, [r6, #20]
    4816:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4818:	7e33      	ldrb	r3, [r6, #24]
    481a:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    481c:	2326      	movs	r3, #38	; 0x26
    481e:	5cf3      	ldrb	r3, [r6, r3]
    4820:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    4822:	6873      	ldr	r3, [r6, #4]
    4824:	2b00      	cmp	r3, #0
    4826:	d015      	beq.n	4854 <usart_init+0x118>
    4828:	2280      	movs	r2, #128	; 0x80
    482a:	0552      	lsls	r2, r2, #21
    482c:	4293      	cmp	r3, r2
    482e:	d136      	bne.n	489e <usart_init+0x162>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4830:	2327      	movs	r3, #39	; 0x27
    4832:	5cf3      	ldrb	r3, [r6, r3]
    4834:	2b00      	cmp	r3, #0
    4836:	d136      	bne.n	48a6 <usart_init+0x16a>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4838:	6a33      	ldr	r3, [r6, #32]
    483a:	1c1f      	adds	r7, r3, #0
    483c:	b2c0      	uxtb	r0, r0
    483e:	4b84      	ldr	r3, [pc, #528]	; (4a50 <usart_init+0x314>)
    4840:	4798      	blx	r3
    4842:	1c01      	adds	r1, r0, #0
    4844:	1c38      	adds	r0, r7, #0
    4846:	220e      	movs	r2, #14
    4848:	ab06      	add	r3, sp, #24
    484a:	469c      	mov	ip, r3
    484c:	4462      	add	r2, ip
    484e:	4b81      	ldr	r3, [pc, #516]	; (4a54 <usart_init+0x318>)
    4850:	4798      	blx	r3
    4852:	e025      	b.n	48a0 <usart_init+0x164>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4854:	2308      	movs	r3, #8
    4856:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4858:	2300      	movs	r3, #0
    485a:	9307      	str	r3, [sp, #28]
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    485c:	2327      	movs	r3, #39	; 0x27
    485e:	5cf3      	ldrb	r3, [r6, r3]
    4860:	2b00      	cmp	r3, #0
    4862:	d00b      	beq.n	487c <usart_init+0x140>
				status_code =
    4864:	9b06      	ldr	r3, [sp, #24]
    4866:	9300      	str	r3, [sp, #0]
    4868:	6a30      	ldr	r0, [r6, #32]
    486a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    486c:	220e      	movs	r2, #14
    486e:	ab06      	add	r3, sp, #24
    4870:	469c      	mov	ip, r3
    4872:	4462      	add	r2, ip
    4874:	9b07      	ldr	r3, [sp, #28]
    4876:	4f78      	ldr	r7, [pc, #480]	; (4a58 <usart_init+0x31c>)
    4878:	47b8      	blx	r7
    487a:	e011      	b.n	48a0 <usart_init+0x164>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    487c:	6a33      	ldr	r3, [r6, #32]
    487e:	1c1f      	adds	r7, r3, #0
    4880:	b2c0      	uxtb	r0, r0
    4882:	4b73      	ldr	r3, [pc, #460]	; (4a50 <usart_init+0x314>)
    4884:	4798      	blx	r3
    4886:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    4888:	9b06      	ldr	r3, [sp, #24]
    488a:	9300      	str	r3, [sp, #0]
    488c:	1c38      	adds	r0, r7, #0
    488e:	220e      	movs	r2, #14
    4890:	ab06      	add	r3, sp, #24
    4892:	469c      	mov	ip, r3
    4894:	4462      	add	r2, ip
    4896:	9b07      	ldr	r3, [sp, #28]
    4898:	4f6f      	ldr	r7, [pc, #444]	; (4a58 <usart_init+0x31c>)
    489a:	47b8      	blx	r7
    489c:	e000      	b.n	48a0 <usart_init+0x164>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    489e:	2000      	movs	r0, #0
    48a0:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    48a2:	d000      	beq.n	48a6 <usart_init+0x16a>
    48a4:	e0c2      	b.n	4a2c <usart_init+0x2f0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    48a6:	7e73      	ldrb	r3, [r6, #25]
    48a8:	2b00      	cmp	r3, #0
    48aa:	d002      	beq.n	48b2 <usart_init+0x176>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    48ac:	7eb3      	ldrb	r3, [r6, #26]
    48ae:	4652      	mov	r2, sl
    48b0:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    48b2:	682a      	ldr	r2, [r5, #0]
    48b4:	9f05      	ldr	r7, [sp, #20]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    48b6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    48b8:	2b00      	cmp	r3, #0
    48ba:	d1fc      	bne.n	48b6 <usart_init+0x17a>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    48bc:	330e      	adds	r3, #14
    48be:	aa06      	add	r2, sp, #24
    48c0:	4694      	mov	ip, r2
    48c2:	4463      	add	r3, ip
    48c4:	881b      	ldrh	r3, [r3, #0]
    48c6:	4652      	mov	r2, sl
    48c8:	8193      	strh	r3, [r2, #12]
    48ca:	9b03      	ldr	r3, [sp, #12]
    48cc:	465a      	mov	r2, fp
    48ce:	4313      	orrs	r3, r2
    48d0:	9a04      	ldr	r2, [sp, #16]
    48d2:	4313      	orrs	r3, r2
    48d4:	6872      	ldr	r2, [r6, #4]
    48d6:	4313      	orrs	r3, r2
    48d8:	464a      	mov	r2, r9
    48da:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    48dc:	4642      	mov	r2, r8
    48de:	0212      	lsls	r2, r2, #8
    48e0:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    48e2:	077f      	lsls	r7, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    48e4:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    48e6:	2327      	movs	r3, #39	; 0x27
    48e8:	5cf3      	ldrb	r3, [r6, r3]
    48ea:	2b00      	cmp	r3, #0
    48ec:	d101      	bne.n	48f2 <usart_init+0x1b6>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    48ee:	3304      	adds	r3, #4
    48f0:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    48f2:	7e71      	ldrb	r1, [r6, #25]
    48f4:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    48f6:	7f33      	ldrb	r3, [r6, #28]
    48f8:	025b      	lsls	r3, r3, #9
    48fa:	4319      	orrs	r1, r3
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    48fc:	7af3      	ldrb	r3, [r6, #11]
    48fe:	7ab2      	ldrb	r2, [r6, #10]
    4900:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4902:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4904:	7f72      	ldrb	r2, [r6, #29]
    4906:	0212      	lsls	r2, r2, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4908:	4311      	orrs	r1, r2
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    490a:	2324      	movs	r3, #36	; 0x24
    490c:	5cf2      	ldrb	r2, [r6, r3]
    490e:	0452      	lsls	r2, r2, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4910:	1c0b      	adds	r3, r1, #0
    4912:	4313      	orrs	r3, r2
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4914:	2225      	movs	r2, #37	; 0x25
    4916:	5cb1      	ldrb	r1, [r6, r2]
    4918:	0409      	lsls	r1, r1, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    491a:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    491c:	8933      	ldrh	r3, [r6, #8]
    491e:	2bff      	cmp	r3, #255	; 0xff
    4920:	d004      	beq.n	492c <usart_init+0x1f0>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4922:	2280      	movs	r2, #128	; 0x80
    4924:	0452      	lsls	r2, r2, #17
    4926:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4928:	4319      	orrs	r1, r3
    492a:	e005      	b.n	4938 <usart_init+0x1fc>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    492c:	7ef3      	ldrb	r3, [r6, #27]
    492e:	2b00      	cmp	r3, #0
    4930:	d002      	beq.n	4938 <usart_init+0x1fc>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4932:	2380      	movs	r3, #128	; 0x80
    4934:	04db      	lsls	r3, r3, #19
    4936:	431f      	orrs	r7, r3
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4938:	232c      	movs	r3, #44	; 0x2c
    493a:	5cf3      	ldrb	r3, [r6, r3]
    493c:	2b00      	cmp	r3, #0
    493e:	d103      	bne.n	4948 <usart_init+0x20c>
    4940:	4b46      	ldr	r3, [pc, #280]	; (4a5c <usart_init+0x320>)
    4942:	789b      	ldrb	r3, [r3, #2]
    4944:	079b      	lsls	r3, r3, #30
    4946:	d501      	bpl.n	494c <usart_init+0x210>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4948:	2380      	movs	r3, #128	; 0x80
    494a:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    494c:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    494e:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4950:	2b00      	cmp	r3, #0
    4952:	d1fc      	bne.n	494e <usart_init+0x212>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4954:	4653      	mov	r3, sl
    4956:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4958:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    495a:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    495c:	2b00      	cmp	r3, #0
    495e:	d1fc      	bne.n	495a <usart_init+0x21e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4960:	4653      	mov	r3, sl
    4962:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4964:	ab0e      	add	r3, sp, #56	; 0x38
    4966:	2280      	movs	r2, #128	; 0x80
    4968:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    496a:	2200      	movs	r2, #0
    496c:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    496e:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4970:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    4972:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4974:	930a      	str	r3, [sp, #40]	; 0x28
    4976:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4978:	930b      	str	r3, [sp, #44]	; 0x2c
    497a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    497c:	930c      	str	r3, [sp, #48]	; 0x30
    497e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4980:	9303      	str	r3, [sp, #12]
    4982:	930d      	str	r3, [sp, #52]	; 0x34
    4984:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4986:	ae0e      	add	r6, sp, #56	; 0x38
    4988:	b2f9      	uxtb	r1, r7
    498a:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    498c:	aa0a      	add	r2, sp, #40	; 0x28
    498e:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    4990:	2800      	cmp	r0, #0
    4992:	d102      	bne.n	499a <usart_init+0x25e>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4994:	1c20      	adds	r0, r4, #0
    4996:	4b32      	ldr	r3, [pc, #200]	; (4a60 <usart_init+0x324>)
    4998:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
    499a:	1c43      	adds	r3, r0, #1
    499c:	d005      	beq.n	49aa <usart_init+0x26e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    499e:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    49a0:	0c00      	lsrs	r0, r0, #16
    49a2:	b2c0      	uxtb	r0, r0
    49a4:	1c31      	adds	r1, r6, #0
    49a6:	4b2f      	ldr	r3, [pc, #188]	; (4a64 <usart_init+0x328>)
    49a8:	4798      	blx	r3
    49aa:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    49ac:	2f04      	cmp	r7, #4
    49ae:	d1eb      	bne.n	4988 <usart_init+0x24c>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    49b0:	2300      	movs	r3, #0
    49b2:	60eb      	str	r3, [r5, #12]
    49b4:	612b      	str	r3, [r5, #16]
    49b6:	616b      	str	r3, [r5, #20]
    49b8:	61ab      	str	r3, [r5, #24]
    49ba:	61eb      	str	r3, [r5, #28]
    49bc:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    49be:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    49c0:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    49c2:	2200      	movs	r2, #0
    49c4:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    49c6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    49c8:	3330      	adds	r3, #48	; 0x30
    49ca:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    49cc:	3301      	adds	r3, #1
    49ce:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    49d0:	3301      	adds	r3, #1
    49d2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    49d4:	3301      	adds	r3, #1
    49d6:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    49d8:	6828      	ldr	r0, [r5, #0]
    49da:	4b18      	ldr	r3, [pc, #96]	; (4a3c <usart_init+0x300>)
    49dc:	4798      	blx	r3
    49de:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    49e0:	4921      	ldr	r1, [pc, #132]	; (4a68 <usart_init+0x32c>)
    49e2:	4b22      	ldr	r3, [pc, #136]	; (4a6c <usart_init+0x330>)
    49e4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    49e6:	00a4      	lsls	r4, r4, #2
    49e8:	4b21      	ldr	r3, [pc, #132]	; (4a70 <usart_init+0x334>)
    49ea:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    49ec:	2300      	movs	r3, #0
    49ee:	e01d      	b.n	4a2c <usart_init+0x2f0>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    49f0:	2310      	movs	r3, #16
    49f2:	9306      	str	r3, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    49f4:	2300      	movs	r3, #0
    49f6:	9307      	str	r3, [sp, #28]
    49f8:	e003      	b.n	4a02 <usart_init+0x2c6>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    49fa:	2303      	movs	r3, #3
    49fc:	9306      	str	r3, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    49fe:	2300      	movs	r3, #0
    4a00:	9307      	str	r3, [sp, #28]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4a02:	6833      	ldr	r3, [r6, #0]
    4a04:	469b      	mov	fp, r3
		(uint32_t)config->mux_setting |
    4a06:	68f3      	ldr	r3, [r6, #12]
    4a08:	9303      	str	r3, [sp, #12]
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4a0a:	6973      	ldr	r3, [r6, #20]
    4a0c:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4a0e:	7e33      	ldrb	r3, [r6, #24]
    4a10:	4698      	mov	r8, r3
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4a12:	2326      	movs	r3, #38	; 0x26
    4a14:	5cf3      	ldrb	r3, [r6, r3]
    4a16:	9305      	str	r3, [sp, #20]

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    4a18:	6873      	ldr	r3, [r6, #4]
    4a1a:	2b00      	cmp	r3, #0
    4a1c:	d100      	bne.n	4a20 <usart_init+0x2e4>
    4a1e:	e71d      	b.n	485c <usart_init+0x120>
    4a20:	2280      	movs	r2, #128	; 0x80
    4a22:	0552      	lsls	r2, r2, #21
    4a24:	4293      	cmp	r3, r2
    4a26:	d100      	bne.n	4a2a <usart_init+0x2ee>
    4a28:	e702      	b.n	4830 <usart_init+0xf4>
    4a2a:	e73c      	b.n	48a6 <usart_init+0x16a>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4a2c:	1c18      	adds	r0, r3, #0
    4a2e:	b011      	add	sp, #68	; 0x44
    4a30:	bc3c      	pop	{r2, r3, r4, r5}
    4a32:	4690      	mov	r8, r2
    4a34:	4699      	mov	r9, r3
    4a36:	46a2      	mov	sl, r4
    4a38:	46ab      	mov	fp, r5
    4a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a3c:	000041bd 	.word	0x000041bd
    4a40:	40000400 	.word	0x40000400
    4a44:	000052f1 	.word	0x000052f1
    4a48:	00005265 	.word	0x00005265
    4a4c:	00003fe9 	.word	0x00003fe9
    4a50:	0000530d 	.word	0x0000530d
    4a54:	00003df9 	.word	0x00003df9
    4a58:	00003e21 	.word	0x00003e21
    4a5c:	41002000 	.word	0x41002000
    4a60:	00004035 	.word	0x00004035
    4a64:	000053e9 	.word	0x000053e9
    4a68:	00004b19 	.word	0x00004b19
    4a6c:	000041fd 	.word	0x000041fd
    4a70:	200004b4 	.word	0x200004b4

00004a74 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    4a74:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4a76:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4a78:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    4a7a:	221c      	movs	r2, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4a7c:	2c00      	cmp	r4, #0
    4a7e:	d00d      	beq.n	4a9c <usart_write_wait+0x28>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4a80:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
    4a82:	b280      	uxth	r0, r0
		return STATUS_BUSY;
    4a84:	3a17      	subs	r2, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    4a86:	2800      	cmp	r0, #0
    4a88:	d108      	bne.n	4a9c <usart_write_wait+0x28>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4a8a:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4a8c:	2a00      	cmp	r2, #0
    4a8e:	d1fc      	bne.n	4a8a <usart_write_wait+0x16>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    4a90:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4a92:	2102      	movs	r1, #2
    4a94:	7e1a      	ldrb	r2, [r3, #24]
    4a96:	420a      	tst	r2, r1
    4a98:	d0fc      	beq.n	4a94 <usart_write_wait+0x20>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    4a9a:	2200      	movs	r2, #0
}
    4a9c:	1c10      	adds	r0, r2, #0
    4a9e:	bd10      	pop	{r4, pc}

00004aa0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    4aa0:	b510      	push	{r4, lr}

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4aa2:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4aa4:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4aa6:	231c      	movs	r3, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4aa8:	2a00      	cmp	r2, #0
    4aaa:	d033      	beq.n	4b14 <usart_read_wait+0x74>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    4aac:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4aae:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4ab0:	3b17      	subs	r3, #23
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    4ab2:	2a00      	cmp	r2, #0
    4ab4:	d12e      	bne.n	4b14 <usart_read_wait+0x74>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4ab6:	7e22      	ldrb	r2, [r4, #24]
    4ab8:	0752      	lsls	r2, r2, #29
    4aba:	d52b      	bpl.n	4b14 <usart_read_wait+0x74>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4abc:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d1fc      	bne.n	4abc <usart_read_wait+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4ac2:	8b63      	ldrh	r3, [r4, #26]
    4ac4:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    4ac6:	069a      	lsls	r2, r3, #26
    4ac8:	d021      	beq.n	4b0e <usart_read_wait+0x6e>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4aca:	079a      	lsls	r2, r3, #30
    4acc:	d503      	bpl.n	4ad6 <usart_read_wait+0x36>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4ace:	2302      	movs	r3, #2
    4ad0:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    4ad2:	3318      	adds	r3, #24
    4ad4:	e01e      	b.n	4b14 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4ad6:	075a      	lsls	r2, r3, #29
    4ad8:	d503      	bpl.n	4ae2 <usart_read_wait+0x42>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4ada:	2304      	movs	r3, #4
    4adc:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    4ade:	331a      	adds	r3, #26
    4ae0:	e018      	b.n	4b14 <usart_read_wait+0x74>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4ae2:	07da      	lsls	r2, r3, #31
    4ae4:	d503      	bpl.n	4aee <usart_read_wait+0x4e>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4ae6:	2301      	movs	r3, #1
    4ae8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    4aea:	3312      	adds	r3, #18
    4aec:	e012      	b.n	4b14 <usart_read_wait+0x74>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4aee:	06da      	lsls	r2, r3, #27
    4af0:	d505      	bpl.n	4afe <usart_read_wait+0x5e>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    4af2:	8b62      	ldrh	r2, [r4, #26]
    4af4:	2310      	movs	r3, #16
    4af6:	4313      	orrs	r3, r2
    4af8:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    4afa:	2342      	movs	r3, #66	; 0x42
    4afc:	e00a      	b.n	4b14 <usart_read_wait+0x74>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4afe:	069b      	lsls	r3, r3, #26
    4b00:	d505      	bpl.n	4b0e <usart_read_wait+0x6e>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    4b02:	8b62      	ldrh	r2, [r4, #26]
    4b04:	2320      	movs	r3, #32
    4b06:	4313      	orrs	r3, r2
    4b08:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    4b0a:	2341      	movs	r3, #65	; 0x41
    4b0c:	e002      	b.n	4b14 <usart_read_wait+0x74>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    4b0e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4b10:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    4b12:	2300      	movs	r3, #0
}
    4b14:	1c18      	adds	r0, r3, #0
    4b16:	bd10      	pop	{r4, pc}

00004b18 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    4b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    4b1a:	0080      	lsls	r0, r0, #2
    4b1c:	4b65      	ldr	r3, [pc, #404]	; (4cb4 <_usart_interrupt_handler+0x19c>)
    4b1e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    4b20:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4b22:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    4b24:	2b00      	cmp	r3, #0
    4b26:	d1fc      	bne.n	4b22 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    4b28:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    4b2a:	7da6      	ldrb	r6, [r4, #22]
    4b2c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    4b2e:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    4b30:	5ceb      	ldrb	r3, [r5, r3]
    4b32:	2230      	movs	r2, #48	; 0x30
    4b34:	5caf      	ldrb	r7, [r5, r2]
    4b36:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    4b38:	07f3      	lsls	r3, r6, #31
    4b3a:	d522      	bpl.n	4b82 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    4b3c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4b3e:	b29b      	uxth	r3, r3
    4b40:	2b00      	cmp	r3, #0
    4b42:	d01c      	beq.n	4b7e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4b44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4b46:	7813      	ldrb	r3, [r2, #0]
    4b48:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    4b4a:	1c51      	adds	r1, r2, #1
    4b4c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4b4e:	7969      	ldrb	r1, [r5, #5]
    4b50:	2901      	cmp	r1, #1
    4b52:	d001      	beq.n	4b58 <_usart_interrupt_handler+0x40>
	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
		if (module->remaining_tx_buffer_length) {
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    4b54:	b29b      	uxth	r3, r3
    4b56:	e004      	b.n	4b62 <_usart_interrupt_handler+0x4a>
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    4b58:	7851      	ldrb	r1, [r2, #1]
    4b5a:	0209      	lsls	r1, r1, #8
    4b5c:	430b      	orrs	r3, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    4b5e:	3202      	adds	r2, #2
    4b60:	62aa      	str	r2, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    4b62:	05db      	lsls	r3, r3, #23
    4b64:	0ddb      	lsrs	r3, r3, #23
    4b66:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    4b68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    4b6a:	3b01      	subs	r3, #1
    4b6c:	b29b      	uxth	r3, r3
    4b6e:	85eb      	strh	r3, [r5, #46]	; 0x2e
    4b70:	2b00      	cmp	r3, #0
    4b72:	d106      	bne.n	4b82 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4b74:	3301      	adds	r3, #1
    4b76:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    4b78:	3301      	adds	r3, #1
    4b7a:	75a3      	strb	r3, [r4, #22]
    4b7c:	e001      	b.n	4b82 <_usart_interrupt_handler+0x6a>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    4b7e:	2301      	movs	r3, #1
    4b80:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    4b82:	07b3      	lsls	r3, r6, #30
    4b84:	d509      	bpl.n	4b9a <_usart_interrupt_handler+0x82>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    4b86:	2302      	movs	r3, #2
    4b88:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    4b8a:	2200      	movs	r2, #0
    4b8c:	3331      	adds	r3, #49	; 0x31
    4b8e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    4b90:	07fb      	lsls	r3, r7, #31
    4b92:	d502      	bpl.n	4b9a <_usart_interrupt_handler+0x82>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    4b94:	1c28      	adds	r0, r5, #0
    4b96:	68eb      	ldr	r3, [r5, #12]
    4b98:	4798      	blx	r3

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    4b9a:	0773      	lsls	r3, r6, #29
    4b9c:	d56a      	bpl.n	4c74 <_usart_interrupt_handler+0x15c>

		if (module->remaining_rx_buffer_length) {
    4b9e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4ba0:	b29b      	uxth	r3, r3
    4ba2:	2b00      	cmp	r3, #0
    4ba4:	d064      	beq.n	4c70 <_usart_interrupt_handler+0x158>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4ba6:	8b63      	ldrh	r3, [r4, #26]
    4ba8:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    4baa:	071a      	lsls	r2, r3, #28
    4bac:	d402      	bmi.n	4bb4 <_usart_interrupt_handler+0x9c>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4bae:	223f      	movs	r2, #63	; 0x3f
    4bb0:	4013      	ands	r3, r2
    4bb2:	e001      	b.n	4bb8 <_usart_interrupt_handler+0xa0>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    4bb4:	2237      	movs	r2, #55	; 0x37
    4bb6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    4bb8:	2b00      	cmp	r3, #0
    4bba:	d037      	beq.n	4c2c <_usart_interrupt_handler+0x114>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    4bbc:	079a      	lsls	r2, r3, #30
    4bbe:	d507      	bpl.n	4bd0 <_usart_interrupt_handler+0xb8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    4bc0:	221a      	movs	r2, #26
    4bc2:	2332      	movs	r3, #50	; 0x32
    4bc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    4bc6:	8b62      	ldrh	r2, [r4, #26]
    4bc8:	3b30      	subs	r3, #48	; 0x30
    4bca:	4313      	orrs	r3, r2
    4bcc:	8363      	strh	r3, [r4, #26]
    4bce:	e027      	b.n	4c20 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4bd0:	075a      	lsls	r2, r3, #29
    4bd2:	d507      	bpl.n	4be4 <_usart_interrupt_handler+0xcc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    4bd4:	221e      	movs	r2, #30
    4bd6:	2332      	movs	r3, #50	; 0x32
    4bd8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    4bda:	8b62      	ldrh	r2, [r4, #26]
    4bdc:	3b2e      	subs	r3, #46	; 0x2e
    4bde:	4313      	orrs	r3, r2
    4be0:	8363      	strh	r3, [r4, #26]
    4be2:	e01d      	b.n	4c20 <_usart_interrupt_handler+0x108>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4be4:	07da      	lsls	r2, r3, #31
    4be6:	d507      	bpl.n	4bf8 <_usart_interrupt_handler+0xe0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    4be8:	2213      	movs	r2, #19
    4bea:	2332      	movs	r3, #50	; 0x32
    4bec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    4bee:	8b62      	ldrh	r2, [r4, #26]
    4bf0:	3b31      	subs	r3, #49	; 0x31
    4bf2:	4313      	orrs	r3, r2
    4bf4:	8363      	strh	r3, [r4, #26]
    4bf6:	e013      	b.n	4c20 <_usart_interrupt_handler+0x108>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    4bf8:	06da      	lsls	r2, r3, #27
    4bfa:	d507      	bpl.n	4c0c <_usart_interrupt_handler+0xf4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    4bfc:	2242      	movs	r2, #66	; 0x42
    4bfe:	2332      	movs	r3, #50	; 0x32
    4c00:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    4c02:	8b62      	ldrh	r2, [r4, #26]
    4c04:	3b22      	subs	r3, #34	; 0x22
    4c06:	4313      	orrs	r3, r2
    4c08:	8363      	strh	r3, [r4, #26]
    4c0a:	e009      	b.n	4c20 <_usart_interrupt_handler+0x108>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    4c0c:	2220      	movs	r2, #32
    4c0e:	421a      	tst	r2, r3
    4c10:	d006      	beq.n	4c20 <_usart_interrupt_handler+0x108>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    4c12:	3221      	adds	r2, #33	; 0x21
    4c14:	2332      	movs	r3, #50	; 0x32
    4c16:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    4c18:	8b62      	ldrh	r2, [r4, #26]
    4c1a:	3b12      	subs	r3, #18
    4c1c:	4313      	orrs	r3, r2
    4c1e:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    4c20:	077b      	lsls	r3, r7, #29
    4c22:	d527      	bpl.n	4c74 <_usart_interrupt_handler+0x15c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    4c24:	1c28      	adds	r0, r5, #0
    4c26:	696b      	ldr	r3, [r5, #20]
    4c28:	4798      	blx	r3
    4c2a:	e023      	b.n	4c74 <_usart_interrupt_handler+0x15c>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    4c2c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    4c2e:	05db      	lsls	r3, r3, #23
    4c30:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    4c32:	b2da      	uxtb	r2, r3
    4c34:	6a69      	ldr	r1, [r5, #36]	; 0x24
    4c36:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    4c38:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    4c3a:	1c51      	adds	r1, r2, #1
    4c3c:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    4c3e:	7969      	ldrb	r1, [r5, #5]
    4c40:	2901      	cmp	r1, #1
    4c42:	d104      	bne.n	4c4e <_usart_interrupt_handler+0x136>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    4c44:	0a1b      	lsrs	r3, r3, #8
    4c46:	7053      	strb	r3, [r2, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    4c48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4c4a:	3301      	adds	r3, #1
    4c4c:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    4c4e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    4c50:	3b01      	subs	r3, #1
    4c52:	b29b      	uxth	r3, r3
    4c54:	85ab      	strh	r3, [r5, #44]	; 0x2c
    4c56:	2b00      	cmp	r3, #0
    4c58:	d10c      	bne.n	4c74 <_usart_interrupt_handler+0x15c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4c5a:	3304      	adds	r3, #4
    4c5c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    4c5e:	2200      	movs	r2, #0
    4c60:	332e      	adds	r3, #46	; 0x2e
    4c62:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    4c64:	07bb      	lsls	r3, r7, #30
    4c66:	d505      	bpl.n	4c74 <_usart_interrupt_handler+0x15c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    4c68:	1c28      	adds	r0, r5, #0
    4c6a:	692b      	ldr	r3, [r5, #16]
    4c6c:	4798      	blx	r3
    4c6e:	e001      	b.n	4c74 <_usart_interrupt_handler+0x15c>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    4c70:	2304      	movs	r3, #4
    4c72:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    4c74:	06f3      	lsls	r3, r6, #27
    4c76:	d507      	bpl.n	4c88 <_usart_interrupt_handler+0x170>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    4c78:	2310      	movs	r3, #16
    4c7a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    4c7c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    4c7e:	06fb      	lsls	r3, r7, #27
    4c80:	d502      	bpl.n	4c88 <_usart_interrupt_handler+0x170>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    4c82:	1c28      	adds	r0, r5, #0
    4c84:	69eb      	ldr	r3, [r5, #28]
    4c86:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    4c88:	06b3      	lsls	r3, r6, #26
    4c8a:	d507      	bpl.n	4c9c <_usart_interrupt_handler+0x184>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    4c8c:	2320      	movs	r3, #32
    4c8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    4c90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    4c92:	073b      	lsls	r3, r7, #28
    4c94:	d502      	bpl.n	4c9c <_usart_interrupt_handler+0x184>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    4c96:	1c28      	adds	r0, r5, #0
    4c98:	69ab      	ldr	r3, [r5, #24]
    4c9a:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    4c9c:	0733      	lsls	r3, r6, #28
    4c9e:	d507      	bpl.n	4cb0 <_usart_interrupt_handler+0x198>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    4ca0:	2308      	movs	r3, #8
    4ca2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    4ca4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    4ca6:	06bb      	lsls	r3, r7, #26
    4ca8:	d502      	bpl.n	4cb0 <_usart_interrupt_handler+0x198>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    4caa:	6a2b      	ldr	r3, [r5, #32]
    4cac:	1c28      	adds	r0, r5, #0
    4cae:	4798      	blx	r3
		}
	}
#endif
}
    4cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cb2:	46c0      	nop			; (mov r8, r8)
    4cb4:	200004b4 	.word	0x200004b4

00004cb8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    4cb8:	b508      	push	{r3, lr}
	switch (clock_source) {
    4cba:	2808      	cmp	r0, #8
    4cbc:	d803      	bhi.n	4cc6 <system_clock_source_get_hz+0xe>
    4cbe:	0080      	lsls	r0, r0, #2
    4cc0:	4b1b      	ldr	r3, [pc, #108]	; (4d30 <system_clock_source_get_hz+0x78>)
    4cc2:	581b      	ldr	r3, [r3, r0]
    4cc4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    4cc6:	2000      	movs	r0, #0
    4cc8:	e031      	b.n	4d2e <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    4cca:	4b1a      	ldr	r3, [pc, #104]	; (4d34 <system_clock_source_get_hz+0x7c>)
    4ccc:	6918      	ldr	r0, [r3, #16]
    4cce:	e02e      	b.n	4d2e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4cd0:	4b19      	ldr	r3, [pc, #100]	; (4d38 <system_clock_source_get_hz+0x80>)
    4cd2:	6a18      	ldr	r0, [r3, #32]
    4cd4:	0580      	lsls	r0, r0, #22
    4cd6:	0f80      	lsrs	r0, r0, #30
    4cd8:	4b18      	ldr	r3, [pc, #96]	; (4d3c <system_clock_source_get_hz+0x84>)
    4cda:	40c3      	lsrs	r3, r0
    4cdc:	1c18      	adds	r0, r3, #0
    4cde:	e026      	b.n	4d2e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    4ce0:	4b14      	ldr	r3, [pc, #80]	; (4d34 <system_clock_source_get_hz+0x7c>)
    4ce2:	6958      	ldr	r0, [r3, #20]
    4ce4:	e023      	b.n	4d2e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4ce6:	4b13      	ldr	r3, [pc, #76]	; (4d34 <system_clock_source_get_hz+0x7c>)
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	2002      	movs	r0, #2
    4cec:	4018      	ands	r0, r3
    4cee:	d01e      	beq.n	4d2e <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4cf0:	4911      	ldr	r1, [pc, #68]	; (4d38 <system_clock_source_get_hz+0x80>)
    4cf2:	2210      	movs	r2, #16
    4cf4:	68cb      	ldr	r3, [r1, #12]
    4cf6:	421a      	tst	r2, r3
    4cf8:	d0fc      	beq.n	4cf4 <system_clock_source_get_hz+0x3c>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    4cfa:	4b0e      	ldr	r3, [pc, #56]	; (4d34 <system_clock_source_get_hz+0x7c>)
    4cfc:	681b      	ldr	r3, [r3, #0]
    4cfe:	075b      	lsls	r3, r3, #29
    4d00:	d514      	bpl.n	4d2c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d02:	2000      	movs	r0, #0
    4d04:	4b0e      	ldr	r3, [pc, #56]	; (4d40 <system_clock_source_get_hz+0x88>)
    4d06:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4d08:	4b0a      	ldr	r3, [pc, #40]	; (4d34 <system_clock_source_get_hz+0x7c>)
    4d0a:	689b      	ldr	r3, [r3, #8]
    4d0c:	041b      	lsls	r3, r3, #16
    4d0e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4d10:	4358      	muls	r0, r3
    4d12:	e00c      	b.n	4d2e <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4d14:	2350      	movs	r3, #80	; 0x50
    4d16:	4a08      	ldr	r2, [pc, #32]	; (4d38 <system_clock_source_get_hz+0x80>)
    4d18:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    4d1a:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4d1c:	075b      	lsls	r3, r3, #29
    4d1e:	d506      	bpl.n	4d2e <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    4d20:	4b04      	ldr	r3, [pc, #16]	; (4d34 <system_clock_source_get_hz+0x7c>)
    4d22:	68d8      	ldr	r0, [r3, #12]
    4d24:	e003      	b.n	4d2e <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    4d26:	2080      	movs	r0, #128	; 0x80
    4d28:	0200      	lsls	r0, r0, #8
    4d2a:	e000      	b.n	4d2e <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    4d2c:	4805      	ldr	r0, [pc, #20]	; (4d44 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    4d2e:	bd08      	pop	{r3, pc}
    4d30:	0000b204 	.word	0x0000b204
    4d34:	200001c0 	.word	0x200001c0
    4d38:	40000800 	.word	0x40000800
    4d3c:	007a1200 	.word	0x007a1200
    4d40:	0000530d 	.word	0x0000530d
    4d44:	02dc6c00 	.word	0x02dc6c00

00004d48 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    4d48:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    4d4a:	4c0c      	ldr	r4, [pc, #48]	; (4d7c <system_clock_source_osc8m_set_config+0x34>)
    4d4c:	6a23      	ldr	r3, [r4, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    4d4e:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    4d50:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    4d52:	7842      	ldrb	r2, [r0, #1]
    4d54:	2001      	movs	r0, #1
    4d56:	4002      	ands	r2, r0
    4d58:	0192      	lsls	r2, r2, #6
    4d5a:	2640      	movs	r6, #64	; 0x40
    4d5c:	43b3      	bics	r3, r6
    4d5e:	4313      	orrs	r3, r2
    4d60:	1c02      	adds	r2, r0, #0
    4d62:	402a      	ands	r2, r5
    4d64:	01d2      	lsls	r2, r2, #7
    4d66:	307f      	adds	r0, #127	; 0x7f
    4d68:	4383      	bics	r3, r0
    4d6a:	4313      	orrs	r3, r2
    4d6c:	2203      	movs	r2, #3
    4d6e:	400a      	ands	r2, r1
    4d70:	0212      	lsls	r2, r2, #8
    4d72:	4903      	ldr	r1, [pc, #12]	; (4d80 <system_clock_source_osc8m_set_config+0x38>)
    4d74:	400b      	ands	r3, r1
    4d76:	4313      	orrs	r3, r2
    4d78:	6223      	str	r3, [r4, #32]
}
    4d7a:	bd70      	pop	{r4, r5, r6, pc}
    4d7c:	40000800 	.word	0x40000800
    4d80:	fffffcff 	.word	0xfffffcff

00004d84 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    4d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d86:	465f      	mov	r7, fp
    4d88:	4656      	mov	r6, sl
    4d8a:	464d      	mov	r5, r9
    4d8c:	4644      	mov	r4, r8
    4d8e:	b4f0      	push	{r4, r5, r6, r7}
    4d90:	b083      	sub	sp, #12
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    4d92:	4e2e      	ldr	r6, [pc, #184]	; (4e4c <system_clock_source_xosc32k_set_config+0xc8>)
    4d94:	8ab3      	ldrh	r3, [r6, #20]
    4d96:	469c      	mov	ip, r3

	temp.bit.STARTUP = config->startup_time;
    4d98:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    4d9a:	7803      	ldrb	r3, [r0, #0]
    4d9c:	425a      	negs	r2, r3
    4d9e:	415a      	adcs	r2, r3
    4da0:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    4da2:	7883      	ldrb	r3, [r0, #2]
    4da4:	469b      	mov	fp, r3
	temp.bit.EN1K = config->enable_1khz_output;
    4da6:	78c3      	ldrb	r3, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    4da8:	7902      	ldrb	r2, [r0, #4]
    4daa:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    4dac:	7b47      	ldrb	r7, [r0, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    4dae:	7b02      	ldrb	r2, [r0, #12]
    4db0:	9201      	str	r2, [sp, #4]
	temp.bit.WRTLOCK  = config->write_once;
    4db2:	7b84      	ldrb	r4, [r0, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    4db4:	6882      	ldr	r2, [r0, #8]
    4db6:	4826      	ldr	r0, [pc, #152]	; (4e50 <system_clock_source_xosc32k_set_config+0xcc>)
    4db8:	6142      	str	r2, [r0, #20]

	SYSCTRL->XOSC32K = temp;
    4dba:	2001      	movs	r0, #1
    4dbc:	464a      	mov	r2, r9
    4dbe:	0092      	lsls	r2, r2, #2
    4dc0:	4691      	mov	r9, r2
    4dc2:	2204      	movs	r2, #4
    4dc4:	4692      	mov	sl, r2
    4dc6:	4662      	mov	r2, ip
    4dc8:	4651      	mov	r1, sl
    4dca:	438a      	bics	r2, r1
    4dcc:	4694      	mov	ip, r2
    4dce:	464a      	mov	r2, r9
    4dd0:	4661      	mov	r1, ip
    4dd2:	430a      	orrs	r2, r1
    4dd4:	4694      	mov	ip, r2
    4dd6:	4642      	mov	r2, r8
    4dd8:	4002      	ands	r2, r0
    4dda:	00d2      	lsls	r2, r2, #3
    4ddc:	4690      	mov	r8, r2
    4dde:	2208      	movs	r2, #8
    4de0:	4691      	mov	r9, r2
    4de2:	4662      	mov	r2, ip
    4de4:	4649      	mov	r1, r9
    4de6:	438a      	bics	r2, r1
    4de8:	4694      	mov	ip, r2
    4dea:	4642      	mov	r2, r8
    4dec:	4661      	mov	r1, ip
    4dee:	430a      	orrs	r2, r1
    4df0:	4694      	mov	ip, r2
    4df2:	4003      	ands	r3, r0
    4df4:	011b      	lsls	r3, r3, #4
    4df6:	2210      	movs	r2, #16
    4df8:	4690      	mov	r8, r2
    4dfa:	4662      	mov	r2, ip
    4dfc:	4641      	mov	r1, r8
    4dfe:	438a      	bics	r2, r1
    4e00:	4313      	orrs	r3, r2
    4e02:	4659      	mov	r1, fp
    4e04:	4001      	ands	r1, r0
    4e06:	0149      	lsls	r1, r1, #5
    4e08:	2220      	movs	r2, #32
    4e0a:	4393      	bics	r3, r2
    4e0c:	430b      	orrs	r3, r1
    4e0e:	9a01      	ldr	r2, [sp, #4]
    4e10:	4002      	ands	r2, r0
    4e12:	0192      	lsls	r2, r2, #6
    4e14:	2140      	movs	r1, #64	; 0x40
    4e16:	438b      	bics	r3, r1
    4e18:	4313      	orrs	r3, r2
    4e1a:	4007      	ands	r7, r0
    4e1c:	01ff      	lsls	r7, r7, #7
    4e1e:	2280      	movs	r2, #128	; 0x80
    4e20:	4393      	bics	r3, r2
    4e22:	433b      	orrs	r3, r7
    4e24:	3a79      	subs	r2, #121	; 0x79
    4e26:	4015      	ands	r5, r2
    4e28:	022d      	lsls	r5, r5, #8
    4e2a:	4f0a      	ldr	r7, [pc, #40]	; (4e54 <system_clock_source_xosc32k_set_config+0xd0>)
    4e2c:	403b      	ands	r3, r7
    4e2e:	432b      	orrs	r3, r5
    4e30:	4004      	ands	r4, r0
    4e32:	0320      	lsls	r0, r4, #12
    4e34:	4c08      	ldr	r4, [pc, #32]	; (4e58 <system_clock_source_xosc32k_set_config+0xd4>)
    4e36:	401c      	ands	r4, r3
    4e38:	4304      	orrs	r4, r0
    4e3a:	82b4      	strh	r4, [r6, #20]
}
    4e3c:	b003      	add	sp, #12
    4e3e:	bc3c      	pop	{r2, r3, r4, r5}
    4e40:	4690      	mov	r8, r2
    4e42:	4699      	mov	r9, r3
    4e44:	46a2      	mov	sl, r4
    4e46:	46ab      	mov	fp, r5
    4e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e4a:	46c0      	nop			; (mov r8, r8)
    4e4c:	40000800 	.word	0x40000800
    4e50:	200001c0 	.word	0x200001c0
    4e54:	fffff8ff 	.word	0xfffff8ff
    4e58:	ffffefff 	.word	0xffffefff

00004e5c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    4e5c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4e5e:	7a03      	ldrb	r3, [r0, #8]
    4e60:	069b      	lsls	r3, r3, #26
    4e62:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4e64:	8943      	ldrh	r3, [r0, #10]
    4e66:	059b      	lsls	r3, r3, #22
    4e68:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4e6a:	4313      	orrs	r3, r2
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    4e6c:	4c15      	ldr	r4, [pc, #84]	; (4ec4 <system_clock_source_dfll_set_config+0x68>)
    4e6e:	6063      	str	r3, [r4, #4]
    4e70:	8881      	ldrh	r1, [r0, #4]
    4e72:	8843      	ldrh	r3, [r0, #2]
    4e74:	4319      	orrs	r1, r3
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    4e76:	79c3      	ldrb	r3, [r0, #7]
    4e78:	7982      	ldrb	r2, [r0, #6]
    4e7a:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    4e7c:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4e7e:	7842      	ldrb	r2, [r0, #1]
    4e80:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    4e82:	4313      	orrs	r3, r2
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    4e84:	6023      	str	r3, [r4, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4e86:	7803      	ldrb	r3, [r0, #0]
    4e88:	2b04      	cmp	r3, #4
    4e8a:	d10f      	bne.n	4eac <system_clock_source_dfll_set_config+0x50>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    4e8c:	7b03      	ldrb	r3, [r0, #12]
    4e8e:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4e90:	8a02      	ldrh	r2, [r0, #16]
    4e92:	4313      	orrs	r3, r2
    4e94:	1c19      	adds	r1, r3, #0

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    4e96:	89c3      	ldrh	r3, [r0, #14]
    4e98:	041b      	lsls	r3, r3, #16
    4e9a:	4a0b      	ldr	r2, [pc, #44]	; (4ec8 <system_clock_source_dfll_set_config+0x6c>)
    4e9c:	4013      	ands	r3, r2
    4e9e:	430b      	orrs	r3, r1
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    4ea0:	60a3      	str	r3, [r4, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    4ea2:	6821      	ldr	r1, [r4, #0]
    4ea4:	2304      	movs	r3, #4
    4ea6:	430b      	orrs	r3, r1
    4ea8:	6023      	str	r3, [r4, #0]
    4eaa:	e009      	b.n	4ec0 <system_clock_source_dfll_set_config+0x64>
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    4eac:	2b20      	cmp	r3, #32
    4eae:	d107      	bne.n	4ec0 <system_clock_source_dfll_set_config+0x64>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    4eb0:	8a02      	ldrh	r2, [r0, #16]
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    4eb2:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <system_clock_source_dfll_set_config+0x68>)
    4eb4:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    4eb6:	681a      	ldr	r2, [r3, #0]
    4eb8:	2184      	movs	r1, #132	; 0x84
    4eba:	00c9      	lsls	r1, r1, #3
    4ebc:	430a      	orrs	r2, r1
    4ebe:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    4ec0:	bd10      	pop	{r4, pc}
    4ec2:	46c0      	nop			; (mov r8, r8)
    4ec4:	200001c0 	.word	0x200001c0
    4ec8:	03ff0000 	.word	0x03ff0000

00004ecc <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    4ecc:	2808      	cmp	r0, #8
    4ece:	d803      	bhi.n	4ed8 <system_clock_source_enable+0xc>
    4ed0:	0080      	lsls	r0, r0, #2
    4ed2:	4b22      	ldr	r3, [pc, #136]	; (4f5c <system_clock_source_enable+0x90>)
    4ed4:	581b      	ldr	r3, [r3, r0]
    4ed6:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    4ed8:	2017      	movs	r0, #23
    4eda:	e03e      	b.n	4f5a <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4edc:	4a20      	ldr	r2, [pc, #128]	; (4f60 <system_clock_source_enable+0x94>)
    4ede:	6a11      	ldr	r1, [r2, #32]
    4ee0:	2302      	movs	r3, #2
    4ee2:	430b      	orrs	r3, r1
    4ee4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    4ee6:	2000      	movs	r0, #0
    4ee8:	e037      	b.n	4f5a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    4eea:	4a1d      	ldr	r2, [pc, #116]	; (4f60 <system_clock_source_enable+0x94>)
    4eec:	6991      	ldr	r1, [r2, #24]
    4eee:	2302      	movs	r3, #2
    4ef0:	430b      	orrs	r3, r1
    4ef2:	6193      	str	r3, [r2, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4ef4:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    4ef6:	e030      	b.n	4f5a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    4ef8:	4a19      	ldr	r2, [pc, #100]	; (4f60 <system_clock_source_enable+0x94>)
    4efa:	8a11      	ldrh	r1, [r2, #16]
    4efc:	2302      	movs	r3, #2
    4efe:	430b      	orrs	r3, r1
    4f00:	8213      	strh	r3, [r2, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4f02:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    4f04:	e029      	b.n	4f5a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4f06:	4a16      	ldr	r2, [pc, #88]	; (4f60 <system_clock_source_enable+0x94>)
    4f08:	8a91      	ldrh	r1, [r2, #20]
    4f0a:	2302      	movs	r3, #2
    4f0c:	430b      	orrs	r3, r1
    4f0e:	8293      	strh	r3, [r2, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4f10:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    4f12:	e022      	b.n	4f5a <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    4f14:	4b13      	ldr	r3, [pc, #76]	; (4f64 <system_clock_source_enable+0x98>)
    4f16:	6819      	ldr	r1, [r3, #0]
    4f18:	2202      	movs	r2, #2
    4f1a:	430a      	orrs	r2, r1
    4f1c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    4f1e:	681a      	ldr	r2, [r3, #0]
    4f20:	4b11      	ldr	r3, [pc, #68]	; (4f68 <system_clock_source_enable+0x9c>)
    4f22:	4013      	ands	r3, r2
    4f24:	4a0e      	ldr	r2, [pc, #56]	; (4f60 <system_clock_source_enable+0x94>)
    4f26:	8493      	strh	r3, [r2, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    4f28:	1c11      	adds	r1, r2, #0
    4f2a:	2210      	movs	r2, #16
    4f2c:	68cb      	ldr	r3, [r1, #12]
    4f2e:	421a      	tst	r2, r3
    4f30:	d0fc      	beq.n	4f2c <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    4f32:	4a0c      	ldr	r2, [pc, #48]	; (4f64 <system_clock_source_enable+0x98>)
    4f34:	6891      	ldr	r1, [r2, #8]
    4f36:	4b0a      	ldr	r3, [pc, #40]	; (4f60 <system_clock_source_enable+0x94>)
    4f38:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    4f3a:	6851      	ldr	r1, [r2, #4]
    4f3c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    4f3e:	6812      	ldr	r2, [r2, #0]
    4f40:	b292      	uxth	r2, r2
    4f42:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4f44:	2000      	movs	r0, #0
    4f46:	e008      	b.n	4f5a <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4f48:	4905      	ldr	r1, [pc, #20]	; (4f60 <system_clock_source_enable+0x94>)
    4f4a:	2244      	movs	r2, #68	; 0x44
    4f4c:	5c88      	ldrb	r0, [r1, r2]
    4f4e:	2302      	movs	r3, #2
    4f50:	4303      	orrs	r3, r0
    4f52:	548b      	strb	r3, [r1, r2]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    4f54:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    4f56:	e000      	b.n	4f5a <system_clock_source_enable+0x8e>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    4f58:	2000      	movs	r0, #0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    4f5a:	4770      	bx	lr
    4f5c:	0000b228 	.word	0x0000b228
    4f60:	40000800 	.word	0x40000800
    4f64:	200001c0 	.word	0x200001c0
    4f68:	0000ff7f 	.word	0x0000ff7f

00004f6c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    4f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f6e:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4f70:	22c2      	movs	r2, #194	; 0xc2
    4f72:	00d2      	lsls	r2, r2, #3
    4f74:	4b47      	ldr	r3, [pc, #284]	; (5094 <system_clock_init+0x128>)
    4f76:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4f78:	4947      	ldr	r1, [pc, #284]	; (5098 <system_clock_init+0x12c>)
    4f7a:	684b      	ldr	r3, [r1, #4]
    4f7c:	221e      	movs	r2, #30
    4f7e:	4393      	bics	r3, r2
    4f80:	3a1a      	subs	r2, #26
    4f82:	4313      	orrs	r3, r2
    4f84:	604b      	str	r3, [r1, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    4f86:	3a02      	subs	r2, #2
    4f88:	ab01      	add	r3, sp, #4
    4f8a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4f8c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4f8e:	4d43      	ldr	r5, [pc, #268]	; (509c <system_clock_init+0x130>)
    4f90:	b2e0      	uxtb	r0, r4
    4f92:	a901      	add	r1, sp, #4
    4f94:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4f96:	3401      	adds	r4, #1
    4f98:	2c25      	cmp	r4, #37	; 0x25
    4f9a:	d1f9      	bne.n	4f90 <system_clock_init+0x24>
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4f9c:	a80a      	add	r0, sp, #40	; 0x28
    4f9e:	2300      	movs	r3, #0
    4fa0:	7003      	strb	r3, [r0, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
	config->auto_gain_control   = false;
    4fa2:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    4fa4:	2280      	movs	r2, #128	; 0x80
    4fa6:	0212      	lsls	r2, r2, #8
    4fa8:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    4faa:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    4fac:	2201      	movs	r2, #1
    4fae:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    4fb0:	7303      	strb	r3, [r0, #12]
	config->on_demand           = true;
	config->write_once          = false;
    4fb2:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4fb4:	3202      	adds	r2, #2
    4fb6:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4fb8:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4fba:	4b39      	ldr	r3, [pc, #228]	; (50a0 <system_clock_init+0x134>)
    4fbc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    4fbe:	2005      	movs	r0, #5
    4fc0:	4b38      	ldr	r3, [pc, #224]	; (50a4 <system_clock_init+0x138>)
    4fc2:	4798      	blx	r3

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4fc4:	4933      	ldr	r1, [pc, #204]	; (5094 <system_clock_init+0x128>)
    4fc6:	2202      	movs	r2, #2
    4fc8:	68cb      	ldr	r3, [r1, #12]
	xosc32k_conf.on_demand           = false;
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    4fca:	421a      	tst	r2, r3
    4fcc:	d0fc      	beq.n	4fc8 <system_clock_init+0x5c>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    4fce:	4a31      	ldr	r2, [pc, #196]	; (5094 <system_clock_init+0x128>)
    4fd0:	8a91      	ldrh	r1, [r2, #20]
    4fd2:	2380      	movs	r3, #128	; 0x80
    4fd4:	430b      	orrs	r3, r1
    4fd6:	8293      	strh	r3, [r2, #20]
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    4fd8:	ab05      	add	r3, sp, #20
    4fda:	2100      	movs	r1, #0
    4fdc:	2200      	movs	r2, #0
    4fde:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    4fe0:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    4fe2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    4fe4:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
	config->fine_value      = 0xff / 4; /* Midpoint */
    4fe6:	313f      	adds	r1, #63	; 0x3f
    4fe8:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    4fea:	393b      	subs	r1, #59	; 0x3b
    4fec:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    4fee:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    4ff0:	4b2d      	ldr	r3, [pc, #180]	; (50a8 <system_clock_init+0x13c>)
    4ff2:	681b      	ldr	r3, [r3, #0]
    4ff4:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    4ff6:	2b3f      	cmp	r3, #63	; 0x3f
    4ff8:	d100      	bne.n	4ffc <system_clock_init+0x90>
		coarse = 0x1f;
    4ffa:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    4ffc:	a805      	add	r0, sp, #20
    4ffe:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5000:	4b2a      	ldr	r3, [pc, #168]	; (50ac <system_clock_init+0x140>)
    5002:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    5004:	2307      	movs	r3, #7
    5006:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5008:	3338      	adds	r3, #56	; 0x38
    500a:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    500c:	4b28      	ldr	r3, [pc, #160]	; (50b0 <system_clock_init+0x144>)
    500e:	4798      	blx	r3
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    5010:	a804      	add	r0, sp, #16
    5012:	2500      	movs	r5, #0
    5014:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    5016:	2601      	movs	r6, #1
    5018:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    501a:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    501c:	4b25      	ldr	r3, [pc, #148]	; (50b4 <system_clock_init+0x148>)
    501e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    5020:	2006      	movs	r0, #6
    5022:	4f20      	ldr	r7, [pc, #128]	; (50a4 <system_clock_init+0x138>)
    5024:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    5026:	4b24      	ldr	r3, [pc, #144]	; (50b8 <system_clock_init+0x14c>)
    5028:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    502a:	ac01      	add	r4, sp, #4
    502c:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    502e:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    5030:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    5032:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    5034:	2305      	movs	r3, #5
    5036:	7023      	strb	r3, [r4, #0]
    5038:	2001      	movs	r0, #1
    503a:	1c21      	adds	r1, r4, #0
    503c:	4b1f      	ldr	r3, [pc, #124]	; (50bc <system_clock_init+0x150>)
    503e:	4798      	blx	r3
    5040:	2001      	movs	r0, #1
    5042:	4b1f      	ldr	r3, [pc, #124]	; (50c0 <system_clock_init+0x154>)
    5044:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    5046:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    5048:	2000      	movs	r0, #0
    504a:	1c21      	adds	r1, r4, #0
    504c:	4b13      	ldr	r3, [pc, #76]	; (509c <system_clock_init+0x130>)
    504e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    5050:	2000      	movs	r0, #0
    5052:	4b1c      	ldr	r3, [pc, #112]	; (50c4 <system_clock_init+0x158>)
    5054:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    5056:	2007      	movs	r0, #7
    5058:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    505a:	490e      	ldr	r1, [pc, #56]	; (5094 <system_clock_init+0x128>)
    505c:	22d0      	movs	r2, #208	; 0xd0
    505e:	68cb      	ldr	r3, [r1, #12]
    5060:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    5062:	2bd0      	cmp	r3, #208	; 0xd0
    5064:	d1fb      	bne.n	505e <system_clock_init+0xf2>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5066:	4a18      	ldr	r2, [pc, #96]	; (50c8 <system_clock_init+0x15c>)
    5068:	2300      	movs	r3, #0
    506a:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    506c:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    506e:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5070:	72d3      	strb	r3, [r2, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5072:	a901      	add	r1, sp, #4
    5074:	2201      	movs	r2, #1
    5076:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    5078:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    507a:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    507c:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    507e:	3307      	adds	r3, #7
    5080:	700b      	strb	r3, [r1, #0]
    5082:	2000      	movs	r0, #0
    5084:	4b0d      	ldr	r3, [pc, #52]	; (50bc <system_clock_init+0x150>)
    5086:	4798      	blx	r3
    5088:	2000      	movs	r0, #0
    508a:	4b0d      	ldr	r3, [pc, #52]	; (50c0 <system_clock_init+0x154>)
    508c:	4798      	blx	r3
#endif
}
    508e:	b00f      	add	sp, #60	; 0x3c
    5090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5092:	46c0      	nop			; (mov r8, r8)
    5094:	40000800 	.word	0x40000800
    5098:	41004000 	.word	0x41004000
    509c:	000052f1 	.word	0x000052f1
    50a0:	00004d85 	.word	0x00004d85
    50a4:	00004ecd 	.word	0x00004ecd
    50a8:	00806024 	.word	0x00806024
    50ac:	000005b9 	.word	0x000005b9
    50b0:	00004e5d 	.word	0x00004e5d
    50b4:	00004d49 	.word	0x00004d49
    50b8:	000050cd 	.word	0x000050cd
    50bc:	000050f1 	.word	0x000050f1
    50c0:	00005195 	.word	0x00005195
    50c4:	00005265 	.word	0x00005265
    50c8:	40000400 	.word	0x40000400

000050cc <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    50cc:	4a06      	ldr	r2, [pc, #24]	; (50e8 <system_gclk_init+0x1c>)
    50ce:	6991      	ldr	r1, [r2, #24]
    50d0:	2308      	movs	r3, #8
    50d2:	430b      	orrs	r3, r1
    50d4:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    50d6:	2201      	movs	r2, #1
    50d8:	4b04      	ldr	r3, [pc, #16]	; (50ec <system_gclk_init+0x20>)
    50da:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    50dc:	1c19      	adds	r1, r3, #0
    50de:	780b      	ldrb	r3, [r1, #0]
    50e0:	4213      	tst	r3, r2
    50e2:	d1fc      	bne.n	50de <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    50e4:	4770      	bx	lr
    50e6:	46c0      	nop			; (mov r8, r8)
    50e8:	40000400 	.word	0x40000400
    50ec:	40000c00 	.word	0x40000c00

000050f0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    50f0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    50f2:	1c04      	adds	r4, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    50f4:	780d      	ldrb	r5, [r1, #0]
    50f6:	022d      	lsls	r5, r5, #8
    50f8:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    50fa:	784b      	ldrb	r3, [r1, #1]
    50fc:	2b00      	cmp	r3, #0
    50fe:	d002      	beq.n	5106 <system_gclk_gen_set_config+0x16>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    5100:	2380      	movs	r3, #128	; 0x80
    5102:	02db      	lsls	r3, r3, #11
    5104:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    5106:	7a4b      	ldrb	r3, [r1, #9]
    5108:	2b00      	cmp	r3, #0
    510a:	d002      	beq.n	5112 <system_gclk_gen_set_config+0x22>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    510c:	2380      	movs	r3, #128	; 0x80
    510e:	031b      	lsls	r3, r3, #12
    5110:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    5112:	684e      	ldr	r6, [r1, #4]
    5114:	2e01      	cmp	r6, #1
    5116:	d918      	bls.n	514a <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    5118:	1e73      	subs	r3, r6, #1
    511a:	421e      	tst	r6, r3
    511c:	d110      	bne.n	5140 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    511e:	2e02      	cmp	r6, #2
    5120:	d906      	bls.n	5130 <system_gclk_gen_set_config+0x40>
    5122:	2302      	movs	r3, #2
    5124:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    5126:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    5128:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    512a:	429e      	cmp	r6, r3
    512c:	d8fb      	bhi.n	5126 <system_gclk_gen_set_config+0x36>
    512e:	e000      	b.n	5132 <system_gclk_gen_set_config+0x42>
    5130:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    5132:	0212      	lsls	r2, r2, #8
    5134:	4310      	orrs	r0, r2
    5136:	1c04      	adds	r4, r0, #0
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    5138:	2380      	movs	r3, #128	; 0x80
    513a:	035b      	lsls	r3, r3, #13
    513c:	431d      	orrs	r5, r3
    513e:	e004      	b.n	514a <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    5140:	0234      	lsls	r4, r6, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    5142:	4304      	orrs	r4, r0
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5144:	2380      	movs	r3, #128	; 0x80
    5146:	029b      	lsls	r3, r3, #10
    5148:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    514a:	7a0b      	ldrb	r3, [r1, #8]
    514c:	2b00      	cmp	r3, #0
    514e:	d002      	beq.n	5156 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    5150:	2380      	movs	r3, #128	; 0x80
    5152:	039b      	lsls	r3, r3, #14
    5154:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5156:	4a0c      	ldr	r2, [pc, #48]	; (5188 <system_gclk_gen_set_config+0x98>)
    5158:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    515a:	b25b      	sxtb	r3, r3
    515c:	2b00      	cmp	r3, #0
    515e:	dbfb      	blt.n	5158 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5160:	4b0a      	ldr	r3, [pc, #40]	; (518c <system_gclk_gen_set_config+0x9c>)
    5162:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENDIV.reg  = new_gendiv_config;
    5164:	4b08      	ldr	r3, [pc, #32]	; (5188 <system_gclk_gen_set_config+0x98>)
    5166:	609c      	str	r4, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5168:	1c1a      	adds	r2, r3, #0
    516a:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    516c:	b25b      	sxtb	r3, r3
    516e:	2b00      	cmp	r3, #0
    5170:	dbfb      	blt.n	516a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    5172:	4a05      	ldr	r2, [pc, #20]	; (5188 <system_gclk_gen_set_config+0x98>)
    5174:	6851      	ldr	r1, [r2, #4]
    5176:	2380      	movs	r3, #128	; 0x80
    5178:	025b      	lsls	r3, r3, #9
    517a:	400b      	ands	r3, r1
    517c:	431d      	orrs	r5, r3
    517e:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5180:	4b03      	ldr	r3, [pc, #12]	; (5190 <system_gclk_gen_set_config+0xa0>)
    5182:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5184:	bd70      	pop	{r4, r5, r6, pc}
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	40000c00 	.word	0x40000c00
    518c:	00002e2d 	.word	0x00002e2d
    5190:	00002e6d 	.word	0x00002e6d

00005194 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5194:	b510      	push	{r4, lr}
    5196:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5198:	4a0b      	ldr	r2, [pc, #44]	; (51c8 <system_gclk_gen_enable+0x34>)
    519a:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    519c:	b25b      	sxtb	r3, r3
    519e:	2b00      	cmp	r3, #0
    51a0:	dbfb      	blt.n	519a <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    51a2:	4b0a      	ldr	r3, [pc, #40]	; (51cc <system_gclk_gen_enable+0x38>)
    51a4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    51a6:	4b0a      	ldr	r3, [pc, #40]	; (51d0 <system_gclk_gen_enable+0x3c>)
    51a8:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51aa:	4a07      	ldr	r2, [pc, #28]	; (51c8 <system_gclk_gen_enable+0x34>)
    51ac:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    51ae:	b25b      	sxtb	r3, r3
    51b0:	2b00      	cmp	r3, #0
    51b2:	dbfb      	blt.n	51ac <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    51b4:	4a04      	ldr	r2, [pc, #16]	; (51c8 <system_gclk_gen_enable+0x34>)
    51b6:	6853      	ldr	r3, [r2, #4]
    51b8:	2180      	movs	r1, #128	; 0x80
    51ba:	0249      	lsls	r1, r1, #9
    51bc:	430b      	orrs	r3, r1
    51be:	6053      	str	r3, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    51c0:	4b04      	ldr	r3, [pc, #16]	; (51d4 <system_gclk_gen_enable+0x40>)
    51c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    51c4:	bd10      	pop	{r4, pc}
    51c6:	46c0      	nop			; (mov r8, r8)
    51c8:	40000c00 	.word	0x40000c00
    51cc:	00002e2d 	.word	0x00002e2d
    51d0:	40000c04 	.word	0x40000c04
    51d4:	00002e6d 	.word	0x00002e6d

000051d8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    51d8:	b570      	push	{r4, r5, r6, lr}
    51da:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51dc:	4a1a      	ldr	r2, [pc, #104]	; (5248 <system_gclk_gen_get_hz+0x70>)
    51de:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    51e0:	b25b      	sxtb	r3, r3
    51e2:	2b00      	cmp	r3, #0
    51e4:	dbfb      	blt.n	51de <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    51e6:	4b19      	ldr	r3, [pc, #100]	; (524c <system_gclk_gen_get_hz+0x74>)
    51e8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    51ea:	4b19      	ldr	r3, [pc, #100]	; (5250 <system_gclk_gen_get_hz+0x78>)
    51ec:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    51ee:	4a16      	ldr	r2, [pc, #88]	; (5248 <system_gclk_gen_get_hz+0x70>)
    51f0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    51f2:	b25b      	sxtb	r3, r3
    51f4:	2b00      	cmp	r3, #0
    51f6:	dbfb      	blt.n	51f0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    51f8:	4e13      	ldr	r6, [pc, #76]	; (5248 <system_gclk_gen_get_hz+0x70>)
    51fa:	6870      	ldr	r0, [r6, #4]
    51fc:	04c0      	lsls	r0, r0, #19
    51fe:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    5200:	4b14      	ldr	r3, [pc, #80]	; (5254 <system_gclk_gen_get_hz+0x7c>)
    5202:	4798      	blx	r3
    5204:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    5206:	4b12      	ldr	r3, [pc, #72]	; (5250 <system_gclk_gen_get_hz+0x78>)
    5208:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    520a:	6876      	ldr	r6, [r6, #4]
    520c:	02f6      	lsls	r6, r6, #11
    520e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    5210:	4b11      	ldr	r3, [pc, #68]	; (5258 <system_gclk_gen_get_hz+0x80>)
    5212:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    5214:	4a0c      	ldr	r2, [pc, #48]	; (5248 <system_gclk_gen_get_hz+0x70>)
    5216:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    5218:	b25b      	sxtb	r3, r3
    521a:	2b00      	cmp	r3, #0
    521c:	dbfb      	blt.n	5216 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    521e:	4b0a      	ldr	r3, [pc, #40]	; (5248 <system_gclk_gen_get_hz+0x70>)
    5220:	689c      	ldr	r4, [r3, #8]
    5222:	0a24      	lsrs	r4, r4, #8
    5224:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5226:	4b0d      	ldr	r3, [pc, #52]	; (525c <system_gclk_gen_get_hz+0x84>)
    5228:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    522a:	2e00      	cmp	r6, #0
    522c:	d107      	bne.n	523e <system_gclk_gen_get_hz+0x66>
    522e:	2c01      	cmp	r4, #1
    5230:	d907      	bls.n	5242 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    5232:	1c28      	adds	r0, r5, #0
    5234:	1c21      	adds	r1, r4, #0
    5236:	4b0a      	ldr	r3, [pc, #40]	; (5260 <system_gclk_gen_get_hz+0x88>)
    5238:	4798      	blx	r3
    523a:	1c05      	adds	r5, r0, #0
    523c:	e001      	b.n	5242 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    523e:	3401      	adds	r4, #1
    5240:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    5242:	1c28      	adds	r0, r5, #0
    5244:	bd70      	pop	{r4, r5, r6, pc}
    5246:	46c0      	nop			; (mov r8, r8)
    5248:	40000c00 	.word	0x40000c00
    524c:	00002e2d 	.word	0x00002e2d
    5250:	40000c04 	.word	0x40000c04
    5254:	00004cb9 	.word	0x00004cb9
    5258:	40000c08 	.word	0x40000c08
    525c:	00002e6d 	.word	0x00002e6d
    5260:	00008045 	.word	0x00008045

00005264 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    5264:	b510      	push	{r4, lr}
    5266:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5268:	4b06      	ldr	r3, [pc, #24]	; (5284 <system_gclk_chan_enable+0x20>)
    526a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    526c:	4b06      	ldr	r3, [pc, #24]	; (5288 <system_gclk_chan_enable+0x24>)
    526e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    5270:	4a06      	ldr	r2, [pc, #24]	; (528c <system_gclk_chan_enable+0x28>)
    5272:	8851      	ldrh	r1, [r2, #2]
    5274:	2380      	movs	r3, #128	; 0x80
    5276:	01db      	lsls	r3, r3, #7
    5278:	430b      	orrs	r3, r1
    527a:	8053      	strh	r3, [r2, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    527c:	4b04      	ldr	r3, [pc, #16]	; (5290 <system_gclk_chan_enable+0x2c>)
    527e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    5280:	bd10      	pop	{r4, pc}
    5282:	46c0      	nop			; (mov r8, r8)
    5284:	00002e2d 	.word	0x00002e2d
    5288:	40000c02 	.word	0x40000c02
    528c:	40000c00 	.word	0x40000c00
    5290:	00002e6d 	.word	0x00002e6d

00005294 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5294:	b510      	push	{r4, lr}
    5296:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5298:	4b0f      	ldr	r3, [pc, #60]	; (52d8 <system_gclk_chan_disable+0x44>)
    529a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    529c:	4b0f      	ldr	r3, [pc, #60]	; (52dc <system_gclk_chan_disable+0x48>)
    529e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    52a0:	4b0f      	ldr	r3, [pc, #60]	; (52e0 <system_gclk_chan_disable+0x4c>)
    52a2:	885a      	ldrh	r2, [r3, #2]
    52a4:	0512      	lsls	r2, r2, #20
    52a6:	0f10      	lsrs	r0, r2, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    52a8:	8859      	ldrh	r1, [r3, #2]
    52aa:	4a0e      	ldr	r2, [pc, #56]	; (52e4 <system_gclk_chan_disable+0x50>)
    52ac:	400a      	ands	r2, r1
    52ae:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    52b0:	8859      	ldrh	r1, [r3, #2]
    52b2:	4a0d      	ldr	r2, [pc, #52]	; (52e8 <system_gclk_chan_disable+0x54>)
    52b4:	400a      	ands	r2, r1
    52b6:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    52b8:	1c19      	adds	r1, r3, #0
    52ba:	2280      	movs	r2, #128	; 0x80
    52bc:	01d2      	lsls	r2, r2, #7
    52be:	884b      	ldrh	r3, [r1, #2]
    52c0:	4213      	tst	r3, r2
    52c2:	d1fc      	bne.n	52be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    52c4:	4906      	ldr	r1, [pc, #24]	; (52e0 <system_gclk_chan_disable+0x4c>)
    52c6:	0202      	lsls	r2, r0, #8
    52c8:	8848      	ldrh	r0, [r1, #2]
    52ca:	4b06      	ldr	r3, [pc, #24]	; (52e4 <system_gclk_chan_disable+0x50>)
    52cc:	4003      	ands	r3, r0
    52ce:	4313      	orrs	r3, r2
    52d0:	804b      	strh	r3, [r1, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    52d2:	4b06      	ldr	r3, [pc, #24]	; (52ec <system_gclk_chan_disable+0x58>)
    52d4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    52d6:	bd10      	pop	{r4, pc}
    52d8:	00002e2d 	.word	0x00002e2d
    52dc:	40000c02 	.word	0x40000c02
    52e0:	40000c00 	.word	0x40000c00
    52e4:	fffff0ff 	.word	0xfffff0ff
    52e8:	ffffbfff 	.word	0xffffbfff
    52ec:	00002e6d 	.word	0x00002e6d

000052f0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    52f0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    52f2:	780c      	ldrb	r4, [r1, #0]
    52f4:	0224      	lsls	r4, r4, #8
    52f6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    52f8:	4b02      	ldr	r3, [pc, #8]	; (5304 <system_gclk_chan_set_config+0x14>)
    52fa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    52fc:	b2a4      	uxth	r4, r4
    52fe:	4b02      	ldr	r3, [pc, #8]	; (5308 <system_gclk_chan_set_config+0x18>)
    5300:	805c      	strh	r4, [r3, #2]
}
    5302:	bd10      	pop	{r4, pc}
    5304:	00005295 	.word	0x00005295
    5308:	40000c00 	.word	0x40000c00

0000530c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    530c:	b510      	push	{r4, lr}
    530e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    5310:	4b06      	ldr	r3, [pc, #24]	; (532c <system_gclk_chan_get_hz+0x20>)
    5312:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    5314:	4b06      	ldr	r3, [pc, #24]	; (5330 <system_gclk_chan_get_hz+0x24>)
    5316:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    5318:	4b06      	ldr	r3, [pc, #24]	; (5334 <system_gclk_chan_get_hz+0x28>)
    531a:	885c      	ldrh	r4, [r3, #2]
    531c:	0524      	lsls	r4, r4, #20
    531e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    5320:	4b05      	ldr	r3, [pc, #20]	; (5338 <system_gclk_chan_get_hz+0x2c>)
    5322:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    5324:	1c20      	adds	r0, r4, #0
    5326:	4b05      	ldr	r3, [pc, #20]	; (533c <system_gclk_chan_get_hz+0x30>)
    5328:	4798      	blx	r3
}
    532a:	bd10      	pop	{r4, pc}
    532c:	00002e2d 	.word	0x00002e2d
    5330:	40000c02 	.word	0x40000c02
    5334:	40000c00 	.word	0x40000c00
    5338:	00002e6d 	.word	0x00002e6d
    533c:	000051d9 	.word	0x000051d9

00005340 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    5340:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    5342:	78d3      	ldrb	r3, [r2, #3]
    5344:	2b00      	cmp	r3, #0
    5346:	d11e      	bne.n	5386 <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    5348:	7814      	ldrb	r4, [r2, #0]
    534a:	2c80      	cmp	r4, #128	; 0x80
    534c:	d004      	beq.n	5358 <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    534e:	0624      	lsls	r4, r4, #24
    5350:	2380      	movs	r3, #128	; 0x80
    5352:	025b      	lsls	r3, r3, #9
    5354:	431c      	orrs	r4, r3
    5356:	e000      	b.n	535a <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    5358:	2400      	movs	r4, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    535a:	7853      	ldrb	r3, [r2, #1]
    535c:	2502      	movs	r5, #2
    535e:	43ab      	bics	r3, r5
    5360:	d10a      	bne.n	5378 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    5362:	7893      	ldrb	r3, [r2, #2]
    5364:	2b00      	cmp	r3, #0
    5366:	d103      	bne.n	5370 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    5368:	2380      	movs	r3, #128	; 0x80
    536a:	029b      	lsls	r3, r3, #10
    536c:	431c      	orrs	r4, r3
    536e:	e002      	b.n	5376 <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5370:	23c0      	movs	r3, #192	; 0xc0
    5372:	02db      	lsls	r3, r3, #11
    5374:	431c      	orrs	r4, r3
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    5376:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5378:	7853      	ldrb	r3, [r2, #1]
    537a:	3b01      	subs	r3, #1
    537c:	2b01      	cmp	r3, #1
    537e:	d812      	bhi.n	53a6 <_system_pinmux_config+0x66>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5380:	4b18      	ldr	r3, [pc, #96]	; (53e4 <_system_pinmux_config+0xa4>)
    5382:	401c      	ands	r4, r3
    5384:	e00f      	b.n	53a6 <_system_pinmux_config+0x66>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    5386:	6041      	str	r1, [r0, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5388:	040b      	lsls	r3, r1, #16
    538a:	0c1b      	lsrs	r3, r3, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    538c:	24a0      	movs	r4, #160	; 0xa0
    538e:	05e4      	lsls	r4, r4, #23
    5390:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5392:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5394:	0c0b      	lsrs	r3, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5396:	24d0      	movs	r4, #208	; 0xd0
    5398:	0624      	lsls	r4, r4, #24
    539a:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    539c:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    539e:	78d3      	ldrb	r3, [r2, #3]
    53a0:	2b00      	cmp	r3, #0
    53a2:	d018      	beq.n	53d6 <_system_pinmux_config+0x96>
    53a4:	e01c      	b.n	53e0 <_system_pinmux_config+0xa0>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    53a6:	040b      	lsls	r3, r1, #16
    53a8:	0c1b      	lsrs	r3, r3, #16
    53aa:	25a0      	movs	r5, #160	; 0xa0
    53ac:	05ed      	lsls	r5, r5, #23
    53ae:	432b      	orrs	r3, r5

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    53b0:	4323      	orrs	r3, r4
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    53b2:	6283      	str	r3, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    53b4:	0c0b      	lsrs	r3, r1, #16
    53b6:	25d0      	movs	r5, #208	; 0xd0
    53b8:	062d      	lsls	r5, r5, #24
    53ba:	432b      	orrs	r3, r5

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    53bc:	4323      	orrs	r3, r4
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    53be:	6283      	str	r3, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    53c0:	78d3      	ldrb	r3, [r2, #3]
    53c2:	2b00      	cmp	r3, #0
    53c4:	d10c      	bne.n	53e0 <_system_pinmux_config+0xa0>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    53c6:	0363      	lsls	r3, r4, #13
    53c8:	d505      	bpl.n	53d6 <_system_pinmux_config+0x96>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    53ca:	7893      	ldrb	r3, [r2, #2]
    53cc:	2b01      	cmp	r3, #1
    53ce:	d101      	bne.n	53d4 <_system_pinmux_config+0x94>
				port->OUTSET.reg = pin_mask;
    53d0:	6181      	str	r1, [r0, #24]
    53d2:	e000      	b.n	53d6 <_system_pinmux_config+0x96>
			} else {
				port->OUTCLR.reg = pin_mask;
    53d4:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    53d6:	7853      	ldrb	r3, [r2, #1]
    53d8:	3b01      	subs	r3, #1
    53da:	2b01      	cmp	r3, #1
    53dc:	d800      	bhi.n	53e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    53de:	6081      	str	r1, [r0, #8]
		}
	}
}
    53e0:	bd30      	pop	{r4, r5, pc}
    53e2:	46c0      	nop			; (mov r8, r8)
    53e4:	fffbffff 	.word	0xfffbffff

000053e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    53e8:	b508      	push	{r3, lr}
    53ea:	1c03      	adds	r3, r0, #0
    53ec:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    53ee:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    53f0:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    53f2:	2900      	cmp	r1, #0
    53f4:	d104      	bne.n	5400 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    53f6:	0958      	lsrs	r0, r3, #5
    53f8:	01c0      	lsls	r0, r0, #7
    53fa:	4905      	ldr	r1, [pc, #20]	; (5410 <system_pinmux_pin_set_config+0x28>)
    53fc:	468c      	mov	ip, r1
    53fe:	4460      	add	r0, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5400:	211f      	movs	r1, #31
    5402:	400b      	ands	r3, r1
    5404:	391e      	subs	r1, #30
    5406:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    5408:	4b02      	ldr	r3, [pc, #8]	; (5414 <system_pinmux_pin_set_config+0x2c>)
    540a:	4798      	blx	r3
}
    540c:	bd08      	pop	{r3, pc}
    540e:	46c0      	nop			; (mov r8, r8)
    5410:	41004400 	.word	0x41004400
    5414:	00005341 	.word	0x00005341

00005418 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5418:	4770      	bx	lr
    541a:	46c0      	nop			; (mov r8, r8)

0000541c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    541c:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    541e:	4b05      	ldr	r3, [pc, #20]	; (5434 <system_init+0x18>)
    5420:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5422:	4b05      	ldr	r3, [pc, #20]	; (5438 <system_init+0x1c>)
    5424:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5426:	4b05      	ldr	r3, [pc, #20]	; (543c <system_init+0x20>)
    5428:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    542a:	4b05      	ldr	r3, [pc, #20]	; (5440 <system_init+0x24>)
    542c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    542e:	4b05      	ldr	r3, [pc, #20]	; (5444 <system_init+0x28>)
    5430:	4798      	blx	r3
}
    5432:	bd08      	pop	{r3, pc}
    5434:	00004f6d 	.word	0x00004f6d
    5438:	00002e9d 	.word	0x00002e9d
    543c:	00005419 	.word	0x00005419
    5440:	00003239 	.word	0x00003239
    5444:	00005419 	.word	0x00005419

00005448 <_tcc_get_inst_index>:
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5448:	4b08      	ldr	r3, [pc, #32]	; (546c <_tcc_get_inst_index+0x24>)
    544a:	4298      	cmp	r0, r3
    544c:	d00a      	beq.n	5464 <_tcc_get_inst_index+0x1c>
    544e:	4b08      	ldr	r3, [pc, #32]	; (5470 <_tcc_get_inst_index+0x28>)
    5450:	4298      	cmp	r0, r3
    5452:	d005      	beq.n	5460 <_tcc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5454:	2300      	movs	r3, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
    5456:	4a07      	ldr	r2, [pc, #28]	; (5474 <_tcc_get_inst_index+0x2c>)
    5458:	4290      	cmp	r0, r2
    545a:	d105      	bne.n	5468 <_tcc_get_inst_index+0x20>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    545c:	3302      	adds	r3, #2
    545e:	e002      	b.n	5466 <_tcc_get_inst_index+0x1e>
    5460:	2301      	movs	r3, #1
    5462:	e000      	b.n	5466 <_tcc_get_inst_index+0x1e>
    5464:	2300      	movs	r3, #0
		if (hw == tcc_modules[i]) {
			return i;
    5466:	b2db      	uxtb	r3, r3
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    5468:	1c18      	adds	r0, r3, #0
    546a:	4770      	bx	lr
    546c:	42002000 	.word	0x42002000
    5470:	42002400 	.word	0x42002400
    5474:	42002800 	.word	0x42002800

00005478 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
    5478:	b510      	push	{r4, lr}
    547a:	1c04      	adds	r4, r0, #0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    547c:	1c08      	adds	r0, r1, #0
    547e:	4b4f      	ldr	r3, [pc, #316]	; (55bc <tcc_get_config_defaults+0x144>)
    5480:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
    5482:	2300      	movs	r3, #0
    5484:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
    5486:	0080      	lsls	r0, r0, #2
    5488:	4a4d      	ldr	r2, [pc, #308]	; (55c0 <tcc_get_config_defaults+0x148>)
    548a:	5882      	ldr	r2, [r0, r2]
    548c:	6062      	str	r2, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
    548e:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    5490:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    5492:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    5494:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    5496:	7223      	strb	r3, [r4, #8]

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    5498:	61e3      	str	r3, [r4, #28]
    549a:	6223      	str	r3, [r4, #32]
    549c:	6263      	str	r3, [r4, #36]	; 0x24
    549e:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    54a0:	7523      	strb	r3, [r4, #20]
    54a2:	7563      	strb	r3, [r4, #21]
    54a4:	75a3      	strb	r3, [r4, #22]
    54a6:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    54a8:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    54aa:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
    54ac:	7423      	strb	r3, [r4, #16]
    54ae:	7463      	strb	r3, [r4, #17]
    54b0:	74a3      	strb	r3, [r4, #18]
    54b2:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    54b4:	222c      	movs	r2, #44	; 0x2c
    54b6:	54a3      	strb	r3, [r4, r2]
    54b8:	3201      	adds	r2, #1
    54ba:	54a3      	strb	r3, [r4, r2]
    54bc:	3201      	adds	r2, #1
    54be:	54a3      	strb	r3, [r4, r2]
    54c0:	3201      	adds	r2, #1
    54c2:	54a3      	strb	r3, [r4, r2]
    54c4:	3201      	adds	r2, #1
    54c6:	54a3      	strb	r3, [r4, r2]
    54c8:	3201      	adds	r2, #1
    54ca:	54a3      	strb	r3, [r4, r2]
    54cc:	3201      	adds	r2, #1
    54ce:	54a3      	strb	r3, [r4, r2]
    54d0:	3201      	adds	r2, #1
    54d2:	54a3      	strb	r3, [r4, r2]
    54d4:	3201      	adds	r2, #1
    54d6:	54a3      	strb	r3, [r4, r2]
    54d8:	3201      	adds	r2, #1
    54da:	54a3      	strb	r3, [r4, r2]
    54dc:	3201      	adds	r2, #1
    54de:	54a3      	strb	r3, [r4, r2]
    54e0:	3201      	adds	r2, #1
    54e2:	54a3      	strb	r3, [r4, r2]
    54e4:	3201      	adds	r2, #1
    54e6:	54a3      	strb	r3, [r4, r2]
    54e8:	3201      	adds	r2, #1
    54ea:	54a3      	strb	r3, [r4, r2]
    54ec:	3201      	adds	r2, #1
    54ee:	54a3      	strb	r3, [r4, r2]
    54f0:	3201      	adds	r2, #1
    54f2:	54a3      	strb	r3, [r4, r2]
    54f4:	3201      	adds	r2, #1
    54f6:	54a3      	strb	r3, [r4, r2]
    54f8:	3201      	adds	r2, #1
    54fa:	54a3      	strb	r3, [r4, r2]
    54fc:	3201      	adds	r2, #1
    54fe:	54a3      	strb	r3, [r4, r2]
    5500:	3201      	adds	r2, #1
    5502:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    5504:	3201      	adds	r2, #1
    5506:	54a3      	strb	r3, [r4, r2]
    5508:	3201      	adds	r2, #1
    550a:	54a3      	strb	r3, [r4, r2]
    550c:	3201      	adds	r2, #1
    550e:	54a3      	strb	r3, [r4, r2]
    5510:	3201      	adds	r2, #1
    5512:	54a3      	strb	r3, [r4, r2]
    5514:	3201      	adds	r2, #1
    5516:	54a3      	strb	r3, [r4, r2]
    5518:	3201      	adds	r2, #1
    551a:	54a3      	strb	r3, [r4, r2]
    551c:	3201      	adds	r2, #1
    551e:	54a3      	strb	r3, [r4, r2]
    5520:	3201      	adds	r2, #1
    5522:	54a3      	strb	r3, [r4, r2]
    5524:	3201      	adds	r2, #1
    5526:	54a3      	strb	r3, [r4, r2]
    5528:	3201      	adds	r2, #1
    552a:	54a3      	strb	r3, [r4, r2]
    552c:	3201      	adds	r2, #1
    552e:	54a3      	strb	r3, [r4, r2]
    5530:	3201      	adds	r2, #1
    5532:	54a3      	strb	r3, [r4, r2]
    5534:	3201      	adds	r2, #1
    5536:	54a3      	strb	r3, [r4, r2]
    5538:	3201      	adds	r2, #1
    553a:	54a3      	strb	r3, [r4, r2]
    553c:	3201      	adds	r2, #1
    553e:	54a3      	strb	r3, [r4, r2]
    5540:	3201      	adds	r2, #1
    5542:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    5544:	3201      	adds	r2, #1
    5546:	54a3      	strb	r3, [r4, r2]
    5548:	3201      	adds	r2, #1
    554a:	54a3      	strb	r3, [r4, r2]
    554c:	3201      	adds	r2, #1
    554e:	54a3      	strb	r3, [r4, r2]
    5550:	3201      	adds	r2, #1
    5552:	54a3      	strb	r3, [r4, r2]
    5554:	3201      	adds	r2, #1
    5556:	54a3      	strb	r3, [r4, r2]
    5558:	3201      	adds	r2, #1
    555a:	54a3      	strb	r3, [r4, r2]
    555c:	3201      	adds	r2, #1
    555e:	54a3      	strb	r3, [r4, r2]
    5560:	3201      	adds	r2, #1
    5562:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    5564:	3241      	adds	r2, #65	; 0x41
    5566:	54a3      	strb	r3, [r4, r2]
    5568:	65a3      	str	r3, [r4, #88]	; 0x58
    556a:	67a3      	str	r3, [r4, #120]	; 0x78
    556c:	3201      	adds	r2, #1
    556e:	54a3      	strb	r3, [r4, r2]
    5570:	65e3      	str	r3, [r4, #92]	; 0x5c
    5572:	67e3      	str	r3, [r4, #124]	; 0x7c
    5574:	3201      	adds	r2, #1
    5576:	54a3      	strb	r3, [r4, r2]
    5578:	6623      	str	r3, [r4, #96]	; 0x60
    557a:	3a1a      	subs	r2, #26
    557c:	50a3      	str	r3, [r4, r2]
    557e:	321b      	adds	r2, #27
    5580:	54a3      	strb	r3, [r4, r2]
    5582:	6663      	str	r3, [r4, #100]	; 0x64
    5584:	3a17      	subs	r2, #23
    5586:	50a3      	str	r3, [r4, r2]
    5588:	3218      	adds	r2, #24
    558a:	54a3      	strb	r3, [r4, r2]
    558c:	66a3      	str	r3, [r4, #104]	; 0x68
    558e:	3a14      	subs	r2, #20
    5590:	50a3      	str	r3, [r4, r2]
    5592:	3215      	adds	r2, #21
    5594:	54a3      	strb	r3, [r4, r2]
    5596:	66e3      	str	r3, [r4, #108]	; 0x6c
    5598:	3a11      	subs	r2, #17
    559a:	50a3      	str	r3, [r4, r2]
    559c:	3212      	adds	r2, #18
    559e:	54a3      	strb	r3, [r4, r2]
    55a0:	6723      	str	r3, [r4, #112]	; 0x70
    55a2:	3a0e      	subs	r2, #14
    55a4:	50a3      	str	r3, [r4, r2]
    55a6:	320f      	adds	r2, #15
    55a8:	54a3      	strb	r3, [r4, r2]
    55aa:	6763      	str	r3, [r4, #116]	; 0x74
    55ac:	3a0b      	subs	r2, #11
    55ae:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
    55b0:	2101      	movs	r1, #1
    55b2:	320c      	adds	r2, #12
    55b4:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    55b6:	3201      	adds	r2, #1
    55b8:	54a3      	strb	r3, [r4, r2]
}
    55ba:	bd10      	pop	{r4, pc}
    55bc:	00005449 	.word	0x00005449
    55c0:	0000b25c 	.word	0x0000b25c

000055c4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
    55c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    55c6:	465f      	mov	r7, fp
    55c8:	4656      	mov	r6, sl
    55ca:	464d      	mov	r5, r9
    55cc:	4644      	mov	r4, r8
    55ce:	b4f0      	push	{r4, r5, r6, r7}
    55d0:	b08f      	sub	sp, #60	; 0x3c
    55d2:	9000      	str	r0, [sp, #0]
    55d4:	1c0c      	adds	r4, r1, #0
    55d6:	1c17      	adds	r7, r2, #0
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
    55d8:	1c08      	adds	r0, r1, #0
    55da:	4b87      	ldr	r3, [pc, #540]	; (57f8 <tcc_init+0x234>)
    55dc:	4798      	blx	r3
    55de:	1c05      	adds	r5, r0, #0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    55e0:	1c06      	adds	r6, r0, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    55e2:	4a86      	ldr	r2, [pc, #536]	; (57fc <tcc_init+0x238>)
    55e4:	6a11      	ldr	r1, [r2, #32]
    55e6:	0080      	lsls	r0, r0, #2
    55e8:	4b85      	ldr	r3, [pc, #532]	; (5800 <tcc_init+0x23c>)
    55ea:	58c3      	ldr	r3, [r0, r3]
    55ec:	430b      	orrs	r3, r1
    55ee:	6213      	str	r3, [r2, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    55f0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    55f2:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    55f4:	079b      	lsls	r3, r3, #30
    55f6:	d500      	bpl.n	55fa <tcc_init+0x36>
    55f8:	e1dd      	b.n	59b6 <tcc_init+0x3f2>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    55fa:	6823      	ldr	r3, [r4, #0]
    55fc:	2201      	movs	r2, #1
    55fe:	4013      	ands	r3, r2
    5600:	d000      	beq.n	5604 <tcc_init+0x40>
    5602:	e1d8      	b.n	59b6 <tcc_init+0x3f2>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
    5604:	00aa      	lsls	r2, r5, #2
    5606:	497f      	ldr	r1, [pc, #508]	; (5804 <tcc_init+0x240>)
    5608:	5852      	ldr	r2, [r2, r1]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
    560a:	3805      	subs	r0, #5

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
    560c:	6839      	ldr	r1, [r7, #0]
    560e:	428a      	cmp	r2, r1
    5610:	d200      	bcs.n	5614 <tcc_init+0x50>
    5612:	e1d0      	b.n	59b6 <tcc_init+0x3f2>
		|| (config->counter.period > count_max)
    5614:	6879      	ldr	r1, [r7, #4]
    5616:	428a      	cmp	r2, r1
    5618:	d200      	bcs.n	561c <tcc_init+0x58>
    561a:	e1cc      	b.n	59b6 <tcc_init+0x3f2>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
    561c:	69f9      	ldr	r1, [r7, #28]
    561e:	428a      	cmp	r2, r1
    5620:	d200      	bcs.n	5624 <tcc_init+0x60>
    5622:	e1b3      	b.n	598c <tcc_init+0x3c8>
    5624:	6a39      	ldr	r1, [r7, #32]
    5626:	4291      	cmp	r1, r2
    5628:	d900      	bls.n	562c <tcc_init+0x68>
    562a:	e1b1      	b.n	5990 <tcc_init+0x3cc>
    562c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    562e:	428a      	cmp	r2, r1
    5630:	d200      	bcs.n	5634 <tcc_init+0x70>
    5632:	e1af      	b.n	5994 <tcc_init+0x3d0>
    5634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    5636:	428a      	cmp	r2, r1
    5638:	d200      	bcs.n	563c <tcc_init+0x78>
    563a:	e1ad      	b.n	5998 <tcc_init+0x3d4>
    563c:	2298      	movs	r2, #152	; 0x98
    563e:	4694      	mov	ip, r2
    5640:	44bc      	add	ip, r7
    5642:	4662      	mov	r2, ip
    5644:	9204      	str	r2, [sp, #16]
    5646:	4661      	mov	r1, ip
    5648:	2200      	movs	r2, #0
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
    564a:	7808      	ldrb	r0, [r1, #0]
    564c:	2800      	cmp	r0, #0
    564e:	d004      	beq.n	565a <tcc_init+0x96>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
    5650:	486d      	ldr	r0, [pc, #436]	; (5808 <tcc_init+0x244>)
    5652:	5d80      	ldrb	r0, [r0, r6]
    5654:	4290      	cmp	r0, r2
    5656:	dc00      	bgt.n	565a <tcc_init+0x96>
    5658:	e1a0      	b.n	599c <tcc_init+0x3d8>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    565a:	3201      	adds	r2, #1
    565c:	3101      	adds	r1, #1
    565e:	2a08      	cmp	r2, #8
    5660:	d1f3      	bne.n	564a <tcc_init+0x86>
    5662:	2200      	movs	r2, #0
    5664:	4690      	mov	r8, r2

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    5666:	2180      	movs	r1, #128	; 0x80
    5668:	0449      	lsls	r1, r1, #17
    566a:	468c      	mov	ip, r1
    566c:	18b9      	adds	r1, r7, r2
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
    566e:	7c09      	ldrb	r1, [r1, #16]
    5670:	2901      	cmp	r1, #1
    5672:	d109      	bne.n	5688 <tcc_init+0xc4>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
    5674:	4965      	ldr	r1, [pc, #404]	; (580c <tcc_init+0x248>)
    5676:	5d89      	ldrb	r1, [r1, r6]
    5678:	4291      	cmp	r1, r2
    567a:	da00      	bge.n	567e <tcc_init+0xba>
    567c:	e190      	b.n	59a0 <tcc_init+0x3dc>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    567e:	4661      	mov	r1, ip
    5680:	4091      	lsls	r1, r2
    5682:	4640      	mov	r0, r8
    5684:	4308      	orrs	r0, r1
    5686:	4680      	mov	r8, r0
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    5688:	3201      	adds	r2, #1
    568a:	2a04      	cmp	r2, #4
    568c:	d1ee      	bne.n	566c <tcc_init+0xa8>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
    568e:	329d      	adds	r2, #157	; 0x9d
    5690:	5cba      	ldrb	r2, [r7, r2]
    5692:	2a00      	cmp	r2, #0
    5694:	d004      	beq.n	56a0 <tcc_init+0xdc>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    5696:	2280      	movs	r2, #128	; 0x80
    5698:	0112      	lsls	r2, r2, #4
    569a:	4641      	mov	r1, r8
    569c:	4311      	orrs	r1, r2
    569e:	4688      	mov	r8, r1
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    56a0:	7b3a      	ldrb	r2, [r7, #12]
    56a2:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    56a4:	7afa      	ldrb	r2, [r7, #11]
    56a6:	9207      	str	r2, [sp, #28]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
    56a8:	7a3a      	ldrb	r2, [r7, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    56aa:	1e51      	subs	r1, r2, #1
    56ac:	418a      	sbcs	r2, r1
    56ae:	0092      	lsls	r2, r2, #2
    56b0:	9203      	str	r2, [sp, #12]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    56b2:	7a7a      	ldrb	r2, [r7, #9]
    56b4:	2a01      	cmp	r2, #1
    56b6:	d102      	bne.n	56be <tcc_init+0xfa>
		ctrlb |= TCC_CTRLBSET_DIR;
    56b8:	9903      	ldr	r1, [sp, #12]
    56ba:	4311      	orrs	r1, r2
    56bc:	9103      	str	r1, [sp, #12]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
    56be:	4a53      	ldr	r2, [pc, #332]	; (580c <tcc_init+0x248>)
    56c0:	5d52      	ldrb	r2, [r2, r5]
    56c2:	1c11      	adds	r1, r2, #0
    56c4:	9205      	str	r2, [sp, #20]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    56c6:	2235      	movs	r2, #53	; 0x35
    56c8:	5cb8      	ldrb	r0, [r7, r2]
    56ca:	4281      	cmp	r1, r0
    56cc:	d800      	bhi.n	56d0 <tcc_init+0x10c>
    56ce:	e171      	b.n	59b4 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    56d0:	222c      	movs	r2, #44	; 0x2c
    56d2:	5cba      	ldrb	r2, [r7, r2]
    56d4:	2a0f      	cmp	r2, #15
    56d6:	d900      	bls.n	56da <tcc_init+0x116>
    56d8:	e16c      	b.n	59b4 <tcc_init+0x3f0>
    56da:	212d      	movs	r1, #45	; 0x2d
    56dc:	468c      	mov	ip, r1
    56de:	44bc      	add	ip, r7
    56e0:	4661      	mov	r1, ip
    56e2:	9101      	str	r1, [sp, #4]
    56e4:	2100      	movs	r1, #0
    56e6:	9608      	str	r6, [sp, #32]
    56e8:	4699      	mov	r9, r3
    56ea:	46bb      	mov	fp, r7
    56ec:	1c0f      	adds	r7, r1, #0
    56ee:	46a2      	mov	sl, r4
    56f0:	9509      	str	r5, [sp, #36]	; 0x24
    56f2:	e00c      	b.n	570e <tcc_init+0x14a>
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
    56f4:	7c90      	ldrb	r0, [r2, #18]
    56f6:	9b05      	ldr	r3, [sp, #20]
    56f8:	4283      	cmp	r3, r0
    56fa:	d800      	bhi.n	56fe <tcc_init+0x13a>
    56fc:	e15a      	b.n	59b4 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
    56fe:	7a52      	ldrb	r2, [r2, #9]
    5700:	9b01      	ldr	r3, [sp, #4]
    5702:	330a      	adds	r3, #10
    5704:	9301      	str	r3, [sp, #4]
    5706:	3704      	adds	r7, #4
    5708:	2a0f      	cmp	r2, #15
    570a:	d900      	bls.n	570e <tcc_init+0x14a>
    570c:	e152      	b.n	59b4 <tcc_init+0x3f0>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    570e:	0611      	lsls	r1, r2, #24
    5710:	23f0      	movs	r3, #240	; 0xf0
    5712:	051b      	lsls	r3, r3, #20
    5714:	4019      	ands	r1, r3
    5716:	9b01      	ldr	r3, [sp, #4]
    5718:	1c1a      	adds	r2, r3, #0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    571a:	781d      	ldrb	r5, [r3, #0]
    571c:	042d      	lsls	r5, r5, #16
    571e:	24ff      	movs	r4, #255	; 0xff
    5720:	0424      	lsls	r4, r4, #16
    5722:	4025      	ands	r5, r4
    5724:	9502      	str	r5, [sp, #8]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    5726:	785b      	ldrb	r3, [r3, #1]
    5728:	2480      	movs	r4, #128	; 0x80
    572a:	2b00      	cmp	r3, #0
    572c:	d100      	bne.n	5730 <tcc_init+0x16c>
    572e:	464c      	mov	r4, r9
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    5730:	7896      	ldrb	r6, [r2, #2]
    5732:	2308      	movs	r3, #8
    5734:	2e00      	cmp	r6, #0
    5736:	d100      	bne.n	573a <tcc_init+0x176>
    5738:	464b      	mov	r3, r9
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    573a:	78d6      	ldrb	r6, [r2, #3]
    573c:	46b4      	mov	ip, r6
    573e:	2610      	movs	r6, #16
    5740:	4665      	mov	r5, ip
    5742:	2d00      	cmp	r5, #0
    5744:	d100      	bne.n	5748 <tcc_init+0x184>
    5746:	464e      	mov	r6, r9
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    5748:	0280      	lsls	r0, r0, #10
    574a:	25c0      	movs	r5, #192	; 0xc0
    574c:	012d      	lsls	r5, r5, #4
    574e:	4028      	ands	r0, r5
    5750:	4301      	orrs	r1, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
    5752:	7910      	ldrb	r0, [r2, #4]
    5754:	2503      	movs	r5, #3
    5756:	4028      	ands	r0, r5
    5758:	4301      	orrs	r1, r0
    575a:	9802      	ldr	r0, [sp, #8]
    575c:	4301      	orrs	r1, r0
				| TCC_FCTRLA_BLANK(cfg->blanking)
    575e:	7955      	ldrb	r5, [r2, #5]
    5760:	016d      	lsls	r5, r5, #5
    5762:	2060      	movs	r0, #96	; 0x60
    5764:	4028      	ands	r0, r5
    5766:	4301      	orrs	r1, r0
    5768:	1c0d      	adds	r5, r1, #0
				| TCC_FCTRLA_HALT(cfg->halt_action)
    576a:	7990      	ldrb	r0, [r2, #6]
    576c:	0200      	lsls	r0, r0, #8
    576e:	21c0      	movs	r1, #192	; 0xc0
    5770:	0089      	lsls	r1, r1, #2
    5772:	4001      	ands	r1, r0
    5774:	430d      	orrs	r5, r1
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    5776:	79d0      	ldrb	r0, [r2, #7]
    5778:	0300      	lsls	r0, r0, #12
    577a:	21e0      	movs	r1, #224	; 0xe0
    577c:	01c9      	lsls	r1, r1, #7
    577e:	4001      	ands	r1, r0
    5780:	430d      	orrs	r5, r1
    5782:	432c      	orrs	r4, r5
    5784:	4323      	orrs	r3, r4
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    5786:	431e      	orrs	r6, r3
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
    5788:	ab0c      	add	r3, sp, #48	; 0x30
    578a:	50fe      	str	r6, [r7, r3]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    578c:	2f04      	cmp	r7, #4
    578e:	d1b1      	bne.n	56f4 <tcc_init+0x130>
    5790:	9e08      	ldr	r6, [sp, #32]
    5792:	4654      	mov	r4, sl
    5794:	465f      	mov	r7, fp
    5796:	9d09      	ldr	r5, [sp, #36]	; 0x24
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
    5798:	4b1b      	ldr	r3, [pc, #108]	; (5808 <tcc_init+0x244>)
    579a:	5d5b      	ldrb	r3, [r3, r5]
    579c:	469c      	mov	ip, r3
    579e:	4658      	mov	r0, fp
    57a0:	3050      	adds	r0, #80	; 0x50
    57a2:	465a      	mov	r2, fp
    57a4:	3241      	adds	r2, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
    57a6:	2300      	movs	r3, #0
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    57a8:	2101      	movs	r1, #1
    57aa:	468b      	mov	fp, r1
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    57ac:	2180      	movs	r1, #128	; 0x80
    57ae:	0249      	lsls	r1, r1, #9
    57b0:	468a      	mov	sl, r1
    57b2:	9401      	str	r4, [sp, #4]
    57b4:	1c34      	adds	r4, r6, #0
    57b6:	4666      	mov	r6, ip
    57b8:	1c29      	adds	r1, r5, #0
    57ba:	1c1d      	adds	r5, r3, #0
    57bc:	46b9      	mov	r9, r7
    57be:	1c0f      	adds	r7, r1, #0
    57c0:	9901      	ldr	r1, [sp, #4]
    57c2:	468c      	mov	ip, r1
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
    57c4:	7801      	ldrb	r1, [r0, #0]
    57c6:	2900      	cmp	r1, #0
    57c8:	d009      	beq.n	57de <tcc_init+0x21a>
			if (i >= ow_num) {
    57ca:	429e      	cmp	r6, r3
    57cc:	d800      	bhi.n	57d0 <tcc_init+0x20c>
    57ce:	e0e9      	b.n	59a4 <tcc_init+0x3e0>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    57d0:	4651      	mov	r1, sl
    57d2:	4099      	lsls	r1, r3
    57d4:	430d      	orrs	r5, r1
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
    57d6:	7811      	ldrb	r1, [r2, #0]
    57d8:	2900      	cmp	r1, #0
    57da:	d106      	bne.n	57ea <tcc_init+0x226>
    57dc:	e01b      	b.n	5816 <tcc_init+0x252>
    57de:	7811      	ldrb	r1, [r2, #0]
    57e0:	2900      	cmp	r1, #0
    57e2:	d018      	beq.n	5816 <tcc_init+0x252>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    57e4:	429e      	cmp	r6, r3
    57e6:	d800      	bhi.n	57ea <tcc_init+0x226>
    57e8:	e0de      	b.n	59a8 <tcc_init+0x3e4>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
    57ea:	2902      	cmp	r1, #2
    57ec:	d110      	bne.n	5810 <tcc_init+0x24c>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    57ee:	2102      	movs	r1, #2
    57f0:	31ff      	adds	r1, #255	; 0xff
    57f2:	4099      	lsls	r1, r3
    57f4:	430d      	orrs	r5, r1
    57f6:	e00e      	b.n	5816 <tcc_init+0x252>
    57f8:	00005449 	.word	0x00005449
    57fc:	40000400 	.word	0x40000400
    5800:	0000b250 	.word	0x0000b250
    5804:	0000b25c 	.word	0x0000b25c
    5808:	0000b26c 	.word	0x0000b26c
    580c:	0000b268 	.word	0x0000b268
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    5810:	4659      	mov	r1, fp
    5812:	4099      	lsls	r1, r3
    5814:	430d      	orrs	r5, r1
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    5816:	3301      	adds	r3, #1
    5818:	3001      	adds	r0, #1
    581a:	3202      	adds	r2, #2
    581c:	2b08      	cmp	r3, #8
    581e:	d1d1      	bne.n	57c4 <tcc_init+0x200>
    5820:	1c26      	adds	r6, r4, #0
    5822:	4664      	mov	r4, ip
    5824:	1c3b      	adds	r3, r7, #0
    5826:	464f      	mov	r7, r9
    5828:	46a9      	mov	r9, r5
    582a:	1c1d      	adds	r5, r3, #0
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
    582c:	4b65      	ldr	r3, [pc, #404]	; (59c4 <tcc_init+0x400>)
    582e:	5d5b      	ldrb	r3, [r3, r5]
    5830:	9301      	str	r3, [sp, #4]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5832:	7e7b      	ldrb	r3, [r7, #25]
    5834:	011b      	lsls	r3, r3, #4
    5836:	2230      	movs	r2, #48	; 0x30
    5838:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    583a:	7e3a      	ldrb	r2, [r7, #24]
    583c:	2107      	movs	r1, #7
    583e:	400a      	ands	r2, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    5840:	4313      	orrs	r3, r2
    5842:	1c18      	adds	r0, r3, #0
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5844:	2300      	movs	r3, #0
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    5846:	2180      	movs	r1, #128	; 0x80
    5848:	0249      	lsls	r1, r1, #9
    584a:	18fa      	adds	r2, r7, r3

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
    584c:	7d12      	ldrb	r2, [r2, #20]
    584e:	2a00      	cmp	r2, #0
    5850:	d006      	beq.n	5860 <tcc_init+0x29c>
			if (n >= cc_num) {
    5852:	9a01      	ldr	r2, [sp, #4]
    5854:	429a      	cmp	r2, r3
    5856:	dc00      	bgt.n	585a <tcc_init+0x296>
    5858:	e0a8      	b.n	59ac <tcc_init+0x3e8>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
    585a:	1c0a      	adds	r2, r1, #0
    585c:	409a      	lsls	r2, r3
    585e:	4310      	orrs	r0, r2
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    5860:	3301      	adds	r3, #1
    5862:	2b04      	cmp	r3, #4
    5864:	d1f1      	bne.n	584a <tcc_init+0x286>
    5866:	9002      	str	r0, [sp, #8]
    5868:	9900      	ldr	r1, [sp, #0]
    586a:	1c0b      	adds	r3, r1, #0
    586c:	3304      	adds	r3, #4
    586e:	3134      	adds	r1, #52	; 0x34

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
    5870:	2200      	movs	r2, #0
    5872:	c304      	stmia	r3!, {r2}
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5874:	428b      	cmp	r3, r1
    5876:	d1fc      	bne.n	5872 <tcc_init+0x2ae>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
    5878:	2300      	movs	r3, #0
    587a:	9900      	ldr	r1, [sp, #0]
    587c:	634b      	str	r3, [r1, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    587e:	638b      	str	r3, [r1, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    5880:	00aa      	lsls	r2, r5, #2
    5882:	4b51      	ldr	r3, [pc, #324]	; (59c8 <tcc_init+0x404>)
    5884:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
    5886:	600c      	str	r4, [r1, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5888:	23a0      	movs	r3, #160	; 0xa0
    588a:	5cfa      	ldrb	r2, [r7, r3]
    588c:	3b64      	subs	r3, #100	; 0x64
    588e:	54ca      	strb	r2, [r1, r3]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
    5890:	a90b      	add	r1, sp, #44	; 0x2c
    5892:	7abb      	ldrb	r3, [r7, #10]
    5894:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    5896:	4b4d      	ldr	r3, [pc, #308]	; (59cc <tcc_init+0x408>)
    5898:	5d5b      	ldrb	r3, [r3, r5]
    589a:	9300      	str	r3, [sp, #0]
    589c:	1c18      	adds	r0, r3, #0
    589e:	4b4c      	ldr	r3, [pc, #304]	; (59d0 <tcc_init+0x40c>)
    58a0:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    58a2:	9800      	ldr	r0, [sp, #0]
    58a4:	4b4b      	ldr	r3, [pc, #300]	; (59d4 <tcc_init+0x410>)
    58a6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    58a8:	4b4b      	ldr	r3, [pc, #300]	; (59d8 <tcc_init+0x414>)
    58aa:	5d5b      	ldrb	r3, [r3, r5]
    58ac:	2b00      	cmp	r3, #0
    58ae:	dd29      	ble.n	5904 <tcc_init+0x340>
    58b0:	1c3d      	adds	r5, r7, #0
    58b2:	3558      	adds	r5, #88	; 0x58
    58b4:	2397      	movs	r3, #151	; 0x97
    58b6:	425b      	negs	r3, r3
    58b8:	1bdb      	subs	r3, r3, r7
    58ba:	469b      	mov	fp, r3
    58bc:	4b46      	ldr	r3, [pc, #280]	; (59d8 <tcc_init+0x414>)
    58be:	469a      	mov	sl, r3
    58c0:	4643      	mov	r3, r8
    58c2:	9300      	str	r3, [sp, #0]
    58c4:	46a0      	mov	r8, r4
    58c6:	1c34      	adds	r4, r6, #0
    58c8:	9e04      	ldr	r6, [sp, #16]
    58ca:	465b      	mov	r3, fp
    58cc:	46bb      	mov	fp, r7
    58ce:	1c1f      	adds	r7, r3, #0
		if (!config->pins.enable_wave_out_pin[i]) {
    58d0:	7833      	ldrb	r3, [r6, #0]
    58d2:	2b00      	cmp	r3, #0
    58d4:	d00b      	beq.n	58ee <tcc_init+0x32a>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    58d6:	2301      	movs	r3, #1
    58d8:	aa0a      	add	r2, sp, #40	; 0x28
    58da:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    58dc:	2200      	movs	r2, #0
    58de:	a90a      	add	r1, sp, #40	; 0x28
    58e0:	70ca      	strb	r2, [r1, #3]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    58e2:	6a2a      	ldr	r2, [r5, #32]
    58e4:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    58e6:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    58e8:	7828      	ldrb	r0, [r5, #0]
    58ea:	4b3c      	ldr	r3, [pc, #240]	; (59dc <tcc_init+0x418>)
    58ec:	4798      	blx	r3
    58ee:	19bb      	adds	r3, r7, r6
    58f0:	3601      	adds	r6, #1
    58f2:	3504      	adds	r5, #4
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    58f4:	4652      	mov	r2, sl
    58f6:	5d12      	ldrb	r2, [r2, r4]
    58f8:	429a      	cmp	r2, r3
    58fa:	dce9      	bgt.n	58d0 <tcc_init+0x30c>
    58fc:	4644      	mov	r4, r8
    58fe:	9b00      	ldr	r3, [sp, #0]
    5900:	4698      	mov	r8, r3
    5902:	465f      	mov	r7, fp
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    5904:	9b06      	ldr	r3, [sp, #24]
    5906:	031a      	lsls	r2, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    5908:	9b07      	ldr	r3, [sp, #28]
    590a:	021b      	lsls	r3, r3, #8
    590c:	4313      	orrs	r3, r2
    590e:	4642      	mov	r2, r8
    5910:	4313      	orrs	r3, r2
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
    5912:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5914:	2204      	movs	r2, #4
    5916:	68a3      	ldr	r3, [r4, #8]
    5918:	421a      	tst	r2, r3
    591a:	d1fc      	bne.n	5916 <tcc_init+0x352>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
    591c:	23ff      	movs	r3, #255	; 0xff
    591e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    5920:	2204      	movs	r2, #4
    5922:	68a3      	ldr	r3, [r4, #8]
    5924:	421a      	tst	r2, r3
    5926:	d1fc      	bne.n	5922 <tcc_init+0x35e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
    5928:	466b      	mov	r3, sp
    592a:	7b1b      	ldrb	r3, [r3, #12]
    592c:	7163      	strb	r3, [r4, #5]

	hw->FCTRLA.reg = faults[0];
    592e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5930:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    5932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5934:	6123      	str	r3, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
    5936:	464b      	mov	r3, r9
    5938:	61a3      	str	r3, [r4, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    593a:	4a29      	ldr	r2, [pc, #164]	; (59e0 <tcc_init+0x41c>)
    593c:	68a3      	ldr	r3, [r4, #8]
    593e:	4213      	tst	r3, r2
    5940:	d1fc      	bne.n	593c <tcc_init+0x378>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
    5942:	9b02      	ldr	r3, [sp, #8]
    5944:	63e3      	str	r3, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    5946:	2210      	movs	r2, #16
    5948:	68a3      	ldr	r3, [r4, #8]
    594a:	421a      	tst	r2, r3
    594c:	d1fc      	bne.n	5948 <tcc_init+0x384>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
    594e:	683b      	ldr	r3, [r7, #0]
    5950:	6363      	str	r3, [r4, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    5952:	4a24      	ldr	r2, [pc, #144]	; (59e4 <tcc_init+0x420>)
    5954:	68a3      	ldr	r3, [r4, #8]
    5956:	4213      	tst	r3, r2
    5958:	d1fc      	bne.n	5954 <tcc_init+0x390>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
    595a:	687b      	ldr	r3, [r7, #4]
    595c:	6423      	str	r3, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    595e:	9801      	ldr	r0, [sp, #4]
    5960:	2800      	cmp	r0, #0
    5962:	dd25      	ble.n	59b0 <tcc_init+0x3ec>
    5964:	1c3d      	adds	r5, r7, #0
    5966:	351c      	adds	r5, #28
    5968:	2100      	movs	r1, #0
#if (!SAML21) && (!SAMC20) && (!SAMC21)
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    596a:	4e1f      	ldr	r6, [pc, #124]	; (59e8 <tcc_init+0x424>)
    596c:	1c32      	adds	r2, r6, #0
    596e:	408a      	lsls	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21) && (!SAMC20) && (!SAMC21)
		while (hw->SYNCBUSY.reg & (
    5970:	68a3      	ldr	r3, [r4, #8]
    5972:	4213      	tst	r3, r2
    5974:	d1fc      	bne.n	5970 <tcc_init+0x3ac>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
    5976:	cd04      	ldmia	r5!, {r2}
    5978:	1c0b      	adds	r3, r1, #0
    597a:	3310      	adds	r3, #16
    597c:	009b      	lsls	r3, r3, #2
    597e:	18e3      	adds	r3, r4, r3
    5980:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    5982:	3101      	adds	r1, #1
    5984:	4288      	cmp	r0, r1
    5986:	dcf1      	bgt.n	596c <tcc_init+0x3a8>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    5988:	2000      	movs	r0, #0
    598a:	e014      	b.n	59b6 <tcc_init+0x3f2>

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
    598c:	2017      	movs	r0, #23
    598e:	e012      	b.n	59b6 <tcc_init+0x3f2>
    5990:	2017      	movs	r0, #23
    5992:	e010      	b.n	59b6 <tcc_init+0x3f2>
    5994:	2017      	movs	r0, #23
    5996:	e00e      	b.n	59b6 <tcc_init+0x3f2>
    5998:	2017      	movs	r0, #23
    599a:	e00c      	b.n	59b6 <tcc_init+0x3f2>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
    599c:	2017      	movs	r0, #23
    599e:	e00a      	b.n	59b6 <tcc_init+0x3f2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    59a0:	2017      	movs	r0, #23
    59a2:	e008      	b.n	59b6 <tcc_init+0x3f2>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
    59a4:	2017      	movs	r0, #23
    59a6:	e006      	b.n	59b6 <tcc_init+0x3f2>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
    59a8:	2017      	movs	r0, #23
    59aa:	e004      	b.n	59b6 <tcc_init+0x3f2>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
    59ac:	2017      	movs	r0, #23
    59ae:	e002      	b.n	59b6 <tcc_init+0x3f2>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
    59b0:	2000      	movs	r0, #0
    59b2:	e000      	b.n	59b6 <tcc_init+0x3f2>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
    59b4:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
    59b6:	b00f      	add	sp, #60	; 0x3c
    59b8:	bc3c      	pop	{r2, r3, r4, r5}
    59ba:	4690      	mov	r8, r2
    59bc:	4699      	mov	r9, r3
    59be:	46a2      	mov	sl, r4
    59c0:	46ab      	mov	fp, r5
    59c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59c4:	0000b268 	.word	0x0000b268
    59c8:	200004d0 	.word	0x200004d0
    59cc:	0000b24c 	.word	0x0000b24c
    59d0:	000052f1 	.word	0x000052f1
    59d4:	00005265 	.word	0x00005265
    59d8:	0000b26c 	.word	0x0000b26c
    59dc:	000053e9 	.word	0x000053e9
    59e0:	00020040 	.word	0x00020040
    59e4:	00040080 	.word	0x00040080
    59e8:	00080100 	.word	0x00080100

000059ec <tcc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    59ec:	0092      	lsls	r2, r2, #2
    59ee:	1883      	adds	r3, r0, r2
    59f0:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
    59f2:	4b03      	ldr	r3, [pc, #12]	; (5a00 <tcc_register_callback+0x14>)
    59f4:	58d3      	ldr	r3, [r2, r3]
    59f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    59f8:	4313      	orrs	r3, r2
    59fa:	6343      	str	r3, [r0, #52]	; 0x34

	return STATUS_OK;
}
    59fc:	2000      	movs	r0, #0
    59fe:	4770      	bx	lr
    5a00:	0000b274 	.word	0x0000b274

00005a04 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
    5a04:	b538      	push	{r3, r4, r5, lr}
    5a06:	1c04      	adds	r4, r0, #0
    5a08:	1c0d      	adds	r5, r1, #0
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
    5a0a:	6800      	ldr	r0, [r0, #0]
    5a0c:	4b09      	ldr	r3, [pc, #36]	; (5a34 <tcc_enable_callback+0x30>)
    5a0e:	4798      	blx	r3
{
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
    5a10:	4b09      	ldr	r3, [pc, #36]	; (5a38 <tcc_enable_callback+0x34>)
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5a12:	5c1b      	ldrb	r3, [r3, r0]
    5a14:	221f      	movs	r2, #31
    5a16:	4013      	ands	r3, r2
    5a18:	3a1e      	subs	r2, #30
    5a1a:	409a      	lsls	r2, r3
    5a1c:	1c13      	adds	r3, r2, #0
    5a1e:	4a07      	ldr	r2, [pc, #28]	; (5a3c <tcc_enable_callback+0x38>)
    5a20:	6013      	str	r3, [r2, #0]
	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
    5a22:	00ad      	lsls	r5, r5, #2
    5a24:	4b06      	ldr	r3, [pc, #24]	; (5a40 <tcc_enable_callback+0x3c>)
    5a26:	58ea      	ldr	r2, [r5, r3]
    5a28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5a2a:	4313      	orrs	r3, r2
    5a2c:	63a3      	str	r3, [r4, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
    5a2e:	6823      	ldr	r3, [r4, #0]
    5a30:	629a      	str	r2, [r3, #40]	; 0x28
}
    5a32:	bd38      	pop	{r3, r4, r5, pc}
    5a34:	00005449 	.word	0x00005449
    5a38:	0000b270 	.word	0x0000b270
    5a3c:	e000e100 	.word	0xe000e100
    5a40:	0000b274 	.word	0x0000b274

00005a44 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    5a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a46:	4647      	mov	r7, r8
    5a48:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    5a4a:	0080      	lsls	r0, r0, #2
    5a4c:	4b0d      	ldr	r3, [pc, #52]	; (5a84 <_tcc_interrupt_handler+0x40>)
    5a4e:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    5a50:	683b      	ldr	r3, [r7, #0]
    5a52:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    5a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5a56:	401e      	ands	r6, r3
    5a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5a5a:	401e      	ands	r6, r3
    5a5c:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    5a5e:	4b0a      	ldr	r3, [pc, #40]	; (5a88 <_tcc_interrupt_handler+0x44>)
    5a60:	4698      	mov	r8, r3
    5a62:	4643      	mov	r3, r8
    5a64:	58e5      	ldr	r5, [r4, r3]
    5a66:	422e      	tst	r6, r5
    5a68:	d005      	beq.n	5a76 <_tcc_interrupt_handler+0x32>
    5a6a:	193b      	adds	r3, r7, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    5a6c:	685b      	ldr	r3, [r3, #4]
    5a6e:	1c38      	adds	r0, r7, #0
    5a70:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    5a72:	683b      	ldr	r3, [r7, #0]
    5a74:	62dd      	str	r5, [r3, #44]	; 0x2c
    5a76:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    5a78:	2c30      	cmp	r4, #48	; 0x30
    5a7a:	d1f2      	bne.n	5a62 <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    5a7c:	bc04      	pop	{r2}
    5a7e:	4690      	mov	r8, r2
    5a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	200004d0 	.word	0x200004d0
    5a88:	0000b274 	.word	0x0000b274

00005a8c <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    5a8c:	b508      	push	{r3, lr}
    5a8e:	2000      	movs	r0, #0
    5a90:	4b01      	ldr	r3, [pc, #4]	; (5a98 <TCC0_Handler+0xc>)
    5a92:	4798      	blx	r3
    5a94:	bd08      	pop	{r3, pc}
    5a96:	46c0      	nop			; (mov r8, r8)
    5a98:	00005a45 	.word	0x00005a45

00005a9c <TCC1_Handler>:
    5a9c:	b508      	push	{r3, lr}
    5a9e:	2001      	movs	r0, #1
    5aa0:	4b01      	ldr	r3, [pc, #4]	; (5aa8 <TCC1_Handler+0xc>)
    5aa2:	4798      	blx	r3
    5aa4:	bd08      	pop	{r3, pc}
    5aa6:	46c0      	nop			; (mov r8, r8)
    5aa8:	00005a45 	.word	0x00005a45

00005aac <TCC2_Handler>:
    5aac:	b508      	push	{r3, lr}
    5aae:	2002      	movs	r0, #2
    5ab0:	4b01      	ldr	r3, [pc, #4]	; (5ab8 <TCC2_Handler+0xc>)
    5ab2:	4798      	blx	r3
    5ab4:	bd08      	pop	{r3, pc}
    5ab6:	46c0      	nop			; (mov r8, r8)
    5ab8:	00005a45 	.word	0x00005a45

00005abc <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
        while (1) {
        }
    5abc:	e7fe      	b.n	5abc <Dummy_Handler>
    5abe:	46c0      	nop			; (mov r8, r8)

00005ac0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    5ac0:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    5ac2:	4b2e      	ldr	r3, [pc, #184]	; (5b7c <Reset_Handler+0xbc>)
    5ac4:	4a2e      	ldr	r2, [pc, #184]	; (5b80 <Reset_Handler+0xc0>)
    5ac6:	429a      	cmp	r2, r3
    5ac8:	d003      	beq.n	5ad2 <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    5aca:	4b2e      	ldr	r3, [pc, #184]	; (5b84 <Reset_Handler+0xc4>)
    5acc:	4a2b      	ldr	r2, [pc, #172]	; (5b7c <Reset_Handler+0xbc>)
    5ace:	429a      	cmp	r2, r3
    5ad0:	d304      	bcc.n	5adc <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5ad2:	4b2d      	ldr	r3, [pc, #180]	; (5b88 <Reset_Handler+0xc8>)
    5ad4:	4a2d      	ldr	r2, [pc, #180]	; (5b8c <Reset_Handler+0xcc>)
    5ad6:	429a      	cmp	r2, r3
    5ad8:	d310      	bcc.n	5afc <Reset_Handler+0x3c>
    5ada:	e01e      	b.n	5b1a <Reset_Handler+0x5a>
    5adc:	4a2c      	ldr	r2, [pc, #176]	; (5b90 <Reset_Handler+0xd0>)
    5ade:	4b29      	ldr	r3, [pc, #164]	; (5b84 <Reset_Handler+0xc4>)
    5ae0:	3303      	adds	r3, #3
    5ae2:	1a9b      	subs	r3, r3, r2
    5ae4:	089b      	lsrs	r3, r3, #2
    5ae6:	3301      	adds	r3, #1
    5ae8:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5aea:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5aec:	4823      	ldr	r0, [pc, #140]	; (5b7c <Reset_Handler+0xbc>)
    5aee:	4924      	ldr	r1, [pc, #144]	; (5b80 <Reset_Handler+0xc0>)
    5af0:	588c      	ldr	r4, [r1, r2]
    5af2:	5084      	str	r4, [r0, r2]
    5af4:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    5af6:	429a      	cmp	r2, r3
    5af8:	d1fa      	bne.n	5af0 <Reset_Handler+0x30>
    5afa:	e7ea      	b.n	5ad2 <Reset_Handler+0x12>
    5afc:	4a25      	ldr	r2, [pc, #148]	; (5b94 <Reset_Handler+0xd4>)
    5afe:	4b22      	ldr	r3, [pc, #136]	; (5b88 <Reset_Handler+0xc8>)
    5b00:	3303      	adds	r3, #3
    5b02:	1a9b      	subs	r3, r3, r2
    5b04:	089b      	lsrs	r3, r3, #2
    5b06:	3301      	adds	r3, #1
    5b08:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5b0a:	2200      	movs	r2, #0
                *pDest++ = 0;
    5b0c:	481f      	ldr	r0, [pc, #124]	; (5b8c <Reset_Handler+0xcc>)
    5b0e:	2100      	movs	r1, #0
    5b10:	1814      	adds	r4, r2, r0
    5b12:	6021      	str	r1, [r4, #0]
    5b14:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    5b16:	429a      	cmp	r2, r3
    5b18:	d1fa      	bne.n	5b10 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5b1a:	4a1f      	ldr	r2, [pc, #124]	; (5b98 <Reset_Handler+0xd8>)
    5b1c:	21ff      	movs	r1, #255	; 0xff
    5b1e:	4b1f      	ldr	r3, [pc, #124]	; (5b9c <Reset_Handler+0xdc>)
    5b20:	438b      	bics	r3, r1
    5b22:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    5b24:	39fd      	subs	r1, #253	; 0xfd
    5b26:	2390      	movs	r3, #144	; 0x90
    5b28:	005b      	lsls	r3, r3, #1
    5b2a:	4a1d      	ldr	r2, [pc, #116]	; (5ba0 <Reset_Handler+0xe0>)
    5b2c:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    5b2e:	481d      	ldr	r0, [pc, #116]	; (5ba4 <Reset_Handler+0xe4>)
    5b30:	78c3      	ldrb	r3, [r0, #3]
    5b32:	2403      	movs	r4, #3
    5b34:	43a3      	bics	r3, r4
    5b36:	2202      	movs	r2, #2
    5b38:	4313      	orrs	r3, r2
    5b3a:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    5b3c:	78c3      	ldrb	r3, [r0, #3]
    5b3e:	260c      	movs	r6, #12
    5b40:	43b3      	bics	r3, r6
    5b42:	2108      	movs	r1, #8
    5b44:	430b      	orrs	r3, r1
    5b46:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    5b48:	4b17      	ldr	r3, [pc, #92]	; (5ba8 <Reset_Handler+0xe8>)
    5b4a:	7b98      	ldrb	r0, [r3, #14]
    5b4c:	2530      	movs	r5, #48	; 0x30
    5b4e:	43a8      	bics	r0, r5
    5b50:	1c05      	adds	r5, r0, #0
    5b52:	2020      	movs	r0, #32
    5b54:	4328      	orrs	r0, r5
    5b56:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    5b58:	7b98      	ldrb	r0, [r3, #14]
    5b5a:	43b0      	bics	r0, r6
    5b5c:	4301      	orrs	r1, r0
    5b5e:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    5b60:	7b99      	ldrb	r1, [r3, #14]
    5b62:	43a1      	bics	r1, r4
    5b64:	430a      	orrs	r2, r1
    5b66:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    5b68:	4a10      	ldr	r2, [pc, #64]	; (5bac <Reset_Handler+0xec>)
    5b6a:	6851      	ldr	r1, [r2, #4]
    5b6c:	2380      	movs	r3, #128	; 0x80
    5b6e:	430b      	orrs	r3, r1
    5b70:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    5b72:	4b0f      	ldr	r3, [pc, #60]	; (5bb0 <Reset_Handler+0xf0>)
    5b74:	4798      	blx	r3

        /* Branch to main function */
        main();
    5b76:	4b0f      	ldr	r3, [pc, #60]	; (5bb4 <Reset_Handler+0xf4>)
    5b78:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    5b7a:	e7fe      	b.n	5b7a <Reset_Handler+0xba>
    5b7c:	20000000 	.word	0x20000000
    5b80:	0000c674 	.word	0x0000c674
    5b84:	20000144 	.word	0x20000144
    5b88:	2000076c 	.word	0x2000076c
    5b8c:	20000144 	.word	0x20000144
    5b90:	20000004 	.word	0x20000004
    5b94:	20000148 	.word	0x20000148
    5b98:	e000ed00 	.word	0xe000ed00
    5b9c:	00000000 	.word	0x00000000
    5ba0:	41007000 	.word	0x41007000
    5ba4:	41005000 	.word	0x41005000
    5ba8:	41004800 	.word	0x41004800
    5bac:	41004000 	.word	0x41004000
    5bb0:	000089f1 	.word	0x000089f1
    5bb4:	00006fd5 	.word	0x00006fd5

00005bb8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    5bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bba:	4647      	mov	r7, r8
    5bbc:	b480      	push	{r7}
    5bbe:	1c0c      	adds	r4, r1, #0
    5bc0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    5bc2:	2800      	cmp	r0, #0
    5bc4:	d110      	bne.n	5be8 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
    5bc6:	2a00      	cmp	r2, #0
    5bc8:	dd0a      	ble.n	5be0 <_read+0x28>
    5bca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    5bcc:	4e09      	ldr	r6, [pc, #36]	; (5bf4 <_read+0x3c>)
    5bce:	4d0a      	ldr	r5, [pc, #40]	; (5bf8 <_read+0x40>)
    5bd0:	6830      	ldr	r0, [r6, #0]
    5bd2:	1c21      	adds	r1, r4, #0
    5bd4:	682b      	ldr	r3, [r5, #0]
    5bd6:	4798      	blx	r3
		ptr++;
    5bd8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    5bda:	42bc      	cmp	r4, r7
    5bdc:	d1f8      	bne.n	5bd0 <_read+0x18>
    5bde:	e001      	b.n	5be4 <_read+0x2c>
    5be0:	2300      	movs	r3, #0
    5be2:	4698      	mov	r8, r3
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    5be4:	4640      	mov	r0, r8
    5be6:	e001      	b.n	5bec <_read+0x34>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    5be8:	2001      	movs	r0, #1
    5bea:	4240      	negs	r0, r0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
    5bec:	bc04      	pop	{r2}
    5bee:	4690      	mov	r8, r2
    5bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bf2:	46c0      	nop			; (mov r8, r8)
    5bf4:	200004e4 	.word	0x200004e4
    5bf8:	200004dc 	.word	0x200004dc

00005bfc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    5bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bfe:	4647      	mov	r7, r8
    5c00:	b480      	push	{r7}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    5c02:	3801      	subs	r0, #1
    5c04:	2802      	cmp	r0, #2
    5c06:	d815      	bhi.n	5c34 <_write+0x38>
		return -1;
	}

	for (; len != 0; --len) {
    5c08:	2a00      	cmp	r2, #0
    5c0a:	d010      	beq.n	5c2e <_write+0x32>
    5c0c:	1c15      	adds	r5, r2, #0
    5c0e:	1c0e      	adds	r6, r1, #0
    5c10:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    5c12:	4b0c      	ldr	r3, [pc, #48]	; (5c44 <_write+0x48>)
    5c14:	4698      	mov	r8, r3
    5c16:	4f0c      	ldr	r7, [pc, #48]	; (5c48 <_write+0x4c>)
    5c18:	4643      	mov	r3, r8
    5c1a:	6818      	ldr	r0, [r3, #0]
    5c1c:	5d31      	ldrb	r1, [r6, r4]
    5c1e:	683b      	ldr	r3, [r7, #0]
    5c20:	4798      	blx	r3
    5c22:	2800      	cmp	r0, #0
    5c24:	db09      	blt.n	5c3a <_write+0x3e>
			return -1;
		}
		++nChars;
    5c26:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    5c28:	42a5      	cmp	r5, r4
    5c2a:	d1f5      	bne.n	5c18 <_write+0x1c>
    5c2c:	e000      	b.n	5c30 <_write+0x34>
    5c2e:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    5c30:	1c20      	adds	r0, r4, #0
    5c32:	e004      	b.n	5c3e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    5c34:	2001      	movs	r0, #1
    5c36:	4240      	negs	r0, r0
    5c38:	e001      	b.n	5c3e <_write+0x42>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    5c3a:	2001      	movs	r0, #1
    5c3c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
    5c3e:	bc04      	pop	{r2}
    5c40:	4690      	mov	r8, r2
    5c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c44:	200004e4 	.word	0x200004e4
    5c48:	200004e0 	.word	0x200004e0

00005c4c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    5c4c:	1c03      	adds	r3, r0, #0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    5c4e:	4a06      	ldr	r2, [pc, #24]	; (5c68 <_sbrk+0x1c>)
    5c50:	6812      	ldr	r2, [r2, #0]
    5c52:	2a00      	cmp	r2, #0
    5c54:	d102      	bne.n	5c5c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
    5c56:	4905      	ldr	r1, [pc, #20]	; (5c6c <_sbrk+0x20>)
    5c58:	4a03      	ldr	r2, [pc, #12]	; (5c68 <_sbrk+0x1c>)
    5c5a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
    5c5c:	4a02      	ldr	r2, [pc, #8]	; (5c68 <_sbrk+0x1c>)
    5c5e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    5c60:	18c3      	adds	r3, r0, r3
    5c62:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    5c64:	4770      	bx	lr
    5c66:	46c0      	nop			; (mov r8, r8)
    5c68:	200001d8 	.word	0x200001d8
    5c6c:	20002770 	.word	0x20002770

00005c70 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    5c70:	2001      	movs	r0, #1
    5c72:	4240      	negs	r0, r0
    5c74:	4770      	bx	lr
    5c76:	46c0      	nop			; (mov r8, r8)

00005c78 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    5c78:	2380      	movs	r3, #128	; 0x80
    5c7a:	019b      	lsls	r3, r3, #6
    5c7c:	604b      	str	r3, [r1, #4]

	return 0;
}
    5c7e:	2000      	movs	r0, #0
    5c80:	4770      	bx	lr
    5c82:	46c0      	nop			; (mov r8, r8)

00005c84 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    5c84:	2001      	movs	r0, #1
    5c86:	4770      	bx	lr

00005c88 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    5c88:	2000      	movs	r0, #0
    5c8a:	4770      	bx	lr

00005c8c <_thethingsio_example_http_get_contents_type>:
}

const char* _thethingsio_example_http_get_contents_type(void *priv_data)
{
	return (const char*)THETHINGSIO_EXAMPLE_HTTP_CONTENT_TYPE;
}
    5c8c:	4800      	ldr	r0, [pc, #0]	; (5c90 <_thethingsio_example_http_get_contents_type+0x4>)
    5c8e:	4770      	bx	lr
    5c90:	0000b2b8 	.word	0x0000b2b8

00005c94 <_thethingsio_example_http_close>:
	
}

void _thethingsio_example_http_close(void *priv_data)
{
    5c94:	4770      	bx	lr
    5c96:	46c0      	nop			; (mov r8, r8)

00005c98 <_thethingsio_example_http_get_contents_length>:
{
	return (const char*)THETHINGSIO_EXAMPLE_HTTP_CONTENT_TYPE;
}

int _thethingsio_example_http_get_contents_length(void *priv_data)
{
    5c98:	b508      	push	{r3, lr}
	return strlen( (char*)priv_data);
    5c9a:	4b01      	ldr	r3, [pc, #4]	; (5ca0 <_thethingsio_example_http_get_contents_length+0x8>)
    5c9c:	4798      	blx	r3
}
    5c9e:	bd08      	pop	{r3, pc}
    5ca0:	0000925d 	.word	0x0000925d

00005ca4 <_thethingsio_example_http_read>:

int _thethingsio_example_http_read(void *priv_data, char *buffer, uint32_t size, uint32_t written)
{
    5ca4:	b570      	push	{r4, r5, r6, lr}
	int32_t length = 0;
	
	if(priv_data)
    5ca6:	2800      	cmp	r0, #0
    5ca8:	d00a      	beq.n	5cc0 <_thethingsio_example_http_read+0x1c>
    5caa:	1c0d      	adds	r5, r1, #0
    5cac:	1c04      	adds	r4, r0, #0
	{
		length = strlen( (char*)priv_data);
    5cae:	4b06      	ldr	r3, [pc, #24]	; (5cc8 <_thethingsio_example_http_read+0x24>)
    5cb0:	4798      	blx	r3
    5cb2:	1c02      	adds	r2, r0, #0
    5cb4:	1c06      	adds	r6, r0, #0
		memcpy(buffer,(char*)priv_data, length);
    5cb6:	1c28      	adds	r0, r5, #0
    5cb8:	1c21      	adds	r1, r4, #0
    5cba:	4b04      	ldr	r3, [pc, #16]	; (5ccc <_thethingsio_example_http_read+0x28>)
    5cbc:	4798      	blx	r3
    5cbe:	e000      	b.n	5cc2 <_thethingsio_example_http_read+0x1e>
	return strlen( (char*)priv_data);
}

int _thethingsio_example_http_read(void *priv_data, char *buffer, uint32_t size, uint32_t written)
{
	int32_t length = 0;
    5cc0:	2600      	movs	r6, #0
		length = strlen( (char*)priv_data);
		memcpy(buffer,(char*)priv_data, length);
	}
	
	return length;
}
    5cc2:	1c30      	adds	r0, r6, #0
    5cc4:	bd70      	pop	{r4, r5, r6, pc}
    5cc6:	46c0      	nop			; (mov r8, r8)
    5cc8:	0000925d 	.word	0x0000925d
    5ccc:	00008a65 	.word	0x00008a65

00005cd0 <mqtt_callback>:


static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
    5cd0:	b570      	push	{r4, r5, r6, lr}
    5cd2:	b086      	sub	sp, #24
    5cd4:	1c06      	adds	r6, r0, #0
    5cd6:	1c0c      	adds	r4, r1, #0
    5cd8:	1c15      	adds	r5, r2, #0
	printf("MQTT CALLBACK ENTER"DEBUG_EOL);
    5cda:	4835      	ldr	r0, [pc, #212]	; (5db0 <mqtt_callback+0xe0>)
    5cdc:	4b35      	ldr	r3, [pc, #212]	; (5db4 <mqtt_callback+0xe4>)
    5cde:	4798      	blx	r3
	switch (type) {
    5ce0:	2c01      	cmp	r4, #1
    5ce2:	d031      	beq.n	5d48 <mqtt_callback+0x78>
    5ce4:	dc02      	bgt.n	5cec <mqtt_callback+0x1c>
    5ce6:	2c00      	cmp	r4, #0
    5ce8:	d005      	beq.n	5cf6 <mqtt_callback+0x26>
    5cea:	e05f      	b.n	5dac <mqtt_callback+0xdc>
    5cec:	2c05      	cmp	r4, #5
    5cee:	d056      	beq.n	5d9e <mqtt_callback+0xce>
    5cf0:	2c06      	cmp	r4, #6
    5cf2:	d03e      	beq.n	5d72 <mqtt_callback+0xa2>
    5cf4:	e05a      	b.n	5dac <mqtt_callback+0xdc>
	case MQTT_CALLBACK_SOCK_CONNECTED:
	{
		printf("MQTT SOCK CONNECTED"DEBUG_EOL);
    5cf6:	4830      	ldr	r0, [pc, #192]	; (5db8 <mqtt_callback+0xe8>)
    5cf8:	4b2e      	ldr	r3, [pc, #184]	; (5db4 <mqtt_callback+0xe4>)
    5cfa:	4798      	blx	r3
		/*
		 * If connecting to broker server is complete successfully, Start sending CONNECT message of MQTT.
		 * Or else retry to connect to broker server.
		 */
		if (data->sock_connected.result >= 0) {
    5cfc:	682b      	ldr	r3, [r5, #0]
    5cfe:	2b00      	cmp	r3, #0
    5d00:	db18      	blt.n	5d34 <mqtt_callback+0x64>
			printf("mqtt connect broker"DEBUG_EOL);
    5d02:	482e      	ldr	r0, [pc, #184]	; (5dbc <mqtt_callback+0xec>)
    5d04:	4b2b      	ldr	r3, [pc, #172]	; (5db4 <mqtt_callback+0xe4>)
    5d06:	4798      	blx	r3
		    printf("socket %i", data->sock_connected.result);		
    5d08:	6829      	ldr	r1, [r5, #0]
    5d0a:	482d      	ldr	r0, [pc, #180]	; (5dc0 <mqtt_callback+0xf0>)
    5d0c:	4c2d      	ldr	r4, [pc, #180]	; (5dc4 <mqtt_callback+0xf4>)
    5d0e:	47a0      	blx	r4
			int response = mqtt_connect_broker(module_inst, 1, NULL, NULL, gau0TheThingsIOHttpSubsURL, NULL, NULL, 0, 0, 0);
    5d10:	4d2d      	ldr	r5, [pc, #180]	; (5dc8 <mqtt_callback+0xf8>)
    5d12:	9500      	str	r5, [sp, #0]
    5d14:	2300      	movs	r3, #0
    5d16:	9301      	str	r3, [sp, #4]
    5d18:	9302      	str	r3, [sp, #8]
    5d1a:	9303      	str	r3, [sp, #12]
    5d1c:	9304      	str	r3, [sp, #16]
    5d1e:	9305      	str	r3, [sp, #20]
    5d20:	1c30      	adds	r0, r6, #0
    5d22:	2101      	movs	r1, #1
    5d24:	2200      	movs	r2, #0
    5d26:	4e29      	ldr	r6, [pc, #164]	; (5dcc <mqtt_callback+0xfc>)
    5d28:	47b0      	blx	r6
    5d2a:	1c02      	adds	r2, r0, #0
			// int response = mqtt_connect_broker(module_inst, 1, "1", "test", NULL, NULL, NULL, 0, 0, 0);
			printf("response %s %i"DEBUG_EOL,gau0TheThingsIOHttpSubsURL, response);
    5d2c:	4828      	ldr	r0, [pc, #160]	; (5dd0 <mqtt_callback+0x100>)
    5d2e:	1c29      	adds	r1, r5, #0
    5d30:	47a0      	blx	r4
    5d32:	e03b      	b.n	5dac <mqtt_callback+0xdc>
		} else {
			printf("Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
    5d34:	4c27      	ldr	r4, [pc, #156]	; (5dd4 <mqtt_callback+0x104>)
    5d36:	4828      	ldr	r0, [pc, #160]	; (5dd8 <mqtt_callback+0x108>)
    5d38:	1c21      	adds	r1, r4, #0
    5d3a:	4b22      	ldr	r3, [pc, #136]	; (5dc4 <mqtt_callback+0xf4>)
    5d3c:	4798      	blx	r3
			mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
    5d3e:	1c30      	adds	r0, r6, #0
    5d40:	1c21      	adds	r1, r4, #0
    5d42:	4b26      	ldr	r3, [pc, #152]	; (5ddc <mqtt_callback+0x10c>)
    5d44:	4798      	blx	r3
    5d46:	e031      	b.n	5dac <mqtt_callback+0xdc>
		}
	}
	break;

	case MQTT_CALLBACK_CONNECTED:
		if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
    5d48:	7829      	ldrb	r1, [r5, #0]
    5d4a:	2900      	cmp	r1, #0
    5d4c:	d10d      	bne.n	5d6a <mqtt_callback+0x9a>
			/* Subscribe chat topic. */
			/* the subscribe topic in the subscribe endpoint */
			printf("subscribe topic %s"DEBUG_EOL, gau0TheThingsIOHttpSubsURL);
    5d4e:	4c1e      	ldr	r4, [pc, #120]	; (5dc8 <mqtt_callback+0xf8>)
    5d50:	4823      	ldr	r0, [pc, #140]	; (5de0 <mqtt_callback+0x110>)
    5d52:	1c21      	adds	r1, r4, #0
    5d54:	4b1b      	ldr	r3, [pc, #108]	; (5dc4 <mqtt_callback+0xf4>)
    5d56:	4798      	blx	r3
			mqtt_subscribe(module_inst, gau0TheThingsIOHttpSubsURL, 0);
    5d58:	1c30      	adds	r0, r6, #0
    5d5a:	1c21      	adds	r1, r4, #0
    5d5c:	2200      	movs	r2, #0
    5d5e:	4b21      	ldr	r3, [pc, #132]	; (5de4 <mqtt_callback+0x114>)
    5d60:	4798      	blx	r3
			/* Enable USART receiving callback. */
			
			// TODO we have mqtt connection
			//usart_enable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
			printf("Preparation of the chat has been completed.\r\n");
    5d62:	4821      	ldr	r0, [pc, #132]	; (5de8 <mqtt_callback+0x118>)
    5d64:	4b13      	ldr	r3, [pc, #76]	; (5db4 <mqtt_callback+0xe4>)
    5d66:	4798      	blx	r3
    5d68:	e020      	b.n	5dac <mqtt_callback+0xdc>
		} else {
			/* Cannot connect for some reason. */
			printf("MQTT broker decline your access! error code %d\r\n", data->connected.result);
    5d6a:	4820      	ldr	r0, [pc, #128]	; (5dec <mqtt_callback+0x11c>)
    5d6c:	4b15      	ldr	r3, [pc, #84]	; (5dc4 <mqtt_callback+0xf4>)
    5d6e:	4798      	blx	r3
    5d70:	e01c      	b.n	5dac <mqtt_callback+0xdc>
		}

		break;

	case MQTT_CALLBACK_RECV_PUBLISH:
		printf("recieve publish"DEBUG_EOL);
    5d72:	481f      	ldr	r0, [pc, #124]	; (5df0 <mqtt_callback+0x120>)
    5d74:	4b0f      	ldr	r3, [pc, #60]	; (5db4 <mqtt_callback+0xe4>)
    5d76:	4798      	blx	r3
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
    5d78:	682b      	ldr	r3, [r5, #0]
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d016      	beq.n	5dac <mqtt_callback+0xdc>
    5d7e:	68ab      	ldr	r3, [r5, #8]
    5d80:	2b00      	cmp	r3, #0
    5d82:	d013      	beq.n	5dac <mqtt_callback+0xdc>
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    5d84:	68eb      	ldr	r3, [r5, #12]
    5d86:	2b00      	cmp	r3, #0
    5d88:	dd10      	ble.n	5dac <mqtt_callback+0xdc>
    5d8a:	2400      	movs	r4, #0
					printf("%c", data->recv_publish.msg[i]);
    5d8c:	4e19      	ldr	r6, [pc, #100]	; (5df4 <mqtt_callback+0x124>)
    5d8e:	68ab      	ldr	r3, [r5, #8]
    5d90:	5d18      	ldrb	r0, [r3, r4]
    5d92:	47b0      	blx	r6

	case MQTT_CALLBACK_RECV_PUBLISH:
		printf("recieve publish"DEBUG_EOL);
		/* You received publish message which you had subscribed. */
		if (data->recv_publish.topic != NULL && data->recv_publish.msg != NULL) {
				for (int i = 0; i < data->recv_publish.msg_size; i++) {
    5d94:	3401      	adds	r4, #1
    5d96:	68eb      	ldr	r3, [r5, #12]
    5d98:	42a3      	cmp	r3, r4
    5d9a:	dcf8      	bgt.n	5d8e <mqtt_callback+0xbe>
    5d9c:	e006      	b.n	5dac <mqtt_callback+0xdc>

		break;

	case MQTT_CALLBACK_DISCONNECTED:
		/* Stop timer and USART callback. */
		printf("MQTT disconnected\r\n");
    5d9e:	4816      	ldr	r0, [pc, #88]	; (5df8 <mqtt_callback+0x128>)
    5da0:	4b04      	ldr	r3, [pc, #16]	; (5db4 <mqtt_callback+0xe4>)
    5da2:	4798      	blx	r3
		
		if (gboolAlwaysMQTTConnected)
		{	
			mqtt_connect(module_inst, main_mqtt_broker);
    5da4:	1c30      	adds	r0, r6, #0
    5da6:	490b      	ldr	r1, [pc, #44]	; (5dd4 <mqtt_callback+0x104>)
    5da8:	4b0c      	ldr	r3, [pc, #48]	; (5ddc <mqtt_callback+0x10c>)
    5daa:	4798      	blx	r3
		
		// TODO we don't have mqtt connection
		//usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
		break;
	}
}
    5dac:	b006      	add	sp, #24
    5dae:	bd70      	pop	{r4, r5, r6, pc}
    5db0:	0000b2cc 	.word	0x0000b2cc
    5db4:	00008d0d 	.word	0x00008d0d
    5db8:	0000b2e4 	.word	0x0000b2e4
    5dbc:	0000b2fc 	.word	0x0000b2fc
    5dc0:	0000b314 	.word	0x0000b314
    5dc4:	00008bed 	.word	0x00008bed
    5dc8:	20000064 	.word	0x20000064
    5dcc:	000076a1 	.word	0x000076a1
    5dd0:	0000b320 	.word	0x0000b320
    5dd4:	0000b2a4 	.word	0x0000b2a4
    5dd8:	0000b334 	.word	0x0000b334
    5ddc:	0000758d 	.word	0x0000758d
    5de0:	0000b36c 	.word	0x0000b36c
    5de4:	00007951 	.word	0x00007951
    5de8:	0000b384 	.word	0x0000b384
    5dec:	0000b3b4 	.word	0x0000b3b4
    5df0:	0000b3e8 	.word	0x0000b3e8
    5df4:	00008c21 	.word	0x00008c21
    5df8:	0000b3fc 	.word	0x0000b3fc

00005dfc <thethingsio_example_http_init>:
int					_thethingsio_example_http_get_contents_length(void *priv_data);
int					_thethingsio_example_http_read(void *priv_data, char *buffer, uint32_t size, uint32_t written);
void				_thethingsio_example_http_close(void *priv_data);

bool  thethingsio_example_http_init(thethingsio_http_cb cb)
{
    5dfc:	b530      	push	{r4, r5, lr}
    5dfe:	b089      	sub	sp, #36	; 0x24
    5e00:	1c05      	adds	r5, r0, #0
	DEBUG(DEBUG_CONF_THETHINGSIO"thethingsio_example_init"DEBUG_EOL);
    5e02:	4819      	ldr	r0, [pc, #100]	; (5e68 <thethingsio_example_http_init+0x6c>)
    5e04:	4b19      	ldr	r3, [pc, #100]	; (5e6c <thethingsio_example_http_init+0x70>)
    5e06:	4798      	blx	r3
 * \brief Configure Timer module.
 */
static void _thethingsio_example_configure_timer(void)
{
	struct sw_timer_config swt_conf;
	sw_timer_get_config_defaults(&swt_conf);
    5e08:	a801      	add	r0, sp, #4
    5e0a:	4b19      	ldr	r3, [pc, #100]	; (5e70 <thethingsio_example_http_init+0x74>)
    5e0c:	4798      	blx	r3

	sw_timer_init(&swt_module_inst, &swt_conf);
    5e0e:	4c19      	ldr	r4, [pc, #100]	; (5e74 <thethingsio_example_http_init+0x78>)
    5e10:	1c20      	adds	r0, r4, #0
    5e12:	a901      	add	r1, sp, #4
    5e14:	4b18      	ldr	r3, [pc, #96]	; (5e78 <thethingsio_example_http_init+0x7c>)
    5e16:	4798      	blx	r3
	sw_timer_enable(&swt_module_inst);
    5e18:	1c20      	adds	r0, r4, #0
    5e1a:	4b18      	ldr	r3, [pc, #96]	; (5e7c <thethingsio_example_http_init+0x80>)
    5e1c:	4798      	blx	r3
static bool _thethingsio_example_configure_http_client(thethingsio_http_cb cb)
{
	struct http_client_config httpc_conf;
	int ret;

	http_client_get_config_defaults(&httpc_conf);
    5e1e:	a801      	add	r0, sp, #4
    5e20:	4b17      	ldr	r3, [pc, #92]	; (5e80 <thethingsio_example_http_init+0x84>)
    5e22:	4798      	blx	r3

	// httpc_conf.recv_buffer_size = 256;
	httpc_conf.recv_buffer_size = 512;
    5e24:	2380      	movs	r3, #128	; 0x80
    5e26:	009b      	lsls	r3, r3, #2
    5e28:	9305      	str	r3, [sp, #20]
	httpc_conf.send_buffer_size = 1024;
    5e2a:	2380      	movs	r3, #128	; 0x80
    5e2c:	00db      	lsls	r3, r3, #3
    5e2e:	9306      	str	r3, [sp, #24]
	httpc_conf.timer_inst = &swt_module_inst;
    5e30:	9402      	str	r4, [sp, #8]
	/* ipinfo.io send json format data if only client is a curl. */
	httpc_conf.user_agent = "curl/7.10.6";
    5e32:	4b14      	ldr	r3, [pc, #80]	; (5e84 <thethingsio_example_http_init+0x88>)
    5e34:	9307      	str	r3, [sp, #28]

	ret = http_client_init(&http_client_module_inst, &httpc_conf);
    5e36:	4814      	ldr	r0, [pc, #80]	; (5e88 <thethingsio_example_http_init+0x8c>)
    5e38:	a901      	add	r1, sp, #4
    5e3a:	4b14      	ldr	r3, [pc, #80]	; (5e8c <thethingsio_example_http_init+0x90>)
    5e3c:	4798      	blx	r3
	if (ret < 0) {
    5e3e:	2800      	cmp	r0, #0
    5e40:	da0a      	bge.n	5e58 <thethingsio_example_http_init+0x5c>
		DEBUG(DEBUG_CONF_THETHINGSIO"HTTP client initialization has failed(%s)"DEBUG_EOL, strerror(ret));
    5e42:	4b13      	ldr	r3, [pc, #76]	; (5e90 <thethingsio_example_http_init+0x94>)
    5e44:	4798      	blx	r3
    5e46:	1c01      	adds	r1, r0, #0
    5e48:	4812      	ldr	r0, [pc, #72]	; (5e94 <thethingsio_example_http_init+0x98>)
    5e4a:	4b13      	ldr	r3, [pc, #76]	; (5e98 <thethingsio_example_http_init+0x9c>)
    5e4c:	4798      	blx	r3
	/* Initialize the Timer. */
	_thethingsio_example_configure_timer();
	/* Initialize the HTTP client service. */
	if( !_thethingsio_example_configure_http_client(cb) )
	{
		DEBUG(DEBUG_CONF_THETHINGSIO"Error : thethingsio_example_init"DEBUG_EOL);
    5e4e:	4813      	ldr	r0, [pc, #76]	; (5e9c <thethingsio_example_http_init+0xa0>)
    5e50:	4b06      	ldr	r3, [pc, #24]	; (5e6c <thethingsio_example_http_init+0x70>)
    5e52:	4798      	blx	r3
		return false;
    5e54:	2000      	movs	r0, #0
    5e56:	e004      	b.n	5e62 <thethingsio_example_http_init+0x66>
		DEBUG(DEBUG_CONF_THETHINGSIO"HTTP client initialization has failed(%s)"DEBUG_EOL, strerror(ret));
		return false;
	}
	

	http_client_register_callback(&http_client_module_inst, cb);
    5e58:	480b      	ldr	r0, [pc, #44]	; (5e88 <thethingsio_example_http_init+0x8c>)
    5e5a:	1c29      	adds	r1, r5, #0
    5e5c:	4b10      	ldr	r3, [pc, #64]	; (5ea0 <thethingsio_example_http_init+0xa4>)
    5e5e:	4798      	blx	r3
	if( !_thethingsio_example_configure_http_client(cb) )
	{
		DEBUG(DEBUG_CONF_THETHINGSIO"Error : thethingsio_example_init"DEBUG_EOL);
		return false;
	}
	return true;
    5e60:	2001      	movs	r0, #1
}
    5e62:	b009      	add	sp, #36	; 0x24
    5e64:	bd30      	pop	{r4, r5, pc}
    5e66:	46c0      	nop			; (mov r8, r8)
    5e68:	0000b410 	.word	0x0000b410
    5e6c:	00008d0d 	.word	0x00008d0d
    5e70:	00006b4d 	.word	0x00006b4d
    5e74:	200005d0 	.word	0x200005d0
    5e78:	00006b59 	.word	0x00006b59
    5e7c:	00006c05 	.word	0x00006c05
    5e80:	000061c1 	.word	0x000061c1
    5e84:	0000b438 	.word	0x0000b438
    5e88:	20000628 	.word	0x20000628
    5e8c:	000061e9 	.word	0x000061e9
    5e90:	00009245 	.word	0x00009245
    5e94:	0000b444 	.word	0x0000b444
    5e98:	00008bed 	.word	0x00008bed
    5e9c:	0000b480 	.word	0x0000b480
    5ea0:	0000629d 	.word	0x0000629d

00005ea4 <thethingsio_example_load_thing_token_nvm>:
	}
	return true;
}
/* if yes, load thing token from memory */
uint8_t thethingsio_example_load_thing_token_nvm(void) 
{
    5ea4:	b530      	push	{r4, r5, lr}
    5ea6:	b091      	sub	sp, #68	; 0x44
	/* check for valid thing token in NVM of device */
	uint8_t readBuffer_Temp[NVMCTRL_PAGE_SIZE] = { 0, };
    5ea8:	4668      	mov	r0, sp
    5eaa:	2100      	movs	r1, #0
    5eac:	2240      	movs	r2, #64	; 0x40
    5eae:	4b12      	ldr	r3, [pc, #72]	; (5ef8 <thethingsio_example_load_thing_token_nvm+0x54>)
    5eb0:	4798      	blx	r3
	uint8_t readToken_Temp[NVMCTRL_PAGE_SIZE] = { 0, };
		
	enum status_code status = nvm_read_buffer(NVM_ADDR_THING_TOKEN, readBuffer_Temp, NVMCTRL_PAGE_SIZE);
    5eb2:	4812      	ldr	r0, [pc, #72]	; (5efc <thethingsio_example_load_thing_token_nvm+0x58>)
    5eb4:	4669      	mov	r1, sp
    5eb6:	2240      	movs	r2, #64	; 0x40
    5eb8:	4b11      	ldr	r3, [pc, #68]	; (5f00 <thethingsio_example_load_thing_token_nvm+0x5c>)
    5eba:	4798      	blx	r3
    5ebc:	1e01      	subs	r1, r0, #0

	if(status != STATUS_OK) {
    5ebe:	d004      	beq.n	5eca <thethingsio_example_load_thing_token_nvm+0x26>
		printf("load thing token, read thing token error (0x%x)\r\n", status);
    5ec0:	4810      	ldr	r0, [pc, #64]	; (5f04 <thethingsio_example_load_thing_token_nvm+0x60>)
    5ec2:	4b11      	ldr	r3, [pc, #68]	; (5f08 <thethingsio_example_load_thing_token_nvm+0x64>)
    5ec4:	4798      	blx	r3
		return false;
    5ec6:	2000      	movs	r0, #0
    5ec8:	e013      	b.n	5ef2 <thethingsio_example_load_thing_token_nvm+0x4e>
	
	
	// update thingsiO read write URL
	uint8_t thing_token_offset = sizeof(gau8TheThingsiOHttpRWUrl) - THETHINGSIO_EXAMPLE_THING_TOKEN_LENGTH - 1;
	
	memcpy((gau8TheThingsiOHttpRWUrl+thing_token_offset), readBuffer_Temp, THETHINGSIO_EXAMPLE_THING_TOKEN_LENGTH);	
    5eca:	4810      	ldr	r0, [pc, #64]	; (5f0c <thethingsio_example_load_thing_token_nvm+0x68>)
    5ecc:	3022      	adds	r0, #34	; 0x22
    5ece:	4669      	mov	r1, sp
    5ed0:	222b      	movs	r2, #43	; 0x2b
    5ed2:	4c0f      	ldr	r4, [pc, #60]	; (5f10 <thethingsio_example_load_thing_token_nvm+0x6c>)
    5ed4:	47a0      	blx	r4
	
	// update thingIO subscribe URL
	// add by jb to support subscription
	uint8_t things_token_subscribe_offset = sizeof(gau0TheThingsIOHttpSubsURL) - THETHINGSIO_EXAMPLE_THING_TOKEN_LENGTH -1;
	memcpy((gau0TheThingsIOHttpSubsURL+things_token_subscribe_offset), readBuffer_Temp, THETHINGSIO_EXAMPLE_THING_TOKEN_LENGTH);
    5ed6:	4d0f      	ldr	r5, [pc, #60]	; (5f14 <thethingsio_example_load_thing_token_nvm+0x70>)
    5ed8:	1c28      	adds	r0, r5, #0
    5eda:	300a      	adds	r0, #10
    5edc:	4669      	mov	r1, sp
    5ede:	222b      	movs	r2, #43	; 0x2b
    5ee0:	47a0      	blx	r4
	printf("subscribe thing token %s", readBuffer_Temp);
    5ee2:	480d      	ldr	r0, [pc, #52]	; (5f18 <thethingsio_example_load_thing_token_nvm+0x74>)
    5ee4:	4669      	mov	r1, sp
    5ee6:	4c08      	ldr	r4, [pc, #32]	; (5f08 <thethingsio_example_load_thing_token_nvm+0x64>)
    5ee8:	47a0      	blx	r4
	printf("URL subscription %s"DEBUG_EOL, gau0TheThingsIOHttpSubsURL);
    5eea:	480c      	ldr	r0, [pc, #48]	; (5f1c <thethingsio_example_load_thing_token_nvm+0x78>)
    5eec:	1c29      	adds	r1, r5, #0
    5eee:	47a0      	blx	r4
	// memcpy((gau0TheThingsIOHttpSubsURL+things_token_subscribe_offset + sizeof(KEEP_ALIVE_VALUE)), KEEP_ALIVE_VALUE, sizeof(KEEP_ALIVE_VALUE));
	
	
	return true;
    5ef0:	2001      	movs	r0, #1
}
    5ef2:	b011      	add	sp, #68	; 0x44
    5ef4:	bd30      	pop	{r4, r5, pc}
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	00008a9f 	.word	0x00008a9f
    5efc:	0003e200 	.word	0x0003e200
    5f00:	000034f5 	.word	0x000034f5
    5f04:	0000b514 	.word	0x0000b514
    5f08:	00008bed 	.word	0x00008bed
    5f0c:	20000014 	.word	0x20000014
    5f10:	00008a65 	.word	0x00008a65
    5f14:	20000064 	.word	0x20000064
    5f18:	0000b548 	.word	0x0000b548
    5f1c:	0000b564 	.word	0x0000b564

00005f20 <thethingsio_example_write_thing_token_nvm>:



/* if not, save new thing token to memory and use it */
uint8_t thethingsio_example_write_thing_token_nvm(char * thing_token)
{	
    5f20:	b510      	push	{r4, lr}
    5f22:	b082      	sub	sp, #8
    5f24:	1c04      	adds	r4, r0, #0
	uint8_t token_saved = true;
    5f26:	2201      	movs	r2, #1
    5f28:	466b      	mov	r3, sp
    5f2a:	71da      	strb	r2, [r3, #7]
	uint8_t writeBuffer_Temp[NVMCTRL_PAGE_SIZE] = {0, };
		
	// erase flash memory area
	enum status_code status = nvm_erase_row(NVM_ADDR_THING_TOKEN_SAVED);
    5f2c:	4812      	ldr	r0, [pc, #72]	; (5f78 <thethingsio_example_write_thing_token_nvm+0x58>)
    5f2e:	4b13      	ldr	r3, [pc, #76]	; (5f7c <thethingsio_example_write_thing_token_nvm+0x5c>)
    5f30:	4798      	blx	r3
	if(status == STATUS_OK)
    5f32:	2800      	cmp	r0, #0
    5f34:	d113      	bne.n	5f5e <thethingsio_example_write_thing_token_nvm+0x3e>
		status = nvm_erase_row(NVM_ADDR_THING_TOKEN);
    5f36:	4812      	ldr	r0, [pc, #72]	; (5f80 <thethingsio_example_write_thing_token_nvm+0x60>)
    5f38:	4b10      	ldr	r3, [pc, #64]	; (5f7c <thethingsio_example_write_thing_token_nvm+0x5c>)
    5f3a:	4798      	blx	r3

	// rewrite flash memory area
	if(status == STATUS_OK)
    5f3c:	2800      	cmp	r0, #0
    5f3e:	d10e      	bne.n	5f5e <thethingsio_example_write_thing_token_nvm+0x3e>
		status = nvm_write_buffer(NVM_ADDR_THING_TOKEN_SAVED, &token_saved, 1);
    5f40:	480d      	ldr	r0, [pc, #52]	; (5f78 <thethingsio_example_write_thing_token_nvm+0x58>)
    5f42:	466b      	mov	r3, sp
    5f44:	1dd9      	adds	r1, r3, #7
    5f46:	2201      	movs	r2, #1
    5f48:	4b0e      	ldr	r3, [pc, #56]	; (5f84 <thethingsio_example_write_thing_token_nvm+0x64>)
    5f4a:	4798      	blx	r3
	if(status == STATUS_OK)
    5f4c:	2800      	cmp	r0, #0
    5f4e:	d106      	bne.n	5f5e <thethingsio_example_write_thing_token_nvm+0x3e>
		status = nvm_write_buffer(NVM_ADDR_THING_TOKEN, thing_token, THETHINGSIO_EXAMPLE_THING_TOKEN_LENGTH);
    5f50:	480b      	ldr	r0, [pc, #44]	; (5f80 <thethingsio_example_write_thing_token_nvm+0x60>)
    5f52:	1c21      	adds	r1, r4, #0
    5f54:	222b      	movs	r2, #43	; 0x2b
    5f56:	4b0b      	ldr	r3, [pc, #44]	; (5f84 <thethingsio_example_write_thing_token_nvm+0x64>)
    5f58:	4798      	blx	r3
	
	// check if all the operations went through correctly
	if(status != STATUS_OK)
    5f5a:	2800      	cmp	r0, #0
    5f5c:	d002      	beq.n	5f64 <thethingsio_example_write_thing_token_nvm+0x44>
		printf("set thing token, write thing token error!!\r\n");
    5f5e:	480a      	ldr	r0, [pc, #40]	; (5f88 <thethingsio_example_write_thing_token_nvm+0x68>)
    5f60:	4b0a      	ldr	r3, [pc, #40]	; (5f8c <thethingsio_example_write_thing_token_nvm+0x6c>)
    5f62:	4798      	blx	r3
	
	// update thingsiO read write URL
	uint8_t thing_token_offset = sizeof(gau8TheThingsiOHttpRWUrl) - THETHINGSIO_EXAMPLE_THING_TOKEN_LENGTH - 1;
	memcpy((gau8TheThingsiOHttpRWUrl+thing_token_offset),thing_token, THETHINGSIO_EXAMPLE_THING_TOKEN_LENGTH);
    5f64:	480a      	ldr	r0, [pc, #40]	; (5f90 <thethingsio_example_write_thing_token_nvm+0x70>)
    5f66:	3022      	adds	r0, #34	; 0x22
    5f68:	1c21      	adds	r1, r4, #0
    5f6a:	222b      	movs	r2, #43	; 0x2b
    5f6c:	4b09      	ldr	r3, [pc, #36]	; (5f94 <thethingsio_example_write_thing_token_nvm+0x74>)
    5f6e:	4798      	blx	r3
	
	return true;
}
    5f70:	2001      	movs	r0, #1
    5f72:	b002      	add	sp, #8
    5f74:	bd10      	pop	{r4, pc}
    5f76:	46c0      	nop			; (mov r8, r8)
    5f78:	0003e600 	.word	0x0003e600
    5f7c:	00003565 	.word	0x00003565
    5f80:	0003e200 	.word	0x0003e200
    5f84:	0000344d 	.word	0x0000344d
    5f88:	0000b57c 	.word	0x0000b57c
    5f8c:	00008d0d 	.word	0x00008d0d
    5f90:	20000014 	.word	0x20000014
    5f94:	00008a65 	.word	0x00008a65

00005f98 <_thethingsio_example_http_set_default_entity>:
	return true;
}

struct http_entity * _thethingsio_example_http_set_default_entity()
{
	memset(&g_http_entity, 0x00, sizeof(struct http_entity));
    5f98:	4806      	ldr	r0, [pc, #24]	; (5fb4 <_thethingsio_example_http_set_default_entity+0x1c>)
    5f9a:	2300      	movs	r3, #0
    5f9c:	6003      	str	r3, [r0, #0]
    5f9e:	6143      	str	r3, [r0, #20]
	g_http_entity.close = _thethingsio_example_http_close;
    5fa0:	4b05      	ldr	r3, [pc, #20]	; (5fb8 <_thethingsio_example_http_set_default_entity+0x20>)
    5fa2:	6103      	str	r3, [r0, #16]
	g_http_entity.is_chunked = 0;
	g_http_entity.priv_data = NULL;
	g_http_entity.read = _thethingsio_example_http_read;
    5fa4:	4b05      	ldr	r3, [pc, #20]	; (5fbc <_thethingsio_example_http_set_default_entity+0x24>)
    5fa6:	60c3      	str	r3, [r0, #12]
	g_http_entity.get_contents_length = _thethingsio_example_http_get_contents_length;
    5fa8:	4b05      	ldr	r3, [pc, #20]	; (5fc0 <_thethingsio_example_http_set_default_entity+0x28>)
    5faa:	6083      	str	r3, [r0, #8]
	g_http_entity.get_contents_type = _thethingsio_example_http_get_contents_type;
    5fac:	4b05      	ldr	r3, [pc, #20]	; (5fc4 <_thethingsio_example_http_set_default_entity+0x2c>)
    5fae:	6043      	str	r3, [r0, #4]
	
	return &g_http_entity;
}
    5fb0:	4770      	bx	lr
    5fb2:	46c0      	nop			; (mov r8, r8)
    5fb4:	200002d0 	.word	0x200002d0
    5fb8:	00005c95 	.word	0x00005c95
    5fbc:	00005ca5 	.word	0x00005ca5
    5fc0:	00005c99 	.word	0x00005c99
    5fc4:	00005c8d 	.word	0x00005c8d

00005fc8 <thethingsio_example_read_and_write>:
	DEBUG(DEBUG_CONF_THETHINGSIO"thethingsio_example_subscribe"DEBUG_EOL);

}

bool	thethingsio_example_read_and_write(char * write_data)
{
    5fc8:	b530      	push	{r4, r5, lr}
    5fca:	b083      	sub	sp, #12
    5fcc:	1c05      	adds	r5, r0, #0
	bool ret = false;
	int err_code = 0;
	char ext_header[100] = {0,};
	struct http_entity * entity = _thethingsio_example_http_set_default_entity();
    5fce:	4b0d      	ldr	r3, [pc, #52]	; (6004 <thethingsio_example_read_and_write+0x3c>)
    5fd0:	4798      	blx	r3
    5fd2:	1c04      	adds	r4, r0, #0
	
	DEBUG(DEBUG_CONF_THETHINGSIO"thethingsio_example_read_and_write"DEBUG_EOL);
    5fd4:	480c      	ldr	r0, [pc, #48]	; (6008 <thethingsio_example_read_and_write+0x40>)
    5fd6:	4b0d      	ldr	r3, [pc, #52]	; (600c <thethingsio_example_read_and_write+0x44>)
    5fd8:	4798      	blx	r3
	
	entity->priv_data = (void*)write_data;	
    5fda:	6165      	str	r5, [r4, #20]
	//sprintf(ext_header,THETHINGSIO_EXAMPLE_HTTP_CIK_EXT_HEADER, cik);	
	
	err_code = http_client_send_request(&http_client_module_inst, gau8TheThingsiOHttpRWUrl,HTTP_METHOD_POST,entity, NULL);
    5fdc:	2300      	movs	r3, #0
    5fde:	9300      	str	r3, [sp, #0]
    5fe0:	480b      	ldr	r0, [pc, #44]	; (6010 <thethingsio_example_read_and_write+0x48>)
    5fe2:	490c      	ldr	r1, [pc, #48]	; (6014 <thethingsio_example_read_and_write+0x4c>)
    5fe4:	2202      	movs	r2, #2
    5fe6:	1c23      	adds	r3, r4, #0
    5fe8:	4c0b      	ldr	r4, [pc, #44]	; (6018 <thethingsio_example_read_and_write+0x50>)
    5fea:	47a0      	blx	r4
    5fec:	1e01      	subs	r1, r0, #0
	
	
	if( err_code == 0)
    5fee:	d103      	bne.n	5ff8 <thethingsio_example_read_and_write+0x30>
	{
		ret = true;		
		tick_counter_pending_timer();
    5ff0:	4b0a      	ldr	r3, [pc, #40]	; (601c <thethingsio_example_read_and_write+0x54>)
    5ff2:	4798      	blx	r3
	err_code = http_client_send_request(&http_client_module_inst, gau8TheThingsiOHttpRWUrl,HTTP_METHOD_POST,entity, NULL);
	
	
	if( err_code == 0)
	{
		ret = true;		
    5ff4:	2001      	movs	r0, #1
    5ff6:	e003      	b.n	6000 <thethingsio_example_read_and_write+0x38>
		tick_counter_pending_timer();
	}
	else
	{
		DEBUG(DEBUG_CONF_THETHINGSIO"Error : thethingsio_example_read_and_write code %d"DEBUG_EOL, err_code);
    5ff8:	4809      	ldr	r0, [pc, #36]	; (6020 <thethingsio_example_read_and_write+0x58>)
    5ffa:	4b0a      	ldr	r3, [pc, #40]	; (6024 <thethingsio_example_read_and_write+0x5c>)
    5ffc:	4798      	blx	r3

}

bool	thethingsio_example_read_and_write(char * write_data)
{
	bool ret = false;
    5ffe:	2000      	movs	r0, #0
	else
	{
		DEBUG(DEBUG_CONF_THETHINGSIO"Error : thethingsio_example_read_and_write code %d"DEBUG_EOL, err_code);
	}
	return ret;
}
    6000:	b003      	add	sp, #12
    6002:	bd30      	pop	{r4, r5, pc}
    6004:	00005f99 	.word	0x00005f99
    6008:	0000b6a4 	.word	0x0000b6a4
    600c:	00008d0d 	.word	0x00008d0d
    6010:	20000628 	.word	0x20000628
    6014:	20000014 	.word	0x20000014
    6018:	00006851 	.word	0x00006851
    601c:	000073a9 	.word	0x000073a9
    6020:	0000b6d8 	.word	0x0000b6d8
    6024:	00008bed 	.word	0x00008bed

00006028 <thethingsio_subscribe_config>:
	
	printf("end configure mqtt"DEBUG_EOL);
}

bool thethingsio_subscribe_config(void)
{
    6028:	b530      	push	{r4, r5, lr}
    602a:	b089      	sub	sp, #36	; 0x24
	printf("subscribe config"DEBUG_EOL);
    602c:	4818      	ldr	r0, [pc, #96]	; (6090 <thethingsio_subscribe_config+0x68>)
    602e:	4d19      	ldr	r5, [pc, #100]	; (6094 <thethingsio_subscribe_config+0x6c>)
    6030:	47a8      	blx	r5

static void _thethingsio_mqtt_configure_timer(void)
{
	
	struct sw_timer_config swt_conf_mqtt;
	sw_timer_get_config_defaults(&swt_conf_mqtt);
    6032:	a801      	add	r0, sp, #4
    6034:	4b18      	ldr	r3, [pc, #96]	; (6098 <thethingsio_subscribe_config+0x70>)
    6036:	4798      	blx	r3

	sw_timer_init(&swt_module_mqtt_inst, &swt_conf_mqtt);
    6038:	4c18      	ldr	r4, [pc, #96]	; (609c <thethingsio_subscribe_config+0x74>)
    603a:	1c20      	adds	r0, r4, #0
    603c:	a901      	add	r1, sp, #4
    603e:	4b18      	ldr	r3, [pc, #96]	; (60a0 <thethingsio_subscribe_config+0x78>)
    6040:	4798      	blx	r3
	sw_timer_enable(&swt_module_mqtt_inst);
    6042:	1c20      	adds	r0, r4, #0
    6044:	4b17      	ldr	r3, [pc, #92]	; (60a4 <thethingsio_subscribe_config+0x7c>)
    6046:	4798      	blx	r3
	}
}

static void configure_mqtt(void)
{
	printf("configure mqtt"DEBUG_EOL);
    6048:	4817      	ldr	r0, [pc, #92]	; (60a8 <thethingsio_subscribe_config+0x80>)
    604a:	47a8      	blx	r5
	struct mqtt_config mqtt_conf;
	int result;

	mqtt_get_config_defaults(&mqtt_conf);
    604c:	a801      	add	r0, sp, #4
    604e:	4b17      	ldr	r3, [pc, #92]	; (60ac <thethingsio_subscribe_config+0x84>)
    6050:	4798      	blx	r3
	/* To use the MQTT service, it is necessary to always set the buffer and the timer. */
	mqtt_conf.timer_inst = &swt_module_mqtt_inst;
    6052:	9402      	str	r4, [sp, #8]
	mqtt_conf.recv_buffer = mqtt_buffer;
    6054:	4b16      	ldr	r3, [pc, #88]	; (60b0 <thethingsio_subscribe_config+0x88>)
    6056:	9304      	str	r3, [sp, #16]
	mqtt_conf.recv_buffer_size = MAIN_MQTT_BUFFER_SIZE;
    6058:	2380      	movs	r3, #128	; 0x80
    605a:	9305      	str	r3, [sp, #20]

	result = mqtt_init(&mqtt_inst, &mqtt_conf);
    605c:	4815      	ldr	r0, [pc, #84]	; (60b4 <thethingsio_subscribe_config+0x8c>)
    605e:	a901      	add	r1, sp, #4
    6060:	4b15      	ldr	r3, [pc, #84]	; (60b8 <thethingsio_subscribe_config+0x90>)
    6062:	4798      	blx	r3
    6064:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    6066:	da03      	bge.n	6070 <thethingsio_subscribe_config+0x48>
		printf("MQTT initialization failed. Error code is (%d)\r\n", result);
    6068:	4814      	ldr	r0, [pc, #80]	; (60bc <thethingsio_subscribe_config+0x94>)
    606a:	4b15      	ldr	r3, [pc, #84]	; (60c0 <thethingsio_subscribe_config+0x98>)
    606c:	4798      	blx	r3
    606e:	e7fe      	b.n	606e <thethingsio_subscribe_config+0x46>
		while (1) {
		}
	}

	result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
    6070:	4810      	ldr	r0, [pc, #64]	; (60b4 <thethingsio_subscribe_config+0x8c>)
    6072:	4914      	ldr	r1, [pc, #80]	; (60c4 <thethingsio_subscribe_config+0x9c>)
    6074:	4b14      	ldr	r3, [pc, #80]	; (60c8 <thethingsio_subscribe_config+0xa0>)
    6076:	4798      	blx	r3
    6078:	1e01      	subs	r1, r0, #0
	if (result < 0) {
    607a:	da03      	bge.n	6084 <thethingsio_subscribe_config+0x5c>
		printf("MQTT register callback failed. Error code is (%d)\r\n", result);
    607c:	4813      	ldr	r0, [pc, #76]	; (60cc <thethingsio_subscribe_config+0xa4>)
    607e:	4b10      	ldr	r3, [pc, #64]	; (60c0 <thethingsio_subscribe_config+0x98>)
    6080:	4798      	blx	r3
    6082:	e7fe      	b.n	6082 <thethingsio_subscribe_config+0x5a>
		while (1) {
		}
	}
	
	printf("end configure mqtt"DEBUG_EOL);
    6084:	4812      	ldr	r0, [pc, #72]	; (60d0 <thethingsio_subscribe_config+0xa8>)
    6086:	4b03      	ldr	r3, [pc, #12]	; (6094 <thethingsio_subscribe_config+0x6c>)
    6088:	4798      	blx	r3
	_thethingsio_mqtt_configure_timer();
		
	configure_mqtt();
	
	return true;
}
    608a:	2001      	movs	r0, #1
    608c:	b009      	add	sp, #36	; 0x24
    608e:	bd30      	pop	{r4, r5, pc}
    6090:	0000b71c 	.word	0x0000b71c
    6094:	00008d0d 	.word	0x00008d0d
    6098:	00006b4d 	.word	0x00006b4d
    609c:	20000710 	.word	0x20000710
    60a0:	00006b59 	.word	0x00006b59
    60a4:	00006c05 	.word	0x00006c05
    60a8:	0000b79c 	.word	0x0000b79c
    60ac:	00007479 	.word	0x00007479
    60b0:	20000250 	.word	0x20000250
    60b4:	200001dc 	.word	0x200001dc
    60b8:	0000749d 	.word	0x0000749d
    60bc:	0000b730 	.word	0x0000b730
    60c0:	00008bed 	.word	0x00008bed
    60c4:	00005cd1 	.word	0x00005cd1
    60c8:	00007529 	.word	0x00007529
    60cc:	0000b764 	.word	0x0000b764
    60d0:	0000b798 	.word	0x0000b798

000060d4 <thethingsio_connect_subscribe>:


bool thethingsio_connect_subscribe()
{
    60d4:	b510      	push	{r4, lr}
	printf("connect subscribe"DEBUG_EOL);
    60d6:	4806      	ldr	r0, [pc, #24]	; (60f0 <thethingsio_connect_subscribe+0x1c>)
    60d8:	4b06      	ldr	r3, [pc, #24]	; (60f4 <thethingsio_connect_subscribe+0x20>)
    60da:	4798      	blx	r3
	
	
	printf("mqtt broker: %s"DEBUG_EOL, main_mqtt_broker);
    60dc:	4c06      	ldr	r4, [pc, #24]	; (60f8 <thethingsio_connect_subscribe+0x24>)
    60de:	4807      	ldr	r0, [pc, #28]	; (60fc <thethingsio_connect_subscribe+0x28>)
    60e0:	1c21      	adds	r1, r4, #0
    60e2:	4b07      	ldr	r3, [pc, #28]	; (6100 <thethingsio_connect_subscribe+0x2c>)
    60e4:	4798      	blx	r3
    mqtt_connect(&mqtt_inst, main_mqtt_broker);	
    60e6:	4807      	ldr	r0, [pc, #28]	; (6104 <thethingsio_connect_subscribe+0x30>)
    60e8:	1c21      	adds	r1, r4, #0
    60ea:	4b07      	ldr	r3, [pc, #28]	; (6108 <thethingsio_connect_subscribe+0x34>)
    60ec:	4798      	blx	r3
}
    60ee:	bd10      	pop	{r4, pc}
    60f0:	0000b7ac 	.word	0x0000b7ac
    60f4:	00008d0d 	.word	0x00008d0d
    60f8:	0000b2a4 	.word	0x0000b2a4
    60fc:	0000b7c0 	.word	0x0000b7c0
    6100:	00008bed 	.word	0x00008bed
    6104:	200001dc 	.word	0x200001dc
    6108:	0000758d 	.word	0x0000758d

0000610c <_http_client_send_wait>:
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
	}
}

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
    610c:	b5f0      	push	{r4, r5, r6, r7, lr}
    610e:	4647      	mov	r7, r8
    6110:	b480      	push	{r7}
    6112:	b082      	sub	sp, #8
    6114:	1c05      	adds	r5, r0, #0
    6116:	1c0c      	adds	r4, r1, #0
    6118:	9100      	str	r1, [sp, #0]
    611a:	4690      	mov	r8, r2
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;
    611c:	2241      	movs	r2, #65	; 0x41
    611e:	5c81      	ldrb	r1, [r0, r2]
    6120:	2301      	movs	r3, #1
    6122:	430b      	orrs	r3, r1
    6124:	5483      	strb	r3, [r0, r2]

	printf("\r\nsend message : \r\n");
    6126:	4820      	ldr	r0, [pc, #128]	; (61a8 <_http_client_send_wait+0x9c>)
    6128:	4b20      	ldr	r3, [pc, #128]	; (61ac <_http_client_send_wait+0xa0>)
    612a:	4798      	blx	r3
	for(uint32_t i=0 ;i< buffer_len ; i++)
    612c:	4643      	mov	r3, r8
    612e:	2b00      	cmp	r3, #0
    6130:	d008      	beq.n	6144 <_http_client_send_wait+0x38>
    6132:	1c23      	adds	r3, r4, #0
    6134:	4443      	add	r3, r8
    6136:	1c1e      	adds	r6, r3, #0
		printf("%c",buffer[i]);
    6138:	4f1d      	ldr	r7, [pc, #116]	; (61b0 <_http_client_send_wait+0xa4>)
    613a:	7820      	ldrb	r0, [r4, #0]
    613c:	47b8      	blx	r7
    613e:	3401      	adds	r4, #1
	struct http_client_module *const module = (struct http_client_module *const)_module;
	
	module->sending = 1;

	printf("\r\nsend message : \r\n");
	for(uint32_t i=0 ;i< buffer_len ; i++)
    6140:	42b4      	cmp	r4, r6
    6142:	d1fa      	bne.n	613a <_http_client_send_wait+0x2e>
		printf("%c",buffer[i]);

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
    6144:	2000      	movs	r0, #0
    6146:	5628      	ldrsb	r0, [r5, r0]
    6148:	4643      	mov	r3, r8
    614a:	466a      	mov	r2, sp
    614c:	80d3      	strh	r3, [r2, #6]
    614e:	88d2      	ldrh	r2, [r2, #6]
    6150:	9900      	ldr	r1, [sp, #0]
    6152:	2300      	movs	r3, #0
    6154:	4c17      	ldr	r4, [pc, #92]	; (61b4 <_http_client_send_wait+0xa8>)
    6156:	47a0      	blx	r4
    6158:	2800      	cmp	r0, #0
    615a:	db08      	blt.n	616e <_http_client_send_wait+0x62>
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    615c:	2341      	movs	r3, #65	; 0x41
    615e:	5ceb      	ldrb	r3, [r5, r3]
    6160:	07db      	lsls	r3, r3, #31
    6162:	d519      	bpl.n	6198 <_http_client_send_wait+0x8c>
    6164:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    6166:	2000      	movs	r0, #0

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    6168:	2b02      	cmp	r3, #2
    616a:	d918      	bls.n	619e <_http_client_send_wait+0x92>
    616c:	e005      	b.n	617a <_http_client_send_wait+0x6e>
	printf("\r\nsend message : \r\n");
	for(uint32_t i=0 ;i< buffer_len ; i++)
		printf("%c",buffer[i]);

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
    616e:	2241      	movs	r2, #65	; 0x41
    6170:	5cab      	ldrb	r3, [r5, r2]
    6172:	2101      	movs	r1, #1
    6174:	438b      	bics	r3, r1
    6176:	54ab      	strb	r3, [r5, r2]
		return result;
    6178:	e011      	b.n	619e <_http_client_send_wait+0x92>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
    617a:	4f0f      	ldr	r7, [pc, #60]	; (61b8 <_http_client_send_wait+0xac>)
		sw_timer_task(module->config.timer_inst);
    617c:	4e0f      	ldr	r6, [pc, #60]	; (61bc <_http_client_send_wait+0xb0>)

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    617e:	2441      	movs	r4, #65	; 0x41
		m2m_wifi_handle_events(NULL);
    6180:	2000      	movs	r0, #0
    6182:	47b8      	blx	r7
		sw_timer_task(module->config.timer_inst);
    6184:	6d68      	ldr	r0, [r5, #84]	; 0x54
    6186:	47b0      	blx	r6

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
		module->sending = 0;
		return result;
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
    6188:	5d2b      	ldrb	r3, [r5, r4]
    618a:	07db      	lsls	r3, r3, #31
    618c:	d506      	bpl.n	619c <_http_client_send_wait+0x90>
    618e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    6190:	2b02      	cmp	r3, #2
    6192:	d8f5      	bhi.n	6180 <_http_client_send_wait+0x74>
		m2m_wifi_handle_events(NULL);
		sw_timer_task(module->config.timer_inst);
	}

	return 0;
    6194:	2000      	movs	r0, #0
    6196:	e002      	b.n	619e <_http_client_send_wait+0x92>
    6198:	2000      	movs	r0, #0
    619a:	e000      	b.n	619e <_http_client_send_wait+0x92>
    619c:	2000      	movs	r0, #0
}
    619e:	b002      	add	sp, #8
    61a0:	bc04      	pop	{r2}
    61a2:	4690      	mov	r8, r2
    61a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61a6:	46c0      	nop			; (mov r8, r8)
    61a8:	0000b7e4 	.word	0x0000b7e4
    61ac:	00008d0d 	.word	0x00008d0d
    61b0:	00008c21 	.word	0x00008c21
    61b4:	00002bc5 	.word	0x00002bc5
    61b8:	00001041 	.word	0x00001041
    61bc:	00006c91 	.word	0x00006c91

000061c0 <http_client_get_config_defaults>:
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
	config->port = 80;
    61c0:	2350      	movs	r3, #80	; 0x50
    61c2:	8003      	strh	r3, [r0, #0]
	config->tls = 0;
    61c4:	2300      	movs	r3, #0
    61c6:	7083      	strb	r3, [r0, #2]
	config->timeout = 20000;
    61c8:	4a05      	ldr	r2, [pc, #20]	; (61e0 <http_client_get_config_defaults+0x20>)
    61ca:	8102      	strh	r2, [r0, #8]
	config->timer_inst = NULL;
    61cc:	6043      	str	r3, [r0, #4]
	config->recv_buffer = NULL;
    61ce:	60c3      	str	r3, [r0, #12]
	config->recv_buffer_size = 256;
    61d0:	3301      	adds	r3, #1
    61d2:	33ff      	adds	r3, #255	; 0xff
    61d4:	6103      	str	r3, [r0, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
    61d6:	3bae      	subs	r3, #174	; 0xae
    61d8:	6143      	str	r3, [r0, #20]
	config->user_agent = DEFAULT_USER_AGENT;
    61da:	4b02      	ldr	r3, [pc, #8]	; (61e4 <http_client_get_config_defaults+0x24>)
    61dc:	6183      	str	r3, [r0, #24]
}
    61de:	4770      	bx	lr
    61e0:	00004e20 	.word	0x00004e20
    61e4:	0000b7f8 	.word	0x0000b7f8

000061e8 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
    61e8:	b538      	push	{r3, r4, r5, lr}
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
    61ea:	2800      	cmp	r0, #0
    61ec:	d036      	beq.n	625c <http_client_init+0x74>
    61ee:	2900      	cmp	r1, #0
    61f0:	d037      	beq.n	6262 <http_client_init+0x7a>
		return -EINVAL;
	}

	if (config->recv_buffer_size == 0) {
    61f2:	690b      	ldr	r3, [r1, #16]
    61f4:	2b00      	cmp	r3, #0
    61f6:	d037      	beq.n	6268 <http_client_init+0x80>
		return -EINVAL;
	}

	if (config->timer_inst == NULL) {
    61f8:	684b      	ldr	r3, [r1, #4]
    61fa:	2b00      	cmp	r3, #0
    61fc:	d037      	beq.n	626e <http_client_init+0x86>
		return -EINVAL;
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
    61fe:	694b      	ldr	r3, [r1, #20]
    6200:	2b51      	cmp	r3, #81	; 0x51
    6202:	d937      	bls.n	6274 <http_client_init+0x8c>
    6204:	1c0d      	adds	r5, r1, #0
    6206:	1c04      	adds	r4, r0, #0
		return -EINVAL;
	}

	memset(module, 0, sizeof(struct http_client_module));
    6208:	2100      	movs	r1, #0
    620a:	22e8      	movs	r2, #232	; 0xe8
    620c:	4b1e      	ldr	r3, [pc, #120]	; (6288 <http_client_init+0xa0>)
    620e:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
    6210:	1c20      	adds	r0, r4, #0
    6212:	3050      	adds	r0, #80	; 0x50
    6214:	1c29      	adds	r1, r5, #0
    6216:	221c      	movs	r2, #28
    6218:	4b1c      	ldr	r3, [pc, #112]	; (628c <http_client_init+0xa4>)
    621a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
    621c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    621e:	2b00      	cmp	r3, #0
    6220:	d10a      	bne.n	6238 <http_client_init+0x50>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
    6222:	6928      	ldr	r0, [r5, #16]
    6224:	4b1a      	ldr	r3, [pc, #104]	; (6290 <http_client_init+0xa8>)
    6226:	4798      	blx	r3
    6228:	65e0      	str	r0, [r4, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
    622a:	2800      	cmp	r0, #0
    622c:	d025      	beq.n	627a <http_client_init+0x92>
			return -ENOMEM;
		}
		module->alloc_buffer = 1;
    622e:	2241      	movs	r2, #65	; 0x41
    6230:	5ca1      	ldrb	r1, [r4, r2]
    6232:	2304      	movs	r3, #4
    6234:	430b      	orrs	r3, r1
    6236:	54a3      	strb	r3, [r4, r2]
	}

	if (config->timeout > 0) {
    6238:	892b      	ldrh	r3, [r5, #8]
    623a:	2b00      	cmp	r3, #0
    623c:	d008      	beq.n	6250 <http_client_init+0x68>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
    623e:	6868      	ldr	r0, [r5, #4]
    6240:	4914      	ldr	r1, [pc, #80]	; (6294 <http_client_init+0xac>)
    6242:	1c22      	adds	r2, r4, #0
    6244:	2300      	movs	r3, #0
    6246:	4d14      	ldr	r5, [pc, #80]	; (6298 <http_client_init+0xb0>)
    6248:	47a8      	blx	r5
    624a:	64a0      	str	r0, [r4, #72]	; 0x48

		if (module->timer_id < 0) {
    624c:	2800      	cmp	r0, #0
    624e:	db17      	blt.n	6280 <http_client_init+0x98>
			return -ENOSPC;
		}
	}

	module->req.state = STATE_INIT;
    6250:	2300      	movs	r3, #0
    6252:	66e3      	str	r3, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    6254:	22d8      	movs	r2, #216	; 0xd8
    6256:	50a3      	str	r3, [r4, r2]

	return 0;
    6258:	2000      	movs	r0, #0
    625a:	e013      	b.n	6284 <http_client_init+0x9c>

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
		return -EINVAL;
    625c:	2016      	movs	r0, #22
    625e:	4240      	negs	r0, r0
    6260:	e010      	b.n	6284 <http_client_init+0x9c>
    6262:	2016      	movs	r0, #22
    6264:	4240      	negs	r0, r0
    6266:	e00d      	b.n	6284 <http_client_init+0x9c>
	}

	if (config->recv_buffer_size == 0) {
		return -EINVAL;
    6268:	2016      	movs	r0, #22
    626a:	4240      	negs	r0, r0
    626c:	e00a      	b.n	6284 <http_client_init+0x9c>
	}

	if (config->timer_inst == NULL) {
		return -EINVAL;
    626e:	2016      	movs	r0, #22
    6270:	4240      	negs	r0, r0
    6272:	e007      	b.n	6284 <http_client_init+0x9c>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
		return -EINVAL;
    6274:	2016      	movs	r0, #22
    6276:	4240      	negs	r0, r0
    6278:	e004      	b.n	6284 <http_client_init+0x9c>

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
		module->config.recv_buffer = malloc(config->recv_buffer_size);
		if (module->config.recv_buffer == NULL) {
			return -ENOMEM;
    627a:	200c      	movs	r0, #12
    627c:	4240      	negs	r0, r0
    627e:	e001      	b.n	6284 <http_client_init+0x9c>
	if (config->timeout > 0) {
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);

		if (module->timer_id < 0) {
			return -ENOSPC;
    6280:	201c      	movs	r0, #28
    6282:	4240      	negs	r0, r0

	module->req.state = STATE_INIT;
	module->resp.state = STATE_PARSE_HEADER;

	return 0;
}
    6284:	bd38      	pop	{r3, r4, r5, pc}
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	00008a9f 	.word	0x00008a9f
    628c:	00008a65 	.word	0x00008a65
    6290:	00008a3d 	.word	0x00008a3d
    6294:	00006335 	.word	0x00006335
    6298:	00006c19 	.word	0x00006c19

0000629c <http_client_register_callback>:
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
	/* Checks the parameters. */
	if (module == NULL) {
    629c:	2800      	cmp	r0, #0
    629e:	d002      	beq.n	62a6 <http_client_register_callback+0xa>
		return -EINVAL;
	}

	module->cb = callback;
    62a0:	64c1      	str	r1, [r0, #76]	; 0x4c

	return 0;
    62a2:	2000      	movs	r0, #0
    62a4:	e001      	b.n	62aa <http_client_register_callback+0xe>

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
	/* Checks the parameters. */
	if (module == NULL) {
		return -EINVAL;
    62a6:	2016      	movs	r0, #22
    62a8:	4240      	negs	r0, r0
	}

	module->cb = callback;

	return 0;
}
    62aa:	4770      	bx	lr

000062ac <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
    62ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    62ae:	b085      	sub	sp, #20
    62b0:	1c04      	adds	r4, r0, #0
    62b2:	1c0e      	adds	r6, r1, #0
	union http_client_data data;

	if (module->req.entity.close) {
    62b4:	23c0      	movs	r3, #192	; 0xc0
    62b6:	58c3      	ldr	r3, [r0, r3]
    62b8:	2b00      	cmp	r3, #0
    62ba:	d002      	beq.n	62c2 <_http_client_clear_conn+0x16>
		module->req.entity.close(module->req.entity.priv_data);
    62bc:	22c4      	movs	r2, #196	; 0xc4
    62be:	5880      	ldr	r0, [r0, r2]
    62c0:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
    62c2:	1c20      	adds	r0, r4, #0
    62c4:	30b0      	adds	r0, #176	; 0xb0
    62c6:	2100      	movs	r1, #0
    62c8:	2218      	movs	r2, #24
    62ca:	4b17      	ldr	r3, [pc, #92]	; (6328 <_http_client_clear_conn+0x7c>)
    62cc:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
    62ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    62d0:	2b00      	cmp	r3, #0
    62d2:	d003      	beq.n	62dc <_http_client_clear_conn+0x30>
		close(module->sock);
    62d4:	2000      	movs	r0, #0
    62d6:	5620      	ldrsb	r0, [r4, r0]
    62d8:	4b14      	ldr	r3, [pc, #80]	; (632c <_http_client_clear_conn+0x80>)
    62da:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
    62dc:	2300      	movs	r3, #0
    62de:	56e3      	ldrsb	r3, [r4, r3]
    62e0:	009b      	lsls	r3, r3, #2
    62e2:	2500      	movs	r5, #0
    62e4:	4a12      	ldr	r2, [pc, #72]	; (6330 <_http_client_clear_conn+0x84>)
    62e6:	509d      	str	r5, [r3, r2]
	memset(&module->req, 0, sizeof(struct http_client_req));
    62e8:	1c20      	adds	r0, r4, #0
    62ea:	306c      	adds	r0, #108	; 0x6c
    62ec:	2100      	movs	r1, #0
    62ee:	226c      	movs	r2, #108	; 0x6c
    62f0:	4f0d      	ldr	r7, [pc, #52]	; (6328 <_http_client_clear_conn+0x7c>)
    62f2:	47b8      	blx	r7
	memset(&module->resp, 0, sizeof(struct http_client_resp));
    62f4:	1c20      	adds	r0, r4, #0
    62f6:	30d8      	adds	r0, #216	; 0xd8
    62f8:	2100      	movs	r1, #0
    62fa:	2210      	movs	r2, #16
    62fc:	47b8      	blx	r7
	module->req.state = STATE_INIT;
    62fe:	66e5      	str	r5, [r4, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
    6300:	23d8      	movs	r3, #216	; 0xd8
    6302:	50e5      	str	r5, [r4, r3]

	module->sending = 0;
    6304:	2241      	movs	r2, #65	; 0x41
    6306:	5ca3      	ldrb	r3, [r4, r2]
	module->permanent = 0;
    6308:	2101      	movs	r1, #1
    630a:	438b      	bics	r3, r1
    630c:	3101      	adds	r1, #1
    630e:	438b      	bics	r3, r1
    6310:	54a3      	strb	r3, [r4, r2]
	data.disconnected.reason = reason;
    6312:	9601      	str	r6, [sp, #4]
	if (module->cb) {
    6314:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6316:	2b00      	cmp	r3, #0
    6318:	d003      	beq.n	6322 <_http_client_clear_conn+0x76>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
    631a:	1c20      	adds	r0, r4, #0
    631c:	3102      	adds	r1, #2
    631e:	aa01      	add	r2, sp, #4
    6320:	4798      	blx	r3
	}
}
    6322:	b005      	add	sp, #20
    6324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6326:	46c0      	nop			; (mov r8, r8)
    6328:	00008a9f 	.word	0x00008a9f
    632c:	00002d05 	.word	0x00002d05
    6330:	200002e8 	.word	0x200002e8

00006334 <http_client_timer_callback>:
		}
	}
}

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
    6334:	b508      	push	{r3, lr}
	struct http_client_module *module_inst = (struct http_client_module *)context;

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
    6336:	2a00      	cmp	r2, #0
    6338:	d004      	beq.n	6344 <http_client_timer_callback+0x10>
    633a:	1c10      	adds	r0, r2, #0
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
    633c:	213e      	movs	r1, #62	; 0x3e
    633e:	4249      	negs	r1, r1
    6340:	4b01      	ldr	r3, [pc, #4]	; (6348 <http_client_timer_callback+0x14>)
    6342:	4798      	blx	r3
}
    6344:	bd08      	pop	{r3, pc}
    6346:	46c0      	nop			; (mov r8, r8)
    6348:	000062ad 	.word	0x000062ad

0000634c <_http_client_request>:

	return 0;
}

void _http_client_request(struct http_client_module *const module)
{
    634c:	b5f0      	push	{r4, r5, r6, r7, lr}
    634e:	465f      	mov	r7, fp
    6350:	4656      	mov	r6, sl
    6352:	464d      	mov	r5, r9
    6354:	4644      	mov	r4, r8
    6356:	b4f0      	push	{r4, r5, r6, r7}
    6358:	b095      	sub	sp, #84	; 0x54
    635a:	af02      	add	r7, sp, #8
    635c:	1c04      	adds	r4, r0, #0
    635e:	46e8      	mov	r8, sp
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    6360:	2310      	movs	r3, #16
    6362:	2208      	movs	r2, #8
    6364:	18ba      	adds	r2, r7, r2
    6366:	18d0      	adds	r0, r2, r3
    6368:	49e0      	ldr	r1, [pc, #896]	; (66ec <_http_client_request+0x3a0>)
    636a:	2210      	movs	r2, #16
    636c:	4be0      	ldr	r3, [pc, #896]	; (66f0 <_http_client_request+0x3a4>)
    636e:	4798      	blx	r3
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
    6370:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6372:	1dd3      	adds	r3, r2, #7
    6374:	08db      	lsrs	r3, r3, #3
    6376:	00db      	lsls	r3, r3, #3
    6378:	4669      	mov	r1, sp
    637a:	1acb      	subs	r3, r1, r3
    637c:	469d      	mov	sp, r3
    637e:	ad02      	add	r5, sp, #8

	if (module == NULL) {
    6380:	2c00      	cmp	r4, #0
    6382:	d100      	bne.n	6386 <_http_client_request+0x3a>
    6384:	e250      	b.n	6828 <_http_client_request+0x4dc>
		return;
	}

	if (module->sending != 0) {
    6386:	2341      	movs	r3, #65	; 0x41
    6388:	5ce3      	ldrb	r3, [r4, r3]
    638a:	07db      	lsls	r3, r3, #31
    638c:	d500      	bpl.n	6390 <_http_client_request+0x44>
    638e:	e24b      	b.n	6828 <_http_client_request+0x4dc>
		return;
	}

	entity = &module->req.entity;

	switch (module->req.state) {
    6390:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    6392:	2b03      	cmp	r3, #3
    6394:	d003      	beq.n	639e <_http_client_request+0x52>
    6396:	2b04      	cmp	r3, #4
    6398:	d100      	bne.n	639c <_http_client_request+0x50>
    639a:	e11e      	b.n	65da <_http_client_request+0x28e>
    639c:	e242      	b.n	6824 <_http_client_request+0x4d8>
	case STATE_REQ_SEND_HEADER:
		/* Initializing variables. */
		module->req.content_length = 0;
    639e:	2300      	movs	r3, #0
    63a0:	21cc      	movs	r1, #204	; 0xcc
    63a2:	5063      	str	r3, [r4, r1]
		module->req.sent_length = 0;
    63a4:	3104      	adds	r1, #4
    63a6:	5063      	str	r3, [r4, r1]

		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
    63a8:	9400      	str	r4, [sp, #0]
    63aa:	332c      	adds	r3, #44	; 0x2c
    63ac:	39c8      	subs	r1, #200	; 0xc8
    63ae:	1879      	adds	r1, r7, r1
    63b0:	18c8      	adds	r0, r1, r3
    63b2:	1c29      	adds	r1, r5, #0
    63b4:	4bcf      	ldr	r3, [pc, #828]	; (66f4 <_http_client_request+0x3a8>)
    63b6:	4ed0      	ldr	r6, [pc, #832]	; (66f8 <_http_client_request+0x3ac>)
    63b8:	47b0      	blx	r6
		/* Write Method. */
		if (module->req.method == HTTP_METHOD_GET) {
    63ba:	23c8      	movs	r3, #200	; 0xc8
    63bc:	5ce3      	ldrb	r3, [r4, r3]
    63be:	2b01      	cmp	r3, #1
    63c0:	d108      	bne.n	63d4 <_http_client_request+0x88>
			stream_writer_send_buffer(&writer, "GET ", 4);
    63c2:	332b      	adds	r3, #43	; 0x2b
    63c4:	2208      	movs	r2, #8
    63c6:	18ba      	adds	r2, r7, r2
    63c8:	18d0      	adds	r0, r2, r3
    63ca:	49cc      	ldr	r1, [pc, #816]	; (66fc <_http_client_request+0x3b0>)
    63cc:	2204      	movs	r2, #4
    63ce:	4bcc      	ldr	r3, [pc, #816]	; (6700 <_http_client_request+0x3b4>)
    63d0:	4798      	blx	r3
    63d2:	e035      	b.n	6440 <_http_client_request+0xf4>
		} else if (module->req.method == HTTP_METHOD_POST) {
    63d4:	2b02      	cmp	r3, #2
    63d6:	d108      	bne.n	63ea <_http_client_request+0x9e>
			stream_writer_send_buffer(&writer, "POST ", 5);
    63d8:	332a      	adds	r3, #42	; 0x2a
    63da:	2208      	movs	r2, #8
    63dc:	18ba      	adds	r2, r7, r2
    63de:	18d0      	adds	r0, r2, r3
    63e0:	49c8      	ldr	r1, [pc, #800]	; (6704 <_http_client_request+0x3b8>)
    63e2:	2205      	movs	r2, #5
    63e4:	4bc6      	ldr	r3, [pc, #792]	; (6700 <_http_client_request+0x3b4>)
    63e6:	4798      	blx	r3
    63e8:	e02a      	b.n	6440 <_http_client_request+0xf4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
    63ea:	2b03      	cmp	r3, #3
    63ec:	d108      	bne.n	6400 <_http_client_request+0xb4>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
    63ee:	3329      	adds	r3, #41	; 0x29
    63f0:	2208      	movs	r2, #8
    63f2:	18ba      	adds	r2, r7, r2
    63f4:	18d0      	adds	r0, r2, r3
    63f6:	49c4      	ldr	r1, [pc, #784]	; (6708 <_http_client_request+0x3bc>)
    63f8:	2207      	movs	r2, #7
    63fa:	4bc1      	ldr	r3, [pc, #772]	; (6700 <_http_client_request+0x3b4>)
    63fc:	4798      	blx	r3
    63fe:	e01f      	b.n	6440 <_http_client_request+0xf4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
    6400:	2b04      	cmp	r3, #4
    6402:	d108      	bne.n	6416 <_http_client_request+0xca>
			stream_writer_send_buffer(&writer, "PUT ", 4);
    6404:	3328      	adds	r3, #40	; 0x28
    6406:	2208      	movs	r2, #8
    6408:	18ba      	adds	r2, r7, r2
    640a:	18d0      	adds	r0, r2, r3
    640c:	49bf      	ldr	r1, [pc, #764]	; (670c <_http_client_request+0x3c0>)
    640e:	2204      	movs	r2, #4
    6410:	4bbb      	ldr	r3, [pc, #748]	; (6700 <_http_client_request+0x3b4>)
    6412:	4798      	blx	r3
    6414:	e014      	b.n	6440 <_http_client_request+0xf4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
    6416:	2b05      	cmp	r3, #5
    6418:	d108      	bne.n	642c <_http_client_request+0xe0>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
    641a:	3327      	adds	r3, #39	; 0x27
    641c:	2208      	movs	r2, #8
    641e:	18ba      	adds	r2, r7, r2
    6420:	18d0      	adds	r0, r2, r3
    6422:	49bb      	ldr	r1, [pc, #748]	; (6710 <_http_client_request+0x3c4>)
    6424:	2208      	movs	r2, #8
    6426:	4bb6      	ldr	r3, [pc, #728]	; (6700 <_http_client_request+0x3b4>)
    6428:	4798      	blx	r3
    642a:	e009      	b.n	6440 <_http_client_request+0xf4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
    642c:	2b06      	cmp	r3, #6
    642e:	d107      	bne.n	6440 <_http_client_request+0xf4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
    6430:	3326      	adds	r3, #38	; 0x26
    6432:	2208      	movs	r2, #8
    6434:	18ba      	adds	r2, r7, r2
    6436:	18d0      	adds	r0, r2, r3
    6438:	49b6      	ldr	r1, [pc, #728]	; (6714 <_http_client_request+0x3c8>)
    643a:	2205      	movs	r2, #5
    643c:	4bb0      	ldr	r3, [pc, #704]	; (6700 <_http_client_request+0x3b4>)
    643e:	4798      	blx	r3
		}

		/* Write URI. */
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
    6440:	1c26      	adds	r6, r4, #0
    6442:	3670      	adds	r6, #112	; 0x70
    6444:	1c30      	adds	r0, r6, #0
    6446:	4bb4      	ldr	r3, [pc, #720]	; (6718 <_http_client_request+0x3cc>)
    6448:	469a      	mov	sl, r3
    644a:	4798      	blx	r3
    644c:	1c02      	adds	r2, r0, #0
    644e:	232c      	movs	r3, #44	; 0x2c
    6450:	2108      	movs	r1, #8
    6452:	1879      	adds	r1, r7, r1
    6454:	18c8      	adds	r0, r1, r3
    6456:	1c31      	adds	r1, r6, #0
    6458:	4ea9      	ldr	r6, [pc, #676]	; (6700 <_http_client_request+0x3b4>)
    645a:	47b0      	blx	r6

		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
    645c:	232c      	movs	r3, #44	; 0x2c
    645e:	2208      	movs	r2, #8
    6460:	18ba      	adds	r2, r7, r2
    6462:	18d0      	adds	r0, r2, r3
    6464:	49ad      	ldr	r1, [pc, #692]	; (671c <_http_client_request+0x3d0>)
    6466:	220b      	movs	r2, #11
    6468:	47b0      	blx	r6
		/* Write HTTP headers. */
		/* Default value. */
		//stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
		//stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
		//stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
    646a:	232c      	movs	r3, #44	; 0x2c
    646c:	2208      	movs	r2, #8
    646e:	18ba      	adds	r2, r7, r2
    6470:	18d0      	adds	r0, r2, r3
    6472:	49ab      	ldr	r1, [pc, #684]	; (6720 <_http_client_request+0x3d4>)
    6474:	2206      	movs	r2, #6
    6476:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
    6478:	1c63      	adds	r3, r4, #1
    647a:	607b      	str	r3, [r7, #4]
    647c:	1c18      	adds	r0, r3, #0
    647e:	47d0      	blx	sl
    6480:	1c02      	adds	r2, r0, #0
    6482:	202c      	movs	r0, #44	; 0x2c
    6484:	2308      	movs	r3, #8
    6486:	469c      	mov	ip, r3
    6488:	44bc      	add	ip, r7
    648a:	4460      	add	r0, ip
    648c:	6879      	ldr	r1, [r7, #4]
    648e:	47b0      	blx	r6
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    6490:	232c      	movs	r3, #44	; 0x2c
    6492:	2208      	movs	r2, #8
    6494:	18ba      	adds	r2, r7, r2
    6496:	18d0      	adds	r0, r2, r3
    6498:	49a2      	ldr	r1, [pc, #648]	; (6724 <_http_client_request+0x3d8>)
    649a:	2202      	movs	r2, #2
    649c:	47b0      	blx	r6
		/* It supported persistent connection. */
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
    649e:	232c      	movs	r3, #44	; 0x2c
    64a0:	2208      	movs	r2, #8
    64a2:	18ba      	adds	r2, r7, r2
    64a4:	18d0      	adds	r0, r2, r3
    64a6:	49a0      	ldr	r1, [pc, #640]	; (6728 <_http_client_request+0x3dc>)
    64a8:	2218      	movs	r2, #24
    64aa:	47b0      	blx	r6
		
		/* should write accept json, but for now i will just take it out */
		//stream_writer_send_buffer(&writer, "Accept: application/x-www-form-urlencoded; charset=utf-8\r\n", strlen("Accept: application/x-www-form-urlencoded; charset=utf-8\r\n"));
		//stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));

		if (entity->read != NULL) {
    64ac:	1c23      	adds	r3, r4, #0
    64ae:	33b0      	adds	r3, #176	; 0xb0
    64b0:	68db      	ldr	r3, [r3, #12]
    64b2:	2b00      	cmp	r3, #0
    64b4:	d072      	beq.n	659c <_http_client_request+0x250>
			/* HTTP Entity is exist. */
			if (entity->is_chunked) {
    64b6:	23b0      	movs	r3, #176	; 0xb0
    64b8:	5ce3      	ldrb	r3, [r4, r3]
    64ba:	2b00      	cmp	r3, #0
    64bc:	d00c      	beq.n	64d8 <_http_client_request+0x18c>
				/* Chunked mode. */
				module->req.content_length = -1;
    64be:	2201      	movs	r2, #1
    64c0:	4252      	negs	r2, r2
    64c2:	23cc      	movs	r3, #204	; 0xcc
    64c4:	50e2      	str	r2, [r4, r3]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
    64c6:	3ba0      	subs	r3, #160	; 0xa0
    64c8:	3209      	adds	r2, #9
    64ca:	18ba      	adds	r2, r7, r2
    64cc:	18d0      	adds	r0, r2, r3
    64ce:	4997      	ldr	r1, [pc, #604]	; (672c <_http_client_request+0x3e0>)
    64d0:	221c      	movs	r2, #28
    64d2:	4b8b      	ldr	r3, [pc, #556]	; (6700 <_http_client_request+0x3b4>)
    64d4:	4798      	blx	r3
    64d6:	e061      	b.n	659c <_http_client_request+0x250>
			} else if(entity->get_contents_length) {
    64d8:	1c23      	adds	r3, r4, #0
    64da:	33b0      	adds	r3, #176	; 0xb0
    64dc:	689b      	ldr	r3, [r3, #8]
    64de:	2b00      	cmp	r3, #0
    64e0:	d05c      	beq.n	659c <_http_client_request+0x250>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
    64e2:	1c22      	adds	r2, r4, #0
    64e4:	32b0      	adds	r2, #176	; 0xb0
    64e6:	6950      	ldr	r0, [r2, #20]
    64e8:	4798      	blx	r3
    64ea:	1c02      	adds	r2, r0, #0
    64ec:	23cc      	movs	r3, #204	; 0xcc
    64ee:	50e0      	str	r0, [r4, r3]
				if (module->req.content_length < 0) {
    64f0:	2800      	cmp	r0, #0
    64f2:	da02      	bge.n	64fa <_http_client_request+0x1ae>
					/* Error was occurred. */
					/* Does not send any entity. */
					module->req.content_length = 0;
    64f4:	2200      	movs	r2, #0
    64f6:	50e2      	str	r2, [r4, r3]
    64f8:	e050      	b.n	659c <_http_client_request+0x250>
				} else {
					sprintf(length, "%u", (unsigned int)module->req.content_length);
    64fa:	2320      	movs	r3, #32
    64fc:	2108      	movs	r1, #8
    64fe:	1879      	adds	r1, r7, r1
    6500:	18c8      	adds	r0, r1, r3
    6502:	498b      	ldr	r1, [pc, #556]	; (6730 <_http_client_request+0x3e4>)
    6504:	4b8b      	ldr	r3, [pc, #556]	; (6734 <_http_client_request+0x3e8>)
    6506:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
    6508:	232c      	movs	r3, #44	; 0x2c
    650a:	2208      	movs	r2, #8
    650c:	18ba      	adds	r2, r7, r2
    650e:	18d0      	adds	r0, r2, r3
    6510:	4989      	ldr	r1, [pc, #548]	; (6738 <_http_client_request+0x3ec>)
    6512:	2210      	movs	r2, #16
    6514:	4e7a      	ldr	r6, [pc, #488]	; (6700 <_http_client_request+0x3b4>)
    6516:	47b0      	blx	r6
					stream_writer_send_buffer(&writer, length, strlen(length));
    6518:	2320      	movs	r3, #32
    651a:	2208      	movs	r2, #8
    651c:	18ba      	adds	r2, r7, r2
    651e:	18d0      	adds	r0, r2, r3
    6520:	4b7d      	ldr	r3, [pc, #500]	; (6718 <_http_client_request+0x3cc>)
    6522:	4798      	blx	r3
    6524:	1c02      	adds	r2, r0, #0
    6526:	232c      	movs	r3, #44	; 0x2c
    6528:	2108      	movs	r1, #8
    652a:	1879      	adds	r1, r7, r1
    652c:	18c8      	adds	r0, r1, r3
    652e:	3b0c      	subs	r3, #12
    6530:	2108      	movs	r1, #8
    6532:	1879      	adds	r1, r7, r1
    6534:	18c9      	adds	r1, r1, r3
    6536:	47b0      	blx	r6
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));	
    6538:	232c      	movs	r3, #44	; 0x2c
    653a:	2208      	movs	r2, #8
    653c:	18ba      	adds	r2, r7, r2
    653e:	18d0      	adds	r0, r2, r3
    6540:	4978      	ldr	r1, [pc, #480]	; (6724 <_http_client_request+0x3d8>)
    6542:	2202      	movs	r2, #2
    6544:	47b0      	blx	r6
					if( entity->get_contents_type )
    6546:	1c23      	adds	r3, r4, #0
    6548:	33b0      	adds	r3, #176	; 0xb0
    654a:	685b      	ldr	r3, [r3, #4]
    654c:	2b00      	cmp	r3, #0
    654e:	d025      	beq.n	659c <_http_client_request+0x250>
					{
						stream_writer_send_buffer(&writer, "Content-Type: ", strlen("Content-Type: "));
    6550:	232c      	movs	r3, #44	; 0x2c
    6552:	2208      	movs	r2, #8
    6554:	18ba      	adds	r2, r7, r2
    6556:	18d0      	adds	r0, r2, r3
    6558:	4978      	ldr	r1, [pc, #480]	; (673c <_http_client_request+0x3f0>)
    655a:	220e      	movs	r2, #14
    655c:	4e68      	ldr	r6, [pc, #416]	; (6700 <_http_client_request+0x3b4>)
    655e:	47b0      	blx	r6
						stream_writer_send_buffer(&writer, entity->get_contents_type(entity->priv_data), strlen(entity->get_contents_type(entity->priv_data)));
    6560:	23b0      	movs	r3, #176	; 0xb0
    6562:	4699      	mov	r9, r3
    6564:	44a1      	add	r9, r4
    6566:	464b      	mov	r3, r9
    6568:	6958      	ldr	r0, [r3, #20]
    656a:	685b      	ldr	r3, [r3, #4]
    656c:	4798      	blx	r3
    656e:	6078      	str	r0, [r7, #4]
    6570:	464b      	mov	r3, r9
    6572:	6958      	ldr	r0, [r3, #20]
    6574:	685b      	ldr	r3, [r3, #4]
    6576:	4798      	blx	r3
    6578:	4b67      	ldr	r3, [pc, #412]	; (6718 <_http_client_request+0x3cc>)
    657a:	4798      	blx	r3
    657c:	1c02      	adds	r2, r0, #0
    657e:	232c      	movs	r3, #44	; 0x2c
    6580:	2108      	movs	r1, #8
    6582:	468c      	mov	ip, r1
    6584:	44bc      	add	ip, r7
    6586:	4463      	add	r3, ip
    6588:	1c18      	adds	r0, r3, #0
    658a:	6879      	ldr	r1, [r7, #4]
    658c:	47b0      	blx	r6
						stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    658e:	232c      	movs	r3, #44	; 0x2c
    6590:	2208      	movs	r2, #8
    6592:	18ba      	adds	r2, r7, r2
    6594:	18d0      	adds	r0, r2, r3
    6596:	4963      	ldr	r1, [pc, #396]	; (6724 <_http_client_request+0x3d8>)
    6598:	2202      	movs	r2, #2
    659a:	47b0      	blx	r6
				}
				

			}
		}
		if (module->req.ext_header != NULL ) {
    659c:	23d4      	movs	r3, #212	; 0xd4
    659e:	58e6      	ldr	r6, [r4, r3]
    65a0:	2e00      	cmp	r6, #0
    65a2:	d00a      	beq.n	65ba <_http_client_request+0x26e>
			stream_writer_send_buffer(&writer,
    65a4:	1c30      	adds	r0, r6, #0
    65a6:	4b5c      	ldr	r3, [pc, #368]	; (6718 <_http_client_request+0x3cc>)
    65a8:	4798      	blx	r3
    65aa:	1c02      	adds	r2, r0, #0
    65ac:	232c      	movs	r3, #44	; 0x2c
    65ae:	2108      	movs	r1, #8
    65b0:	1879      	adds	r1, r7, r1
    65b2:	18c8      	adds	r0, r1, r3
    65b4:	1c31      	adds	r1, r6, #0
    65b6:	4b52      	ldr	r3, [pc, #328]	; (6700 <_http_client_request+0x3b4>)
    65b8:	4798      	blx	r3
				module->req.ext_header,
				strlen(module->req.ext_header));
		}

		//See the module->header
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
    65ba:	232c      	movs	r3, #44	; 0x2c
    65bc:	2208      	movs	r2, #8
    65be:	18ba      	adds	r2, r7, r2
    65c0:	18d0      	adds	r0, r2, r3
    65c2:	4958      	ldr	r1, [pc, #352]	; (6724 <_http_client_request+0x3d8>)
    65c4:	2202      	movs	r2, #2
    65c6:	4b4e      	ldr	r3, [pc, #312]	; (6700 <_http_client_request+0x3b4>)
    65c8:	4798      	blx	r3
		stream_writer_send_remain(&writer);
    65ca:	232c      	movs	r3, #44	; 0x2c
    65cc:	2208      	movs	r2, #8
    65ce:	18ba      	adds	r2, r7, r2
    65d0:	18d0      	adds	r0, r2, r3
    65d2:	4b5b      	ldr	r3, [pc, #364]	; (6740 <_http_client_request+0x3f4>)
    65d4:	4798      	blx	r3

		module->req.state = STATE_REQ_SEND_ENTITY;
    65d6:	2304      	movs	r3, #4
    65d8:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
    65da:	23cc      	movs	r3, #204	; 0xcc
    65dc:	58e2      	ldr	r2, [r4, r3]
    65de:	2a00      	cmp	r2, #0
    65e0:	db00      	blt.n	65e4 <_http_client_request+0x298>
    65e2:	e0b7      	b.n	6754 <_http_client_request+0x408>
    65e4:	1c23      	adds	r3, r4, #0
    65e6:	33b0      	adds	r3, #176	; 0xb0
    65e8:	68de      	ldr	r6, [r3, #12]
    65ea:	2e00      	cmp	r6, #0
    65ec:	d100      	bne.n	65f0 <_http_client_request+0x2a4>
    65ee:	e10f      	b.n	6810 <_http_client_request+0x4c4>
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    65f0:	6958      	ldr	r0, [r3, #20]
    65f2:	1d69      	adds	r1, r5, #5
    65f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
    65f6:	1fda      	subs	r2, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
    65f8:	23d0      	movs	r3, #208	; 0xd0
		/* Send first part of entity. */
	case STATE_REQ_SEND_ENTITY:
		if (module->req.content_length < 0 && entity->read) {
			/* Send chunked packet. */
			/*  Chunked header (size + \r\n) tail (\r\n) */
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
    65fa:	58e3      	ldr	r3, [r4, r3]
    65fc:	47b0      	blx	r6
    65fe:	1c06      	adds	r6, r0, #0
    6600:	43c3      	mvns	r3, r0
    6602:	17db      	asrs	r3, r3, #31
    6604:	401e      	ands	r6, r3
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
			if (size < 0) {
				/* If occurs problem during the operation, Close this socket. */
				size = 0;
			}
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
    6606:	220a      	movs	r2, #10
    6608:	712a      	strb	r2, [r5, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
    660a:	210d      	movs	r1, #13
    660c:	70e9      	strb	r1, [r5, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
    660e:	19ab      	adds	r3, r5, r6
    6610:	7159      	strb	r1, [r3, #5]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
    6612:	719a      	strb	r2, [r3, #6]
			if (size >= 0) {
				ptr = buffer + 2;
				*ptr = CH_LUT[size % 16];
    6614:	17f3      	asrs	r3, r6, #31
    6616:	0f19      	lsrs	r1, r3, #28
    6618:	1872      	adds	r2, r6, r1
    661a:	230f      	movs	r3, #15
    661c:	4013      	ands	r3, r2
    661e:	1a5b      	subs	r3, r3, r1
    6620:	2210      	movs	r2, #16
    6622:	2108      	movs	r1, #8
    6624:	468c      	mov	ip, r1
    6626:	44bc      	add	ip, r7
    6628:	4462      	add	r2, ip
    662a:	5cd3      	ldrb	r3, [r2, r3]
    662c:	70ab      	strb	r3, [r5, #2]
			}
			if (size >= 0x10) {
    662e:	2e0f      	cmp	r6, #15
    6630:	dc02      	bgt.n	6638 <_http_client_request+0x2ec>
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
			if (size >= 0) {
				ptr = buffer + 2;
    6632:	1cab      	adds	r3, r5, #2
    6634:	4699      	mov	r9, r3
    6636:	e012      	b.n	665e <_http_client_request+0x312>
				*ptr = CH_LUT[size % 16];
			}
			if (size >= 0x10) {
				ptr = buffer + 1;
    6638:	1c6b      	adds	r3, r5, #1
    663a:	4699      	mov	r9, r3
				*ptr = CH_LUT[(size / 0x10) % 16];
    663c:	17f3      	asrs	r3, r6, #31
    663e:	0f1b      	lsrs	r3, r3, #28
    6640:	199b      	adds	r3, r3, r6
    6642:	111a      	asrs	r2, r3, #4
    6644:	17db      	asrs	r3, r3, #31
    6646:	0f1b      	lsrs	r3, r3, #28
    6648:	18d2      	adds	r2, r2, r3
    664a:	210f      	movs	r1, #15
    664c:	400a      	ands	r2, r1
    664e:	1ad3      	subs	r3, r2, r3
    6650:	2210      	movs	r2, #16
    6652:	3907      	subs	r1, #7
    6654:	468c      	mov	ip, r1
    6656:	44bc      	add	ip, r7
    6658:	4462      	add	r2, ip
    665a:	5cd3      	ldrb	r3, [r2, r3]
    665c:	706b      	strb	r3, [r5, #1]
			}
			if (size >= 0x100) {
    665e:	2eff      	cmp	r6, #255	; 0xff
    6660:	dd11      	ble.n	6686 <_http_client_request+0x33a>
				ptr = buffer;
				*ptr = CH_LUT[(size / 0x100) % 16];
    6662:	17f3      	asrs	r3, r6, #31
    6664:	0e1b      	lsrs	r3, r3, #24
    6666:	199b      	adds	r3, r3, r6
    6668:	121a      	asrs	r2, r3, #8
    666a:	17db      	asrs	r3, r3, #31
    666c:	0f1b      	lsrs	r3, r3, #28
    666e:	18d2      	adds	r2, r2, r3
    6670:	210f      	movs	r1, #15
    6672:	400a      	ands	r2, r1
    6674:	1ad3      	subs	r3, r2, r3
    6676:	2210      	movs	r2, #16
    6678:	3907      	subs	r1, #7
    667a:	468c      	mov	ip, r1
    667c:	44bc      	add	ip, r7
    667e:	4462      	add	r2, ip
    6680:	5cd3      	ldrb	r3, [r2, r3]
    6682:	702b      	strb	r3, [r5, #0]
			if (size >= 0x10) {
				ptr = buffer + 1;
				*ptr = CH_LUT[(size / 0x10) % 16];
			}
			if (size >= 0x100) {
				ptr = buffer;
    6684:	46a9      	mov	r9, r5
				*ptr = CH_LUT[(size / 0x100) % 16];
			}		
			//module->sending = 1;
			printf("send data \r\n%s\r\n", ptr);
    6686:	482f      	ldr	r0, [pc, #188]	; (6744 <_http_client_request+0x3f8>)
    6688:	4649      	mov	r1, r9
    668a:	4b2f      	ldr	r3, [pc, #188]	; (6748 <_http_client_request+0x3fc>)
    668c:	4798      	blx	r3
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
    668e:	2000      	movs	r0, #0
    6690:	5620      	ldrsb	r0, [r4, r0]
    6692:	1d32      	adds	r2, r6, #4
    6694:	464b      	mov	r3, r9
    6696:	3303      	adds	r3, #3
    6698:	1b5b      	subs	r3, r3, r5
    669a:	18d2      	adds	r2, r2, r3
    669c:	b292      	uxth	r2, r2
    669e:	4649      	mov	r1, r9
    66a0:	2300      	movs	r3, #0
    66a2:	4d2a      	ldr	r5, [pc, #168]	; (674c <_http_client_request+0x400>)
    66a4:	47a8      	blx	r5
    66a6:	2800      	cmp	r0, #0
    66a8:	da05      	bge.n	66b6 <_http_client_request+0x36a>
				_http_client_clear_conn(module, -EIO);
    66aa:	1c20      	adds	r0, r4, #0
    66ac:	2105      	movs	r1, #5
    66ae:	4249      	negs	r1, r1
    66b0:	4b27      	ldr	r3, [pc, #156]	; (6750 <_http_client_request+0x404>)
    66b2:	4798      	blx	r3
				return;
    66b4:	e0b8      	b.n	6828 <_http_client_request+0x4dc>
			}

			module->req.sent_length += size;
    66b6:	22d0      	movs	r2, #208	; 0xd0
    66b8:	58a3      	ldr	r3, [r4, r2]
    66ba:	199b      	adds	r3, r3, r6
    66bc:	50a3      	str	r3, [r4, r2]

			if(size == 0) {
    66be:	2e00      	cmp	r6, #0
    66c0:	d000      	beq.n	66c4 <_http_client_request+0x378>
    66c2:	e0af      	b.n	6824 <_http_client_request+0x4d8>
				if (module->req.entity.close) {
    66c4:	23c0      	movs	r3, #192	; 0xc0
    66c6:	58e3      	ldr	r3, [r4, r3]
    66c8:	2b00      	cmp	r3, #0
    66ca:	d002      	beq.n	66d2 <_http_client_request+0x386>
					module->req.entity.close(module->req.entity.priv_data);
    66cc:	3a0c      	subs	r2, #12
    66ce:	58a0      	ldr	r0, [r4, r2]
    66d0:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    66d2:	2302      	movs	r3, #2
    66d4:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    66d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    66d8:	2b00      	cmp	r3, #0
    66da:	d100      	bne.n	66de <_http_client_request+0x392>
    66dc:	e0a2      	b.n	6824 <_http_client_request+0x4d8>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    66de:	1c20      	adds	r0, r4, #0
    66e0:	2101      	movs	r1, #1
    66e2:	220c      	movs	r2, #12
    66e4:	18ba      	adds	r2, r7, r2
    66e6:	4798      	blx	r3
    66e8:	e09c      	b.n	6824 <_http_client_request+0x4d8>
    66ea:	46c0      	nop			; (mov r8, r8)
    66ec:	0000b7d4 	.word	0x0000b7d4
    66f0:	00008a65 	.word	0x00008a65
    66f4:	0000610d 	.word	0x0000610d
    66f8:	00006ab5 	.word	0x00006ab5
    66fc:	0000b804 	.word	0x0000b804
    6700:	00006b19 	.word	0x00006b19
    6704:	0000b80c 	.word	0x0000b80c
    6708:	0000b814 	.word	0x0000b814
    670c:	0000b81c 	.word	0x0000b81c
    6710:	0000b824 	.word	0x0000b824
    6714:	0000b830 	.word	0x0000b830
    6718:	0000925d 	.word	0x0000925d
    671c:	0000b838 	.word	0x0000b838
    6720:	0000b844 	.word	0x0000b844
    6724:	0000b4d8 	.word	0x0000b4d8
    6728:	0000b84c 	.word	0x0000b84c
    672c:	0000b868 	.word	0x0000b868
    6730:	0000b888 	.word	0x0000b888
    6734:	00008e65 	.word	0x00008e65
    6738:	0000b88c 	.word	0x0000b88c
    673c:	0000b8a0 	.word	0x0000b8a0
    6740:	00006ac5 	.word	0x00006ac5
    6744:	0000b8b0 	.word	0x0000b8b0
    6748:	00008bed 	.word	0x00008bed
    674c:	00002bc5 	.word	0x00002bc5
    6750:	000062ad 	.word	0x000062ad
				}
				break;
			}
		} else if (module->req.content_length > 0 && entity->read) {
    6754:	2a00      	cmp	r2, #0
    6756:	dd5b      	ble.n	6810 <_http_client_request+0x4c4>
    6758:	1c23      	adds	r3, r4, #0
    675a:	33b0      	adds	r3, #176	; 0xb0
    675c:	68de      	ldr	r6, [r3, #12]
    675e:	2e00      	cmp	r6, #0
    6760:	d056      	beq.n	6810 <_http_client_request+0x4c4>
			/* Send entity. */
			if (module->req.sent_length >= module->req.content_length) {
    6762:	23d0      	movs	r3, #208	; 0xd0
    6764:	58e3      	ldr	r3, [r4, r3]
    6766:	429a      	cmp	r2, r3
    6768:	dc11      	bgt.n	678e <_http_client_request+0x442>
				/* Complete to send the buffer. */
				if (module->req.entity.close) {
    676a:	23c0      	movs	r3, #192	; 0xc0
    676c:	58e3      	ldr	r3, [r4, r3]
    676e:	2b00      	cmp	r3, #0
    6770:	d002      	beq.n	6778 <_http_client_request+0x42c>
					module->req.entity.close(module->req.entity.priv_data);
    6772:	22c4      	movs	r2, #196	; 0xc4
    6774:	58a0      	ldr	r0, [r4, r2]
    6776:	4798      	blx	r3
				}
				module->req.state = STATE_SOCK_CONNECTED;
    6778:	2302      	movs	r3, #2
    677a:	66e3      	str	r3, [r4, #108]	; 0x6c
				if (module->cb) {
    677c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    677e:	2b00      	cmp	r3, #0
    6780:	d050      	beq.n	6824 <_http_client_request+0x4d8>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    6782:	1c20      	adds	r0, r4, #0
    6784:	2101      	movs	r1, #1
    6786:	220c      	movs	r2, #12
    6788:	18ba      	adds	r2, r7, r2
    678a:	4798      	blx	r3
    678c:	e04a      	b.n	6824 <_http_client_request+0x4d8>
				}
				break;
			}
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
    678e:	1c22      	adds	r2, r4, #0
    6790:	32b0      	adds	r2, #176	; 0xb0
    6792:	6950      	ldr	r0, [r2, #20]
    6794:	1c29      	adds	r1, r5, #0
    6796:	6e62      	ldr	r2, [r4, #100]	; 0x64
    6798:	47b0      	blx	r6

			if (size < 0) {
    679a:	2800      	cmp	r0, #0
    679c:	da09      	bge.n	67b2 <_http_client_request+0x466>
				/* Entity occurs errors or EOS. */
				/* Disconnect it. */
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
    679e:	d002      	beq.n	67a6 <_http_client_request+0x45a>
    67a0:	2105      	movs	r1, #5
    67a2:	4249      	negs	r1, r1
    67a4:	e001      	b.n	67aa <_http_client_request+0x45e>
    67a6:	214d      	movs	r1, #77	; 0x4d
    67a8:	4249      	negs	r1, r1
    67aa:	1c20      	adds	r0, r4, #0
    67ac:	4b23      	ldr	r3, [pc, #140]	; (683c <_http_client_request+0x4f0>)
    67ae:	4798      	blx	r3
    67b0:	e038      	b.n	6824 <_http_client_request+0x4d8>
			} else {
				if (size > module->req.content_length - module->req.sent_length) {
    67b2:	23cc      	movs	r3, #204	; 0xcc
    67b4:	58e3      	ldr	r3, [r4, r3]
    67b6:	22d0      	movs	r2, #208	; 0xd0
    67b8:	58a2      	ldr	r2, [r4, r2]
    67ba:	1a9b      	subs	r3, r3, r2
    67bc:	4681      	mov	r9, r0
    67be:	4298      	cmp	r0, r3
    67c0:	dd00      	ble.n	67c4 <_http_client_request+0x478>
    67c2:	4699      	mov	r9, r3
					size = module->req.content_length - module->req.sent_length;
				}
				
				//module->sending = 1;
				if( size > 0 )
    67c4:	464b      	mov	r3, r9
    67c6:	2b00      	cmp	r3, #0
    67c8:	dd0c      	ble.n	67e4 <_http_client_request+0x498>
    67ca:	1c2e      	adds	r6, r5, #0
    67cc:	46ab      	mov	fp, r5
    67ce:	44cb      	add	fp, r9
				{
					for( int i=0 ; i<size ; i++)
					printf("%c", buffer[i]);
    67d0:	4b1b      	ldr	r3, [pc, #108]	; (6840 <_http_client_request+0x4f4>)
    67d2:	469a      	mov	sl, r3
    67d4:	7830      	ldrb	r0, [r6, #0]
    67d6:	47d0      	blx	sl
    67d8:	3601      	adds	r6, #1
				}
				
				//module->sending = 1;
				if( size > 0 )
				{
					for( int i=0 ; i<size ; i++)
    67da:	455e      	cmp	r6, fp
    67dc:	d1fa      	bne.n	67d4 <_http_client_request+0x488>
					printf("%c", buffer[i]);
					printf("\r\n");
    67de:	4819      	ldr	r0, [pc, #100]	; (6844 <_http_client_request+0x4f8>)
    67e0:	4b19      	ldr	r3, [pc, #100]	; (6848 <_http_client_request+0x4fc>)
    67e2:	4798      	blx	r3
				}				
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
    67e4:	2000      	movs	r0, #0
    67e6:	5620      	ldrsb	r0, [r4, r0]
    67e8:	464b      	mov	r3, r9
    67ea:	80bb      	strh	r3, [r7, #4]
    67ec:	b29a      	uxth	r2, r3
    67ee:	1c29      	adds	r1, r5, #0
    67f0:	2300      	movs	r3, #0
    67f2:	4e16      	ldr	r6, [pc, #88]	; (684c <_http_client_request+0x500>)
    67f4:	47b0      	blx	r6
    67f6:	2800      	cmp	r0, #0
    67f8:	da05      	bge.n	6806 <_http_client_request+0x4ba>
					_http_client_clear_conn(module, -EIO);
    67fa:	1c20      	adds	r0, r4, #0
    67fc:	2105      	movs	r1, #5
    67fe:	4249      	negs	r1, r1
    6800:	4b0e      	ldr	r3, [pc, #56]	; (683c <_http_client_request+0x4f0>)
    6802:	4798      	blx	r3
					return;
    6804:	e010      	b.n	6828 <_http_client_request+0x4dc>
				}
				module->req.sent_length += size;
    6806:	23d0      	movs	r3, #208	; 0xd0
    6808:	58e2      	ldr	r2, [r4, r3]
    680a:	444a      	add	r2, r9
    680c:	50e2      	str	r2, [r4, r3]
    680e:	e009      	b.n	6824 <_http_client_request+0x4d8>
			}
		} else {
			/* Has not any entity. */
			module->req.state = STATE_SOCK_CONNECTED;
    6810:	2302      	movs	r3, #2
    6812:	66e3      	str	r3, [r4, #108]	; 0x6c
			if (module->cb) {
    6814:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6816:	2b00      	cmp	r3, #0
    6818:	d004      	beq.n	6824 <_http_client_request+0x4d8>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
    681a:	1c20      	adds	r0, r4, #0
    681c:	2101      	movs	r1, #1
    681e:	220c      	movs	r2, #12
    6820:	18ba      	adds	r2, r7, r2
    6822:	4798      	blx	r3
    6824:	46c5      	mov	sp, r8
    6826:	e000      	b.n	682a <_http_client_request+0x4de>
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];

	if (module == NULL) {
		return;
    6828:	46c5      	mov	sp, r8
		break;
	default:
		/* Invalid status. */
		break;
	}
}
    682a:	46bd      	mov	sp, r7
    682c:	b013      	add	sp, #76	; 0x4c
    682e:	bc3c      	pop	{r2, r3, r4, r5}
    6830:	4690      	mov	r8, r2
    6832:	4699      	mov	r9, r3
    6834:	46a2      	mov	sl, r4
    6836:	46ab      	mov	fp, r5
    6838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    683a:	46c0      	nop			; (mov r8, r8)
    683c:	000062ad 	.word	0x000062ad
    6840:	00008c21 	.word	0x00008c21
    6844:	0000bb48 	.word	0x0000bb48
    6848:	00008d0d 	.word	0x00008d0d
    684c:	00002bc5 	.word	0x00002bc5

00006850 <http_client_send_request>:
	return 1;
}

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
    6850:	b5f0      	push	{r4, r5, r6, r7, lr}
    6852:	4647      	mov	r7, r8
    6854:	b480      	push	{r7}
    6856:	b088      	sub	sp, #32
    6858:	1c04      	adds	r4, r0, #0
    685a:	1c0e      	adds	r6, r1, #0
    685c:	4690      	mov	r8, r2
    685e:	9302      	str	r3, [sp, #8]
	uint8_t flag = 0;
	struct sockaddr_in addr_in;
	const char *uri = NULL;
	int i = 0, j = 0, reconnect = 0;

	if (module == NULL) {
    6860:	2800      	cmp	r0, #0
    6862:	d100      	bne.n	6866 <http_client_send_request+0x16>
    6864:	e0d3      	b.n	6a0e <http_client_send_request+0x1be>
		return -EINVAL;
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
    6866:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6868:	2b02      	cmp	r3, #2
    686a:	d900      	bls.n	686e <http_client_send_request+0x1e>
    686c:	e0d2      	b.n	6a14 <http_client_send_request+0x1c4>
		return -EBUSY;
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    686e:	1c08      	adds	r0, r1, #0
    6870:	4980      	ldr	r1, [pc, #512]	; (6a74 <http_client_send_request+0x224>)
    6872:	2207      	movs	r2, #7
    6874:	4b80      	ldr	r3, [pc, #512]	; (6a78 <http_client_send_request+0x228>)
    6876:	4798      	blx	r3
		i = 7;
    6878:	2707      	movs	r7, #7
	if (module->req.state > STATE_SOCK_CONNECTED) {
		return -EBUSY;
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
    687a:	2800      	cmp	r0, #0
    687c:	d007      	beq.n	688e <http_client_send_request+0x3e>
		i = 7;
	} else if (!strncmp(url, "https://", 8)) {
    687e:	1c30      	adds	r0, r6, #0
    6880:	497e      	ldr	r1, [pc, #504]	; (6a7c <http_client_send_request+0x22c>)
    6882:	2208      	movs	r2, #8
    6884:	4b7c      	ldr	r3, [pc, #496]	; (6a78 <http_client_send_request+0x228>)
    6886:	4798      	blx	r3
		i = 8;
    6888:	4241      	negs	r1, r0
    688a:	4141      	adcs	r1, r0
    688c:	00cf      	lsls	r7, r1, #3
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
    688e:	19f5      	adds	r5, r6, r7
    6890:	1c63      	adds	r3, r4, #1
    6892:	9301      	str	r3, [sp, #4]
    6894:	1c18      	adds	r0, r3, #0
    6896:	4b7a      	ldr	r3, [pc, #488]	; (6a80 <http_client_send_request+0x230>)
    6898:	4798      	blx	r3
    689a:	1c02      	adds	r2, r0, #0
    689c:	9801      	ldr	r0, [sp, #4]
    689e:	1c29      	adds	r1, r5, #0
    68a0:	4b75      	ldr	r3, [pc, #468]	; (6a78 <http_client_send_request+0x228>)
    68a2:	4798      	blx	r3
    68a4:	9003      	str	r0, [sp, #12]

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    68a6:	782b      	ldrb	r3, [r5, #0]
    68a8:	2b00      	cmp	r3, #0
    68aa:	d00e      	beq.n	68ca <http_client_send_request+0x7a>
    68ac:	2b2f      	cmp	r3, #47	; 0x2f
    68ae:	d00e      	beq.n	68ce <http_client_send_request+0x7e>
    68b0:	1c79      	adds	r1, r7, #1
    68b2:	1871      	adds	r1, r6, r1
    68b4:	2200      	movs	r2, #0
		module->host[j++] = url[i];
    68b6:	3201      	adds	r2, #1
    68b8:	54a3      	strb	r3, [r4, r2]
	} else if (!strncmp(url, "https://", 8)) {
		i = 8;
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));

	for (; url[i] != '\0' && url[i] != '/'; i++) {
    68ba:	1c0d      	adds	r5, r1, #0
    68bc:	780b      	ldrb	r3, [r1, #0]
    68be:	2b00      	cmp	r3, #0
    68c0:	d006      	beq.n	68d0 <http_client_send_request+0x80>
    68c2:	3101      	adds	r1, #1
    68c4:	2b2f      	cmp	r3, #47	; 0x2f
    68c6:	d1f6      	bne.n	68b6 <http_client_send_request+0x66>
    68c8:	e002      	b.n	68d0 <http_client_send_request+0x80>
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
	uint8_t flag = 0;
	struct sockaddr_in addr_in;
	const char *uri = NULL;
	int i = 0, j = 0, reconnect = 0;
    68ca:	2200      	movs	r2, #0
    68cc:	e000      	b.n	68d0 <http_client_send_request+0x80>
    68ce:	2200      	movs	r2, #0
	reconnect = strncmp(module->host, url + i, strlen(module->host));

	for (; url[i] != '\0' && url[i] != '/'; i++) {
		module->host[j++] = url[i];
	}
	module->host[j] = '\0';
    68d0:	18a2      	adds	r2, r4, r2
    68d2:	2300      	movs	r3, #0
    68d4:	7053      	strb	r3, [r2, #1]
	uri = url + i;

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
    68d6:	7863      	ldrb	r3, [r4, #1]
    68d8:	2b00      	cmp	r3, #0
    68da:	d100      	bne.n	68de <http_client_send_request+0x8e>
    68dc:	e09d      	b.n	6a1a <http_client_send_request+0x1ca>
		return -EINVAL;
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
    68de:	1c28      	adds	r0, r5, #0
    68e0:	4b67      	ldr	r3, [pc, #412]	; (6a80 <http_client_send_request+0x230>)
    68e2:	4798      	blx	r3
    68e4:	283f      	cmp	r0, #63	; 0x3f
    68e6:	d900      	bls.n	68ea <http_client_send_request+0x9a>
    68e8:	e09a      	b.n	6a20 <http_client_send_request+0x1d0>
		return -ENAMETOOLONG;
	}

	if (module->req.ext_header != NULL) {
    68ea:	23d4      	movs	r3, #212	; 0xd4
    68ec:	58e0      	ldr	r0, [r4, r3]
    68ee:	2800      	cmp	r0, #0
    68f0:	d001      	beq.n	68f6 <http_client_send_request+0xa6>
		free(module->req.ext_header);
    68f2:	4b64      	ldr	r3, [pc, #400]	; (6a84 <http_client_send_request+0x234>)
    68f4:	4798      	blx	r3
	}
	if (ext_header != NULL) {
    68f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    68f8:	2b00      	cmp	r3, #0
    68fa:	d007      	beq.n	690c <http_client_send_request+0xbc>
		module->req.ext_header = strdup(ext_header);
    68fc:	1c18      	adds	r0, r3, #0
    68fe:	4b62      	ldr	r3, [pc, #392]	; (6a88 <http_client_send_request+0x238>)
    6900:	4798      	blx	r3
    6902:	23d4      	movs	r3, #212	; 0xd4
    6904:	50e0      	str	r0, [r4, r3]
		if (module->req.ext_header == NULL) {
    6906:	2800      	cmp	r0, #0
    6908:	d103      	bne.n	6912 <http_client_send_request+0xc2>
    690a:	e08c      	b.n	6a26 <http_client_send_request+0x1d6>
			return -ENOMEM;
		}
	} else {
		module->req.ext_header = NULL;
    690c:	2200      	movs	r2, #0
    690e:	23d4      	movs	r3, #212	; 0xd4
    6910:	50e2      	str	r2, [r4, r3]
	}

	module->sending = 0;
    6912:	2241      	movs	r2, #65	; 0x41
    6914:	5ca3      	ldrb	r3, [r4, r2]
    6916:	2101      	movs	r1, #1
    6918:	438b      	bics	r3, r1
    691a:	54a3      	strb	r3, [r4, r2]
	module->recved_size = 0;
    691c:	2300      	movs	r3, #0
    691e:	6463      	str	r3, [r4, #68]	; 0x44
	if (uri[0] == '/') {
    6920:	782b      	ldrb	r3, [r5, #0]
    6922:	2b2f      	cmp	r3, #47	; 0x2f
    6924:	d105      	bne.n	6932 <http_client_send_request+0xe2>
		strcpy(module->req.uri, uri);
    6926:	1c20      	adds	r0, r4, #0
    6928:	3070      	adds	r0, #112	; 0x70
    692a:	1c29      	adds	r1, r5, #0
    692c:	4b57      	ldr	r3, [pc, #348]	; (6a8c <http_client_send_request+0x23c>)
    692e:	4798      	blx	r3
    6930:	e00a      	b.n	6948 <http_client_send_request+0xf8>
		} else {
		module->req.uri[0] = '/';
    6932:	222f      	movs	r2, #47	; 0x2f
    6934:	2370      	movs	r3, #112	; 0x70
    6936:	54e2      	strb	r2, [r4, r3]
		if (uri[0] != 0) {
    6938:	782b      	ldrb	r3, [r5, #0]
    693a:	2b00      	cmp	r3, #0
    693c:	d004      	beq.n	6948 <http_client_send_request+0xf8>
			strcpy(module->req.uri + 1, uri);
    693e:	1c20      	adds	r0, r4, #0
    6940:	3071      	adds	r0, #113	; 0x71
    6942:	1c29      	adds	r1, r5, #0
    6944:	4b51      	ldr	r3, [pc, #324]	; (6a8c <http_client_send_request+0x23c>)
    6946:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
    6948:	9b02      	ldr	r3, [sp, #8]
    694a:	2b00      	cmp	r3, #0
    694c:	d006      	beq.n	695c <http_client_send_request+0x10c>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
    694e:	1c20      	adds	r0, r4, #0
    6950:	30b0      	adds	r0, #176	; 0xb0
    6952:	1c19      	adds	r1, r3, #0
    6954:	2218      	movs	r2, #24
    6956:	4b4e      	ldr	r3, [pc, #312]	; (6a90 <http_client_send_request+0x240>)
    6958:	4798      	blx	r3
    695a:	e005      	b.n	6968 <http_client_send_request+0x118>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
    695c:	1c20      	adds	r0, r4, #0
    695e:	30b0      	adds	r0, #176	; 0xb0
    6960:	2100      	movs	r1, #0
    6962:	2218      	movs	r2, #24
    6964:	4b4b      	ldr	r3, [pc, #300]	; (6a94 <http_client_send_request+0x244>)
    6966:	4798      	blx	r3
	}

	module->req.method = method;
    6968:	23c8      	movs	r3, #200	; 0xc8
    696a:	4642      	mov	r2, r8
    696c:	54e2      	strb	r2, [r4, r3]
	
	switch (module->req.state) {
    696e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    6970:	2b01      	cmp	r3, #1
    6972:	d004      	beq.n	697e <http_client_send_request+0x12e>
    6974:	2b00      	cmp	r3, #0
    6976:	d015      	beq.n	69a4 <http_client_send_request+0x154>
    6978:	2b02      	cmp	r3, #2
    697a:	d005      	beq.n	6988 <http_client_send_request+0x138>
    697c:	e056      	b.n	6a2c <http_client_send_request+0x1dc>
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    697e:	2000      	movs	r0, #0

	module->req.method = method;
	
	switch (module->req.state) {
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
    6980:	9b03      	ldr	r3, [sp, #12]
    6982:	2b00      	cmp	r3, #0
    6984:	d10a      	bne.n	699c <http_client_send_request+0x14c>
    6986:	e070      	b.n	6a6a <http_client_send_request+0x21a>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
    6988:	9b03      	ldr	r3, [sp, #12]
    698a:	2b00      	cmp	r3, #0
    698c:	d106      	bne.n	699c <http_client_send_request+0x14c>
			module->req.state = STATE_REQ_SEND_HEADER;
    698e:	3303      	adds	r3, #3
    6990:	66e3      	str	r3, [r4, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
    6992:	1c20      	adds	r0, r4, #0
    6994:	4b40      	ldr	r3, [pc, #256]	; (6a98 <http_client_send_request+0x248>)
    6996:	4798      	blx	r3
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    6998:	2000      	movs	r0, #0
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
			module->req.state = STATE_REQ_SEND_HEADER;
			/* Send request immediately. */
			_http_client_request(module);
			break;
    699a:	e066      	b.n	6a6a <http_client_send_request+0x21a>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
    699c:	1c20      	adds	r0, r4, #0
    699e:	2100      	movs	r1, #0
    69a0:	4b3e      	ldr	r3, [pc, #248]	; (6a9c <http_client_send_request+0x24c>)
    69a2:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
    69a4:	2352      	movs	r3, #82	; 0x52
    69a6:	5ce2      	ldrb	r2, [r4, r3]
    69a8:	1e53      	subs	r3, r2, #1
    69aa:	419a      	sbcs	r2, r3
			flag |= SOCKET_FLAGS_SSL;
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
    69ac:	b2d2      	uxtb	r2, r2
    69ae:	2002      	movs	r0, #2
    69b0:	2101      	movs	r1, #1
    69b2:	4b3b      	ldr	r3, [pc, #236]	; (6aa0 <http_client_send_request+0x250>)
    69b4:	4798      	blx	r3
    69b6:	7020      	strb	r0, [r4, #0]
		if (module->sock >= 0) {
    69b8:	2800      	cmp	r0, #0
    69ba:	db3a      	blt.n	6a32 <http_client_send_request+0x1e2>
			module_ref_inst[module->sock] = module;
    69bc:	0080      	lsls	r0, r0, #2
    69be:	4b39      	ldr	r3, [pc, #228]	; (6aa4 <http_client_send_request+0x254>)
    69c0:	50c4      	str	r4, [r0, r3]
    69c2:	9d01      	ldr	r5, [sp, #4]
	_http_client_clear_conn(module_inst, -ETIME);
}

static int _is_ip(const char *host)
{
	uint32_t isv6 = 0;
    69c4:	2100      	movs	r1, #0
	char ch;

	while (*host != '\0') {
		ch = *host++;
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    69c6:	2620      	movs	r6, #32
			isv6 = 1;
    69c8:	2001      	movs	r0, #1
		} else if (ch == '.') {
			if (isv6) {
				return 0;
			}
		} else if ((ch & 0x30) != 0x30) {
    69ca:	2730      	movs	r7, #48	; 0x30
    69cc:	e017      	b.n	69fe <http_client_send_request+0x1ae>
{
	uint32_t isv6 = 0;
	char ch;

	while (*host != '\0') {
		ch = *host++;
    69ce:	3501      	adds	r5, #1
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
    69d0:	1c13      	adds	r3, r2, #0
    69d2:	43b3      	bics	r3, r6
    69d4:	3b41      	subs	r3, #65	; 0x41
    69d6:	2b05      	cmp	r3, #5
    69d8:	d90c      	bls.n	69f4 <http_client_send_request+0x1a4>
    69da:	2a3a      	cmp	r2, #58	; 0x3a
    69dc:	d00c      	beq.n	69f8 <http_client_send_request+0x1a8>
    69de:	2a2f      	cmp	r2, #47	; 0x2f
    69e0:	d00c      	beq.n	69fc <http_client_send_request+0x1ac>
			isv6 = 1;
		} else if (ch == '.') {
    69e2:	2a2e      	cmp	r2, #46	; 0x2e
    69e4:	d102      	bne.n	69ec <http_client_send_request+0x19c>
			if (isv6) {
    69e6:	2900      	cmp	r1, #0
    69e8:	d009      	beq.n	69fe <http_client_send_request+0x1ae>
    69ea:	e03a      	b.n	6a62 <http_client_send_request+0x212>
				return 0;
			}
		} else if ((ch & 0x30) != 0x30) {
    69ec:	403a      	ands	r2, r7
    69ee:	2a30      	cmp	r2, #48	; 0x30
    69f0:	d005      	beq.n	69fe <http_client_send_request+0x1ae>
    69f2:	e036      	b.n	6a62 <http_client_send_request+0x212>
	char ch;

	while (*host != '\0') {
		ch = *host++;
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
			isv6 = 1;
    69f4:	1c01      	adds	r1, r0, #0
    69f6:	e002      	b.n	69fe <http_client_send_request+0x1ae>
    69f8:	1c01      	adds	r1, r0, #0
    69fa:	e000      	b.n	69fe <http_client_send_request+0x1ae>
    69fc:	1c01      	adds	r1, r0, #0
static int _is_ip(const char *host)
{
	uint32_t isv6 = 0;
	char ch;

	while (*host != '\0') {
    69fe:	782a      	ldrb	r2, [r5, #0]
    6a00:	2a00      	cmp	r2, #0
    6a02:	d1e4      	bne.n	69ce <http_client_send_request+0x17e>
    6a04:	e018      	b.n	6a38 <http_client_send_request+0x1e8>
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
			} else {
				gethostbyname((uint8*)module->host);
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
    6a06:	2301      	movs	r3, #1
    6a08:	66e3      	str	r3, [r4, #108]	; 0x6c
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
    6a0a:	2000      	movs	r0, #0
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
		} else {
			return -ENOSPC;
		}
		break;
    6a0c:	e02d      	b.n	6a6a <http_client_send_request+0x21a>
	struct sockaddr_in addr_in;
	const char *uri = NULL;
	int i = 0, j = 0, reconnect = 0;

	if (module == NULL) {
		return -EINVAL;
    6a0e:	2016      	movs	r0, #22
    6a10:	4240      	negs	r0, r0
    6a12:	e02a      	b.n	6a6a <http_client_send_request+0x21a>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
		return -EBUSY;
    6a14:	2010      	movs	r0, #16
    6a16:	4240      	negs	r0, r0
    6a18:	e027      	b.n	6a6a <http_client_send_request+0x21a>
	module->host[j] = '\0';
	uri = url + i;

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
		return -EINVAL;
    6a1a:	2016      	movs	r0, #22
    6a1c:	4240      	negs	r0, r0
    6a1e:	e024      	b.n	6a6a <http_client_send_request+0x21a>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
		return -ENAMETOOLONG;
    6a20:	205b      	movs	r0, #91	; 0x5b
    6a22:	4240      	negs	r0, r0
    6a24:	e021      	b.n	6a6a <http_client_send_request+0x21a>
		free(module->req.ext_header);
	}
	if (ext_header != NULL) {
		module->req.ext_header = strdup(ext_header);
		if (module->req.ext_header == NULL) {
			return -ENOMEM;
    6a26:	200c      	movs	r0, #12
    6a28:	4240      	negs	r0, r0
    6a2a:	e01e      	b.n	6a6a <http_client_send_request+0x21a>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
    6a2c:	200b      	movs	r0, #11
    6a2e:	4240      	negs	r0, r0
    6a30:	e01b      	b.n	6a6a <http_client_send_request+0x21a>
			} else {
				gethostbyname((uint8*)module->host);
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
		} else {
			return -ENOSPC;
    6a32:	201c      	movs	r0, #28
    6a34:	4240      	negs	r0, r0
    6a36:	e018      	b.n	6a6a <http_client_send_request+0x21a>
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
		if (module->sock >= 0) {
			module_ref_inst[module->sock] = module;
			if (_is_ip(module->host)) {
				addr_in.sin_family = AF_INET;
    6a38:	2302      	movs	r3, #2
    6a3a:	aa04      	add	r2, sp, #16
    6a3c:	8013      	strh	r3, [r2, #0]
				addr_in.sin_port = _htons(module->config.port);
    6a3e:	334e      	adds	r3, #78	; 0x4e
    6a40:	5ae3      	ldrh	r3, [r4, r3]
    6a42:	021a      	lsls	r2, r3, #8
    6a44:	0a1b      	lsrs	r3, r3, #8
    6a46:	4313      	orrs	r3, r2
    6a48:	aa04      	add	r2, sp, #16
    6a4a:	8053      	strh	r3, [r2, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
    6a4c:	9801      	ldr	r0, [sp, #4]
    6a4e:	4b16      	ldr	r3, [pc, #88]	; (6aa8 <http_client_send_request+0x258>)
    6a50:	4798      	blx	r3
    6a52:	9005      	str	r0, [sp, #20]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
    6a54:	2000      	movs	r0, #0
    6a56:	5620      	ldrsb	r0, [r4, r0]
    6a58:	a904      	add	r1, sp, #16
    6a5a:	2210      	movs	r2, #16
    6a5c:	4b13      	ldr	r3, [pc, #76]	; (6aac <http_client_send_request+0x25c>)
    6a5e:	4798      	blx	r3
    6a60:	e7d1      	b.n	6a06 <http_client_send_request+0x1b6>
			} else {
				gethostbyname((uint8*)module->host);
    6a62:	9801      	ldr	r0, [sp, #4]
    6a64:	4b12      	ldr	r3, [pc, #72]	; (6ab0 <http_client_send_request+0x260>)
    6a66:	4798      	blx	r3
    6a68:	e7cd      	b.n	6a06 <http_client_send_request+0x1b6>
		/* Session was busy. Try again later. */
		return -EAGAIN;
	}

	return 0;
}
    6a6a:	b008      	add	sp, #32
    6a6c:	bc04      	pop	{r2}
    6a6e:	4690      	mov	r8, r2
    6a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a72:	46c0      	nop			; (mov r8, r8)
    6a74:	0000b8c4 	.word	0x0000b8c4
    6a78:	0000926b 	.word	0x0000926b
    6a7c:	0000b8cc 	.word	0x0000b8cc
    6a80:	0000925d 	.word	0x0000925d
    6a84:	00008a51 	.word	0x00008a51
    6a88:	00008ecd 	.word	0x00008ecd
    6a8c:	00008ebd 	.word	0x00008ebd
    6a90:	00008a65 	.word	0x00008a65
    6a94:	00008a9f 	.word	0x00008a9f
    6a98:	0000634d 	.word	0x0000634d
    6a9c:	000062ad 	.word	0x000062ad
    6aa0:	00002a69 	.word	0x00002a69
    6aa4:	200002e8 	.word	0x200002e8
    6aa8:	00002d81 	.word	0x00002d81
    6aac:	00002b2d 	.word	0x00002b2d
    6ab0:	00002ded 	.word	0x00002ded

00006ab4 <stream_writer_init>:
#include <string.h>
#include <asf.h>

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
	writer->max_size = max_length;
    6ab4:	6002      	str	r2, [r0, #0]
	writer->buffer = buffer;
    6ab6:	6101      	str	r1, [r0, #16]
	writer->written = 0;
    6ab8:	2200      	movs	r2, #0
    6aba:	6042      	str	r2, [r0, #4]
	writer->write_func = func;
    6abc:	6083      	str	r3, [r0, #8]
	writer->priv_data = priv_data;
    6abe:	9b00      	ldr	r3, [sp, #0]
    6ac0:	60c3      	str	r3, [r0, #12]
}
    6ac2:	4770      	bx	lr

00006ac4 <stream_writer_send_remain>:
		stream_writer_send_8(writer, *buffer);
	}
}

void stream_writer_send_remain(struct stream_writer * writer)
{
    6ac4:	b510      	push	{r4, lr}
	if(writer->written > 0) {
    6ac6:	6842      	ldr	r2, [r0, #4]
    6ac8:	2a00      	cmp	r2, #0
    6aca:	d006      	beq.n	6ada <stream_writer_send_remain+0x16>
    6acc:	1c04      	adds	r4, r0, #0
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
    6ace:	68c0      	ldr	r0, [r0, #12]
    6ad0:	6921      	ldr	r1, [r4, #16]
    6ad2:	68a3      	ldr	r3, [r4, #8]
    6ad4:	4798      	blx	r3
		writer->written = 0;
    6ad6:	2300      	movs	r3, #0
    6ad8:	6063      	str	r3, [r4, #4]
	}
}
    6ada:	bd10      	pop	{r4, pc}

00006adc <stream_writer_send_8>:
	writer->write_func = func;
	writer->priv_data = priv_data;
}

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
    6adc:	b538      	push	{r3, r4, r5, lr}
    6ade:	1c04      	adds	r4, r0, #0
    6ae0:	1c0d      	adds	r5, r1, #0
	int remain = writer->max_size - writer->written;
    6ae2:	6803      	ldr	r3, [r0, #0]
    6ae4:	6842      	ldr	r2, [r0, #4]
    6ae6:	1a9b      	subs	r3, r3, r2
	
	if (remain < 1) {
    6ae8:	2b00      	cmp	r3, #0
    6aea:	dc01      	bgt.n	6af0 <stream_writer_send_8+0x14>
		stream_writer_send_remain(writer);
    6aec:	4b03      	ldr	r3, [pc, #12]	; (6afc <stream_writer_send_8+0x20>)
    6aee:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
    6af0:	6922      	ldr	r2, [r4, #16]
    6af2:	6863      	ldr	r3, [r4, #4]
    6af4:	1c59      	adds	r1, r3, #1
    6af6:	6061      	str	r1, [r4, #4]
    6af8:	54d5      	strb	r5, [r2, r3]
}
    6afa:	bd38      	pop	{r3, r4, r5, pc}
    6afc:	00006ac5 	.word	0x00006ac5

00006b00 <stream_writer_send_16BE>:

void stream_writer_send_16BE(struct stream_writer * writer, int16_t value)
{
    6b00:	b570      	push	{r4, r5, r6, lr}
    6b02:	1c06      	adds	r6, r0, #0
    6b04:	1c0c      	adds	r4, r1, #0
	stream_writer_send_8(writer, (value >> 8) & 0xFF);
    6b06:	1209      	asrs	r1, r1, #8
    6b08:	4d02      	ldr	r5, [pc, #8]	; (6b14 <stream_writer_send_16BE+0x14>)
    6b0a:	47a8      	blx	r5
	stream_writer_send_8(writer, value & 0xFF);
    6b0c:	b261      	sxtb	r1, r4
    6b0e:	1c30      	adds	r0, r6, #0
    6b10:	47a8      	blx	r5
}
    6b12:	bd70      	pop	{r4, r5, r6, pc}
    6b14:	00006add 	.word	0x00006add

00006b18 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
    6b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b1a:	1c06      	adds	r6, r0, #0
    6b1c:	1c0d      	adds	r5, r1, #0
    6b1e:	1e14      	subs	r4, r2, #0
	for (; length > 0; length--, buffer++) {
    6b20:	d008      	beq.n	6b34 <stream_writer_send_buffer+0x1c>
		stream_writer_send_8(writer, *buffer);
    6b22:	4f05      	ldr	r7, [pc, #20]	; (6b38 <stream_writer_send_buffer+0x20>)
    6b24:	2100      	movs	r1, #0
    6b26:	5669      	ldrsb	r1, [r5, r1]
    6b28:	1c30      	adds	r0, r6, #0
    6b2a:	47b8      	blx	r7
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
	for (; length > 0; length--, buffer++) {
    6b2c:	3c01      	subs	r4, #1
    6b2e:	3501      	adds	r5, #1
    6b30:	2c00      	cmp	r4, #0
    6b32:	d1f7      	bne.n	6b24 <stream_writer_send_buffer+0xc>
		stream_writer_send_8(writer, *buffer);
	}
}
    6b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b36:	46c0      	nop			; (mov r8, r8)
    6b38:	00006add 	.word	0x00006add

00006b3c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
	sw_timer_tick++;
    6b3c:	4a02      	ldr	r2, [pc, #8]	; (6b48 <sw_timer_tcc_callback+0xc>)
    6b3e:	6813      	ldr	r3, [r2, #0]
    6b40:	3301      	adds	r3, #1
    6b42:	6013      	str	r3, [r2, #0]
}
    6b44:	4770      	bx	lr
    6b46:	46c0      	nop			; (mov r8, r8)
    6b48:	20000304 	.word	0x20000304

00006b4c <sw_timer_get_config_defaults>:

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
	Assert(config);
	
	config->accuracy = 100;
    6b4c:	2364      	movs	r3, #100	; 0x64
    6b4e:	8043      	strh	r3, [r0, #2]
	config->tcc_dev = 0;
    6b50:	2300      	movs	r3, #0
    6b52:	7003      	strb	r3, [r0, #0]
	config->tcc_callback_channel = 0;
    6b54:	7043      	strb	r3, [r0, #1]
}
    6b56:	4770      	bx	lr

00006b58 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
    6b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b5a:	4647      	mov	r7, r8
    6b5c:	b480      	push	{r7}
    6b5e:	b0ac      	sub	sp, #176	; 0xb0
    6b60:	1c0d      	adds	r5, r1, #0
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
    6b62:	466e      	mov	r6, sp
    6b64:	4b1d      	ldr	r3, [pc, #116]	; (6bdc <sw_timer_init+0x84>)
    6b66:	466a      	mov	r2, sp
    6b68:	cb92      	ldmia	r3!, {r1, r4, r7}
    6b6a:	c292      	stmia	r2!, {r1, r4, r7}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);
	
	module_inst->accuracy = config->accuracy;
    6b6c:	886b      	ldrh	r3, [r5, #2]
    6b6e:	6543      	str	r3, [r0, #84]	; 0x54
	
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
    6b70:	3014      	adds	r0, #20
    6b72:	1c04      	adds	r4, r0, #0
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
    6b74:	1c17      	adds	r7, r2, #0
    6b76:	782b      	ldrb	r3, [r5, #0]
    6b78:	009b      	lsls	r3, r3, #2
    6b7a:	5999      	ldr	r1, [r3, r6]
    6b7c:	1c10      	adds	r0, r2, #0
    6b7e:	4b18      	ldr	r3, [pc, #96]	; (6be0 <sw_timer_init+0x88>)
    6b80:	4798      	blx	r3
 *
 * \return Current CPU frequency in Hz.
 */
static inline uint32_t system_cpu_clock_get_hz(void)
{
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
    6b82:	2000      	movs	r0, #0
    6b84:	4b17      	ldr	r3, [pc, #92]	; (6be4 <sw_timer_init+0x8c>)
    6b86:	4798      	blx	r3
    6b88:	4b17      	ldr	r3, [pc, #92]	; (6be8 <sw_timer_init+0x90>)
    6b8a:	7a1b      	ldrb	r3, [r3, #8]
    6b8c:	b2db      	uxtb	r3, r3
    6b8e:	40d8      	lsrs	r0, r3
    6b90:	4680      	mov	r8, r0
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
    6b92:	8869      	ldrh	r1, [r5, #2]
    6b94:	20fa      	movs	r0, #250	; 0xfa
    6b96:	0200      	lsls	r0, r0, #8
    6b98:	4b14      	ldr	r3, [pc, #80]	; (6bec <sw_timer_init+0x94>)
    6b9a:	4798      	blx	r3
    6b9c:	1c01      	adds	r1, r0, #0
    6b9e:	4640      	mov	r0, r8
    6ba0:	4b13      	ldr	r3, [pc, #76]	; (6bf0 <sw_timer_init+0x98>)
    6ba2:	4798      	blx	r3
    6ba4:	6078      	str	r0, [r7, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
    6ba6:	2305      	movs	r3, #5
    6ba8:	72fb      	strb	r3, [r7, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
    6baa:	782b      	ldrb	r3, [r5, #0]
    6bac:	009b      	lsls	r3, r3, #2
    6bae:	5999      	ldr	r1, [r3, r6]
    6bb0:	1c20      	adds	r0, r4, #0
    6bb2:	1c3a      	adds	r2, r7, #0
    6bb4:	4b0f      	ldr	r3, [pc, #60]	; (6bf4 <sw_timer_init+0x9c>)
    6bb6:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    6bb8:	786a      	ldrb	r2, [r5, #1]
    6bba:	3208      	adds	r2, #8
    6bbc:	b2d2      	uxtb	r2, r2
    6bbe:	1c20      	adds	r0, r4, #0
    6bc0:	490d      	ldr	r1, [pc, #52]	; (6bf8 <sw_timer_init+0xa0>)
    6bc2:	4b0e      	ldr	r3, [pc, #56]	; (6bfc <sw_timer_init+0xa4>)
    6bc4:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
    6bc6:	7869      	ldrb	r1, [r5, #1]
    6bc8:	3108      	adds	r1, #8
    6bca:	b2c9      	uxtb	r1, r1
    6bcc:	1c20      	adds	r0, r4, #0
    6bce:	4b0c      	ldr	r3, [pc, #48]	; (6c00 <sw_timer_init+0xa8>)
    6bd0:	4798      	blx	r3
}
    6bd2:	b02c      	add	sp, #176	; 0xb0
    6bd4:	bc04      	pop	{r2}
    6bd6:	4690      	mov	r8, r2
    6bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6bda:	46c0      	nop			; (mov r8, r8)
    6bdc:	0000b920 	.word	0x0000b920
    6be0:	00005479 	.word	0x00005479
    6be4:	000051d9 	.word	0x000051d9
    6be8:	40000400 	.word	0x40000400
    6bec:	00008165 	.word	0x00008165
    6bf0:	00008045 	.word	0x00008045
    6bf4:	000055c5 	.word	0x000055c5
    6bf8:	00006b3d 	.word	0x00006b3d
    6bfc:	000059ed 	.word	0x000059ed
    6c00:	00005a05 	.word	0x00005a05

00006c04 <sw_timer_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    6c04:	6942      	ldr	r2, [r0, #20]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    6c06:	2102      	movs	r1, #2
    6c08:	6893      	ldr	r3, [r2, #8]
    6c0a:	4219      	tst	r1, r3
    6c0c:	d1fc      	bne.n	6c08 <sw_timer_enable+0x4>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    6c0e:	6811      	ldr	r1, [r2, #0]
    6c10:	2302      	movs	r3, #2
    6c12:	430b      	orrs	r3, r1
    6c14:	6013      	str	r3, [r2, #0]
	Assert(module_inst);
	
	tcc_module = &module_inst->tcc_inst;
	
	tcc_enable(tcc_module);
}
    6c16:	4770      	bx	lr

00006c18 <sw_timer_register_callback>:
	tcc_disable(tcc_module);
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
	sw_timer_callback_t callback, void *context, uint32_t period)
{
    6c18:	b510      	push	{r4, lr}
	struct sw_timer_handle *handler;
	
	Assert(module_inst);
	
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used == 0) {
    6c1a:	7804      	ldrb	r4, [r0, #0]
    6c1c:	07e4      	lsls	r4, r4, #31
    6c1e:	d411      	bmi.n	6c44 <sw_timer_register_callback+0x2c>
    6c20:	1c04      	adds	r4, r0, #0
			handler = &module_inst->handler[index];
			handler->callback = callback;
    6c22:	6041      	str	r1, [r0, #4]
			handler->callback_enable = 0;
    6c24:	7801      	ldrb	r1, [r0, #0]
    6c26:	2002      	movs	r0, #2
    6c28:	4381      	bics	r1, r0
    6c2a:	7021      	strb	r1, [r4, #0]
			handler->context = context;
    6c2c:	60a2      	str	r2, [r4, #8]
			handler->period = period / module_inst->accuracy;
    6c2e:	1c18      	adds	r0, r3, #0
    6c30:	6d61      	ldr	r1, [r4, #84]	; 0x54
    6c32:	4b06      	ldr	r3, [pc, #24]	; (6c4c <sw_timer_register_callback+0x34>)
    6c34:	4798      	blx	r3
    6c36:	60e0      	str	r0, [r4, #12]
			handler->used = 1;
    6c38:	7822      	ldrb	r2, [r4, #0]
    6c3a:	2301      	movs	r3, #1
    6c3c:	4313      	orrs	r3, r2
    6c3e:	7023      	strb	r3, [r4, #0]
			return index;
    6c40:	2000      	movs	r0, #0
    6c42:	e001      	b.n	6c48 <sw_timer_register_callback+0x30>
		}
	}
	
	return -1;
    6c44:	2001      	movs	r0, #1
    6c46:	4240      	negs	r0, r0
}
    6c48:	bd10      	pop	{r4, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	00008045 	.word	0x00008045

00006c50 <sw_timer_enable_callback>:
	
	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
    6c50:	b570      	push	{r4, r5, r6, lr}
    6c52:	1c03      	adds	r3, r0, #0
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));
	
	handler = &module_inst->handler[timer_id];
	
	handler->callback_enable = 1;
    6c54:	008c      	lsls	r4, r1, #2
    6c56:	1865      	adds	r5, r4, r1
    6c58:	00ad      	lsls	r5, r5, #2
    6c5a:	5c2e      	ldrb	r6, [r5, r0]
    6c5c:	2002      	movs	r0, #2
    6c5e:	4330      	orrs	r0, r6
    6c60:	54e8      	strb	r0, [r5, r3]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
    6c62:	195c      	adds	r4, r3, r5
    6c64:	1c10      	adds	r0, r2, #0
    6c66:	6d59      	ldr	r1, [r3, #84]	; 0x54
    6c68:	4b03      	ldr	r3, [pc, #12]	; (6c78 <sw_timer_enable_callback+0x28>)
    6c6a:	4798      	blx	r3
    6c6c:	4b03      	ldr	r3, [pc, #12]	; (6c7c <sw_timer_enable_callback+0x2c>)
    6c6e:	681b      	ldr	r3, [r3, #0]
    6c70:	18c0      	adds	r0, r0, r3
    6c72:	6120      	str	r0, [r4, #16]
}
    6c74:	bd70      	pop	{r4, r5, r6, pc}
    6c76:	46c0      	nop			; (mov r8, r8)
    6c78:	00008045 	.word	0x00008045
    6c7c:	20000304 	.word	0x20000304

00006c80 <sw_timer_disable_callback>:
	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));
	
	handler = &module_inst->handler[timer_id];
	
	handler->callback_enable = 0;
    6c80:	008b      	lsls	r3, r1, #2
    6c82:	1859      	adds	r1, r3, r1
    6c84:	0089      	lsls	r1, r1, #2
    6c86:	5c0b      	ldrb	r3, [r1, r0]
    6c88:	2202      	movs	r2, #2
    6c8a:	4393      	bics	r3, r2
    6c8c:	540b      	strb	r3, [r1, r0]
}
    6c8e:	4770      	bx	lr

00006c90 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
    6c90:	b538      	push	{r3, r4, r5, lr}
	struct sw_timer_handle *handler;
	
	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
    6c92:	7803      	ldrb	r3, [r0, #0]
    6c94:	07db      	lsls	r3, r3, #31
    6c96:	d524      	bpl.n	6ce2 <sw_timer_task+0x52>
    6c98:	7803      	ldrb	r3, [r0, #0]
    6c9a:	079b      	lsls	r3, r3, #30
    6c9c:	d521      	bpl.n	6ce2 <sw_timer_task+0x52>
			handler = &module_inst->handler[index];
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
    6c9e:	4b11      	ldr	r3, [pc, #68]	; (6ce4 <sw_timer_task+0x54>)
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	6902      	ldr	r2, [r0, #16]
    6ca4:	1ad3      	subs	r3, r2, r3
    6ca6:	d51c      	bpl.n	6ce2 <sw_timer_task+0x52>
    6ca8:	7803      	ldrb	r3, [r0, #0]
    6caa:	075b      	lsls	r3, r3, #29
    6cac:	d419      	bmi.n	6ce2 <sw_timer_task+0x52>
    6cae:	1c04      	adds	r4, r0, #0
				/* Enter critical section. */
				handler->busy = 1;
    6cb0:	7802      	ldrb	r2, [r0, #0]
    6cb2:	2304      	movs	r3, #4
    6cb4:	4313      	orrs	r3, r2
    6cb6:	7003      	strb	r3, [r0, #0]
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
    6cb8:	2100      	movs	r1, #0
    6cba:	68a2      	ldr	r2, [r4, #8]
    6cbc:	68e3      	ldr	r3, [r4, #12]
    6cbe:	6865      	ldr	r5, [r4, #4]
    6cc0:	47a8      	blx	r5
				/* Timer was expired. */
				if (handler->period > 0) {
    6cc2:	68e3      	ldr	r3, [r4, #12]
    6cc4:	2b00      	cmp	r3, #0
    6cc6:	d004      	beq.n	6cd2 <sw_timer_task+0x42>
					handler->expire_time = sw_timer_tick + handler->period;
    6cc8:	4a06      	ldr	r2, [pc, #24]	; (6ce4 <sw_timer_task+0x54>)
    6cca:	6812      	ldr	r2, [r2, #0]
    6ccc:	18d3      	adds	r3, r2, r3
    6cce:	6123      	str	r3, [r4, #16]
    6cd0:	e003      	b.n	6cda <sw_timer_task+0x4a>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
    6cd2:	7823      	ldrb	r3, [r4, #0]
    6cd4:	2202      	movs	r2, #2
    6cd6:	4393      	bics	r3, r2
    6cd8:	7023      	strb	r3, [r4, #0]
				}
				/* Leave critical section. */
				handler->busy = 0;
    6cda:	7823      	ldrb	r3, [r4, #0]
    6cdc:	2204      	movs	r2, #4
    6cde:	4393      	bics	r3, r2
    6ce0:	7023      	strb	r3, [r4, #0]
			}
		}
	}
	
}
    6ce2:	bd38      	pop	{r3, r4, r5, pc}
    6ce4:	20000304 	.word	0x20000304

00006ce8 <wifi_cb>:
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void wifi_cb(uint8_t u8MsgType, void* pvMsg) 
{
    6ce8:	b570      	push	{r4, r5, r6, lr}
    6cea:	b082      	sub	sp, #8
    6cec:	1c02      	adds	r2, r0, #0
    6cee:	1c0c      	adds	r4, r1, #0
	// DEBUG(DEBUG_CONF_WIFI "call wifi_callback function" DEBUG_EOL);
	switch(u8MsgType) 
    6cf0:	1f03      	subs	r3, r0, #4
    6cf2:	b2d9      	uxtb	r1, r3
    6cf4:	292e      	cmp	r1, #46	; 0x2e
    6cf6:	d872      	bhi.n	6dde <wifi_cb+0xf6>
    6cf8:	008b      	lsls	r3, r1, #2
    6cfa:	493c      	ldr	r1, [pc, #240]	; (6dec <wifi_cb+0x104>)
    6cfc:	58cb      	ldr	r3, [r1, r3]
    6cfe:	469f      	mov	pc, r3
	{
		case M2M_WIFI_RESP_CURRENT_RSSI:
		{
			int8_t *rssi = (int8_t *)pvMsg;
			printf("RSSI for the current connected AP (%d)\r\n",
    6d00:	2100      	movs	r1, #0
    6d02:	5661      	ldrsb	r1, [r4, r1]
    6d04:	483a      	ldr	r0, [pc, #232]	; (6df0 <wifi_cb+0x108>)
    6d06:	4b3b      	ldr	r3, [pc, #236]	; (6df4 <wifi_cb+0x10c>)
    6d08:	4798      	blx	r3
		}		
		case M2M_WIFI_RESP_CON_STATE_CHANGED:
		{
			tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
			
			DEBUG(DEBUG_CONF_WIFI "case M2M_WIFI_RESP_CON_STATE_CHANGED" DEBUG_EOL );
    6d0a:	483b      	ldr	r0, [pc, #236]	; (6df8 <wifi_cb+0x110>)
    6d0c:	4b3b      	ldr	r3, [pc, #236]	; (6dfc <wifi_cb+0x114>)
    6d0e:	4798      	blx	r3
			if( pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED)
    6d10:	7823      	ldrb	r3, [r4, #0]
    6d12:	2b01      	cmp	r3, #1
    6d14:	d102      	bne.n	6d1c <wifi_cb+0x34>
			{
				
				 m2m_wifi_request_dhcp_client();
    6d16:	4b3a      	ldr	r3, [pc, #232]	; (6e00 <wifi_cb+0x118>)
    6d18:	4798      	blx	r3
    6d1a:	e064      	b.n	6de6 <wifi_cb+0xfe>
			}
			else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED)
    6d1c:	2b00      	cmp	r3, #0
    6d1e:	d162      	bne.n	6de6 <wifi_cb+0xfe>
			{
				DEBUG(DEBUG_CONF_SOCKET"Wi-Fi disconnected"DEBUG_EOL);
    6d20:	4838      	ldr	r0, [pc, #224]	; (6e04 <wifi_cb+0x11c>)
    6d22:	4b36      	ldr	r3, [pc, #216]	; (6dfc <wifi_cb+0x114>)
    6d24:	4798      	blx	r3
    6d26:	e05e      	b.n	6de6 <wifi_cb+0xfe>
			break;
		}
		case M2M_WIFI_REQ_DHCP_CONF:
		{
			uint8_t *pu8IPAddress = (uint8_t*)pvMsg;
			printf("Wi-Fi connected\r\n");
    6d28:	4837      	ldr	r0, [pc, #220]	; (6e08 <wifi_cb+0x120>)
    6d2a:	4e34      	ldr	r6, [pc, #208]	; (6dfc <wifi_cb+0x114>)
    6d2c:	47b0      	blx	r6
			printf("Wi-Fi IP is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    6d2e:	7821      	ldrb	r1, [r4, #0]
    6d30:	7862      	ldrb	r2, [r4, #1]
    6d32:	78a3      	ldrb	r3, [r4, #2]
    6d34:	78e0      	ldrb	r0, [r4, #3]
    6d36:	9000      	str	r0, [sp, #0]
    6d38:	4834      	ldr	r0, [pc, #208]	; (6e0c <wifi_cb+0x124>)
    6d3a:	4d2e      	ldr	r5, [pc, #184]	; (6df4 <wifi_cb+0x10c>)
    6d3c:	47a8      	blx	r5
	
			DEBUG(DEBUG_CONF_WIFI "case M2M_WIFI_REQ_DHCP_CONF" DEBUG_EOL );
    6d3e:	4834      	ldr	r0, [pc, #208]	; (6e10 <wifi_cb+0x128>)
    6d40:	47b0      	blx	r6
			DEBUG(DEBUG_CONF_WIFI "GET IP :is %u.%u.%u.%u" DEBUG_EOL, pu8IPAddress[0],pu8IPAddress[1],pu8IPAddress[2],pu8IPAddress[3]);
    6d42:	7821      	ldrb	r1, [r4, #0]
    6d44:	7862      	ldrb	r2, [r4, #1]
    6d46:	78a3      	ldrb	r3, [r4, #2]
    6d48:	78e0      	ldrb	r0, [r4, #3]
    6d4a:	9000      	str	r0, [sp, #0]
    6d4c:	4831      	ldr	r0, [pc, #196]	; (6e14 <wifi_cb+0x12c>)
    6d4e:	47a8      	blx	r5
			ap_wifi_connection_state = MAIN_AP_CONNECTION;
    6d50:	2204      	movs	r2, #4
    6d52:	4b31      	ldr	r3, [pc, #196]	; (6e18 <wifi_cb+0x130>)
    6d54:	701a      	strb	r2, [r3, #0]
			
			thethingsio_connect_subscribe();
    6d56:	4b31      	ldr	r3, [pc, #196]	; (6e1c <wifi_cb+0x134>)
    6d58:	4798      	blx	r3
		
#ifdef DEBUG_USE_THING_TOKEN_INSTEAD_OF_ACTIVATION_CODE
			thethingsio_example_write_thing_token_nvm(DEBUG_THING_TOKEN);
    6d5a:	4831      	ldr	r0, [pc, #196]	; (6e20 <wifi_cb+0x138>)
    6d5c:	4b31      	ldr	r3, [pc, #196]	; (6e24 <wifi_cb+0x13c>)
    6d5e:	4798      	blx	r3
			thethingsio_example_load_thing_token_nvm();
    6d60:	4b31      	ldr	r3, [pc, #196]	; (6e28 <wifi_cb+0x140>)
    6d62:	4798      	blx	r3
			printf("debug thing token wrote to nvm and loaded from it successfully \n\r");								
    6d64:	4831      	ldr	r0, [pc, #196]	; (6e2c <wifi_cb+0x144>)
    6d66:	47a8      	blx	r5
			gThingTokenConfiguredCorrectlyFlag = 0x02;
    6d68:	2202      	movs	r2, #2
    6d6a:	4b31      	ldr	r3, [pc, #196]	; (6e30 <wifi_cb+0x148>)
    6d6c:	701a      	strb	r2, [r3, #0]
			
			
			
			
#endif
			break;
    6d6e:	e03a      	b.n	6de6 <wifi_cb+0xfe>
		}
		case M2M_WIFI_RESP_DEFAULT_CONNECT:
		{
			tstrM2MDefaultConnResp *pstrDefConnInfo = (tstrM2MDefaultConnResp *)pvMsg;
			DEBUG(DEBUG_CONF_WIFI "M2M_WIFI_RESP_DEFAULT_CONNECT."DEBUG_EOL);
    6d70:	4830      	ldr	r0, [pc, #192]	; (6e34 <wifi_cb+0x14c>)
    6d72:	4b22      	ldr	r3, [pc, #136]	; (6dfc <wifi_cb+0x114>)
    6d74:	4798      	blx	r3
			if (pstrDefConnInfo->s8ErrorCode != M2M_SUCCESS) {
    6d76:	2300      	movs	r3, #0
    6d78:	56e3      	ldrsb	r3, [r4, r3]
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	d006      	beq.n	6d8c <wifi_cb+0xa4>
				ap_wifi_connection_state = MAIN_NEED_HTTP_PROVISIONING;
    6d7e:	2202      	movs	r2, #2
    6d80:	4b25      	ldr	r3, [pc, #148]	; (6e18 <wifi_cb+0x130>)
    6d82:	701a      	strb	r2, [r3, #0]
				DEBUG(DEBUG_CONF_WIFI "Set MAIN_NEED_HTTP_PROVISIONING mode "DEBUG_EOL);
    6d84:	482c      	ldr	r0, [pc, #176]	; (6e38 <wifi_cb+0x150>)
    6d86:	4b1d      	ldr	r3, [pc, #116]	; (6dfc <wifi_cb+0x114>)
    6d88:	4798      	blx	r3
    6d8a:	e02c      	b.n	6de6 <wifi_cb+0xfe>
			}
			else
			{
				ap_wifi_connection_state = MAIN_AP_CONNECTION;
    6d8c:	2204      	movs	r2, #4
    6d8e:	4b22      	ldr	r3, [pc, #136]	; (6e18 <wifi_cb+0x130>)
    6d90:	701a      	strb	r2, [r3, #0]
				DEBUG(DEBUG_CONF_WIFI "Set MAIN_AP_CONNECTION mode "DEBUG_EOL);
    6d92:	482a      	ldr	r0, [pc, #168]	; (6e3c <wifi_cb+0x154>)
    6d94:	4b19      	ldr	r3, [pc, #100]	; (6dfc <wifi_cb+0x114>)
    6d96:	4798      	blx	r3
				tick_counter_reset_timer(100);
    6d98:	2064      	movs	r0, #100	; 0x64
    6d9a:	4b29      	ldr	r3, [pc, #164]	; (6e40 <wifi_cb+0x158>)
    6d9c:	4798      	blx	r3
    6d9e:	e022      	b.n	6de6 <wifi_cb+0xfe>
			break;		
		}
		case M2M_WIFI_RESP_PROVISION_INFO:
		{
			tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
			DEBUG(DEBUG_CONF_WIFI "M2M_WIFI_RESP_PROVISION_INFO."DEBUG_EOL);
    6da0:	4828      	ldr	r0, [pc, #160]	; (6e44 <wifi_cb+0x15c>)
    6da2:	4b16      	ldr	r3, [pc, #88]	; (6dfc <wifi_cb+0x114>)
    6da4:	4798      	blx	r3

			if (pstrProvInfo->u8Status == M2M_SUCCESS) 
    6da6:	2363      	movs	r3, #99	; 0x63
    6da8:	5ce3      	ldrb	r3, [r4, r3]
    6daa:	2b00      	cmp	r3, #0
    6dac:	d110      	bne.n	6dd0 <wifi_cb+0xe8>
			{			
				m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    6dae:	1c20      	adds	r0, r4, #0
    6db0:	4b25      	ldr	r3, [pc, #148]	; (6e48 <wifi_cb+0x160>)
    6db2:	4798      	blx	r3
    6db4:	b2c1      	uxtb	r1, r0
    6db6:	2362      	movs	r3, #98	; 0x62
    6db8:	5ce2      	ldrb	r2, [r4, r3]
				pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
    6dba:	1c23      	adds	r3, r4, #0
    6dbc:	3321      	adds	r3, #33	; 0x21
			tstrM2MProvisionInfo *pstrProvInfo = (tstrM2MProvisionInfo *)pvMsg;
			DEBUG(DEBUG_CONF_WIFI "M2M_WIFI_RESP_PROVISION_INFO."DEBUG_EOL);

			if (pstrProvInfo->u8Status == M2M_SUCCESS) 
			{			
				m2m_wifi_connect((char *)pstrProvInfo->au8SSID, strlen((char *)pstrProvInfo->au8SSID), pstrProvInfo->u8SecType,
    6dbe:	20ff      	movs	r0, #255	; 0xff
    6dc0:	9000      	str	r0, [sp, #0]
    6dc2:	1c20      	adds	r0, r4, #0
    6dc4:	4c21      	ldr	r4, [pc, #132]	; (6e4c <wifi_cb+0x164>)
    6dc6:	47a0      	blx	r4
				pstrProvInfo->au8Password, M2M_WIFI_CH_ALL);
				DEBUG(DEBUG_CONF_WIFI "HTTP PROVISION Success."DEBUG_EOL);
    6dc8:	4821      	ldr	r0, [pc, #132]	; (6e50 <wifi_cb+0x168>)
    6dca:	4b0c      	ldr	r3, [pc, #48]	; (6dfc <wifi_cb+0x114>)
    6dcc:	4798      	blx	r3
    6dce:	e00a      	b.n	6de6 <wifi_cb+0xfe>
			}
			else
			{
				DEBUG(DEBUG_CONF_WIFI "HTTP PROVISION  Failed."DEBUG_EOL);
    6dd0:	4820      	ldr	r0, [pc, #128]	; (6e54 <wifi_cb+0x16c>)
    6dd2:	4b0a      	ldr	r3, [pc, #40]	; (6dfc <wifi_cb+0x114>)
    6dd4:	4798      	blx	r3
				ap_wifi_connection_state = MAIN_NEED_HTTP_PROVISIONING;
    6dd6:	2202      	movs	r2, #2
    6dd8:	4b0f      	ldr	r3, [pc, #60]	; (6e18 <wifi_cb+0x130>)
    6dda:	701a      	strb	r2, [r3, #0]
    6ddc:	e003      	b.n	6de6 <wifi_cb+0xfe>
			}
			break;
		}		
		default:
		{
			DEBUG(DEBUG_CONF_WIFI "call wifi_callback function msg type : %d" DEBUG_EOL, u8MsgType);
    6dde:	481e      	ldr	r0, [pc, #120]	; (6e58 <wifi_cb+0x170>)
    6de0:	1c11      	adds	r1, r2, #0
    6de2:	4b04      	ldr	r3, [pc, #16]	; (6df4 <wifi_cb+0x10c>)
    6de4:	4798      	blx	r3
			break;
		}
	}
}
    6de6:	b002      	add	sp, #8
    6de8:	bd70      	pop	{r4, r5, r6, pc}
    6dea:	46c0      	nop			; (mov r8, r8)
    6dec:	0000b92c 	.word	0x0000b92c
    6df0:	0000b9e8 	.word	0x0000b9e8
    6df4:	00008bed 	.word	0x00008bed
    6df8:	0000ba14 	.word	0x0000ba14
    6dfc:	00008d0d 	.word	0x00008d0d
    6e00:	000012b9 	.word	0x000012b9
    6e04:	0000ba44 	.word	0x0000ba44
    6e08:	0000ba60 	.word	0x0000ba60
    6e0c:	0000ba74 	.word	0x0000ba74
    6e10:	0000ba90 	.word	0x0000ba90
    6e14:	0000bab8 	.word	0x0000bab8
    6e18:	2000033d 	.word	0x2000033d
    6e1c:	000060d5 	.word	0x000060d5
    6e20:	0000badc 	.word	0x0000badc
    6e24:	00005f21 	.word	0x00005f21
    6e28:	00005ea5 	.word	0x00005ea5
    6e2c:	0000bb08 	.word	0x0000bb08
    6e30:	2000033c 	.word	0x2000033c
    6e34:	0000bb4c 	.word	0x0000bb4c
    6e38:	0000bb78 	.word	0x0000bb78
    6e3c:	0000bbac 	.word	0x0000bbac
    6e40:	00007395 	.word	0x00007395
    6e44:	0000bbd4 	.word	0x0000bbd4
    6e48:	0000925d 	.word	0x0000925d
    6e4c:	0000126d 	.word	0x0000126d
    6e50:	0000bc00 	.word	0x0000bc00
    6e54:	0000bc24 	.word	0x0000bc24
    6e58:	0000bc48 	.word	0x0000bc48

00006e5c <parsing_http_response_data>:

static void parsing_http_response_data(int response_code, char * response_data, int response_length)
{
    6e5c:	b570      	push	{r4, r5, r6, lr}
    6e5e:	4c17      	ldr	r4, [pc, #92]	; (6ebc <parsing_http_response_data+0x60>)
    6e60:	44a5      	add	sp, r4
    6e62:	1c05      	adds	r5, r0, #0
    6e64:	1c0e      	adds	r6, r1, #0
    6e66:	1c14      	adds	r4, r2, #0
	char buf[1024] = {0,};
    6e68:	4668      	mov	r0, sp
    6e6a:	2100      	movs	r1, #0
    6e6c:	2280      	movs	r2, #128	; 0x80
    6e6e:	00d2      	lsls	r2, r2, #3
    6e70:	4b13      	ldr	r3, [pc, #76]	; (6ec0 <parsing_http_response_data+0x64>)
    6e72:	4798      	blx	r3
	char *value_data_point = NULL;
	memcpy(buf, response_data,sizeof(char)*response_length);
    6e74:	4668      	mov	r0, sp
    6e76:	1c31      	adds	r1, r6, #0
    6e78:	1c22      	adds	r2, r4, #0
    6e7a:	4b12      	ldr	r3, [pc, #72]	; (6ec4 <parsing_http_response_data+0x68>)
    6e7c:	4798      	blx	r3
	
	switch(response_code)
    6e7e:	2dc9      	cmp	r5, #201	; 0xc9
    6e80:	d118      	bne.n	6eb4 <parsing_http_response_data+0x58>
			}
		}
		break;
		case MAIN_RES_HTTP_CODE_201:			// commands with 201 response code: activate thing, "post" (create resource)
		{
			if( response_length > 0)
    6e82:	2c00      	cmp	r4, #0
    6e84:	dd16      	ble.n	6eb4 <parsing_http_response_data+0x58>
			{
				// later version: read server response and decide what to do based on response
				
				/* check if this answer comes due to device activation by analyzing the response, then flag can be kicked here */
				if (gThingTokenConfiguredCorrectlyFlag == 0x01) 
    6e86:	4b10      	ldr	r3, [pc, #64]	; (6ec8 <parsing_http_response_data+0x6c>)
    6e88:	781b      	ldrb	r3, [r3, #0]
    6e8a:	2b01      	cmp	r3, #1
    6e8c:	d112      	bne.n	6eb4 <parsing_http_response_data+0x58>
				{
					// if so, extract token and use it
					// insert JSON read here
					strcpy(gau8TheThingsIoThingToken, DEBUG_THING_TOKEN);
    6e8e:	480f      	ldr	r0, [pc, #60]	; (6ecc <parsing_http_response_data+0x70>)
    6e90:	4b0f      	ldr	r3, [pc, #60]	; (6ed0 <parsing_http_response_data+0x74>)
    6e92:	1c02      	adds	r2, r0, #0
    6e94:	cb32      	ldmia	r3!, {r1, r4, r5}
    6e96:	c232      	stmia	r2!, {r1, r4, r5}
    6e98:	cb32      	ldmia	r3!, {r1, r4, r5}
    6e9a:	c232      	stmia	r2!, {r1, r4, r5}
    6e9c:	cb32      	ldmia	r3!, {r1, r4, r5}
    6e9e:	c232      	stmia	r2!, {r1, r4, r5}
    6ea0:	cb12      	ldmia	r3!, {r1, r4}
    6ea2:	c212      	stmia	r2!, {r1, r4}
					
					//pass token to function within thingsio module
					thethingsio_example_write_thing_token_nvm(gau8TheThingsIoThingToken);
    6ea4:	4b0b      	ldr	r3, [pc, #44]	; (6ed4 <parsing_http_response_data+0x78>)
    6ea6:	4798      	blx	r3
					printf("thing token written to nvm successfully \n\r");
    6ea8:	480b      	ldr	r0, [pc, #44]	; (6ed8 <parsing_http_response_data+0x7c>)
    6eaa:	4b0c      	ldr	r3, [pc, #48]	; (6edc <parsing_http_response_data+0x80>)
    6eac:	4798      	blx	r3
					
					gThingTokenConfiguredCorrectlyFlag = 0x02;
    6eae:	2202      	movs	r2, #2
    6eb0:	4b05      	ldr	r3, [pc, #20]	; (6ec8 <parsing_http_response_data+0x6c>)
    6eb2:	701a      	strb	r2, [r3, #0]
		{

		}
		break;
	}
}
    6eb4:	2380      	movs	r3, #128	; 0x80
    6eb6:	00db      	lsls	r3, r3, #3
    6eb8:	449d      	add	sp, r3
    6eba:	bd70      	pop	{r4, r5, r6, pc}
    6ebc:	fffffc00 	.word	0xfffffc00
    6ec0:	00008a9f 	.word	0x00008a9f
    6ec4:	00008a65 	.word	0x00008a65
    6ec8:	2000033c 	.word	0x2000033c
    6ecc:	2000009c 	.word	0x2000009c
    6ed0:	0000badc 	.word	0x0000badc
    6ed4:	00005f21 	.word	0x00005f21
    6ed8:	0000bc80 	.word	0x0000bc80
    6edc:	00008bed 	.word	0x00008bed

00006ee0 <main_http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void main_http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
    6ee0:	b510      	push	{r4, lr}
    6ee2:	1c14      	adds	r4, r2, #0
	switch (type) {
    6ee4:	2901      	cmp	r1, #1
    6ee6:	d00c      	beq.n	6f02 <main_http_client_callback+0x22>
    6ee8:	dc02      	bgt.n	6ef0 <main_http_client_callback+0x10>
    6eea:	2900      	cmp	r1, #0
    6eec:	d005      	beq.n	6efa <main_http_client_callback+0x1a>
    6eee:	e01c      	b.n	6f2a <main_http_client_callback+0x4a>
    6ef0:	2902      	cmp	r1, #2
    6ef2:	d00a      	beq.n	6f0a <main_http_client_callback+0x2a>
    6ef4:	2904      	cmp	r1, #4
    6ef6:	d011      	beq.n	6f1c <main_http_client_callback+0x3c>
    6ef8:	e017      	b.n	6f2a <main_http_client_callback+0x4a>
	case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
		DEBUG(DEBUG_CONF_THETHINGSIO"TheThingsIO Server Connected"DEBUG_EOL);
    6efa:	480c      	ldr	r0, [pc, #48]	; (6f2c <main_http_client_callback+0x4c>)
    6efc:	4b0c      	ldr	r3, [pc, #48]	; (6f30 <main_http_client_callback+0x50>)
    6efe:	4798      	blx	r3
		break;
    6f00:	e013      	b.n	6f2a <main_http_client_callback+0x4a>

	case HTTP_CLIENT_CALLBACK_REQUESTED:
		DEBUG(DEBUG_CONF_THETHINGSIO"Request complete"DEBUG_EOL);
    6f02:	480c      	ldr	r0, [pc, #48]	; (6f34 <main_http_client_callback+0x54>)
    6f04:	4b0a      	ldr	r3, [pc, #40]	; (6f30 <main_http_client_callback+0x50>)
    6f06:	4798      	blx	r3
		break;
    6f08:	e00f      	b.n	6f2a <main_http_client_callback+0x4a>

	case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
		tick_counter_reset_timer(TICK_COUNTER_INTERVAL);
    6f0a:	480b      	ldr	r0, [pc, #44]	; (6f38 <main_http_client_callback+0x58>)
    6f0c:	4b0b      	ldr	r3, [pc, #44]	; (6f3c <main_http_client_callback+0x5c>)
    6f0e:	4798      	blx	r3
		parsing_http_response_data(data->recv_response.response_code, data->recv_response.content, data->recv_response.content_length);
    6f10:	8820      	ldrh	r0, [r4, #0]
    6f12:	68a1      	ldr	r1, [r4, #8]
    6f14:	6862      	ldr	r2, [r4, #4]
    6f16:	4b0a      	ldr	r3, [pc, #40]	; (6f40 <main_http_client_callback+0x60>)
    6f18:	4798      	blx	r3
		break;
    6f1a:	e006      	b.n	6f2a <main_http_client_callback+0x4a>

	case HTTP_CLIENT_CALLBACK_DISCONNECTED:
		{
			tick_counter_reset_timer(TICK_COUNTER_INTERVAL);
    6f1c:	4806      	ldr	r0, [pc, #24]	; (6f38 <main_http_client_callback+0x58>)
    6f1e:	4b07      	ldr	r3, [pc, #28]	; (6f3c <main_http_client_callback+0x5c>)
    6f20:	4798      	blx	r3
			DEBUG(DEBUG_CONF_THETHINGSIO"Disconnected reason:%d"DEBUG_EOL, data->disconnected.reason);
    6f22:	6821      	ldr	r1, [r4, #0]
    6f24:	4807      	ldr	r0, [pc, #28]	; (6f44 <main_http_client_callback+0x64>)
    6f26:	4b08      	ldr	r3, [pc, #32]	; (6f48 <main_http_client_callback+0x68>)
    6f28:	4798      	blx	r3
			break;
		}
	}
}
    6f2a:	bd10      	pop	{r4, pc}
    6f2c:	0000bcac 	.word	0x0000bcac
    6f30:	00008d0d 	.word	0x00008d0d
    6f34:	0000bcd8 	.word	0x0000bcd8
    6f38:	00000bb8 	.word	0x00000bb8
    6f3c:	00007395 	.word	0x00007395
    6f40:	00006e5d 	.word	0x00006e5d
    6f44:	0000bcf8 	.word	0x0000bcf8
    6f48:	00008bed 	.word	0x00008bed

00006f4c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6f4c:	b570      	push	{r4, r5, r6, lr}
    6f4e:	b082      	sub	sp, #8
    6f50:	1c05      	adds	r5, r0, #0
    6f52:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    6f54:	2200      	movs	r2, #0
    6f56:	466b      	mov	r3, sp
    6f58:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    6f5a:	4c06      	ldr	r4, [pc, #24]	; (6f74 <usart_serial_getchar+0x28>)
    6f5c:	1c28      	adds	r0, r5, #0
    6f5e:	466b      	mov	r3, sp
    6f60:	1d99      	adds	r1, r3, #6
    6f62:	47a0      	blx	r4
    6f64:	2800      	cmp	r0, #0
    6f66:	d1f9      	bne.n	6f5c <usart_serial_getchar+0x10>

	*c = temp;
    6f68:	466b      	mov	r3, sp
    6f6a:	3306      	adds	r3, #6
    6f6c:	881b      	ldrh	r3, [r3, #0]
    6f6e:	7033      	strb	r3, [r6, #0]
}
    6f70:	b002      	add	sp, #8
    6f72:	bd70      	pop	{r4, r5, r6, pc}
    6f74:	00004aa1 	.word	0x00004aa1

00006f78 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    6f78:	b570      	push	{r4, r5, r6, lr}
    6f7a:	1c05      	adds	r5, r0, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    6f7c:	b28c      	uxth	r4, r1
    6f7e:	4e03      	ldr	r6, [pc, #12]	; (6f8c <usart_serial_putchar+0x14>)
    6f80:	1c28      	adds	r0, r5, #0
    6f82:	1c21      	adds	r1, r4, #0
    6f84:	47b0      	blx	r6
    6f86:	2800      	cmp	r0, #0
    6f88:	d1fa      	bne.n	6f80 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    6f8a:	bd70      	pop	{r4, r5, r6, pc}
    6f8c:	00004a75 	.word	0x00004a75

00006f90 <configure_nvm>:
#define _CONF_NVM_H_


/** Configure Non-Volatile Memory */
void configure_nvm(void)
{
    6f90:	b500      	push	{lr}
    6f92:	b083      	sub	sp, #12
{
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    6f94:	2300      	movs	r3, #0
    6f96:	466a      	mov	r2, sp
    6f98:	7013      	strb	r3, [r2, #0]
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    6f9a:	4a0a      	ldr	r2, [pc, #40]	; (6fc4 <configure_nvm+0x34>)
    6f9c:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    6f9e:	466a      	mov	r2, sp
    6fa0:	70d3      	strb	r3, [r2, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    6fa2:	7113      	strb	r3, [r2, #4]

	/* Get the default configuration */
	nvm_get_config_defaults(&config);

	/* Set wait state to 1 (taken from Parse example) */
	config.wait_states = 1;
    6fa4:	2201      	movs	r2, #1
    6fa6:	4669      	mov	r1, sp
    6fa8:	708a      	strb	r2, [r1, #2]

	/* Enable automatic page write mode */
	config.manual_page_write = false;
    6faa:	704b      	strb	r3, [r1, #1]

	/* Set the NVM configuration */
	status = nvm_set_config(&config);
    6fac:	4668      	mov	r0, sp
    6fae:	4b06      	ldr	r3, [pc, #24]	; (6fc8 <configure_nvm+0x38>)
    6fb0:	4798      	blx	r3

	if (status != STATUS_OK) {
    6fb2:	2800      	cmp	r0, #0
    6fb4:	d003      	beq.n	6fbe <configure_nvm+0x2e>
		printf("NVM init error\r\n");
    6fb6:	4805      	ldr	r0, [pc, #20]	; (6fcc <configure_nvm+0x3c>)
    6fb8:	4b05      	ldr	r3, [pc, #20]	; (6fd0 <configure_nvm+0x40>)
    6fba:	4798      	blx	r3
		while(1) {};
    6fbc:	e7fe      	b.n	6fbc <configure_nvm+0x2c>
	}
}
    6fbe:	b003      	add	sp, #12
    6fc0:	bd00      	pop	{pc}
    6fc2:	46c0      	nop			; (mov r8, r8)
    6fc4:	41004000 	.word	0x41004000
    6fc8:	00003331 	.word	0x00003331
    6fcc:	0000bd20 	.word	0x0000bd20
    6fd0:	00008d0d 	.word	0x00008d0d

00006fd4 <main>:
 * \brief Main application function.
 * Application entry point.
 * \return program return value.
 */
int main(void)
{
    6fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fd6:	b0a3      	sub	sp, #140	; 0x8c
	tstrWifiInitParam param;
	int16_t ret;

	/* Initialize the board. */
	system_init();
    6fd8:	4ba6      	ldr	r3, [pc, #664]	; (7274 <main+0x2a0>)
    6fda:	4798      	blx	r3
	const enum system_sleepmode sleep_mode)
{
#if (SAMD20 || SAMD21)
	/* Errata: Make sure that the Flash does not power all the way down
	 * when in sleep mode. */
	NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    6fdc:	4aa6      	ldr	r2, [pc, #664]	; (7278 <main+0x2a4>)
    6fde:	6853      	ldr	r3, [r2, #4]
    6fe0:	21c0      	movs	r1, #192	; 0xc0
    6fe2:	0089      	lsls	r1, r1, #2
    6fe4:	430b      	orrs	r3, r1
    6fe6:	6053      	str	r3, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    6fe8:	4aa4      	ldr	r2, [pc, #656]	; (727c <main+0x2a8>)
    6fea:	6911      	ldr	r1, [r2, #16]
    6fec:	2304      	movs	r3, #4
    6fee:	430b      	orrs	r3, r1
    6ff0:	6113      	str	r3, [r2, #16]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    6ff2:	aa03      	add	r2, sp, #12
    6ff4:	2380      	movs	r3, #128	; 0x80
    6ff6:	05db      	lsls	r3, r3, #23
    6ff8:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    6ffa:	2300      	movs	r3, #0
    6ffc:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    6ffe:	21ff      	movs	r1, #255	; 0xff
    7000:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    7002:	2100      	movs	r1, #0
    7004:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    7006:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    7008:	2401      	movs	r4, #1
    700a:	2024      	movs	r0, #36	; 0x24
    700c:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    700e:	3001      	adds	r0, #1
    7010:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    7012:	3001      	adds	r0, #1
    7014:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    7016:	3001      	adds	r0, #1
    7018:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    701a:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    701c:	3005      	adds	r0, #5
    701e:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    7020:	3001      	adds	r0, #1
    7022:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    7024:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    7026:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    7028:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    702a:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    702c:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    702e:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                        = 19;
    7030:	2313      	movs	r3, #19
    7032:	7693      	strb	r3, [r2, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    7034:	7751      	strb	r1, [r2, #29]
static void configure_console(void)
{
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    7036:	2380      	movs	r3, #128	; 0x80
    7038:	035b      	lsls	r3, r3, #13
    703a:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    703c:	4b90      	ldr	r3, [pc, #576]	; (7280 <main+0x2ac>)
    703e:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    7040:	4b90      	ldr	r3, [pc, #576]	; (7284 <main+0x2b0>)
    7042:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    7044:	2301      	movs	r3, #1
    7046:	425b      	negs	r3, r3
    7048:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    704a:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    704c:	23e1      	movs	r3, #225	; 0xe1
    704e:	025b      	lsls	r3, r3, #9
    7050:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    7052:	4d8d      	ldr	r5, [pc, #564]	; (7288 <main+0x2b4>)
    7054:	4b8d      	ldr	r3, [pc, #564]	; (728c <main+0x2b8>)
    7056:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    7058:	498d      	ldr	r1, [pc, #564]	; (7290 <main+0x2bc>)
    705a:	4b8e      	ldr	r3, [pc, #568]	; (7294 <main+0x2c0>)
    705c:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    705e:	498e      	ldr	r1, [pc, #568]	; (7298 <main+0x2c4>)
    7060:	4b8e      	ldr	r3, [pc, #568]	; (729c <main+0x2c8>)
    7062:	6019      	str	r1, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    7064:	1c28      	adds	r0, r5, #0
    7066:	498e      	ldr	r1, [pc, #568]	; (72a0 <main+0x2cc>)
    7068:	4b8e      	ldr	r3, [pc, #568]	; (72a4 <main+0x2d0>)
    706a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    706c:	4f8e      	ldr	r7, [pc, #568]	; (72a8 <main+0x2d4>)
    706e:	683b      	ldr	r3, [r7, #0]
    7070:	6898      	ldr	r0, [r3, #8]
    7072:	2100      	movs	r1, #0
    7074:	4e8d      	ldr	r6, [pc, #564]	; (72ac <main+0x2d8>)
    7076:	47b0      	blx	r6
	setbuf(stdin, NULL);
    7078:	683b      	ldr	r3, [r7, #0]
    707a:	6858      	ldr	r0, [r3, #4]
    707c:	2100      	movs	r1, #0
    707e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    7080:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    7082:	1c30      	adds	r0, r6, #0
    7084:	4b8a      	ldr	r3, [pc, #552]	; (72b0 <main+0x2dc>)
    7086:	4798      	blx	r3
    7088:	231f      	movs	r3, #31
    708a:	4018      	ands	r0, r3
    708c:	4084      	lsls	r4, r0
    708e:	4b89      	ldr	r3, [pc, #548]	; (72b4 <main+0x2e0>)
    7090:	601c      	str	r4, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    7092:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    7094:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    7096:	2b00      	cmp	r3, #0
    7098:	d1fc      	bne.n	7094 <main+0xc0>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    709a:	6832      	ldr	r2, [r6, #0]
    709c:	3302      	adds	r3, #2
    709e:	4313      	orrs	r3, r2
    70a0:	6033      	str	r3, [r6, #0]
	/* setting sleep mode. */
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);
	
	/* Initialize the UART console. */
	configure_console();
	DEBUG(DEBUG_EOL DEBUG_EOL DEBUG_STRING_HEADER);	
    70a2:	4885      	ldr	r0, [pc, #532]	; (72b8 <main+0x2e4>)
    70a4:	4b85      	ldr	r3, [pc, #532]	; (72bc <main+0x2e8>)
    70a6:	4798      	blx	r3
	
	/* Initialize temperature sensor */
	at30tse_init();
    70a8:	4b85      	ldr	r3, [pc, #532]	; (72c0 <main+0x2ec>)
    70aa:	4798      	blx	r3
	
	/* Configure Non-Volatile Memory */
	configure_nvm();
    70ac:	4b85      	ldr	r3, [pc, #532]	; (72c4 <main+0x2f0>)
    70ae:	4798      	blx	r3
	
	/* Configure the MQTT subscribe broker */
	thethingsio_subscribe_config();
    70b0:	4b85      	ldr	r3, [pc, #532]	; (72c8 <main+0x2f4>)
    70b2:	4798      	blx	r3
	
	/* Initialize TheThings.iO */
	thethingsio_example_http_init(main_http_client_callback);
    70b4:	4885      	ldr	r0, [pc, #532]	; (72cc <main+0x2f8>)
    70b6:	4b86      	ldr	r3, [pc, #536]	; (72d0 <main+0x2fc>)
    70b8:	4798      	blx	r3
	
	/* Initialize the BSP. */
	nm_bsp_init();
    70ba:	4b86      	ldr	r3, [pc, #536]	; (72d4 <main+0x300>)
    70bc:	4798      	blx	r3
    70be:	2000      	movs	r0, #0
    70c0:	4b85      	ldr	r3, [pc, #532]	; (72d8 <main+0x304>)
    70c2:	4798      	blx	r3
    70c4:	4b85      	ldr	r3, [pc, #532]	; (72dc <main+0x308>)
    70c6:	7a1b      	ldrb	r3, [r3, #8]
    70c8:	b2db      	uxtb	r3, r3
    70ca:	40d8      	lsrs	r0, r3
	
	/* Enable SysTick interrupt for non busy wait delay. */
	if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
    70cc:	21fa      	movs	r1, #250	; 0xfa
    70ce:	0089      	lsls	r1, r1, #2
    70d0:	4b83      	ldr	r3, [pc, #524]	; (72e0 <main+0x30c>)
    70d2:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    70d4:	3801      	subs	r0, #1
    70d6:	4b83      	ldr	r3, [pc, #524]	; (72e4 <main+0x310>)
    70d8:	4298      	cmp	r0, r3
    70da:	d900      	bls.n	70de <main+0x10a>
    70dc:	e0c6      	b.n	726c <main+0x298>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    70de:	4a82      	ldr	r2, [pc, #520]	; (72e8 <main+0x314>)
    70e0:	6050      	str	r0, [r2, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    70e2:	4966      	ldr	r1, [pc, #408]	; (727c <main+0x2a8>)
    70e4:	6a0b      	ldr	r3, [r1, #32]
    70e6:	021b      	lsls	r3, r3, #8
    70e8:	0a1b      	lsrs	r3, r3, #8
    70ea:	20c0      	movs	r0, #192	; 0xc0
    70ec:	0600      	lsls	r0, r0, #24
    70ee:	4303      	orrs	r3, r0
    70f0:	620b      	str	r3, [r1, #32]
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    70f2:	2300      	movs	r3, #0
    70f4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    70f6:	2107      	movs	r1, #7
    70f8:	6011      	str	r1, [r2, #0]
		DEBUG("SysTick configuration error" DEBUG_EOL);
		while(1);
	}
	
	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    70fa:	931d      	str	r3, [sp, #116]	; 0x74
    70fc:	931e      	str	r3, [sp, #120]	; 0x78
    70fe:	931f      	str	r3, [sp, #124]	; 0x7c
    7100:	9320      	str	r3, [sp, #128]	; 0x80
    7102:	9321      	str	r3, [sp, #132]	; 0x84
	
	/* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
    7104:	4b79      	ldr	r3, [pc, #484]	; (72ec <main+0x318>)
    7106:	931c      	str	r3, [sp, #112]	; 0x70
	ret = m2m_wifi_init(&param);
    7108:	a81c      	add	r0, sp, #112	; 0x70
    710a:	4b79      	ldr	r3, [pc, #484]	; (72f0 <main+0x31c>)
    710c:	4798      	blx	r3
    710e:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret) {
    7110:	d101      	bne.n	7116 <main+0x142>
    7112:	e004      	b.n	711e <main+0x14a>
	
	/* Enable SysTick interrupt for non busy wait delay. */
	if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
	{
		DEBUG("SysTick configuration error" DEBUG_EOL);
		while(1);
    7114:	e7fe      	b.n	7114 <main+0x140>
	
	/* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
	param.pfAppWifiCb = wifi_cb;
	ret = m2m_wifi_init(&param);
	if (M2M_SUCCESS != ret) {
		DEBUG(DEBUG_CONF_WIFI "m2m_wifi_init call error!(%d)" DEBUG_EOL, ret);
    7116:	4877      	ldr	r0, [pc, #476]	; (72f4 <main+0x320>)
    7118:	4b77      	ldr	r3, [pc, #476]	; (72f8 <main+0x324>)
    711a:	4798      	blx	r3
		while (1) {
		}
    711c:	e7fe      	b.n	711c <main+0x148>
	}
		
	m2m_wifi_set_sleep_mode(MAIN_PS_SLEEP_MODE, 1);
    711e:	2000      	movs	r0, #0
    7120:	2101      	movs	r1, #1
    7122:	4b76      	ldr	r3, [pc, #472]	; (72fc <main+0x328>)
    7124:	4798      	blx	r3
	
	
	
	
	/* Initialize socket. */
	socketInit();
    7126:	4b76      	ldr	r3, [pc, #472]	; (7300 <main+0x32c>)
    7128:	4798      	blx	r3
	// registerSocketCallback(http_client_socket_event_handler, http_client_socket_resolve_handler);
	
	registerSocketCallback(mqtt_socket_event_handler, mqtt_socket_resolve_handler);
    712a:	4876      	ldr	r0, [pc, #472]	; (7304 <main+0x330>)
    712c:	4976      	ldr	r1, [pc, #472]	; (7308 <main+0x334>)
    712e:	4b77      	ldr	r3, [pc, #476]	; (730c <main+0x338>)
    7130:	4798      	blx	r3
	
	
	
	// m2m_wifi_default_connect();	
	
	m2m_wifi_connect((char *)MAIN_WLAN_DEVICE_NAME, strlen((char *)MAIN_WLAN_DEVICE_NAME), M2M_WIFI_SEC_WPA_PSK, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
    7132:	4c77      	ldr	r4, [pc, #476]	; (7310 <main+0x33c>)
    7134:	23ff      	movs	r3, #255	; 0xff
    7136:	9300      	str	r3, [sp, #0]
    7138:	1c20      	adds	r0, r4, #0
    713a:	2106      	movs	r1, #6
    713c:	2202      	movs	r2, #2
    713e:	4b75      	ldr	r3, [pc, #468]	; (7314 <main+0x340>)
    7140:	4d75      	ldr	r5, [pc, #468]	; (7318 <main+0x344>)
    7142:	47a8      	blx	r5
	
	printf("Connecting to %s.\r\n", (char *)MAIN_WLAN_DEVICE_NAME);
    7144:	4875      	ldr	r0, [pc, #468]	; (731c <main+0x348>)
    7146:	1c21      	adds	r1, r4, #0
    7148:	4b6b      	ldr	r3, [pc, #428]	; (72f8 <main+0x324>)
    714a:	4798      	blx	r3
	
	ap_wifi_connection_state = MAIN_CHECKING_AP_INFORMATION;
    714c:	2201      	movs	r2, #1
    714e:	4b74      	ldr	r3, [pc, #464]	; (7320 <main+0x34c>)
    7150:	701a      	strb	r2, [r3, #0]
	
	for(;;system_sleep()) 
	{		
		/* Handle pending events from network controller. */
		ret = m2m_wifi_handle_events(NULL);		
    7152:	4d74      	ldr	r5, [pc, #464]	; (7324 <main+0x350>)
		if( ret != M2M_SUCCESS ) 
		{	
			DEBUG(DEBUG_CONF_WIFI "wifi_handle_event error code :%d"DEBUG_EOL, ret);
    7154:	4c74      	ldr	r4, [pc, #464]	; (7328 <main+0x354>)
    7156:	4e68      	ldr	r6, [pc, #416]	; (72f8 <main+0x324>)
	ap_wifi_connection_state = MAIN_CHECKING_AP_INFORMATION;
	
	for(;;system_sleep()) 
	{		
		/* Handle pending events from network controller. */
		ret = m2m_wifi_handle_events(NULL);		
    7158:	2000      	movs	r0, #0
    715a:	47a8      	blx	r5
    715c:	1e01      	subs	r1, r0, #0
		if( ret != M2M_SUCCESS ) 
    715e:	d001      	beq.n	7164 <main+0x190>
		{	
			DEBUG(DEBUG_CONF_WIFI "wifi_handle_event error code :%d"DEBUG_EOL, ret);
    7160:	1c20      	adds	r0, r4, #0
    7162:	47b0      	blx	r6
		}
		
		/* Check Wi-Fi AP connection state. */
		if( ap_wifi_connection_state != MAIN_AP_CONNECTION) 
    7164:	4b6e      	ldr	r3, [pc, #440]	; (7320 <main+0x34c>)
    7166:	781b      	ldrb	r3, [r3, #0]
    7168:	2b04      	cmp	r3, #4
    716a:	d061      	beq.n	7230 <main+0x25c>
		{
			if( ap_wifi_connection_state == MAIN_NEED_TO_CHECK_AP_INFORMATION )
    716c:	2b00      	cmp	r3, #0
    716e:	d108      	bne.n	7182 <main+0x1ae>
			{
				m2m_wifi_default_connect();
    7170:	4b6e      	ldr	r3, [pc, #440]	; (732c <main+0x358>)
    7172:	4798      	blx	r3
				ap_wifi_connection_state = MAIN_CHECKING_AP_INFORMATION;
    7174:	2201      	movs	r2, #1
    7176:	4b6a      	ldr	r3, [pc, #424]	; (7320 <main+0x34c>)
    7178:	701a      	strb	r2, [r3, #0]
				DEBUG(DEBUG_CONF_WIFI "m2m_wifi_default_connect start"DEBUG_EOL);
    717a:	486d      	ldr	r0, [pc, #436]	; (7330 <main+0x35c>)
    717c:	4b4f      	ldr	r3, [pc, #316]	; (72bc <main+0x2e8>)
    717e:	4798      	blx	r3
    7180:	e070      	b.n	7264 <main+0x290>
			}
			else if (ap_wifi_connection_state == MAIN_NEED_HTTP_PROVISIONING)
    7182:	2b02      	cmp	r3, #2
    7184:	d16e      	bne.n	7264 <main+0x290>
			{
				uint8_t mac_addr[6];
				uint8_t u8IsMacAddrValid;
				
				m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    7186:	270b      	movs	r7, #11
    7188:	446f      	add	r7, sp
    718a:	a803      	add	r0, sp, #12
    718c:	1c39      	adds	r1, r7, #0
    718e:	4b69      	ldr	r3, [pc, #420]	; (7334 <main+0x360>)
    7190:	4798      	blx	r3
				if (!u8IsMacAddrValid) {
    7192:	783b      	ldrb	r3, [r7, #0]
    7194:	2b00      	cmp	r3, #0
    7196:	d102      	bne.n	719e <main+0x1ca>
					m2m_wifi_set_mac_address(gau8MacAddr);
    7198:	4867      	ldr	r0, [pc, #412]	; (7338 <main+0x364>)
    719a:	4b68      	ldr	r3, [pc, #416]	; (733c <main+0x368>)
    719c:	4798      	blx	r3
				}
				
				m2m_wifi_get_mac_address(gau8MacAddr);
    719e:	4866      	ldr	r0, [pc, #408]	; (7338 <main+0x364>)
    71a0:	4b67      	ldr	r3, [pc, #412]	; (7340 <main+0x36c>)
    71a2:	4798      	blx	r3
static void set_dev_name_to_mac(uint8 *name, uint8 *mac_addr)
{
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
    71a4:	4867      	ldr	r0, [pc, #412]	; (7344 <main+0x370>)
    71a6:	4b68      	ldr	r3, [pc, #416]	; (7348 <main+0x374>)
    71a8:	4798      	blx	r3
	if (len >= 5) {
    71aa:	2804      	cmp	r0, #4
    71ac:	d931      	bls.n	7212 <main+0x23e>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    71ae:	1e43      	subs	r3, r0, #1
    71b0:	4a64      	ldr	r2, [pc, #400]	; (7344 <main+0x370>)
    71b2:	18d2      	adds	r2, r2, r3
    71b4:	4b60      	ldr	r3, [pc, #384]	; (7338 <main+0x364>)
    71b6:	795b      	ldrb	r3, [r3, #5]
    71b8:	210f      	movs	r1, #15
    71ba:	4019      	ands	r1, r3
    71bc:	1c0f      	adds	r7, r1, #0
    71be:	3730      	adds	r7, #48	; 0x30
    71c0:	2909      	cmp	r1, #9
    71c2:	dd01      	ble.n	71c8 <main+0x1f4>
    71c4:	3137      	adds	r1, #55	; 0x37
    71c6:	1c0f      	adds	r7, r1, #0
    71c8:	7017      	strb	r7, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    71ca:	1e82      	subs	r2, r0, #2
    71cc:	495d      	ldr	r1, [pc, #372]	; (7344 <main+0x370>)
    71ce:	188a      	adds	r2, r1, r2
    71d0:	091b      	lsrs	r3, r3, #4
    71d2:	1c19      	adds	r1, r3, #0
    71d4:	3130      	adds	r1, #48	; 0x30
    71d6:	2b09      	cmp	r3, #9
    71d8:	dd01      	ble.n	71de <main+0x20a>
    71da:	3337      	adds	r3, #55	; 0x37
    71dc:	1c19      	adds	r1, r3, #0
    71de:	7011      	strb	r1, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    71e0:	1f03      	subs	r3, r0, #4
    71e2:	4a58      	ldr	r2, [pc, #352]	; (7344 <main+0x370>)
    71e4:	18d2      	adds	r2, r2, r3
    71e6:	4b54      	ldr	r3, [pc, #336]	; (7338 <main+0x364>)
    71e8:	791b      	ldrb	r3, [r3, #4]
    71ea:	210f      	movs	r1, #15
    71ec:	4019      	ands	r1, r3
    71ee:	1c0f      	adds	r7, r1, #0
    71f0:	3730      	adds	r7, #48	; 0x30
    71f2:	2909      	cmp	r1, #9
    71f4:	dd01      	ble.n	71fa <main+0x226>
    71f6:	3137      	adds	r1, #55	; 0x37
    71f8:	1c0f      	adds	r7, r1, #0
    71fa:	7017      	strb	r7, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    71fc:	3805      	subs	r0, #5
    71fe:	4a51      	ldr	r2, [pc, #324]	; (7344 <main+0x370>)
    7200:	1810      	adds	r0, r2, r0
    7202:	091b      	lsrs	r3, r3, #4
    7204:	1c1a      	adds	r2, r3, #0
    7206:	3230      	adds	r2, #48	; 0x30
    7208:	2b09      	cmp	r3, #9
    720a:	dd01      	ble.n	7210 <main+0x23c>
    720c:	3337      	adds	r3, #55	; 0x37
    720e:	1c1a      	adds	r2, r3, #0
    7210:	7002      	strb	r2, [r0, #0]
				
				m2m_wifi_get_mac_address(gau8MacAddr);
				set_dev_name_to_mac((uint8_t *)gacDeviceName, gau8MacAddr);
				//set_dev_name_to_mac((uint8_t *)gstrM2MAPConfig.au8SSID, gau8MacAddr);
				
				m2m_wifi_set_device_name((uint8_t *)gacDeviceName, (uint8_t)m2m_strlen((uint8_t *)gacDeviceName));
    7212:	4f4c      	ldr	r7, [pc, #304]	; (7344 <main+0x370>)
    7214:	1c38      	adds	r0, r7, #0
    7216:	4b4c      	ldr	r3, [pc, #304]	; (7348 <main+0x374>)
    7218:	4798      	blx	r3
    721a:	b2c1      	uxtb	r1, r0
    721c:	1c38      	adds	r0, r7, #0
    721e:	4b4b      	ldr	r3, [pc, #300]	; (734c <main+0x378>)
    7220:	4798      	blx	r3
				
				// m2m_wifi_start_provision_mode((tstrM2MAPConfig *)&gstrM2MAPConfig, (char *)gacHttpProvDomainName, 1);
				ap_wifi_connection_state = MAIN_DOING_AP_HTTP_PROVISIONING;
    7222:	2203      	movs	r2, #3
    7224:	4b3e      	ldr	r3, [pc, #248]	; (7320 <main+0x34c>)
    7226:	701a      	strb	r2, [r3, #0]
				DEBUG(DEBUG_CONF_WIFI "m2m_wifi_start_provision_mode start"DEBUG_EOL);
    7228:	4849      	ldr	r0, [pc, #292]	; (7350 <main+0x37c>)
    722a:	4b24      	ldr	r3, [pc, #144]	; (72bc <main+0x2e8>)
    722c:	4798      	blx	r3
    722e:	e019      	b.n	7264 <main+0x290>
			}
			continue;
		} 
				
		/* do things if thing token has been configured correctly */
		if( tick_counter_check_timer() && gThingTokenConfiguredCorrectlyFlag == 0x02 )
    7230:	4b48      	ldr	r3, [pc, #288]	; (7354 <main+0x380>)
    7232:	4798      	blx	r3
    7234:	2800      	cmp	r0, #0
    7236:	d015      	beq.n	7264 <main+0x290>
    7238:	4b47      	ldr	r3, [pc, #284]	; (7358 <main+0x384>)
    723a:	781b      	ldrb	r3, [r3, #0]
    723c:	2b02      	cmp	r3, #2
    723e:	d111      	bne.n	7264 <main+0x290>
		{	
			char send_buf[100] = {0,};
    7240:	a803      	add	r0, sp, #12
    7242:	2100      	movs	r1, #0
    7244:	2264      	movs	r2, #100	; 0x64
    7246:	4b45      	ldr	r3, [pc, #276]	; (735c <main+0x388>)
    7248:	4798      	blx	r3
			int dTemp = 0;
				
			dTemp = (int) at30tse_read_temperature();		
    724a:	4b45      	ldr	r3, [pc, #276]	; (7360 <main+0x38c>)
    724c:	4798      	blx	r3
    724e:	4b45      	ldr	r3, [pc, #276]	; (7364 <main+0x390>)
    7250:	4798      	blx	r3
    7252:	1c03      	adds	r3, r0, #0
			sprintf(send_buf,MAIN_THETHINGSIO_JSON_START MAIN_THETHINGSIO_JSON_KEY_VALUE_SI MAIN_THETHINGSIO_JSON_END, "temperature", (int)dTemp);
    7254:	a803      	add	r0, sp, #12
    7256:	4944      	ldr	r1, [pc, #272]	; (7368 <main+0x394>)
    7258:	4a44      	ldr	r2, [pc, #272]	; (736c <main+0x398>)
    725a:	4f45      	ldr	r7, [pc, #276]	; (7370 <main+0x39c>)
    725c:	47b8      	blx	r7
			
			// send temperature value
			thethingsio_example_read_and_write(send_buf);	
    725e:	a803      	add	r0, sp, #12
    7260:	4b44      	ldr	r3, [pc, #272]	; (7374 <main+0x3a0>)
    7262:	4798      	blx	r3
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    7264:	f3bf 8f4f 	dsb	sy
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
    7268:	bf30      	wfi
    726a:	e775      	b.n	7158 <main+0x184>
	nm_bsp_init();
	
	/* Enable SysTick interrupt for non busy wait delay. */
	if (SysTick_Config(system_cpu_clock_get_hz() / 1000))
	{
		DEBUG("SysTick configuration error" DEBUG_EOL);
    726c:	4842      	ldr	r0, [pc, #264]	; (7378 <main+0x3a4>)
    726e:	4b13      	ldr	r3, [pc, #76]	; (72bc <main+0x2e8>)
    7270:	4798      	blx	r3
    7272:	e74f      	b.n	7114 <main+0x140>
    7274:	0000541d 	.word	0x0000541d
    7278:	41004000 	.word	0x41004000
    727c:	e000ed00 	.word	0xe000ed00
    7280:	00160002 	.word	0x00160002
    7284:	00170002 	.word	0x00170002
    7288:	20000308 	.word	0x20000308
    728c:	200004e4 	.word	0x200004e4
    7290:	00006f79 	.word	0x00006f79
    7294:	200004e0 	.word	0x200004e0
    7298:	00006f4d 	.word	0x00006f4d
    729c:	200004dc 	.word	0x200004dc
    72a0:	42001400 	.word	0x42001400
    72a4:	0000473d 	.word	0x0000473d
    72a8:	20000140 	.word	0x20000140
    72ac:	00008d45 	.word	0x00008d45
    72b0:	00004239 	.word	0x00004239
    72b4:	e000e100 	.word	0xe000e100
    72b8:	0000bd30 	.word	0x0000bd30
    72bc:	00008d0d 	.word	0x00008d0d
    72c0:	00002ed5 	.word	0x00002ed5
    72c4:	00006f91 	.word	0x00006f91
    72c8:	00006029 	.word	0x00006029
    72cc:	00006ee1 	.word	0x00006ee1
    72d0:	00005dfd 	.word	0x00005dfd
    72d4:	000001d1 	.word	0x000001d1
    72d8:	000051d9 	.word	0x000051d9
    72dc:	40000400 	.word	0x40000400
    72e0:	00008045 	.word	0x00008045
    72e4:	00ffffff 	.word	0x00ffffff
    72e8:	e000e010 	.word	0xe000e010
    72ec:	00006ce9 	.word	0x00006ce9
    72f0:	00000fe5 	.word	0x00000fe5
    72f4:	0000bda4 	.word	0x0000bda4
    72f8:	00008bed 	.word	0x00008bed
    72fc:	00001319 	.word	0x00001319
    7300:	00002a11 	.word	0x00002a11
    7304:	00007f31 	.word	0x00007f31
    7308:	00007539 	.word	0x00007539
    730c:	00002a55 	.word	0x00002a55
    7310:	0000bdd0 	.word	0x0000bdd0
    7314:	0000bdd8 	.word	0x0000bdd8
    7318:	0000126d 	.word	0x0000126d
    731c:	0000bde4 	.word	0x0000bde4
    7320:	2000033d 	.word	0x2000033d
    7324:	00001041 	.word	0x00001041
    7328:	0000bdf8 	.word	0x0000bdf8
    732c:	0000104d 	.word	0x0000104d
    7330:	0000be28 	.word	0x0000be28
    7334:	000012bd 	.word	0x000012bd
    7338:	200000c8 	.word	0x200000c8
    733c:	00001289 	.word	0x00001289
    7340:	000012ed 	.word	0x000012ed
    7344:	200000d0 	.word	0x200000d0
    7348:	00000549 	.word	0x00000549
    734c:	00001371 	.word	0x00001371
    7350:	0000be54 	.word	0x0000be54
    7354:	0000737d 	.word	0x0000737d
    7358:	2000033c 	.word	0x2000033c
    735c:	00008a9f 	.word	0x00008a9f
    7360:	00002fe5 	.word	0x00002fe5
    7364:	000088d1 	.word	0x000088d1
    7368:	0000be84 	.word	0x0000be84
    736c:	0000beac 	.word	0x0000beac
    7370:	00008e65 	.word	0x00008e65
    7374:	00005fc9 	.word	0x00005fc9
    7378:	0000beb8 	.word	0x0000beb8

0000737c <tick_counter_check_timer>:

bool	tick_counter_check_timer()
{
	bool ret = false;
	
	if( system_tick_count > messages_send_interval)
    737c:	4b03      	ldr	r3, [pc, #12]	; (738c <tick_counter_check_timer+0x10>)
    737e:	6818      	ldr	r0, [r3, #0]
    7380:	4b03      	ldr	r3, [pc, #12]	; (7390 <tick_counter_check_timer+0x14>)
    7382:	681b      	ldr	r3, [r3, #0]
		ret = true;
		
	return ret;
    7384:	4283      	cmp	r3, r0
    7386:	4180      	sbcs	r0, r0
    7388:	4240      	negs	r0, r0
}
    738a:	4770      	bx	lr
    738c:	20000344 	.word	0x20000344
    7390:	20000340 	.word	0x20000340

00007394 <tick_counter_reset_timer>:

void	tick_counter_reset_timer(int interval)
{
	messages_send_interval = system_tick_count + interval;
    7394:	4b02      	ldr	r3, [pc, #8]	; (73a0 <tick_counter_reset_timer+0xc>)
    7396:	681b      	ldr	r3, [r3, #0]
    7398:	18c0      	adds	r0, r0, r3
    739a:	4b02      	ldr	r3, [pc, #8]	; (73a4 <tick_counter_reset_timer+0x10>)
    739c:	6018      	str	r0, [r3, #0]
}
    739e:	4770      	bx	lr
    73a0:	20000344 	.word	0x20000344
    73a4:	20000340 	.word	0x20000340

000073a8 <tick_counter_pending_timer>:

void	tick_counter_pending_timer()
{
	messages_send_interval = TICK_COUNTER_INFINITE;
    73a8:	2201      	movs	r2, #1
    73aa:	4252      	negs	r2, r2
    73ac:	4b01      	ldr	r3, [pc, #4]	; (73b4 <tick_counter_pending_timer+0xc>)
    73ae:	601a      	str	r2, [r3, #0]
}
    73b0:	4770      	bx	lr
    73b2:	46c0      	nop			; (mov r8, r8)
    73b4:	20000340 	.word	0x20000340

000073b8 <SysTick_Handler>:
/** 
 * \Brief System Callback, run during SysTick interrupt.
*/
void SysTick_Handler(void)
{
	system_tick_count++;
    73b8:	4a02      	ldr	r2, [pc, #8]	; (73c4 <SysTick_Handler+0xc>)
    73ba:	6813      	ldr	r3, [r2, #0]
    73bc:	3301      	adds	r3, #1
    73be:	6013      	str	r3, [r2, #0]
    73c0:	4770      	bx	lr
    73c2:	46c0      	nop			; (mov r8, r8)
    73c4:	20000344 	.word	0x20000344

000073c8 <_hwerr_to_stderr>:
    73c8:	1c03      	adds	r3, r0, #0
    73ca:	300e      	adds	r0, #14
    73cc:	b500      	push	{lr}
    73ce:	280e      	cmp	r0, #14
    73d0:	d819      	bhi.n	7406 <_hwerr_to_stderr+0x3e>
    73d2:	f000 fe2d 	bl	8030 <__gnu_thumb1_case_uqi>
    73d6:	1416      	.short	0x1416
    73d8:	1b181012 	.word	0x1b181012
    73dc:	180c0e18 	.word	0x180c0e18
    73e0:	1d0a0e0e 	.word	0x1d0a0e0e
    73e4:	08          	.byte	0x08
    73e5:	00          	.byte	0x00
    73e6:	2000      	movs	r0, #0
    73e8:	e014      	b.n	7414 <_hwerr_to_stderr+0x4c>
    73ea:	2070      	movs	r0, #112	; 0x70
    73ec:	e011      	b.n	7412 <_hwerr_to_stderr+0x4a>
    73ee:	2016      	movs	r0, #22
    73f0:	e00f      	b.n	7412 <_hwerr_to_stderr+0x4a>
    73f2:	200c      	movs	r0, #12
    73f4:	e00d      	b.n	7412 <_hwerr_to_stderr+0x4a>
    73f6:	2079      	movs	r0, #121	; 0x79
    73f8:	e00b      	b.n	7412 <_hwerr_to_stderr+0x4a>
    73fa:	2068      	movs	r0, #104	; 0x68
    73fc:	e009      	b.n	7412 <_hwerr_to_stderr+0x4a>
    73fe:	200b      	movs	r0, #11
    7400:	e007      	b.n	7412 <_hwerr_to_stderr+0x4a>
    7402:	2010      	movs	r0, #16
    7404:	e005      	b.n	7412 <_hwerr_to_stderr+0x4a>
    7406:	2000      	movs	r0, #0
    7408:	4283      	cmp	r3, r0
    740a:	da03      	bge.n	7414 <_hwerr_to_stderr+0x4c>
    740c:	2005      	movs	r0, #5
    740e:	e000      	b.n	7412 <_hwerr_to_stderr+0x4a>
    7410:	2002      	movs	r0, #2
    7412:	4240      	negs	r0, r0
    7414:	bd00      	pop	{pc}
	...

00007418 <_mqtt_send_wait>:
    7418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    741a:	1c04      	adds	r4, r0, #0
    741c:	3443      	adds	r4, #67	; 0x43
    741e:	7823      	ldrb	r3, [r4, #0]
    7420:	1c05      	adds	r5, r0, #0
    7422:	07d8      	lsls	r0, r3, #31
    7424:	d51c      	bpl.n	7460 <_mqtt_send_wait+0x48>
    7426:	2604      	movs	r6, #4
    7428:	4333      	orrs	r3, r6
    742a:	7023      	strb	r3, [r4, #0]
    742c:	2002      	movs	r0, #2
    742e:	5628      	ldrsb	r0, [r5, r0]
    7430:	b292      	uxth	r2, r2
    7432:	2300      	movs	r3, #0
    7434:	4f0c      	ldr	r7, [pc, #48]	; (7468 <_mqtt_send_wait+0x50>)
    7436:	47b8      	blx	r7
    7438:	2800      	cmp	r0, #0
    743a:	da05      	bge.n	7448 <_mqtt_send_wait+0x30>
    743c:	7823      	ldrb	r3, [r4, #0]
    743e:	43b3      	bics	r3, r6
    7440:	7023      	strb	r3, [r4, #0]
    7442:	4b0a      	ldr	r3, [pc, #40]	; (746c <_mqtt_send_wait+0x54>)
    7444:	4798      	blx	r3
    7446:	e00d      	b.n	7464 <_mqtt_send_wait+0x4c>
    7448:	7822      	ldrb	r2, [r4, #0]
    744a:	2314      	movs	r3, #20
    744c:	4013      	ands	r3, r2
    744e:	2000      	movs	r0, #0
    7450:	2b04      	cmp	r3, #4
    7452:	d107      	bne.n	7464 <_mqtt_send_wait+0x4c>
    7454:	4b06      	ldr	r3, [pc, #24]	; (7470 <_mqtt_send_wait+0x58>)
    7456:	4798      	blx	r3
    7458:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    745a:	4b06      	ldr	r3, [pc, #24]	; (7474 <_mqtt_send_wait+0x5c>)
    745c:	4798      	blx	r3
    745e:	e7f3      	b.n	7448 <_mqtt_send_wait+0x30>
    7460:	2001      	movs	r0, #1
    7462:	4240      	negs	r0, r0
    7464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7466:	46c0      	nop			; (mov r8, r8)
    7468:	00002bc5 	.word	0x00002bc5
    746c:	000073c9 	.word	0x000073c9
    7470:	00001041 	.word	0x00001041
    7474:	00006c91 	.word	0x00006c91

00007478 <mqtt_get_config_defaults>:
    7478:	4b07      	ldr	r3, [pc, #28]	; (7498 <mqtt_get_config_defaults+0x20>)
    747a:	2240      	movs	r2, #64	; 0x40
    747c:	8003      	strh	r3, [r0, #0]
    747e:	2396      	movs	r3, #150	; 0x96
    7480:	009b      	lsls	r3, r3, #2
    7482:	8103      	strh	r3, [r0, #8]
    7484:	6102      	str	r2, [r0, #16]
    7486:	2300      	movs	r3, #0
    7488:	2220      	movs	r2, #32
    748a:	7083      	strb	r3, [r0, #2]
    748c:	6043      	str	r3, [r0, #4]
    748e:	60c3      	str	r3, [r0, #12]
    7490:	6142      	str	r2, [r0, #20]
    7492:	7603      	strb	r3, [r0, #24]
    7494:	4770      	bx	lr
    7496:	46c0      	nop			; (mov r8, r8)
    7498:	0000075b 	.word	0x0000075b

0000749c <mqtt_init>:
    749c:	b538      	push	{r3, r4, r5, lr}
    749e:	1c04      	adds	r4, r0, #0
    74a0:	1c0d      	adds	r5, r1, #0
    74a2:	2800      	cmp	r0, #0
    74a4:	d030      	beq.n	7508 <mqtt_init+0x6c>
    74a6:	2900      	cmp	r1, #0
    74a8:	d02e      	beq.n	7508 <mqtt_init+0x6c>
    74aa:	690b      	ldr	r3, [r1, #16]
    74ac:	2b00      	cmp	r3, #0
    74ae:	d02b      	beq.n	7508 <mqtt_init+0x6c>
    74b0:	684b      	ldr	r3, [r1, #4]
    74b2:	2b00      	cmp	r3, #0
    74b4:	d028      	beq.n	7508 <mqtt_init+0x6c>
    74b6:	2100      	movs	r1, #0
    74b8:	2274      	movs	r2, #116	; 0x74
    74ba:	4b16      	ldr	r3, [pc, #88]	; (7514 <mqtt_init+0x78>)
    74bc:	4798      	blx	r3
    74be:	1c20      	adds	r0, r4, #0
    74c0:	4b15      	ldr	r3, [pc, #84]	; (7518 <mqtt_init+0x7c>)
    74c2:	3058      	adds	r0, #88	; 0x58
    74c4:	1c29      	adds	r1, r5, #0
    74c6:	221c      	movs	r2, #28
    74c8:	4798      	blx	r3
    74ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
    74cc:	2b00      	cmp	r3, #0
    74ce:	d10b      	bne.n	74e8 <mqtt_init+0x4c>
    74d0:	6928      	ldr	r0, [r5, #16]
    74d2:	4b12      	ldr	r3, [pc, #72]	; (751c <mqtt_init+0x80>)
    74d4:	4798      	blx	r3
    74d6:	6660      	str	r0, [r4, #100]	; 0x64
    74d8:	2800      	cmp	r0, #0
    74da:	d017      	beq.n	750c <mqtt_init+0x70>
    74dc:	1c23      	adds	r3, r4, #0
    74de:	3343      	adds	r3, #67	; 0x43
    74e0:	781a      	ldrb	r2, [r3, #0]
    74e2:	2120      	movs	r1, #32
    74e4:	430a      	orrs	r2, r1
    74e6:	701a      	strb	r2, [r3, #0]
    74e8:	892a      	ldrh	r2, [r5, #8]
    74ea:	23fa      	movs	r3, #250	; 0xfa
    74ec:	005b      	lsls	r3, r3, #1
    74ee:	4353      	muls	r3, r2
    74f0:	6868      	ldr	r0, [r5, #4]
    74f2:	490b      	ldr	r1, [pc, #44]	; (7520 <mqtt_init+0x84>)
    74f4:	1c22      	adds	r2, r4, #0
    74f6:	4d0b      	ldr	r5, [pc, #44]	; (7524 <mqtt_init+0x88>)
    74f8:	47a8      	blx	r5
    74fa:	1c03      	adds	r3, r0, #0
    74fc:	6520      	str	r0, [r4, #80]	; 0x50
    74fe:	2000      	movs	r0, #0
    7500:	4283      	cmp	r3, r0
    7502:	da05      	bge.n	7510 <mqtt_init+0x74>
    7504:	201c      	movs	r0, #28
    7506:	e002      	b.n	750e <mqtt_init+0x72>
    7508:	2016      	movs	r0, #22
    750a:	e000      	b.n	750e <mqtt_init+0x72>
    750c:	200c      	movs	r0, #12
    750e:	4240      	negs	r0, r0
    7510:	bd38      	pop	{r3, r4, r5, pc}
    7512:	46c0      	nop			; (mov r8, r8)
    7514:	00008a9f 	.word	0x00008a9f
    7518:	00008a65 	.word	0x00008a65
    751c:	00008a3d 	.word	0x00008a3d
    7520:	00007afd 	.word	0x00007afd
    7524:	00006c19 	.word	0x00006c19

00007528 <mqtt_register_callback>:
    7528:	2800      	cmp	r0, #0
    752a:	d002      	beq.n	7532 <mqtt_register_callback+0xa>
    752c:	6541      	str	r1, [r0, #84]	; 0x54
    752e:	2000      	movs	r0, #0
    7530:	e001      	b.n	7536 <mqtt_register_callback+0xe>
    7532:	2016      	movs	r0, #22
    7534:	4240      	negs	r0, r0
    7536:	4770      	bx	lr

00007538 <mqtt_socket_resolve_handler>:
    7538:	b5f0      	push	{r4, r5, r6, r7, lr}
    753a:	1c06      	adds	r6, r0, #0
    753c:	b085      	sub	sp, #20
    753e:	1c0f      	adds	r7, r1, #0
    7540:	2400      	movs	r4, #0
    7542:	4b0f      	ldr	r3, [pc, #60]	; (7580 <mqtt_socket_resolve_handler+0x48>)
    7544:	58e5      	ldr	r5, [r4, r3]
    7546:	2d00      	cmp	r5, #0
    7548:	d015      	beq.n	7576 <mqtt_socket_resolve_handler+0x3e>
    754a:	1ce9      	adds	r1, r5, #3
    754c:	1c30      	adds	r0, r6, #0
    754e:	4b0d      	ldr	r3, [pc, #52]	; (7584 <mqtt_socket_resolve_handler+0x4c>)
    7550:	4798      	blx	r3
    7552:	2800      	cmp	r0, #0
    7554:	d10f      	bne.n	7576 <mqtt_socket_resolve_handler+0x3e>
    7556:	466a      	mov	r2, sp
    7558:	2302      	movs	r3, #2
    755a:	8013      	strh	r3, [r2, #0]
    755c:	1c2b      	adds	r3, r5, #0
    755e:	3358      	adds	r3, #88	; 0x58
    7560:	881b      	ldrh	r3, [r3, #0]
    7562:	9701      	str	r7, [sp, #4]
    7564:	ba5b      	rev16	r3, r3
    7566:	8053      	strh	r3, [r2, #2]
    7568:	2002      	movs	r0, #2
    756a:	5628      	ldrsb	r0, [r5, r0]
    756c:	4669      	mov	r1, sp
    756e:	2210      	movs	r2, #16
    7570:	4b05      	ldr	r3, [pc, #20]	; (7588 <mqtt_socket_resolve_handler+0x50>)
    7572:	4798      	blx	r3
    7574:	e002      	b.n	757c <mqtt_socket_resolve_handler+0x44>
    7576:	3404      	adds	r4, #4
    7578:	2c1c      	cmp	r4, #28
    757a:	d1e2      	bne.n	7542 <mqtt_socket_resolve_handler+0xa>
    757c:	b005      	add	sp, #20
    757e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7580:	20000348 	.word	0x20000348
    7584:	00008ea9 	.word	0x00008ea9
    7588:	00002b2d 	.word	0x00002b2d

0000758c <mqtt_connect>:
    758c:	b5f0      	push	{r4, r5, r6, r7, lr}
    758e:	1c04      	adds	r4, r0, #0
    7590:	b089      	sub	sp, #36	; 0x24
    7592:	1c0d      	adds	r5, r1, #0
    7594:	2800      	cmp	r0, #0
    7596:	d051      	beq.n	763c <mqtt_connect+0xb0>
    7598:	2900      	cmp	r1, #0
    759a:	d04f      	beq.n	763c <mqtt_connect+0xb0>
    759c:	1c08      	adds	r0, r1, #0
    759e:	4b39      	ldr	r3, [pc, #228]	; (7684 <mqtt_connect+0xf8>)
    75a0:	4798      	blx	r3
    75a2:	2840      	cmp	r0, #64	; 0x40
    75a4:	d84c      	bhi.n	7640 <mqtt_connect+0xb4>
    75a6:	1c21      	adds	r1, r4, #0
    75a8:	3143      	adds	r1, #67	; 0x43
    75aa:	780b      	ldrb	r3, [r1, #0]
    75ac:	9101      	str	r1, [sp, #4]
    75ae:	07db      	lsls	r3, r3, #31
    75b0:	0fd9      	lsrs	r1, r3, #31
    75b2:	466a      	mov	r2, sp
    75b4:	b2ce      	uxtb	r6, r1
    75b6:	1ce0      	adds	r0, r4, #3
    75b8:	7211      	strb	r1, [r2, #8]
    75ba:	2e00      	cmp	r6, #0
    75bc:	d142      	bne.n	7644 <mqtt_connect+0xb8>
    75be:	2701      	movs	r7, #1
    75c0:	1c29      	adds	r1, r5, #0
    75c2:	4b31      	ldr	r3, [pc, #196]	; (7688 <mqtt_connect+0xfc>)
    75c4:	8027      	strh	r7, [r4, #0]
    75c6:	4798      	blx	r3
    75c8:	9a01      	ldr	r2, [sp, #4]
    75ca:	2002      	movs	r0, #2
    75cc:	7813      	ldrb	r3, [r2, #0]
    75ce:	9901      	ldr	r1, [sp, #4]
    75d0:	43bb      	bics	r3, r7
    75d2:	4383      	bics	r3, r0
    75d4:	22e3      	movs	r2, #227	; 0xe3
    75d6:	4013      	ands	r3, r2
    75d8:	466a      	mov	r2, sp
    75da:	700b      	strb	r3, [r1, #0]
    75dc:	7a12      	ldrb	r2, [r2, #8]
    75de:	1c23      	adds	r3, r4, #0
    75e0:	3348      	adds	r3, #72	; 0x48
    75e2:	6466      	str	r6, [r4, #68]	; 0x44
    75e4:	701a      	strb	r2, [r3, #0]
    75e6:	7c9a      	ldrb	r2, [r3, #18]
    75e8:	805e      	strh	r6, [r3, #2]
    75ea:	1e53      	subs	r3, r2, #1
    75ec:	419a      	sbcs	r2, r3
    75ee:	b2d2      	uxtb	r2, r2
    75f0:	1c39      	adds	r1, r7, #0
    75f2:	4b26      	ldr	r3, [pc, #152]	; (768c <mqtt_connect+0x100>)
    75f4:	4798      	blx	r3
    75f6:	70a0      	strb	r0, [r4, #2]
    75f8:	2800      	cmp	r0, #0
    75fa:	db25      	blt.n	7648 <mqtt_connect+0xbc>
    75fc:	4b24      	ldr	r3, [pc, #144]	; (7690 <mqtt_connect+0x104>)
    75fe:	0080      	lsls	r0, r0, #2
    7600:	50c4      	str	r4, [r0, r3]
    7602:	1c2b      	adds	r3, r5, #0
    7604:	781f      	ldrb	r7, [r3, #0]
    7606:	2f00      	cmp	r7, #0
    7608:	d026      	beq.n	7658 <mqtt_connect+0xcc>
    760a:	2220      	movs	r2, #32
    760c:	1c39      	adds	r1, r7, #0
    760e:	4391      	bics	r1, r2
    7610:	1c0a      	adds	r2, r1, #0
    7612:	3a41      	subs	r2, #65	; 0x41
    7614:	b2d2      	uxtb	r2, r2
    7616:	3301      	adds	r3, #1
    7618:	2a05      	cmp	r2, #5
    761a:	d90d      	bls.n	7638 <mqtt_connect+0xac>
    761c:	2f3a      	cmp	r7, #58	; 0x3a
    761e:	d00b      	beq.n	7638 <mqtt_connect+0xac>
    7620:	2f2f      	cmp	r7, #47	; 0x2f
    7622:	d009      	beq.n	7638 <mqtt_connect+0xac>
    7624:	2f2e      	cmp	r7, #46	; 0x2e
    7626:	d102      	bne.n	762e <mqtt_connect+0xa2>
    7628:	2e00      	cmp	r6, #0
    762a:	d0eb      	beq.n	7604 <mqtt_connect+0x78>
    762c:	e00f      	b.n	764e <mqtt_connect+0xc2>
    762e:	2230      	movs	r2, #48	; 0x30
    7630:	4017      	ands	r7, r2
    7632:	4297      	cmp	r7, r2
    7634:	d0e6      	beq.n	7604 <mqtt_connect+0x78>
    7636:	e00a      	b.n	764e <mqtt_connect+0xc2>
    7638:	2601      	movs	r6, #1
    763a:	e7e3      	b.n	7604 <mqtt_connect+0x78>
    763c:	2016      	movs	r0, #22
    763e:	e004      	b.n	764a <mqtt_connect+0xbe>
    7640:	205b      	movs	r0, #91	; 0x5b
    7642:	e002      	b.n	764a <mqtt_connect+0xbe>
    7644:	2078      	movs	r0, #120	; 0x78
    7646:	e000      	b.n	764a <mqtt_connect+0xbe>
    7648:	201c      	movs	r0, #28
    764a:	4240      	negs	r0, r0
    764c:	e017      	b.n	767e <mqtt_connect+0xf2>
    764e:	1c28      	adds	r0, r5, #0
    7650:	4b10      	ldr	r3, [pc, #64]	; (7694 <mqtt_connect+0x108>)
    7652:	4798      	blx	r3
    7654:	2000      	movs	r0, #0
    7656:	e012      	b.n	767e <mqtt_connect+0xf2>
    7658:	466a      	mov	r2, sp
    765a:	2302      	movs	r3, #2
    765c:	8213      	strh	r3, [r2, #16]
    765e:	1c23      	adds	r3, r4, #0
    7660:	3358      	adds	r3, #88	; 0x58
    7662:	881b      	ldrh	r3, [r3, #0]
    7664:	1c28      	adds	r0, r5, #0
    7666:	ba5b      	rev16	r3, r3
    7668:	8253      	strh	r3, [r2, #18]
    766a:	4b0b      	ldr	r3, [pc, #44]	; (7698 <mqtt_connect+0x10c>)
    766c:	4798      	blx	r3
    766e:	9005      	str	r0, [sp, #20]
    7670:	2002      	movs	r0, #2
    7672:	5620      	ldrsb	r0, [r4, r0]
    7674:	a904      	add	r1, sp, #16
    7676:	2210      	movs	r2, #16
    7678:	4b08      	ldr	r3, [pc, #32]	; (769c <mqtt_connect+0x110>)
    767a:	4798      	blx	r3
    767c:	1c38      	adds	r0, r7, #0
    767e:	b009      	add	sp, #36	; 0x24
    7680:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7682:	46c0      	nop			; (mov r8, r8)
    7684:	0000925d 	.word	0x0000925d
    7688:	00008ebd 	.word	0x00008ebd
    768c:	00002a69 	.word	0x00002a69
    7690:	20000348 	.word	0x20000348
    7694:	00002ded 	.word	0x00002ded
    7698:	00002d81 	.word	0x00002d81
    769c:	00002b2d 	.word	0x00002b2d

000076a0 <mqtt_connect_broker>:
    76a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76a2:	b095      	sub	sp, #84	; 0x54
    76a4:	af02      	add	r7, sp, #8
    76a6:	617b      	str	r3, [r7, #20]
    76a8:	1c3b      	adds	r3, r7, #0
    76aa:	3370      	adds	r3, #112	; 0x70
    76ac:	781b      	ldrb	r3, [r3, #0]
    76ae:	1c05      	adds	r5, r0, #0
    76b0:	60fb      	str	r3, [r7, #12]
    76b2:	1c3b      	adds	r3, r7, #0
    76b4:	3374      	adds	r3, #116	; 0x74
    76b6:	781b      	ldrb	r3, [r3, #0]
    76b8:	6139      	str	r1, [r7, #16]
    76ba:	61fa      	str	r2, [r7, #28]
    76bc:	60bb      	str	r3, [r7, #8]
    76be:	2800      	cmp	r0, #0
    76c0:	d101      	bne.n	76c6 <mqtt_connect_broker+0x26>
    76c2:	2016      	movs	r0, #22
    76c4:	e129      	b.n	791a <mqtt_connect_broker+0x27a>
    76c6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    76c8:	4668      	mov	r0, sp
    76ca:	3307      	adds	r3, #7
    76cc:	08db      	lsrs	r3, r3, #3
    76ce:	00db      	lsls	r3, r3, #3
    76d0:	1ac0      	subs	r0, r0, r3
    76d2:	4685      	mov	sp, r0
    76d4:	ac02      	add	r4, sp, #8
    76d6:	607c      	str	r4, [r7, #4]
    76d8:	6e3c      	ldr	r4, [r7, #96]	; 0x60
    76da:	2c00      	cmp	r4, #0
    76dc:	d0f1      	beq.n	76c2 <mqtt_connect_broker+0x22>
    76de:	1c2b      	adds	r3, r5, #0
    76e0:	3343      	adds	r3, #67	; 0x43
    76e2:	781b      	ldrb	r3, [r3, #0]
    76e4:	07d8      	lsls	r0, r3, #31
    76e6:	d400      	bmi.n	76ea <mqtt_connect_broker+0x4a>
    76e8:	e112      	b.n	7910 <mqtt_connect_broker+0x270>
    76ea:	079a      	lsls	r2, r3, #30
    76ec:	d500      	bpl.n	76f0 <mqtt_connect_broker+0x50>
    76ee:	e111      	b.n	7914 <mqtt_connect_broker+0x274>
    76f0:	071c      	lsls	r4, r3, #28
    76f2:	d40b      	bmi.n	770c <mqtt_connect_broker+0x6c>
    76f4:	4e8b      	ldr	r6, [pc, #556]	; (7924 <mqtt_connect_broker+0x284>)
    76f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
    76f8:	47b0      	blx	r6
    76fa:	1c03      	adds	r3, r0, #0
    76fc:	61b8      	str	r0, [r7, #24]
    76fe:	69f8      	ldr	r0, [r7, #28]
    7700:	330e      	adds	r3, #14
    7702:	1c34      	adds	r4, r6, #0
    7704:	2800      	cmp	r0, #0
    7706:	d113      	bne.n	7730 <mqtt_connect_broker+0x90>
    7708:	1c1e      	adds	r6, r3, #0
    770a:	e01d      	b.n	7748 <mqtt_connect_broker+0xa8>
    770c:	1c2b      	adds	r3, r5, #0
    770e:	3370      	adds	r3, #112	; 0x70
    7710:	781b      	ldrb	r3, [r3, #0]
    7712:	2b00      	cmp	r3, #0
    7714:	d000      	beq.n	7718 <mqtt_connect_broker+0x78>
    7716:	e0ff      	b.n	7918 <mqtt_connect_broker+0x278>
    7718:	1c2b      	adds	r3, r5, #0
    771a:	3343      	adds	r3, #67	; 0x43
    771c:	781b      	ldrb	r3, [r3, #0]
    771e:	071a      	lsls	r2, r3, #28
    7720:	d5e8      	bpl.n	76f4 <mqtt_connect_broker+0x54>
    7722:	4b81      	ldr	r3, [pc, #516]	; (7928 <mqtt_connect_broker+0x288>)
    7724:	2000      	movs	r0, #0
    7726:	4798      	blx	r3
    7728:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    772a:	4b80      	ldr	r3, [pc, #512]	; (792c <mqtt_connect_broker+0x28c>)
    772c:	4798      	blx	r3
    772e:	e7f3      	b.n	7718 <mqtt_connect_broker+0x78>
    7730:	69f8      	ldr	r0, [r7, #28]
    7732:	47b0      	blx	r6
    7734:	69be      	ldr	r6, [r7, #24]
    7736:	697b      	ldr	r3, [r7, #20]
    7738:	3610      	adds	r6, #16
    773a:	1836      	adds	r6, r6, r0
    773c:	2b00      	cmp	r3, #0
    773e:	d003      	beq.n	7748 <mqtt_connect_broker+0xa8>
    7740:	1c18      	adds	r0, r3, #0
    7742:	47a0      	blx	r4
    7744:	3602      	adds	r6, #2
    7746:	1836      	adds	r6, r6, r0
    7748:	6e78      	ldr	r0, [r7, #100]	; 0x64
    774a:	2800      	cmp	r0, #0
    774c:	d007      	beq.n	775e <mqtt_connect_broker+0xbe>
    774e:	47a0      	blx	r4
    7750:	3602      	adds	r6, #2
    7752:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    7754:	1830      	adds	r0, r6, r0
    7756:	1906      	adds	r6, r0, r4
    7758:	2c00      	cmp	r4, #0
    775a:	d100      	bne.n	775e <mqtt_connect_broker+0xbe>
    775c:	1c06      	adds	r6, r0, #0
    775e:	69fc      	ldr	r4, [r7, #28]
    7760:	2c00      	cmp	r4, #0
    7762:	d006      	beq.n	7772 <mqtt_connect_broker+0xd2>
    7764:	24c0      	movs	r4, #192	; 0xc0
    7766:	61bc      	str	r4, [r7, #24]
    7768:	697c      	ldr	r4, [r7, #20]
    776a:	2c00      	cmp	r4, #0
    776c:	d103      	bne.n	7776 <mqtt_connect_broker+0xd6>
    776e:	2480      	movs	r4, #128	; 0x80
    7770:	e000      	b.n	7774 <mqtt_connect_broker+0xd4>
    7772:	69fc      	ldr	r4, [r7, #28]
    7774:	61bc      	str	r4, [r7, #24]
    7776:	6e7c      	ldr	r4, [r7, #100]	; 0x64
    7778:	2c00      	cmp	r4, #0
    777a:	d00f      	beq.n	779c <mqtt_connect_broker+0xfc>
    777c:	68bc      	ldr	r4, [r7, #8]
    777e:	2c00      	cmp	r4, #0
    7780:	d003      	beq.n	778a <mqtt_connect_broker+0xea>
    7782:	69bc      	ldr	r4, [r7, #24]
    7784:	2320      	movs	r3, #32
    7786:	431c      	orrs	r4, r3
    7788:	61bc      	str	r4, [r7, #24]
    778a:	68fc      	ldr	r4, [r7, #12]
    778c:	2303      	movs	r3, #3
    778e:	4023      	ands	r3, r4
    7790:	00db      	lsls	r3, r3, #3
    7792:	69bc      	ldr	r4, [r7, #24]
    7794:	2204      	movs	r2, #4
    7796:	4313      	orrs	r3, r2
    7798:	431c      	orrs	r4, r3
    779a:	61bc      	str	r4, [r7, #24]
    779c:	693c      	ldr	r4, [r7, #16]
    779e:	2c00      	cmp	r4, #0
    77a0:	d003      	beq.n	77aa <mqtt_connect_broker+0x10a>
    77a2:	69bc      	ldr	r4, [r7, #24]
    77a4:	2302      	movs	r3, #2
    77a6:	431c      	orrs	r4, r3
    77a8:	61bc      	str	r4, [r7, #24]
    77aa:	1c2b      	adds	r3, r5, #0
    77ac:	3343      	adds	r3, #67	; 0x43
    77ae:	781a      	ldrb	r2, [r3, #0]
    77b0:	2108      	movs	r1, #8
    77b2:	430a      	orrs	r2, r1
    77b4:	701a      	strb	r2, [r3, #0]
    77b6:	1c38      	adds	r0, r7, #0
    77b8:	9500      	str	r5, [sp, #0]
    77ba:	3020      	adds	r0, #32
    77bc:	6879      	ldr	r1, [r7, #4]
    77be:	4b5c      	ldr	r3, [pc, #368]	; (7930 <mqtt_connect_broker+0x290>)
    77c0:	6eea      	ldr	r2, [r5, #108]	; 0x6c
    77c2:	4c5c      	ldr	r4, [pc, #368]	; (7934 <mqtt_connect_broker+0x294>)
    77c4:	47a0      	blx	r4
    77c6:	1c38      	adds	r0, r7, #0
    77c8:	3020      	adds	r0, #32
    77ca:	2110      	movs	r1, #16
    77cc:	4b5a      	ldr	r3, [pc, #360]	; (7938 <mqtt_connect_broker+0x298>)
    77ce:	4798      	blx	r3
    77d0:	2e80      	cmp	r6, #128	; 0x80
    77d2:	dd09      	ble.n	77e8 <mqtt_connect_broker+0x148>
    77d4:	2180      	movs	r1, #128	; 0x80
    77d6:	4249      	negs	r1, r1
    77d8:	4331      	orrs	r1, r6
    77da:	1c38      	adds	r0, r7, #0
    77dc:	b249      	sxtb	r1, r1
    77de:	3020      	adds	r0, #32
    77e0:	4c55      	ldr	r4, [pc, #340]	; (7938 <mqtt_connect_broker+0x298>)
    77e2:	47a0      	blx	r4
    77e4:	11f6      	asrs	r6, r6, #7
    77e6:	e7f3      	b.n	77d0 <mqtt_connect_broker+0x130>
    77e8:	4b54      	ldr	r3, [pc, #336]	; (793c <mqtt_connect_broker+0x29c>)
    77ea:	401e      	ands	r6, r3
    77ec:	d504      	bpl.n	77f8 <mqtt_connect_broker+0x158>
    77ee:	2380      	movs	r3, #128	; 0x80
    77f0:	3e01      	subs	r6, #1
    77f2:	425b      	negs	r3, r3
    77f4:	431e      	orrs	r6, r3
    77f6:	3601      	adds	r6, #1
    77f8:	1c38      	adds	r0, r7, #0
    77fa:	b271      	sxtb	r1, r6
    77fc:	3020      	adds	r0, #32
    77fe:	4c4e      	ldr	r4, [pc, #312]	; (7938 <mqtt_connect_broker+0x298>)
    7800:	47a0      	blx	r4
    7802:	1c38      	adds	r0, r7, #0
    7804:	4c4e      	ldr	r4, [pc, #312]	; (7940 <mqtt_connect_broker+0x2a0>)
    7806:	3020      	adds	r0, #32
    7808:	2106      	movs	r1, #6
    780a:	47a0      	blx	r4
    780c:	1c38      	adds	r0, r7, #0
    780e:	4b4d      	ldr	r3, [pc, #308]	; (7944 <mqtt_connect_broker+0x2a4>)
    7810:	3020      	adds	r0, #32
    7812:	494d      	ldr	r1, [pc, #308]	; (7948 <mqtt_connect_broker+0x2a8>)
    7814:	2206      	movs	r2, #6
    7816:	4798      	blx	r3
    7818:	1c38      	adds	r0, r7, #0
    781a:	3020      	adds	r0, #32
    781c:	2103      	movs	r1, #3
    781e:	4a46      	ldr	r2, [pc, #280]	; (7938 <mqtt_connect_broker+0x298>)
    7820:	4790      	blx	r2
    7822:	69bb      	ldr	r3, [r7, #24]
    7824:	1c38      	adds	r0, r7, #0
    7826:	4a44      	ldr	r2, [pc, #272]	; (7938 <mqtt_connect_broker+0x298>)
    7828:	b259      	sxtb	r1, r3
    782a:	3020      	adds	r0, #32
    782c:	4790      	blx	r2
    782e:	1c2b      	adds	r3, r5, #0
    7830:	3360      	adds	r3, #96	; 0x60
    7832:	2000      	movs	r0, #0
    7834:	5e19      	ldrsh	r1, [r3, r0]
    7836:	1c38      	adds	r0, r7, #0
    7838:	3020      	adds	r0, #32
    783a:	47a0      	blx	r4
    783c:	4e39      	ldr	r6, [pc, #228]	; (7924 <mqtt_connect_broker+0x284>)
    783e:	6e38      	ldr	r0, [r7, #96]	; 0x60
    7840:	47b0      	blx	r6
    7842:	b201      	sxth	r1, r0
    7844:	1c38      	adds	r0, r7, #0
    7846:	3020      	adds	r0, #32
    7848:	47a0      	blx	r4
    784a:	6e38      	ldr	r0, [r7, #96]	; 0x60
    784c:	47b0      	blx	r6
    784e:	1c02      	adds	r2, r0, #0
    7850:	1c38      	adds	r0, r7, #0
    7852:	3020      	adds	r0, #32
    7854:	6e39      	ldr	r1, [r7, #96]	; 0x60
    7856:	4b3b      	ldr	r3, [pc, #236]	; (7944 <mqtt_connect_broker+0x2a4>)
    7858:	4798      	blx	r3
    785a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    785c:	2800      	cmp	r0, #0
    785e:	d015      	beq.n	788c <mqtt_connect_broker+0x1ec>
    7860:	47b0      	blx	r6
    7862:	b201      	sxth	r1, r0
    7864:	1c38      	adds	r0, r7, #0
    7866:	3020      	adds	r0, #32
    7868:	47a0      	blx	r4
    786a:	6e78      	ldr	r0, [r7, #100]	; 0x64
    786c:	47b0      	blx	r6
    786e:	1c02      	adds	r2, r0, #0
    7870:	1c38      	adds	r0, r7, #0
    7872:	4c34      	ldr	r4, [pc, #208]	; (7944 <mqtt_connect_broker+0x2a4>)
    7874:	3020      	adds	r0, #32
    7876:	6e79      	ldr	r1, [r7, #100]	; 0x64
    7878:	47a0      	blx	r4
    787a:	6ebc      	ldr	r4, [r7, #104]	; 0x68
    787c:	2c00      	cmp	r4, #0
    787e:	d005      	beq.n	788c <mqtt_connect_broker+0x1ec>
    7880:	1c38      	adds	r0, r7, #0
    7882:	1c21      	adds	r1, r4, #0
    7884:	3020      	adds	r0, #32
    7886:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7888:	4c2e      	ldr	r4, [pc, #184]	; (7944 <mqtt_connect_broker+0x2a4>)
    788a:	47a0      	blx	r4
    788c:	69fc      	ldr	r4, [r7, #28]
    788e:	2c00      	cmp	r4, #0
    7890:	d01f      	beq.n	78d2 <mqtt_connect_broker+0x232>
    7892:	4e24      	ldr	r6, [pc, #144]	; (7924 <mqtt_connect_broker+0x284>)
    7894:	1c20      	adds	r0, r4, #0
    7896:	47b0      	blx	r6
    7898:	b201      	sxth	r1, r0
    789a:	1c38      	adds	r0, r7, #0
    789c:	3020      	adds	r0, #32
    789e:	4c28      	ldr	r4, [pc, #160]	; (7940 <mqtt_connect_broker+0x2a0>)
    78a0:	47a0      	blx	r4
    78a2:	69f8      	ldr	r0, [r7, #28]
    78a4:	47b0      	blx	r6
    78a6:	1c02      	adds	r2, r0, #0
    78a8:	1c38      	adds	r0, r7, #0
    78aa:	3020      	adds	r0, #32
    78ac:	69f9      	ldr	r1, [r7, #28]
    78ae:	4c25      	ldr	r4, [pc, #148]	; (7944 <mqtt_connect_broker+0x2a4>)
    78b0:	47a0      	blx	r4
    78b2:	6978      	ldr	r0, [r7, #20]
    78b4:	2800      	cmp	r0, #0
    78b6:	d00c      	beq.n	78d2 <mqtt_connect_broker+0x232>
    78b8:	47b0      	blx	r6
    78ba:	b201      	sxth	r1, r0
    78bc:	1c38      	adds	r0, r7, #0
    78be:	4a20      	ldr	r2, [pc, #128]	; (7940 <mqtt_connect_broker+0x2a0>)
    78c0:	3020      	adds	r0, #32
    78c2:	4790      	blx	r2
    78c4:	6978      	ldr	r0, [r7, #20]
    78c6:	47b0      	blx	r6
    78c8:	1c02      	adds	r2, r0, #0
    78ca:	1c38      	adds	r0, r7, #0
    78cc:	3020      	adds	r0, #32
    78ce:	6979      	ldr	r1, [r7, #20]
    78d0:	47a0      	blx	r4
    78d2:	1c38      	adds	r0, r7, #0
    78d4:	1c2c      	adds	r4, r5, #0
    78d6:	3020      	adds	r0, #32
    78d8:	4b1c      	ldr	r3, [pc, #112]	; (794c <mqtt_connect_broker+0x2ac>)
    78da:	3443      	adds	r4, #67	; 0x43
    78dc:	4798      	blx	r3
    78de:	7821      	ldrb	r1, [r4, #0]
    78e0:	0789      	lsls	r1, r1, #30
    78e2:	0fc9      	lsrs	r1, r1, #31
    78e4:	2901      	cmp	r1, #1
    78e6:	d10b      	bne.n	7900 <mqtt_connect_broker+0x260>
    78e8:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    78ea:	2a00      	cmp	r2, #0
    78ec:	d108      	bne.n	7900 <mqtt_connect_broker+0x260>
    78ee:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    78f0:	2b00      	cmp	r3, #0
    78f2:	d005      	beq.n	7900 <mqtt_connect_broker+0x260>
    78f4:	2034      	movs	r0, #52	; 0x34
    78f6:	55c2      	strb	r2, [r0, r7]
    78f8:	1c3a      	adds	r2, r7, #0
    78fa:	1c28      	adds	r0, r5, #0
    78fc:	3234      	adds	r2, #52	; 0x34
    78fe:	4798      	blx	r3
    7900:	7823      	ldrb	r3, [r4, #0]
    7902:	2202      	movs	r2, #2
    7904:	4313      	orrs	r3, r2
    7906:	2208      	movs	r2, #8
    7908:	4393      	bics	r3, r2
    790a:	7023      	strb	r3, [r4, #0]
    790c:	2000      	movs	r0, #0
    790e:	e005      	b.n	791c <mqtt_connect_broker+0x27c>
    7910:	2080      	movs	r0, #128	; 0x80
    7912:	e002      	b.n	791a <mqtt_connect_broker+0x27a>
    7914:	2078      	movs	r0, #120	; 0x78
    7916:	e000      	b.n	791a <mqtt_connect_broker+0x27a>
    7918:	200b      	movs	r0, #11
    791a:	4240      	negs	r0, r0
    791c:	46bd      	mov	sp, r7
    791e:	b013      	add	sp, #76	; 0x4c
    7920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7922:	46c0      	nop			; (mov r8, r8)
    7924:	0000925d 	.word	0x0000925d
    7928:	00001041 	.word	0x00001041
    792c:	00006c91 	.word	0x00006c91
    7930:	00007419 	.word	0x00007419
    7934:	00006ab5 	.word	0x00006ab5
    7938:	00006add 	.word	0x00006add
    793c:	8000007f 	.word	0x8000007f
    7940:	00006b01 	.word	0x00006b01
    7944:	00006b19 	.word	0x00006b19
    7948:	0000bed8 	.word	0x0000bed8
    794c:	00006ac5 	.word	0x00006ac5

00007950 <mqtt_subscribe>:
    7950:	b5f0      	push	{r4, r5, r6, r7, lr}
    7952:	b08d      	sub	sp, #52	; 0x34
    7954:	af02      	add	r7, sp, #8
    7956:	1c04      	adds	r4, r0, #0
    7958:	60b9      	str	r1, [r7, #8]
    795a:	607a      	str	r2, [r7, #4]
    795c:	d101      	bne.n	7962 <mqtt_subscribe+0x12>
    795e:	2016      	movs	r0, #22
    7960:	e086      	b.n	7a70 <mqtt_subscribe+0x120>
    7962:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    7964:	466a      	mov	r2, sp
    7966:	3307      	adds	r3, #7
    7968:	08db      	lsrs	r3, r3, #3
    796a:	00db      	lsls	r3, r3, #3
    796c:	1ad2      	subs	r2, r2, r3
    796e:	4695      	mov	sp, r2
    7970:	ad02      	add	r5, sp, #8
    7972:	603d      	str	r5, [r7, #0]
    7974:	68bd      	ldr	r5, [r7, #8]
    7976:	2d00      	cmp	r5, #0
    7978:	d0f1      	beq.n	795e <mqtt_subscribe+0xe>
    797a:	687d      	ldr	r5, [r7, #4]
    797c:	2d02      	cmp	r5, #2
    797e:	d8ee      	bhi.n	795e <mqtt_subscribe+0xe>
    7980:	1c05      	adds	r5, r0, #0
    7982:	3543      	adds	r5, #67	; 0x43
    7984:	782b      	ldrb	r3, [r5, #0]
    7986:	079a      	lsls	r2, r3, #30
    7988:	d56f      	bpl.n	7a6a <mqtt_subscribe+0x11a>
    798a:	071a      	lsls	r2, r3, #28
    798c:	d41a      	bmi.n	79c4 <mqtt_subscribe+0x74>
    798e:	68b8      	ldr	r0, [r7, #8]
    7990:	4d39      	ldr	r5, [pc, #228]	; (7a78 <mqtt_subscribe+0x128>)
    7992:	47a8      	blx	r5
    7994:	1c25      	adds	r5, r4, #0
    7996:	3543      	adds	r5, #67	; 0x43
    7998:	782b      	ldrb	r3, [r5, #0]
    799a:	2208      	movs	r2, #8
    799c:	4313      	orrs	r3, r2
    799e:	702b      	strb	r3, [r5, #0]
    79a0:	60fd      	str	r5, [r7, #12]
    79a2:	1d46      	adds	r6, r0, #5
    79a4:	9400      	str	r4, [sp, #0]
    79a6:	1c38      	adds	r0, r7, #0
    79a8:	3014      	adds	r0, #20
    79aa:	6839      	ldr	r1, [r7, #0]
    79ac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    79ae:	4b33      	ldr	r3, [pc, #204]	; (7a7c <mqtt_subscribe+0x12c>)
    79b0:	4d33      	ldr	r5, [pc, #204]	; (7a80 <mqtt_subscribe+0x130>)
    79b2:	47a8      	blx	r5
    79b4:	1c38      	adds	r0, r7, #0
    79b6:	217e      	movs	r1, #126	; 0x7e
    79b8:	3014      	adds	r0, #20
    79ba:	4249      	negs	r1, r1
    79bc:	4b31      	ldr	r3, [pc, #196]	; (7a84 <mqtt_subscribe+0x134>)
    79be:	4798      	blx	r3
    79c0:	4d2d      	ldr	r5, [pc, #180]	; (7a78 <mqtt_subscribe+0x128>)
    79c2:	e00e      	b.n	79e2 <mqtt_subscribe+0x92>
    79c4:	1c03      	adds	r3, r0, #0
    79c6:	3370      	adds	r3, #112	; 0x70
    79c8:	781b      	ldrb	r3, [r3, #0]
    79ca:	2b00      	cmp	r3, #0
    79cc:	d14f      	bne.n	7a6e <mqtt_subscribe+0x11e>
    79ce:	782b      	ldrb	r3, [r5, #0]
    79d0:	071a      	lsls	r2, r3, #28
    79d2:	d5dc      	bpl.n	798e <mqtt_subscribe+0x3e>
    79d4:	4b2c      	ldr	r3, [pc, #176]	; (7a88 <mqtt_subscribe+0x138>)
    79d6:	2000      	movs	r0, #0
    79d8:	4798      	blx	r3
    79da:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    79dc:	4b2b      	ldr	r3, [pc, #172]	; (7a8c <mqtt_subscribe+0x13c>)
    79de:	4798      	blx	r3
    79e0:	e7f5      	b.n	79ce <mqtt_subscribe+0x7e>
    79e2:	4b28      	ldr	r3, [pc, #160]	; (7a84 <mqtt_subscribe+0x134>)
    79e4:	2e80      	cmp	r6, #128	; 0x80
    79e6:	dd08      	ble.n	79fa <mqtt_subscribe+0xaa>
    79e8:	2180      	movs	r1, #128	; 0x80
    79ea:	4249      	negs	r1, r1
    79ec:	4331      	orrs	r1, r6
    79ee:	1c38      	adds	r0, r7, #0
    79f0:	b249      	sxtb	r1, r1
    79f2:	3014      	adds	r0, #20
    79f4:	4798      	blx	r3
    79f6:	11f6      	asrs	r6, r6, #7
    79f8:	e7f3      	b.n	79e2 <mqtt_subscribe+0x92>
    79fa:	4925      	ldr	r1, [pc, #148]	; (7a90 <mqtt_subscribe+0x140>)
    79fc:	4031      	ands	r1, r6
    79fe:	d504      	bpl.n	7a0a <mqtt_subscribe+0xba>
    7a00:	2280      	movs	r2, #128	; 0x80
    7a02:	3901      	subs	r1, #1
    7a04:	4252      	negs	r2, r2
    7a06:	4311      	orrs	r1, r2
    7a08:	3101      	adds	r1, #1
    7a0a:	1c38      	adds	r0, r7, #0
    7a0c:	b249      	sxtb	r1, r1
    7a0e:	3014      	adds	r0, #20
    7a10:	4798      	blx	r3
    7a12:	8821      	ldrh	r1, [r4, #0]
    7a14:	1c38      	adds	r0, r7, #0
    7a16:	1c4b      	adds	r3, r1, #1
    7a18:	8023      	strh	r3, [r4, #0]
    7a1a:	b209      	sxth	r1, r1
    7a1c:	3014      	adds	r0, #20
    7a1e:	4e1d      	ldr	r6, [pc, #116]	; (7a94 <mqtt_subscribe+0x144>)
    7a20:	47b0      	blx	r6
    7a22:	8823      	ldrh	r3, [r4, #0]
    7a24:	2b00      	cmp	r3, #0
    7a26:	d101      	bne.n	7a2c <mqtt_subscribe+0xdc>
    7a28:	2301      	movs	r3, #1
    7a2a:	8023      	strh	r3, [r4, #0]
    7a2c:	68b8      	ldr	r0, [r7, #8]
    7a2e:	47a8      	blx	r5
    7a30:	b201      	sxth	r1, r0
    7a32:	1c38      	adds	r0, r7, #0
    7a34:	3014      	adds	r0, #20
    7a36:	47b0      	blx	r6
    7a38:	68b8      	ldr	r0, [r7, #8]
    7a3a:	47a8      	blx	r5
    7a3c:	1c02      	adds	r2, r0, #0
    7a3e:	1c38      	adds	r0, r7, #0
    7a40:	3014      	adds	r0, #20
    7a42:	68b9      	ldr	r1, [r7, #8]
    7a44:	4b14      	ldr	r3, [pc, #80]	; (7a98 <mqtt_subscribe+0x148>)
    7a46:	4798      	blx	r3
    7a48:	687d      	ldr	r5, [r7, #4]
    7a4a:	1c38      	adds	r0, r7, #0
    7a4c:	b269      	sxtb	r1, r5
    7a4e:	3014      	adds	r0, #20
    7a50:	4b0c      	ldr	r3, [pc, #48]	; (7a84 <mqtt_subscribe+0x134>)
    7a52:	4798      	blx	r3
    7a54:	1c38      	adds	r0, r7, #0
    7a56:	3014      	adds	r0, #20
    7a58:	4b10      	ldr	r3, [pc, #64]	; (7a9c <mqtt_subscribe+0x14c>)
    7a5a:	4798      	blx	r3
    7a5c:	68fd      	ldr	r5, [r7, #12]
    7a5e:	2208      	movs	r2, #8
    7a60:	782b      	ldrb	r3, [r5, #0]
    7a62:	2000      	movs	r0, #0
    7a64:	4393      	bics	r3, r2
    7a66:	702b      	strb	r3, [r5, #0]
    7a68:	e003      	b.n	7a72 <mqtt_subscribe+0x122>
    7a6a:	2080      	movs	r0, #128	; 0x80
    7a6c:	e000      	b.n	7a70 <mqtt_subscribe+0x120>
    7a6e:	200b      	movs	r0, #11
    7a70:	4240      	negs	r0, r0
    7a72:	46bd      	mov	sp, r7
    7a74:	b00b      	add	sp, #44	; 0x2c
    7a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a78:	0000925d 	.word	0x0000925d
    7a7c:	00007419 	.word	0x00007419
    7a80:	00006ab5 	.word	0x00006ab5
    7a84:	00006add 	.word	0x00006add
    7a88:	00001041 	.word	0x00001041
    7a8c:	00006c91 	.word	0x00006c91
    7a90:	8000007f 	.word	0x8000007f
    7a94:	00006b01 	.word	0x00006b01
    7a98:	00006b19 	.word	0x00006b19
    7a9c:	00006ac5 	.word	0x00006ac5

00007aa0 <_mqtt_ping>:
    7aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7aa2:	23c0      	movs	r3, #192	; 0xc0
    7aa4:	a901      	add	r1, sp, #4
    7aa6:	2500      	movs	r5, #0
    7aa8:	700b      	strb	r3, [r1, #0]
    7aaa:	704d      	strb	r5, [r1, #1]
    7aac:	42a8      	cmp	r0, r5
    7aae:	d019      	beq.n	7ae4 <_mqtt_ping+0x44>
    7ab0:	1c04      	adds	r4, r0, #0
    7ab2:	3443      	adds	r4, #67	; 0x43
    7ab4:	7823      	ldrb	r3, [r4, #0]
    7ab6:	079a      	lsls	r2, r3, #30
    7ab8:	d516      	bpl.n	7ae8 <_mqtt_ping+0x48>
    7aba:	071a      	lsls	r2, r3, #28
    7abc:	d416      	bmi.n	7aec <_mqtt_ping+0x4c>
    7abe:	2608      	movs	r6, #8
    7ac0:	4333      	orrs	r3, r6
    7ac2:	7023      	strb	r3, [r4, #0]
    7ac4:	7880      	ldrb	r0, [r0, #2]
    7ac6:	1c2b      	adds	r3, r5, #0
    7ac8:	b240      	sxtb	r0, r0
    7aca:	2202      	movs	r2, #2
    7acc:	4f09      	ldr	r7, [pc, #36]	; (7af4 <_mqtt_ping+0x54>)
    7ace:	47b8      	blx	r7
    7ad0:	1c2b      	adds	r3, r5, #0
    7ad2:	42a8      	cmp	r0, r5
    7ad4:	da0c      	bge.n	7af0 <_mqtt_ping+0x50>
    7ad6:	7823      	ldrb	r3, [r4, #0]
    7ad8:	43b3      	bics	r3, r6
    7ada:	7023      	strb	r3, [r4, #0]
    7adc:	4b06      	ldr	r3, [pc, #24]	; (7af8 <_mqtt_ping+0x58>)
    7ade:	4798      	blx	r3
    7ae0:	1c03      	adds	r3, r0, #0
    7ae2:	e005      	b.n	7af0 <_mqtt_ping+0x50>
    7ae4:	2316      	movs	r3, #22
    7ae6:	e002      	b.n	7aee <_mqtt_ping+0x4e>
    7ae8:	2380      	movs	r3, #128	; 0x80
    7aea:	e000      	b.n	7aee <_mqtt_ping+0x4e>
    7aec:	230b      	movs	r3, #11
    7aee:	425b      	negs	r3, r3
    7af0:	1c18      	adds	r0, r3, #0
    7af2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7af4:	00002bc5 	.word	0x00002bc5
    7af8:	000073c9 	.word	0x000073c9

00007afc <mqtt_timer_callback>:
    7afc:	b570      	push	{r4, r5, r6, lr}
    7afe:	1c05      	adds	r5, r0, #0
    7b00:	b086      	sub	sp, #24
    7b02:	1c0e      	adds	r6, r1, #0
    7b04:	1c14      	adds	r4, r2, #0
    7b06:	2800      	cmp	r0, #0
    7b08:	d012      	beq.n	7b30 <mqtt_timer_callback+0x34>
    7b0a:	2a00      	cmp	r2, #0
    7b0c:	d010      	beq.n	7b30 <mqtt_timer_callback+0x34>
    7b0e:	1c10      	adds	r0, r2, #0
    7b10:	4b08      	ldr	r3, [pc, #32]	; (7b34 <mqtt_timer_callback+0x38>)
    7b12:	4798      	blx	r3
    7b14:	2800      	cmp	r0, #0
    7b16:	da04      	bge.n	7b22 <mqtt_timer_callback+0x26>
    7b18:	1c28      	adds	r0, r5, #0
    7b1a:	1c31      	adds	r1, r6, #0
    7b1c:	2200      	movs	r2, #0
    7b1e:	4b06      	ldr	r3, [pc, #24]	; (7b38 <mqtt_timer_callback+0x3c>)
    7b20:	e005      	b.n	7b2e <mqtt_timer_callback+0x32>
    7b22:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7b24:	2b00      	cmp	r3, #0
    7b26:	d003      	beq.n	7b30 <mqtt_timer_callback+0x34>
    7b28:	1c20      	adds	r0, r4, #0
    7b2a:	2107      	movs	r1, #7
    7b2c:	aa01      	add	r2, sp, #4
    7b2e:	4798      	blx	r3
    7b30:	b006      	add	sp, #24
    7b32:	bd70      	pop	{r4, r5, r6, pc}
    7b34:	00007aa1 	.word	0x00007aa1
    7b38:	00006c51 	.word	0x00006c51

00007b3c <_mqtt_puback>:
    7b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7b3e:	2302      	movs	r3, #2
    7b40:	ac01      	add	r4, sp, #4
    7b42:	2700      	movs	r7, #0
    7b44:	7063      	strb	r3, [r4, #1]
    7b46:	42b8      	cmp	r0, r7
    7b48:	d01e      	beq.n	7b88 <_mqtt_puback+0x4c>
    7b4a:	1c05      	adds	r5, r0, #0
    7b4c:	3543      	adds	r5, #67	; 0x43
    7b4e:	782b      	ldrb	r3, [r5, #0]
    7b50:	079e      	lsls	r6, r3, #30
    7b52:	d51b      	bpl.n	7b8c <_mqtt_puback+0x50>
    7b54:	071e      	lsls	r6, r3, #28
    7b56:	d41b      	bmi.n	7b90 <_mqtt_puback+0x54>
    7b58:	2608      	movs	r6, #8
    7b5a:	4333      	orrs	r3, r6
    7b5c:	702b      	strb	r3, [r5, #0]
    7b5e:	7880      	ldrb	r0, [r0, #2]
    7b60:	7021      	strb	r1, [r4, #0]
    7b62:	0a11      	lsrs	r1, r2, #8
    7b64:	70a1      	strb	r1, [r4, #2]
    7b66:	70e2      	strb	r2, [r4, #3]
    7b68:	1c21      	adds	r1, r4, #0
    7b6a:	1c3b      	adds	r3, r7, #0
    7b6c:	b240      	sxtb	r0, r0
    7b6e:	2204      	movs	r2, #4
    7b70:	4c09      	ldr	r4, [pc, #36]	; (7b98 <_mqtt_puback+0x5c>)
    7b72:	47a0      	blx	r4
    7b74:	1c3b      	adds	r3, r7, #0
    7b76:	42b8      	cmp	r0, r7
    7b78:	da0c      	bge.n	7b94 <_mqtt_puback+0x58>
    7b7a:	782b      	ldrb	r3, [r5, #0]
    7b7c:	43b3      	bics	r3, r6
    7b7e:	702b      	strb	r3, [r5, #0]
    7b80:	4b06      	ldr	r3, [pc, #24]	; (7b9c <_mqtt_puback+0x60>)
    7b82:	4798      	blx	r3
    7b84:	1c03      	adds	r3, r0, #0
    7b86:	e005      	b.n	7b94 <_mqtt_puback+0x58>
    7b88:	2316      	movs	r3, #22
    7b8a:	e002      	b.n	7b92 <_mqtt_puback+0x56>
    7b8c:	2380      	movs	r3, #128	; 0x80
    7b8e:	e000      	b.n	7b92 <_mqtt_puback+0x56>
    7b90:	230b      	movs	r3, #11
    7b92:	425b      	negs	r3, r3
    7b94:	1c18      	adds	r0, r3, #0
    7b96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7b98:	00002bc5 	.word	0x00002bc5
    7b9c:	000073c9 	.word	0x000073c9

00007ba0 <mqtt_clear_conn>:
    7ba0:	b530      	push	{r4, r5, lr}
    7ba2:	1c04      	adds	r4, r0, #0
    7ba4:	b087      	sub	sp, #28
    7ba6:	2800      	cmp	r0, #0
    7ba8:	d01c      	beq.n	7be4 <mqtt_clear_conn+0x44>
    7baa:	2002      	movs	r0, #2
    7bac:	4b0e      	ldr	r3, [pc, #56]	; (7be8 <mqtt_clear_conn+0x48>)
    7bae:	5620      	ldrsb	r0, [r4, r0]
    7bb0:	4798      	blx	r3
    7bb2:	1c23      	adds	r3, r4, #0
    7bb4:	3343      	adds	r3, #67	; 0x43
    7bb6:	781a      	ldrb	r2, [r3, #0]
    7bb8:	21fc      	movs	r1, #252	; 0xfc
    7bba:	0795      	lsls	r5, r2, #30
    7bbc:	400a      	ands	r2, r1
    7bbe:	701a      	strb	r2, [r3, #0]
    7bc0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    7bc2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7bc4:	9301      	str	r3, [sp, #4]
    7bc6:	2300      	movs	r3, #0
    7bc8:	64e3      	str	r3, [r4, #76]	; 0x4c
    7bca:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7bcc:	4b07      	ldr	r3, [pc, #28]	; (7bec <mqtt_clear_conn+0x4c>)
    7bce:	4798      	blx	r3
    7bd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7bd2:	0fed      	lsrs	r5, r5, #31
    7bd4:	2b00      	cmp	r3, #0
    7bd6:	d005      	beq.n	7be4 <mqtt_clear_conn+0x44>
    7bd8:	2d00      	cmp	r5, #0
    7bda:	d003      	beq.n	7be4 <mqtt_clear_conn+0x44>
    7bdc:	1c20      	adds	r0, r4, #0
    7bde:	2105      	movs	r1, #5
    7be0:	aa01      	add	r2, sp, #4
    7be2:	4798      	blx	r3
    7be4:	b007      	add	sp, #28
    7be6:	bd30      	pop	{r4, r5, pc}
    7be8:	00002d05 	.word	0x00002d05
    7bec:	00006c81 	.word	0x00006c81

00007bf0 <mqtt_disconnect>:
    7bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7bf2:	23e0      	movs	r3, #224	; 0xe0
    7bf4:	ae01      	add	r6, sp, #4
    7bf6:	2700      	movs	r7, #0
    7bf8:	1c05      	adds	r5, r0, #0
    7bfa:	7033      	strb	r3, [r6, #0]
    7bfc:	7077      	strb	r7, [r6, #1]
    7bfe:	42b8      	cmp	r0, r7
    7c00:	d036      	beq.n	7c70 <mqtt_disconnect+0x80>
    7c02:	1c04      	adds	r4, r0, #0
    7c04:	3443      	adds	r4, #67	; 0x43
    7c06:	7823      	ldrb	r3, [r4, #0]
    7c08:	079a      	lsls	r2, r3, #30
    7c0a:	d533      	bpl.n	7c74 <mqtt_disconnect+0x84>
    7c0c:	42b9      	cmp	r1, r7
    7c0e:	d12b      	bne.n	7c68 <mqtt_disconnect+0x78>
    7c10:	071a      	lsls	r2, r3, #28
    7c12:	d414      	bmi.n	7c3e <mqtt_disconnect+0x4e>
    7c14:	7823      	ldrb	r3, [r4, #0]
    7c16:	2210      	movs	r2, #16
    7c18:	4313      	orrs	r3, r2
    7c1a:	2708      	movs	r7, #8
    7c1c:	433b      	orrs	r3, r7
    7c1e:	7023      	strb	r3, [r4, #0]
    7c20:	2002      	movs	r0, #2
    7c22:	5628      	ldrsb	r0, [r5, r0]
    7c24:	1c31      	adds	r1, r6, #0
    7c26:	2202      	movs	r2, #2
    7c28:	2300      	movs	r3, #0
    7c2a:	4d15      	ldr	r5, [pc, #84]	; (7c80 <mqtt_disconnect+0x90>)
    7c2c:	47a8      	blx	r5
    7c2e:	2800      	cmp	r0, #0
    7c30:	da14      	bge.n	7c5c <mqtt_disconnect+0x6c>
    7c32:	7823      	ldrb	r3, [r4, #0]
    7c34:	43bb      	bics	r3, r7
    7c36:	7023      	strb	r3, [r4, #0]
    7c38:	4b12      	ldr	r3, [pc, #72]	; (7c84 <mqtt_disconnect+0x94>)
    7c3a:	4798      	blx	r3
    7c3c:	e01e      	b.n	7c7c <mqtt_disconnect+0x8c>
    7c3e:	1c03      	adds	r3, r0, #0
    7c40:	3370      	adds	r3, #112	; 0x70
    7c42:	781b      	ldrb	r3, [r3, #0]
    7c44:	2b00      	cmp	r3, #0
    7c46:	d117      	bne.n	7c78 <mqtt_disconnect+0x88>
    7c48:	7823      	ldrb	r3, [r4, #0]
    7c4a:	071a      	lsls	r2, r3, #28
    7c4c:	d5e2      	bpl.n	7c14 <mqtt_disconnect+0x24>
    7c4e:	4b0e      	ldr	r3, [pc, #56]	; (7c88 <mqtt_disconnect+0x98>)
    7c50:	2000      	movs	r0, #0
    7c52:	4798      	blx	r3
    7c54:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    7c56:	4b0d      	ldr	r3, [pc, #52]	; (7c8c <mqtt_disconnect+0x9c>)
    7c58:	4798      	blx	r3
    7c5a:	e7f5      	b.n	7c48 <mqtt_disconnect+0x58>
    7c5c:	7823      	ldrb	r3, [r4, #0]
    7c5e:	2202      	movs	r2, #2
    7c60:	4393      	bics	r3, r2
    7c62:	7023      	strb	r3, [r4, #0]
    7c64:	2000      	movs	r0, #0
    7c66:	e009      	b.n	7c7c <mqtt_disconnect+0x8c>
    7c68:	4b09      	ldr	r3, [pc, #36]	; (7c90 <mqtt_disconnect+0xa0>)
    7c6a:	4798      	blx	r3
    7c6c:	1c38      	adds	r0, r7, #0
    7c6e:	e005      	b.n	7c7c <mqtt_disconnect+0x8c>
    7c70:	2016      	movs	r0, #22
    7c72:	e002      	b.n	7c7a <mqtt_disconnect+0x8a>
    7c74:	2080      	movs	r0, #128	; 0x80
    7c76:	e000      	b.n	7c7a <mqtt_disconnect+0x8a>
    7c78:	200b      	movs	r0, #11
    7c7a:	4240      	negs	r0, r0
    7c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7c7e:	46c0      	nop			; (mov r8, r8)
    7c80:	00002bc5 	.word	0x00002bc5
    7c84:	000073c9 	.word	0x000073c9
    7c88:	00001041 	.word	0x00001041
    7c8c:	00006c91 	.word	0x00006c91
    7c90:	00007ba1 	.word	0x00007ba1

00007c94 <_mqtt_recv_handler>:
    7c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c96:	1c04      	adds	r4, r0, #0
    7c98:	6e40      	ldr	r0, [r0, #100]	; 0x64
    7c9a:	230f      	movs	r3, #15
    7c9c:	7802      	ldrb	r2, [r0, #0]
    7c9e:	b087      	sub	sp, #28
    7ca0:	1c15      	adds	r5, r2, #0
    7ca2:	439d      	bics	r5, r3
    7ca4:	2d50      	cmp	r5, #80	; 0x50
    7ca6:	d100      	bne.n	7caa <_mqtt_recv_handler+0x16>
    7ca8:	e098      	b.n	7ddc <_mqtt_recv_handler+0x148>
    7caa:	d808      	bhi.n	7cbe <_mqtt_recv_handler+0x2a>
    7cac:	2d30      	cmp	r5, #48	; 0x30
    7cae:	d03f      	beq.n	7d30 <_mqtt_recv_handler+0x9c>
    7cb0:	2d40      	cmp	r5, #64	; 0x40
    7cb2:	d100      	bne.n	7cb6 <_mqtt_recv_handler+0x22>
    7cb4:	e0b3      	b.n	7e1e <_mqtt_recv_handler+0x18a>
    7cb6:	2d20      	cmp	r5, #32
    7cb8:	d000      	beq.n	7cbc <_mqtt_recv_handler+0x28>
    7cba:	e0c3      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7cbc:	e00e      	b.n	7cdc <_mqtt_recv_handler+0x48>
    7cbe:	2d70      	cmp	r5, #112	; 0x70
    7cc0:	d100      	bne.n	7cc4 <_mqtt_recv_handler+0x30>
    7cc2:	e0ac      	b.n	7e1e <_mqtt_recv_handler+0x18a>
    7cc4:	d803      	bhi.n	7cce <_mqtt_recv_handler+0x3a>
    7cc6:	2d60      	cmp	r5, #96	; 0x60
    7cc8:	d100      	bne.n	7ccc <_mqtt_recv_handler+0x38>
    7cca:	e096      	b.n	7dfa <_mqtt_recv_handler+0x166>
    7ccc:	e0ba      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7cce:	2d90      	cmp	r5, #144	; 0x90
    7cd0:	d100      	bne.n	7cd4 <_mqtt_recv_handler+0x40>
    7cd2:	e0aa      	b.n	7e2a <_mqtt_recv_handler+0x196>
    7cd4:	2db0      	cmp	r5, #176	; 0xb0
    7cd6:	d100      	bne.n	7cda <_mqtt_recv_handler+0x46>
    7cd8:	e0ad      	b.n	7e36 <_mqtt_recv_handler+0x1a2>
    7cda:	e0b3      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7cdc:	aa01      	add	r2, sp, #4
    7cde:	2303      	movs	r3, #3
    7ce0:	2901      	cmp	r1, #1
    7ce2:	d900      	bls.n	7ce6 <_mqtt_recv_handler+0x52>
    7ce4:	78c3      	ldrb	r3, [r0, #3]
    7ce6:	7013      	strb	r3, [r2, #0]
    7ce8:	7813      	ldrb	r3, [r2, #0]
    7cea:	2b00      	cmp	r3, #0
    7cec:	d00d      	beq.n	7d0a <_mqtt_recv_handler+0x76>
    7cee:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7cf0:	2b00      	cmp	r3, #0
    7cf2:	d002      	beq.n	7cfa <_mqtt_recv_handler+0x66>
    7cf4:	1c20      	adds	r0, r4, #0
    7cf6:	2101      	movs	r1, #1
    7cf8:	4798      	blx	r3
    7cfa:	236f      	movs	r3, #111	; 0x6f
    7cfc:	425b      	negs	r3, r3
    7cfe:	64e3      	str	r3, [r4, #76]	; 0x4c
    7d00:	1c20      	adds	r0, r4, #0
    7d02:	2100      	movs	r1, #0
    7d04:	4b50      	ldr	r3, [pc, #320]	; (7e48 <_mqtt_recv_handler+0x1b4>)
    7d06:	4798      	blx	r3
    7d08:	e09c      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7d0a:	1c23      	adds	r3, r4, #0
    7d0c:	3343      	adds	r3, #67	; 0x43
    7d0e:	7819      	ldrb	r1, [r3, #0]
    7d10:	0789      	lsls	r1, r1, #30
    7d12:	0fc9      	lsrs	r1, r1, #31
    7d14:	d105      	bne.n	7d22 <_mqtt_recv_handler+0x8e>
    7d16:	781a      	ldrb	r2, [r3, #0]
    7d18:	64e1      	str	r1, [r4, #76]	; 0x4c
    7d1a:	2102      	movs	r1, #2
    7d1c:	430a      	orrs	r2, r1
    7d1e:	701a      	strb	r2, [r3, #0]
    7d20:	e090      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7d22:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7d24:	2b00      	cmp	r3, #0
    7d26:	d100      	bne.n	7d2a <_mqtt_recv_handler+0x96>
    7d28:	e08c      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7d2a:	1c20      	adds	r0, r4, #0
    7d2c:	2101      	movs	r1, #1
    7d2e:	e088      	b.n	7e42 <_mqtt_recv_handler+0x1ae>
    7d30:	ad01      	add	r5, sp, #4
    7d32:	0713      	lsls	r3, r2, #28
    7d34:	7c2a      	ldrb	r2, [r5, #16]
    7d36:	0fdb      	lsrs	r3, r3, #31
    7d38:	2604      	movs	r6, #4
    7d3a:	009b      	lsls	r3, r3, #2
    7d3c:	43b2      	bics	r2, r6
    7d3e:	431a      	orrs	r2, r3
    7d40:	742a      	strb	r2, [r5, #16]
    7d42:	7807      	ldrb	r7, [r0, #0]
    7d44:	2303      	movs	r3, #3
    7d46:	b2d2      	uxtb	r2, r2
    7d48:	087f      	lsrs	r7, r7, #1
    7d4a:	439a      	bics	r2, r3
    7d4c:	401f      	ands	r7, r3
    7d4e:	1c13      	adds	r3, r2, #0
    7d50:	433b      	orrs	r3, r7
    7d52:	742b      	strb	r3, [r5, #16]
    7d54:	1c43      	adds	r3, r0, #1
    7d56:	7818      	ldrb	r0, [r3, #0]
    7d58:	1c5a      	adds	r2, r3, #1
    7d5a:	287f      	cmp	r0, #127	; 0x7f
    7d5c:	d901      	bls.n	7d62 <_mqtt_recv_handler+0xce>
    7d5e:	1c13      	adds	r3, r2, #0
    7d60:	e7f9      	b.n	7d56 <_mqtt_recv_handler+0xc2>
    7d62:	7858      	ldrb	r0, [r3, #1]
    7d64:	789e      	ldrb	r6, [r3, #2]
    7d66:	0200      	lsls	r0, r0, #8
    7d68:	4330      	orrs	r0, r6
    7d6a:	3303      	adds	r3, #3
    7d6c:	2600      	movs	r6, #0
    7d6e:	6068      	str	r0, [r5, #4]
    7d70:	9301      	str	r3, [sp, #4]
    7d72:	1818      	adds	r0, r3, r0
    7d74:	42b7      	cmp	r7, r6
    7d76:	d004      	beq.n	7d82 <_mqtt_recv_handler+0xee>
    7d78:	7806      	ldrb	r6, [r0, #0]
    7d7a:	7843      	ldrb	r3, [r0, #1]
    7d7c:	0236      	lsls	r6, r6, #8
    7d7e:	431e      	orrs	r6, r3
    7d80:	3002      	adds	r0, #2
    7d82:	1851      	adds	r1, r2, r1
    7d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7d86:	60a8      	str	r0, [r5, #8]
    7d88:	1a08      	subs	r0, r1, r0
    7d8a:	60e8      	str	r0, [r5, #12]
    7d8c:	2b00      	cmp	r3, #0
    7d8e:	d003      	beq.n	7d98 <_mqtt_recv_handler+0x104>
    7d90:	1c20      	adds	r0, r4, #0
    7d92:	2106      	movs	r1, #6
    7d94:	1c2a      	adds	r2, r5, #0
    7d96:	4798      	blx	r3
    7d98:	7c2b      	ldrb	r3, [r5, #16]
    7d9a:	079b      	lsls	r3, r3, #30
    7d9c:	0f9b      	lsrs	r3, r3, #30
    7d9e:	2b01      	cmp	r3, #1
    7da0:	d10b      	bne.n	7dba <_mqtt_recv_handler+0x126>
    7da2:	b2b6      	uxth	r6, r6
    7da4:	1c20      	adds	r0, r4, #0
    7da6:	2140      	movs	r1, #64	; 0x40
    7da8:	1c32      	adds	r2, r6, #0
    7daa:	4b28      	ldr	r3, [pc, #160]	; (7e4c <_mqtt_recv_handler+0x1b8>)
    7dac:	4798      	blx	r3
    7dae:	2800      	cmp	r0, #0
    7db0:	d048      	beq.n	7e44 <_mqtt_recv_handler+0x1b0>
    7db2:	1c23      	adds	r3, r4, #0
    7db4:	3348      	adds	r3, #72	; 0x48
    7db6:	2240      	movs	r2, #64	; 0x40
    7db8:	e00c      	b.n	7dd4 <_mqtt_recv_handler+0x140>
    7dba:	2b02      	cmp	r3, #2
    7dbc:	d142      	bne.n	7e44 <_mqtt_recv_handler+0x1b0>
    7dbe:	b2b6      	uxth	r6, r6
    7dc0:	1c20      	adds	r0, r4, #0
    7dc2:	2150      	movs	r1, #80	; 0x50
    7dc4:	1c32      	adds	r2, r6, #0
    7dc6:	4b21      	ldr	r3, [pc, #132]	; (7e4c <_mqtt_recv_handler+0x1b8>)
    7dc8:	4798      	blx	r3
    7dca:	2800      	cmp	r0, #0
    7dcc:	d03a      	beq.n	7e44 <_mqtt_recv_handler+0x1b0>
    7dce:	1c23      	adds	r3, r4, #0
    7dd0:	3348      	adds	r3, #72	; 0x48
    7dd2:	2250      	movs	r2, #80	; 0x50
    7dd4:	344a      	adds	r4, #74	; 0x4a
    7dd6:	701a      	strb	r2, [r3, #0]
    7dd8:	8026      	strh	r6, [r4, #0]
    7dda:	e033      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7ddc:	7885      	ldrb	r5, [r0, #2]
    7dde:	78c3      	ldrb	r3, [r0, #3]
    7de0:	022d      	lsls	r5, r5, #8
    7de2:	431d      	orrs	r5, r3
    7de4:	1c20      	adds	r0, r4, #0
    7de6:	2162      	movs	r1, #98	; 0x62
    7de8:	1c2a      	adds	r2, r5, #0
    7dea:	4b18      	ldr	r3, [pc, #96]	; (7e4c <_mqtt_recv_handler+0x1b8>)
    7dec:	4798      	blx	r3
    7dee:	2800      	cmp	r0, #0
    7df0:	d028      	beq.n	7e44 <_mqtt_recv_handler+0x1b0>
    7df2:	1c23      	adds	r3, r4, #0
    7df4:	3348      	adds	r3, #72	; 0x48
    7df6:	2260      	movs	r2, #96	; 0x60
    7df8:	e00d      	b.n	7e16 <_mqtt_recv_handler+0x182>
    7dfa:	7885      	ldrb	r5, [r0, #2]
    7dfc:	78c3      	ldrb	r3, [r0, #3]
    7dfe:	022d      	lsls	r5, r5, #8
    7e00:	431d      	orrs	r5, r3
    7e02:	1c20      	adds	r0, r4, #0
    7e04:	2170      	movs	r1, #112	; 0x70
    7e06:	1c2a      	adds	r2, r5, #0
    7e08:	4b10      	ldr	r3, [pc, #64]	; (7e4c <_mqtt_recv_handler+0x1b8>)
    7e0a:	4798      	blx	r3
    7e0c:	2800      	cmp	r0, #0
    7e0e:	d019      	beq.n	7e44 <_mqtt_recv_handler+0x1b0>
    7e10:	1c23      	adds	r3, r4, #0
    7e12:	3348      	adds	r3, #72	; 0x48
    7e14:	2270      	movs	r2, #112	; 0x70
    7e16:	344a      	adds	r4, #74	; 0x4a
    7e18:	701a      	strb	r2, [r3, #0]
    7e1a:	8025      	strh	r5, [r4, #0]
    7e1c:	e012      	b.n	7e44 <_mqtt_recv_handler+0x1b0>
    7e1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7e20:	2b00      	cmp	r3, #0
    7e22:	d00f      	beq.n	7e44 <_mqtt_recv_handler+0x1b0>
    7e24:	1c20      	adds	r0, r4, #0
    7e26:	2102      	movs	r1, #2
    7e28:	e00a      	b.n	7e40 <_mqtt_recv_handler+0x1ac>
    7e2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7e2c:	2b00      	cmp	r3, #0
    7e2e:	d009      	beq.n	7e44 <_mqtt_recv_handler+0x1b0>
    7e30:	1c20      	adds	r0, r4, #0
    7e32:	2103      	movs	r1, #3
    7e34:	e004      	b.n	7e40 <_mqtt_recv_handler+0x1ac>
    7e36:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7e38:	2b00      	cmp	r3, #0
    7e3a:	d003      	beq.n	7e44 <_mqtt_recv_handler+0x1b0>
    7e3c:	1c20      	adds	r0, r4, #0
    7e3e:	2104      	movs	r1, #4
    7e40:	aa01      	add	r2, sp, #4
    7e42:	4798      	blx	r3
    7e44:	b007      	add	sp, #28
    7e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e48:	00007bf1 	.word	0x00007bf1
    7e4c:	00007b3d 	.word	0x00007b3d

00007e50 <mqtt_recv_packet>:
    7e50:	b538      	push	{r3, r4, r5, lr}
    7e52:	1e04      	subs	r4, r0, #0
    7e54:	d017      	beq.n	7e86 <mqtt_recv_packet+0x36>
    7e56:	6c42      	ldr	r2, [r0, #68]	; 0x44
    7e58:	6e83      	ldr	r3, [r0, #104]	; 0x68
    7e5a:	429a      	cmp	r2, r3
    7e5c:	d906      	bls.n	7e6c <mqtt_recv_packet+0x1c>
    7e5e:	238b      	movs	r3, #139	; 0x8b
    7e60:	425b      	negs	r3, r3
    7e62:	64c3      	str	r3, [r0, #76]	; 0x4c
    7e64:	2100      	movs	r1, #0
    7e66:	4b08      	ldr	r3, [pc, #32]	; (7e88 <mqtt_recv_packet+0x38>)
    7e68:	4798      	blx	r3
    7e6a:	e00c      	b.n	7e86 <mqtt_recv_packet+0x36>
    7e6c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    7e6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    7e70:	2002      	movs	r0, #2
    7e72:	1899      	adds	r1, r3, r2
    7e74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7e76:	5620      	ldrsb	r0, [r4, r0]
    7e78:	1a9a      	subs	r2, r3, r2
    7e7a:	b292      	uxth	r2, r2
    7e7c:	2300      	movs	r3, #0
    7e7e:	4d03      	ldr	r5, [pc, #12]	; (7e8c <mqtt_recv_packet+0x3c>)
    7e80:	47a8      	blx	r5
    7e82:	2800      	cmp	r0, #0
    7e84:	d1f2      	bne.n	7e6c <mqtt_recv_packet+0x1c>
    7e86:	bd38      	pop	{r3, r4, r5, pc}
    7e88:	00007bf1 	.word	0x00007bf1
    7e8c:	00002c61 	.word	0x00002c61

00007e90 <mqtt_recved_packet>:
    7e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e92:	1e04      	subs	r4, r0, #0
    7e94:	d042      	beq.n	7f1c <mqtt_recved_packet+0x8c>
    7e96:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7e98:	6e67      	ldr	r7, [r4, #100]	; 0x64
    7e9a:	18ca      	adds	r2, r1, r3
    7e9c:	2301      	movs	r3, #1
    7e9e:	9701      	str	r7, [sp, #4]
    7ea0:	6462      	str	r2, [r4, #68]	; 0x44
    7ea2:	2600      	movs	r6, #0
    7ea4:	1c1d      	adds	r5, r3, #0
    7ea6:	42a9      	cmp	r1, r5
    7ea8:	dc03      	bgt.n	7eb2 <mqtt_recved_packet+0x22>
    7eaa:	1c20      	adds	r0, r4, #0
    7eac:	4b1c      	ldr	r3, [pc, #112]	; (7f20 <mqtt_recved_packet+0x90>)
    7eae:	4798      	blx	r3
    7eb0:	e034      	b.n	7f1c <mqtt_recved_packet+0x8c>
    7eb2:	9f01      	ldr	r7, [sp, #4]
    7eb4:	5d78      	ldrb	r0, [r7, r5]
    7eb6:	01df      	lsls	r7, r3, #7
    7eb8:	46bc      	mov	ip, r7
    7eba:	2d03      	cmp	r5, #3
    7ebc:	d101      	bne.n	7ec2 <mqtt_recved_packet+0x32>
    7ebe:	234d      	movs	r3, #77	; 0x4d
    7ec0:	e00e      	b.n	7ee0 <mqtt_recved_packet+0x50>
    7ec2:	277f      	movs	r7, #127	; 0x7f
    7ec4:	4007      	ands	r7, r0
    7ec6:	437b      	muls	r3, r7
    7ec8:	b240      	sxtb	r0, r0
    7eca:	3501      	adds	r5, #1
    7ecc:	18f6      	adds	r6, r6, r3
    7ece:	2800      	cmp	r0, #0
    7ed0:	da01      	bge.n	7ed6 <mqtt_recved_packet+0x46>
    7ed2:	4663      	mov	r3, ip
    7ed4:	e7e7      	b.n	7ea6 <mqtt_recved_packet+0x16>
    7ed6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7ed8:	19af      	adds	r7, r5, r6
    7eda:	429f      	cmp	r7, r3
    7edc:	d907      	bls.n	7eee <mqtt_recved_packet+0x5e>
    7ede:	238b      	movs	r3, #139	; 0x8b
    7ee0:	425b      	negs	r3, r3
    7ee2:	64e3      	str	r3, [r4, #76]	; 0x4c
    7ee4:	1c20      	adds	r0, r4, #0
    7ee6:	2100      	movs	r1, #0
    7ee8:	4b0e      	ldr	r3, [pc, #56]	; (7f24 <mqtt_recved_packet+0x94>)
    7eea:	4798      	blx	r3
    7eec:	e016      	b.n	7f1c <mqtt_recved_packet+0x8c>
    7eee:	42ba      	cmp	r2, r7
    7ef0:	d314      	bcc.n	7f1c <mqtt_recved_packet+0x8c>
    7ef2:	4b0d      	ldr	r3, [pc, #52]	; (7f28 <mqtt_recved_packet+0x98>)
    7ef4:	1c20      	adds	r0, r4, #0
    7ef6:	1c31      	adds	r1, r6, #0
    7ef8:	4798      	blx	r3
    7efa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7efc:	42bb      	cmp	r3, r7
    7efe:	d102      	bne.n	7f06 <mqtt_recved_packet+0x76>
    7f00:	2300      	movs	r3, #0
    7f02:	6463      	str	r3, [r4, #68]	; 0x44
    7f04:	e00a      	b.n	7f1c <mqtt_recved_packet+0x8c>
    7f06:	1b9e      	subs	r6, r3, r6
    7f08:	9b01      	ldr	r3, [sp, #4]
    7f0a:	1b75      	subs	r5, r6, r5
    7f0c:	19d9      	adds	r1, r3, r7
    7f0e:	1c18      	adds	r0, r3, #0
    7f10:	1c2a      	adds	r2, r5, #0
    7f12:	4b06      	ldr	r3, [pc, #24]	; (7f2c <mqtt_recved_packet+0x9c>)
    7f14:	4798      	blx	r3
    7f16:	6465      	str	r5, [r4, #68]	; 0x44
    7f18:	2100      	movs	r1, #0
    7f1a:	e7bc      	b.n	7e96 <mqtt_recved_packet+0x6>
    7f1c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    7f1e:	46c0      	nop			; (mov r8, r8)
    7f20:	00007e51 	.word	0x00007e51
    7f24:	00007bf1 	.word	0x00007bf1
    7f28:	00007c95 	.word	0x00007c95
    7f2c:	00008a77 	.word	0x00008a77

00007f30 <mqtt_socket_event_handler>:
    7f30:	b570      	push	{r4, r5, r6, lr}
    7f32:	4d37      	ldr	r5, [pc, #220]	; (8010 <mqtt_socket_event_handler+0xe0>)
    7f34:	0086      	lsls	r6, r0, #2
    7f36:	5974      	ldr	r4, [r6, r5]
    7f38:	b086      	sub	sp, #24
    7f3a:	2c00      	cmp	r4, #0
    7f3c:	d066      	beq.n	800c <mqtt_socket_event_handler+0xdc>
    7f3e:	2906      	cmp	r1, #6
    7f40:	d02b      	beq.n	7f9a <mqtt_socket_event_handler+0x6a>
    7f42:	2907      	cmp	r1, #7
    7f44:	d039      	beq.n	7fba <mqtt_socket_event_handler+0x8a>
    7f46:	2905      	cmp	r1, #5
    7f48:	d160      	bne.n	800c <mqtt_socket_event_handler+0xdc>
    7f4a:	2001      	movs	r0, #1
    7f4c:	5610      	ldrsb	r0, [r2, r0]
    7f4e:	4b31      	ldr	r3, [pc, #196]	; (8014 <mqtt_socket_event_handler+0xe4>)
    7f50:	4798      	blx	r3
    7f52:	9001      	str	r0, [sp, #4]
    7f54:	2800      	cmp	r0, #0
    7f56:	da06      	bge.n	7f66 <mqtt_socket_event_handler+0x36>
    7f58:	2002      	movs	r0, #2
    7f5a:	4b2f      	ldr	r3, [pc, #188]	; (8018 <mqtt_socket_event_handler+0xe8>)
    7f5c:	5620      	ldrsb	r0, [r4, r0]
    7f5e:	4798      	blx	r3
    7f60:	2300      	movs	r3, #0
    7f62:	5173      	str	r3, [r6, r5]
    7f64:	e011      	b.n	7f8a <mqtt_socket_event_handler+0x5a>
    7f66:	1c23      	adds	r3, r4, #0
    7f68:	3343      	adds	r3, #67	; 0x43
    7f6a:	781a      	ldrb	r2, [r3, #0]
    7f6c:	2101      	movs	r1, #1
    7f6e:	430a      	orrs	r2, r1
    7f70:	701a      	strb	r2, [r3, #0]
    7f72:	331d      	adds	r3, #29
    7f74:	881b      	ldrh	r3, [r3, #0]
    7f76:	2b00      	cmp	r3, #0
    7f78:	d004      	beq.n	7f84 <mqtt_socket_event_handler+0x54>
    7f7a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    7f7c:	6d21      	ldr	r1, [r4, #80]	; 0x50
    7f7e:	2200      	movs	r2, #0
    7f80:	4b26      	ldr	r3, [pc, #152]	; (801c <mqtt_socket_event_handler+0xec>)
    7f82:	4798      	blx	r3
    7f84:	1c20      	adds	r0, r4, #0
    7f86:	4b26      	ldr	r3, [pc, #152]	; (8020 <mqtt_socket_event_handler+0xf0>)
    7f88:	4798      	blx	r3
    7f8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    7f8c:	2b00      	cmp	r3, #0
    7f8e:	d03d      	beq.n	800c <mqtt_socket_event_handler+0xdc>
    7f90:	1c20      	adds	r0, r4, #0
    7f92:	2100      	movs	r1, #0
    7f94:	aa01      	add	r2, sp, #4
    7f96:	4798      	blx	r3
    7f98:	e038      	b.n	800c <mqtt_socket_event_handler+0xdc>
    7f9a:	2304      	movs	r3, #4
    7f9c:	5ed1      	ldrsh	r1, [r2, r3]
    7f9e:	2900      	cmp	r1, #0
    7fa0:	dd03      	ble.n	7faa <mqtt_socket_event_handler+0x7a>
    7fa2:	1c20      	adds	r0, r4, #0
    7fa4:	4b1f      	ldr	r3, [pc, #124]	; (8024 <mqtt_socket_event_handler+0xf4>)
    7fa6:	4798      	blx	r3
    7fa8:	e003      	b.n	7fb2 <mqtt_socket_event_handler+0x82>
    7faa:	1c0b      	adds	r3, r1, #0
    7fac:	1c08      	adds	r0, r1, #0
    7fae:	330d      	adds	r3, #13
    7fb0:	d11a      	bne.n	7fe8 <mqtt_socket_event_handler+0xb8>
    7fb2:	4b1b      	ldr	r3, [pc, #108]	; (8020 <mqtt_socket_event_handler+0xf0>)
    7fb4:	1c20      	adds	r0, r4, #0
    7fb6:	4798      	blx	r3
    7fb8:	e028      	b.n	800c <mqtt_socket_event_handler+0xdc>
    7fba:	1c23      	adds	r3, r4, #0
    7fbc:	3343      	adds	r3, #67	; 0x43
    7fbe:	8810      	ldrh	r0, [r2, #0]
    7fc0:	781a      	ldrb	r2, [r3, #0]
    7fc2:	0751      	lsls	r1, r2, #29
    7fc4:	d402      	bmi.n	7fcc <mqtt_socket_event_handler+0x9c>
    7fc6:	2108      	movs	r1, #8
    7fc8:	438a      	bics	r2, r1
    7fca:	701a      	strb	r2, [r3, #0]
    7fcc:	781a      	ldrb	r2, [r3, #0]
    7fce:	2104      	movs	r1, #4
    7fd0:	438a      	bics	r2, r1
    7fd2:	701a      	strb	r2, [r3, #0]
    7fd4:	06d3      	lsls	r3, r2, #27
    7fd6:	0fde      	lsrs	r6, r3, #31
    7fd8:	b200      	sxth	r0, r0
    7fda:	2b00      	cmp	r3, #0
    7fdc:	db02      	blt.n	7fe4 <mqtt_socket_event_handler+0xb4>
    7fde:	2800      	cmp	r0, #0
    7fe0:	da08      	bge.n	7ff4 <mqtt_socket_event_handler+0xc4>
    7fe2:	e001      	b.n	7fe8 <mqtt_socket_event_handler+0xb8>
    7fe4:	2800      	cmp	r0, #0
    7fe6:	da02      	bge.n	7fee <mqtt_socket_event_handler+0xbe>
    7fe8:	4b0a      	ldr	r3, [pc, #40]	; (8014 <mqtt_socket_event_handler+0xe4>)
    7fea:	4798      	blx	r3
    7fec:	64e0      	str	r0, [r4, #76]	; 0x4c
    7fee:	1c20      	adds	r0, r4, #0
    7ff0:	4b0d      	ldr	r3, [pc, #52]	; (8028 <mqtt_socket_event_handler+0xf8>)
    7ff2:	e7e0      	b.n	7fb6 <mqtt_socket_event_handler+0x86>
    7ff4:	1c25      	adds	r5, r4, #0
    7ff6:	3548      	adds	r5, #72	; 0x48
    7ff8:	7829      	ldrb	r1, [r5, #0]
    7ffa:	2900      	cmp	r1, #0
    7ffc:	d006      	beq.n	800c <mqtt_socket_event_handler+0xdc>
    7ffe:	1c23      	adds	r3, r4, #0
    8000:	334a      	adds	r3, #74	; 0x4a
    8002:	881a      	ldrh	r2, [r3, #0]
    8004:	1c20      	adds	r0, r4, #0
    8006:	4b09      	ldr	r3, [pc, #36]	; (802c <mqtt_socket_event_handler+0xfc>)
    8008:	4798      	blx	r3
    800a:	702e      	strb	r6, [r5, #0]
    800c:	b006      	add	sp, #24
    800e:	bd70      	pop	{r4, r5, r6, pc}
    8010:	20000348 	.word	0x20000348
    8014:	000073c9 	.word	0x000073c9
    8018:	00002d05 	.word	0x00002d05
    801c:	00006c51 	.word	0x00006c51
    8020:	00007e51 	.word	0x00007e51
    8024:	00007e91 	.word	0x00007e91
    8028:	00007ba1 	.word	0x00007ba1
    802c:	00007b3d 	.word	0x00007b3d

00008030 <__gnu_thumb1_case_uqi>:
    8030:	b402      	push	{r1}
    8032:	4671      	mov	r1, lr
    8034:	0849      	lsrs	r1, r1, #1
    8036:	0049      	lsls	r1, r1, #1
    8038:	5c09      	ldrb	r1, [r1, r0]
    803a:	0049      	lsls	r1, r1, #1
    803c:	448e      	add	lr, r1
    803e:	bc02      	pop	{r1}
    8040:	4770      	bx	lr
    8042:	46c0      	nop			; (mov r8, r8)

00008044 <__aeabi_uidiv>:
    8044:	2200      	movs	r2, #0
    8046:	0843      	lsrs	r3, r0, #1
    8048:	428b      	cmp	r3, r1
    804a:	d374      	bcc.n	8136 <__aeabi_uidiv+0xf2>
    804c:	0903      	lsrs	r3, r0, #4
    804e:	428b      	cmp	r3, r1
    8050:	d35f      	bcc.n	8112 <__aeabi_uidiv+0xce>
    8052:	0a03      	lsrs	r3, r0, #8
    8054:	428b      	cmp	r3, r1
    8056:	d344      	bcc.n	80e2 <__aeabi_uidiv+0x9e>
    8058:	0b03      	lsrs	r3, r0, #12
    805a:	428b      	cmp	r3, r1
    805c:	d328      	bcc.n	80b0 <__aeabi_uidiv+0x6c>
    805e:	0c03      	lsrs	r3, r0, #16
    8060:	428b      	cmp	r3, r1
    8062:	d30d      	bcc.n	8080 <__aeabi_uidiv+0x3c>
    8064:	22ff      	movs	r2, #255	; 0xff
    8066:	0209      	lsls	r1, r1, #8
    8068:	ba12      	rev	r2, r2
    806a:	0c03      	lsrs	r3, r0, #16
    806c:	428b      	cmp	r3, r1
    806e:	d302      	bcc.n	8076 <__aeabi_uidiv+0x32>
    8070:	1212      	asrs	r2, r2, #8
    8072:	0209      	lsls	r1, r1, #8
    8074:	d065      	beq.n	8142 <__aeabi_uidiv+0xfe>
    8076:	0b03      	lsrs	r3, r0, #12
    8078:	428b      	cmp	r3, r1
    807a:	d319      	bcc.n	80b0 <__aeabi_uidiv+0x6c>
    807c:	e000      	b.n	8080 <__aeabi_uidiv+0x3c>
    807e:	0a09      	lsrs	r1, r1, #8
    8080:	0bc3      	lsrs	r3, r0, #15
    8082:	428b      	cmp	r3, r1
    8084:	d301      	bcc.n	808a <__aeabi_uidiv+0x46>
    8086:	03cb      	lsls	r3, r1, #15
    8088:	1ac0      	subs	r0, r0, r3
    808a:	4152      	adcs	r2, r2
    808c:	0b83      	lsrs	r3, r0, #14
    808e:	428b      	cmp	r3, r1
    8090:	d301      	bcc.n	8096 <__aeabi_uidiv+0x52>
    8092:	038b      	lsls	r3, r1, #14
    8094:	1ac0      	subs	r0, r0, r3
    8096:	4152      	adcs	r2, r2
    8098:	0b43      	lsrs	r3, r0, #13
    809a:	428b      	cmp	r3, r1
    809c:	d301      	bcc.n	80a2 <__aeabi_uidiv+0x5e>
    809e:	034b      	lsls	r3, r1, #13
    80a0:	1ac0      	subs	r0, r0, r3
    80a2:	4152      	adcs	r2, r2
    80a4:	0b03      	lsrs	r3, r0, #12
    80a6:	428b      	cmp	r3, r1
    80a8:	d301      	bcc.n	80ae <__aeabi_uidiv+0x6a>
    80aa:	030b      	lsls	r3, r1, #12
    80ac:	1ac0      	subs	r0, r0, r3
    80ae:	4152      	adcs	r2, r2
    80b0:	0ac3      	lsrs	r3, r0, #11
    80b2:	428b      	cmp	r3, r1
    80b4:	d301      	bcc.n	80ba <__aeabi_uidiv+0x76>
    80b6:	02cb      	lsls	r3, r1, #11
    80b8:	1ac0      	subs	r0, r0, r3
    80ba:	4152      	adcs	r2, r2
    80bc:	0a83      	lsrs	r3, r0, #10
    80be:	428b      	cmp	r3, r1
    80c0:	d301      	bcc.n	80c6 <__aeabi_uidiv+0x82>
    80c2:	028b      	lsls	r3, r1, #10
    80c4:	1ac0      	subs	r0, r0, r3
    80c6:	4152      	adcs	r2, r2
    80c8:	0a43      	lsrs	r3, r0, #9
    80ca:	428b      	cmp	r3, r1
    80cc:	d301      	bcc.n	80d2 <__aeabi_uidiv+0x8e>
    80ce:	024b      	lsls	r3, r1, #9
    80d0:	1ac0      	subs	r0, r0, r3
    80d2:	4152      	adcs	r2, r2
    80d4:	0a03      	lsrs	r3, r0, #8
    80d6:	428b      	cmp	r3, r1
    80d8:	d301      	bcc.n	80de <__aeabi_uidiv+0x9a>
    80da:	020b      	lsls	r3, r1, #8
    80dc:	1ac0      	subs	r0, r0, r3
    80de:	4152      	adcs	r2, r2
    80e0:	d2cd      	bcs.n	807e <__aeabi_uidiv+0x3a>
    80e2:	09c3      	lsrs	r3, r0, #7
    80e4:	428b      	cmp	r3, r1
    80e6:	d301      	bcc.n	80ec <__aeabi_uidiv+0xa8>
    80e8:	01cb      	lsls	r3, r1, #7
    80ea:	1ac0      	subs	r0, r0, r3
    80ec:	4152      	adcs	r2, r2
    80ee:	0983      	lsrs	r3, r0, #6
    80f0:	428b      	cmp	r3, r1
    80f2:	d301      	bcc.n	80f8 <__aeabi_uidiv+0xb4>
    80f4:	018b      	lsls	r3, r1, #6
    80f6:	1ac0      	subs	r0, r0, r3
    80f8:	4152      	adcs	r2, r2
    80fa:	0943      	lsrs	r3, r0, #5
    80fc:	428b      	cmp	r3, r1
    80fe:	d301      	bcc.n	8104 <__aeabi_uidiv+0xc0>
    8100:	014b      	lsls	r3, r1, #5
    8102:	1ac0      	subs	r0, r0, r3
    8104:	4152      	adcs	r2, r2
    8106:	0903      	lsrs	r3, r0, #4
    8108:	428b      	cmp	r3, r1
    810a:	d301      	bcc.n	8110 <__aeabi_uidiv+0xcc>
    810c:	010b      	lsls	r3, r1, #4
    810e:	1ac0      	subs	r0, r0, r3
    8110:	4152      	adcs	r2, r2
    8112:	08c3      	lsrs	r3, r0, #3
    8114:	428b      	cmp	r3, r1
    8116:	d301      	bcc.n	811c <__aeabi_uidiv+0xd8>
    8118:	00cb      	lsls	r3, r1, #3
    811a:	1ac0      	subs	r0, r0, r3
    811c:	4152      	adcs	r2, r2
    811e:	0883      	lsrs	r3, r0, #2
    8120:	428b      	cmp	r3, r1
    8122:	d301      	bcc.n	8128 <__aeabi_uidiv+0xe4>
    8124:	008b      	lsls	r3, r1, #2
    8126:	1ac0      	subs	r0, r0, r3
    8128:	4152      	adcs	r2, r2
    812a:	0843      	lsrs	r3, r0, #1
    812c:	428b      	cmp	r3, r1
    812e:	d301      	bcc.n	8134 <__aeabi_uidiv+0xf0>
    8130:	004b      	lsls	r3, r1, #1
    8132:	1ac0      	subs	r0, r0, r3
    8134:	4152      	adcs	r2, r2
    8136:	1a41      	subs	r1, r0, r1
    8138:	d200      	bcs.n	813c <__aeabi_uidiv+0xf8>
    813a:	4601      	mov	r1, r0
    813c:	4152      	adcs	r2, r2
    813e:	4610      	mov	r0, r2
    8140:	4770      	bx	lr
    8142:	e7ff      	b.n	8144 <__aeabi_uidiv+0x100>
    8144:	b501      	push	{r0, lr}
    8146:	2000      	movs	r0, #0
    8148:	f000 f8fc 	bl	8344 <__aeabi_idiv0>
    814c:	bd02      	pop	{r1, pc}
    814e:	46c0      	nop			; (mov r8, r8)

00008150 <__aeabi_uidivmod>:
    8150:	2900      	cmp	r1, #0
    8152:	d0f7      	beq.n	8144 <__aeabi_uidiv+0x100>
    8154:	b503      	push	{r0, r1, lr}
    8156:	f7ff ff75 	bl	8044 <__aeabi_uidiv>
    815a:	bc0e      	pop	{r1, r2, r3}
    815c:	4342      	muls	r2, r0
    815e:	1a89      	subs	r1, r1, r2
    8160:	4718      	bx	r3
    8162:	46c0      	nop			; (mov r8, r8)

00008164 <__aeabi_idiv>:
    8164:	4603      	mov	r3, r0
    8166:	430b      	orrs	r3, r1
    8168:	d47f      	bmi.n	826a <__aeabi_idiv+0x106>
    816a:	2200      	movs	r2, #0
    816c:	0843      	lsrs	r3, r0, #1
    816e:	428b      	cmp	r3, r1
    8170:	d374      	bcc.n	825c <__aeabi_idiv+0xf8>
    8172:	0903      	lsrs	r3, r0, #4
    8174:	428b      	cmp	r3, r1
    8176:	d35f      	bcc.n	8238 <__aeabi_idiv+0xd4>
    8178:	0a03      	lsrs	r3, r0, #8
    817a:	428b      	cmp	r3, r1
    817c:	d344      	bcc.n	8208 <__aeabi_idiv+0xa4>
    817e:	0b03      	lsrs	r3, r0, #12
    8180:	428b      	cmp	r3, r1
    8182:	d328      	bcc.n	81d6 <__aeabi_idiv+0x72>
    8184:	0c03      	lsrs	r3, r0, #16
    8186:	428b      	cmp	r3, r1
    8188:	d30d      	bcc.n	81a6 <__aeabi_idiv+0x42>
    818a:	22ff      	movs	r2, #255	; 0xff
    818c:	0209      	lsls	r1, r1, #8
    818e:	ba12      	rev	r2, r2
    8190:	0c03      	lsrs	r3, r0, #16
    8192:	428b      	cmp	r3, r1
    8194:	d302      	bcc.n	819c <__aeabi_idiv+0x38>
    8196:	1212      	asrs	r2, r2, #8
    8198:	0209      	lsls	r1, r1, #8
    819a:	d065      	beq.n	8268 <__aeabi_idiv+0x104>
    819c:	0b03      	lsrs	r3, r0, #12
    819e:	428b      	cmp	r3, r1
    81a0:	d319      	bcc.n	81d6 <__aeabi_idiv+0x72>
    81a2:	e000      	b.n	81a6 <__aeabi_idiv+0x42>
    81a4:	0a09      	lsrs	r1, r1, #8
    81a6:	0bc3      	lsrs	r3, r0, #15
    81a8:	428b      	cmp	r3, r1
    81aa:	d301      	bcc.n	81b0 <__aeabi_idiv+0x4c>
    81ac:	03cb      	lsls	r3, r1, #15
    81ae:	1ac0      	subs	r0, r0, r3
    81b0:	4152      	adcs	r2, r2
    81b2:	0b83      	lsrs	r3, r0, #14
    81b4:	428b      	cmp	r3, r1
    81b6:	d301      	bcc.n	81bc <__aeabi_idiv+0x58>
    81b8:	038b      	lsls	r3, r1, #14
    81ba:	1ac0      	subs	r0, r0, r3
    81bc:	4152      	adcs	r2, r2
    81be:	0b43      	lsrs	r3, r0, #13
    81c0:	428b      	cmp	r3, r1
    81c2:	d301      	bcc.n	81c8 <__aeabi_idiv+0x64>
    81c4:	034b      	lsls	r3, r1, #13
    81c6:	1ac0      	subs	r0, r0, r3
    81c8:	4152      	adcs	r2, r2
    81ca:	0b03      	lsrs	r3, r0, #12
    81cc:	428b      	cmp	r3, r1
    81ce:	d301      	bcc.n	81d4 <__aeabi_idiv+0x70>
    81d0:	030b      	lsls	r3, r1, #12
    81d2:	1ac0      	subs	r0, r0, r3
    81d4:	4152      	adcs	r2, r2
    81d6:	0ac3      	lsrs	r3, r0, #11
    81d8:	428b      	cmp	r3, r1
    81da:	d301      	bcc.n	81e0 <__aeabi_idiv+0x7c>
    81dc:	02cb      	lsls	r3, r1, #11
    81de:	1ac0      	subs	r0, r0, r3
    81e0:	4152      	adcs	r2, r2
    81e2:	0a83      	lsrs	r3, r0, #10
    81e4:	428b      	cmp	r3, r1
    81e6:	d301      	bcc.n	81ec <__aeabi_idiv+0x88>
    81e8:	028b      	lsls	r3, r1, #10
    81ea:	1ac0      	subs	r0, r0, r3
    81ec:	4152      	adcs	r2, r2
    81ee:	0a43      	lsrs	r3, r0, #9
    81f0:	428b      	cmp	r3, r1
    81f2:	d301      	bcc.n	81f8 <__aeabi_idiv+0x94>
    81f4:	024b      	lsls	r3, r1, #9
    81f6:	1ac0      	subs	r0, r0, r3
    81f8:	4152      	adcs	r2, r2
    81fa:	0a03      	lsrs	r3, r0, #8
    81fc:	428b      	cmp	r3, r1
    81fe:	d301      	bcc.n	8204 <__aeabi_idiv+0xa0>
    8200:	020b      	lsls	r3, r1, #8
    8202:	1ac0      	subs	r0, r0, r3
    8204:	4152      	adcs	r2, r2
    8206:	d2cd      	bcs.n	81a4 <__aeabi_idiv+0x40>
    8208:	09c3      	lsrs	r3, r0, #7
    820a:	428b      	cmp	r3, r1
    820c:	d301      	bcc.n	8212 <__aeabi_idiv+0xae>
    820e:	01cb      	lsls	r3, r1, #7
    8210:	1ac0      	subs	r0, r0, r3
    8212:	4152      	adcs	r2, r2
    8214:	0983      	lsrs	r3, r0, #6
    8216:	428b      	cmp	r3, r1
    8218:	d301      	bcc.n	821e <__aeabi_idiv+0xba>
    821a:	018b      	lsls	r3, r1, #6
    821c:	1ac0      	subs	r0, r0, r3
    821e:	4152      	adcs	r2, r2
    8220:	0943      	lsrs	r3, r0, #5
    8222:	428b      	cmp	r3, r1
    8224:	d301      	bcc.n	822a <__aeabi_idiv+0xc6>
    8226:	014b      	lsls	r3, r1, #5
    8228:	1ac0      	subs	r0, r0, r3
    822a:	4152      	adcs	r2, r2
    822c:	0903      	lsrs	r3, r0, #4
    822e:	428b      	cmp	r3, r1
    8230:	d301      	bcc.n	8236 <__aeabi_idiv+0xd2>
    8232:	010b      	lsls	r3, r1, #4
    8234:	1ac0      	subs	r0, r0, r3
    8236:	4152      	adcs	r2, r2
    8238:	08c3      	lsrs	r3, r0, #3
    823a:	428b      	cmp	r3, r1
    823c:	d301      	bcc.n	8242 <__aeabi_idiv+0xde>
    823e:	00cb      	lsls	r3, r1, #3
    8240:	1ac0      	subs	r0, r0, r3
    8242:	4152      	adcs	r2, r2
    8244:	0883      	lsrs	r3, r0, #2
    8246:	428b      	cmp	r3, r1
    8248:	d301      	bcc.n	824e <__aeabi_idiv+0xea>
    824a:	008b      	lsls	r3, r1, #2
    824c:	1ac0      	subs	r0, r0, r3
    824e:	4152      	adcs	r2, r2
    8250:	0843      	lsrs	r3, r0, #1
    8252:	428b      	cmp	r3, r1
    8254:	d301      	bcc.n	825a <__aeabi_idiv+0xf6>
    8256:	004b      	lsls	r3, r1, #1
    8258:	1ac0      	subs	r0, r0, r3
    825a:	4152      	adcs	r2, r2
    825c:	1a41      	subs	r1, r0, r1
    825e:	d200      	bcs.n	8262 <__aeabi_idiv+0xfe>
    8260:	4601      	mov	r1, r0
    8262:	4152      	adcs	r2, r2
    8264:	4610      	mov	r0, r2
    8266:	4770      	bx	lr
    8268:	e05d      	b.n	8326 <__aeabi_idiv+0x1c2>
    826a:	0fca      	lsrs	r2, r1, #31
    826c:	d000      	beq.n	8270 <__aeabi_idiv+0x10c>
    826e:	4249      	negs	r1, r1
    8270:	1003      	asrs	r3, r0, #32
    8272:	d300      	bcc.n	8276 <__aeabi_idiv+0x112>
    8274:	4240      	negs	r0, r0
    8276:	4053      	eors	r3, r2
    8278:	2200      	movs	r2, #0
    827a:	469c      	mov	ip, r3
    827c:	0903      	lsrs	r3, r0, #4
    827e:	428b      	cmp	r3, r1
    8280:	d32d      	bcc.n	82de <__aeabi_idiv+0x17a>
    8282:	0a03      	lsrs	r3, r0, #8
    8284:	428b      	cmp	r3, r1
    8286:	d312      	bcc.n	82ae <__aeabi_idiv+0x14a>
    8288:	22fc      	movs	r2, #252	; 0xfc
    828a:	0189      	lsls	r1, r1, #6
    828c:	ba12      	rev	r2, r2
    828e:	0a03      	lsrs	r3, r0, #8
    8290:	428b      	cmp	r3, r1
    8292:	d30c      	bcc.n	82ae <__aeabi_idiv+0x14a>
    8294:	0189      	lsls	r1, r1, #6
    8296:	1192      	asrs	r2, r2, #6
    8298:	428b      	cmp	r3, r1
    829a:	d308      	bcc.n	82ae <__aeabi_idiv+0x14a>
    829c:	0189      	lsls	r1, r1, #6
    829e:	1192      	asrs	r2, r2, #6
    82a0:	428b      	cmp	r3, r1
    82a2:	d304      	bcc.n	82ae <__aeabi_idiv+0x14a>
    82a4:	0189      	lsls	r1, r1, #6
    82a6:	d03a      	beq.n	831e <__aeabi_idiv+0x1ba>
    82a8:	1192      	asrs	r2, r2, #6
    82aa:	e000      	b.n	82ae <__aeabi_idiv+0x14a>
    82ac:	0989      	lsrs	r1, r1, #6
    82ae:	09c3      	lsrs	r3, r0, #7
    82b0:	428b      	cmp	r3, r1
    82b2:	d301      	bcc.n	82b8 <__aeabi_idiv+0x154>
    82b4:	01cb      	lsls	r3, r1, #7
    82b6:	1ac0      	subs	r0, r0, r3
    82b8:	4152      	adcs	r2, r2
    82ba:	0983      	lsrs	r3, r0, #6
    82bc:	428b      	cmp	r3, r1
    82be:	d301      	bcc.n	82c4 <__aeabi_idiv+0x160>
    82c0:	018b      	lsls	r3, r1, #6
    82c2:	1ac0      	subs	r0, r0, r3
    82c4:	4152      	adcs	r2, r2
    82c6:	0943      	lsrs	r3, r0, #5
    82c8:	428b      	cmp	r3, r1
    82ca:	d301      	bcc.n	82d0 <__aeabi_idiv+0x16c>
    82cc:	014b      	lsls	r3, r1, #5
    82ce:	1ac0      	subs	r0, r0, r3
    82d0:	4152      	adcs	r2, r2
    82d2:	0903      	lsrs	r3, r0, #4
    82d4:	428b      	cmp	r3, r1
    82d6:	d301      	bcc.n	82dc <__aeabi_idiv+0x178>
    82d8:	010b      	lsls	r3, r1, #4
    82da:	1ac0      	subs	r0, r0, r3
    82dc:	4152      	adcs	r2, r2
    82de:	08c3      	lsrs	r3, r0, #3
    82e0:	428b      	cmp	r3, r1
    82e2:	d301      	bcc.n	82e8 <__aeabi_idiv+0x184>
    82e4:	00cb      	lsls	r3, r1, #3
    82e6:	1ac0      	subs	r0, r0, r3
    82e8:	4152      	adcs	r2, r2
    82ea:	0883      	lsrs	r3, r0, #2
    82ec:	428b      	cmp	r3, r1
    82ee:	d301      	bcc.n	82f4 <__aeabi_idiv+0x190>
    82f0:	008b      	lsls	r3, r1, #2
    82f2:	1ac0      	subs	r0, r0, r3
    82f4:	4152      	adcs	r2, r2
    82f6:	d2d9      	bcs.n	82ac <__aeabi_idiv+0x148>
    82f8:	0843      	lsrs	r3, r0, #1
    82fa:	428b      	cmp	r3, r1
    82fc:	d301      	bcc.n	8302 <__aeabi_idiv+0x19e>
    82fe:	004b      	lsls	r3, r1, #1
    8300:	1ac0      	subs	r0, r0, r3
    8302:	4152      	adcs	r2, r2
    8304:	1a41      	subs	r1, r0, r1
    8306:	d200      	bcs.n	830a <__aeabi_idiv+0x1a6>
    8308:	4601      	mov	r1, r0
    830a:	4663      	mov	r3, ip
    830c:	4152      	adcs	r2, r2
    830e:	105b      	asrs	r3, r3, #1
    8310:	4610      	mov	r0, r2
    8312:	d301      	bcc.n	8318 <__aeabi_idiv+0x1b4>
    8314:	4240      	negs	r0, r0
    8316:	2b00      	cmp	r3, #0
    8318:	d500      	bpl.n	831c <__aeabi_idiv+0x1b8>
    831a:	4249      	negs	r1, r1
    831c:	4770      	bx	lr
    831e:	4663      	mov	r3, ip
    8320:	105b      	asrs	r3, r3, #1
    8322:	d300      	bcc.n	8326 <__aeabi_idiv+0x1c2>
    8324:	4240      	negs	r0, r0
    8326:	b501      	push	{r0, lr}
    8328:	2000      	movs	r0, #0
    832a:	f000 f80b 	bl	8344 <__aeabi_idiv0>
    832e:	bd02      	pop	{r1, pc}

00008330 <__aeabi_idivmod>:
    8330:	2900      	cmp	r1, #0
    8332:	d0f8      	beq.n	8326 <__aeabi_idiv+0x1c2>
    8334:	b503      	push	{r0, r1, lr}
    8336:	f7ff ff15 	bl	8164 <__aeabi_idiv>
    833a:	bc0e      	pop	{r1, r2, r3}
    833c:	4342      	muls	r2, r0
    833e:	1a89      	subs	r1, r1, r2
    8340:	4718      	bx	r3
    8342:	46c0      	nop			; (mov r8, r8)

00008344 <__aeabi_idiv0>:
    8344:	4770      	bx	lr
    8346:	46c0      	nop			; (mov r8, r8)

00008348 <__aeabi_lmul>:
    8348:	b5f0      	push	{r4, r5, r6, r7, lr}
    834a:	464f      	mov	r7, r9
    834c:	4646      	mov	r6, r8
    834e:	0405      	lsls	r5, r0, #16
    8350:	0c2d      	lsrs	r5, r5, #16
    8352:	1c2c      	adds	r4, r5, #0
    8354:	b4c0      	push	{r6, r7}
    8356:	0417      	lsls	r7, r2, #16
    8358:	0c16      	lsrs	r6, r2, #16
    835a:	0c3f      	lsrs	r7, r7, #16
    835c:	4699      	mov	r9, r3
    835e:	0c03      	lsrs	r3, r0, #16
    8360:	437c      	muls	r4, r7
    8362:	4375      	muls	r5, r6
    8364:	435f      	muls	r7, r3
    8366:	4373      	muls	r3, r6
    8368:	197d      	adds	r5, r7, r5
    836a:	0c26      	lsrs	r6, r4, #16
    836c:	19ad      	adds	r5, r5, r6
    836e:	469c      	mov	ip, r3
    8370:	42af      	cmp	r7, r5
    8372:	d903      	bls.n	837c <__aeabi_lmul+0x34>
    8374:	2380      	movs	r3, #128	; 0x80
    8376:	025b      	lsls	r3, r3, #9
    8378:	4698      	mov	r8, r3
    837a:	44c4      	add	ip, r8
    837c:	464b      	mov	r3, r9
    837e:	4351      	muls	r1, r2
    8380:	4343      	muls	r3, r0
    8382:	0424      	lsls	r4, r4, #16
    8384:	0c2e      	lsrs	r6, r5, #16
    8386:	0c24      	lsrs	r4, r4, #16
    8388:	042d      	lsls	r5, r5, #16
    838a:	4466      	add	r6, ip
    838c:	192c      	adds	r4, r5, r4
    838e:	1859      	adds	r1, r3, r1
    8390:	1989      	adds	r1, r1, r6
    8392:	1c20      	adds	r0, r4, #0
    8394:	bc0c      	pop	{r2, r3}
    8396:	4690      	mov	r8, r2
    8398:	4699      	mov	r9, r3
    839a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000839c <__aeabi_dmul>:
    839c:	b5f0      	push	{r4, r5, r6, r7, lr}
    839e:	465f      	mov	r7, fp
    83a0:	4656      	mov	r6, sl
    83a2:	464d      	mov	r5, r9
    83a4:	4644      	mov	r4, r8
    83a6:	b4f0      	push	{r4, r5, r6, r7}
    83a8:	1c05      	adds	r5, r0, #0
    83aa:	1c06      	adds	r6, r0, #0
    83ac:	0308      	lsls	r0, r1, #12
    83ae:	b087      	sub	sp, #28
    83b0:	4699      	mov	r9, r3
    83b2:	004f      	lsls	r7, r1, #1
    83b4:	0b03      	lsrs	r3, r0, #12
    83b6:	0fcc      	lsrs	r4, r1, #31
    83b8:	4692      	mov	sl, r2
    83ba:	469b      	mov	fp, r3
    83bc:	0d7f      	lsrs	r7, r7, #21
    83be:	9401      	str	r4, [sp, #4]
    83c0:	d067      	beq.n	8492 <__aeabi_dmul+0xf6>
    83c2:	4b6c      	ldr	r3, [pc, #432]	; (8574 <__aeabi_dmul+0x1d8>)
    83c4:	429f      	cmp	r7, r3
    83c6:	d036      	beq.n	8436 <__aeabi_dmul+0x9a>
    83c8:	2080      	movs	r0, #128	; 0x80
    83ca:	465b      	mov	r3, fp
    83cc:	0340      	lsls	r0, r0, #13
    83ce:	4318      	orrs	r0, r3
    83d0:	00c0      	lsls	r0, r0, #3
    83d2:	0f6b      	lsrs	r3, r5, #29
    83d4:	4318      	orrs	r0, r3
    83d6:	4b68      	ldr	r3, [pc, #416]	; (8578 <__aeabi_dmul+0x1dc>)
    83d8:	4683      	mov	fp, r0
    83da:	469c      	mov	ip, r3
    83dc:	2300      	movs	r3, #0
    83de:	4698      	mov	r8, r3
    83e0:	00ee      	lsls	r6, r5, #3
    83e2:	4467      	add	r7, ip
    83e4:	9300      	str	r3, [sp, #0]
    83e6:	464b      	mov	r3, r9
    83e8:	4649      	mov	r1, r9
    83ea:	031d      	lsls	r5, r3, #12
    83ec:	0fc9      	lsrs	r1, r1, #31
    83ee:	005b      	lsls	r3, r3, #1
    83f0:	4652      	mov	r2, sl
    83f2:	0b2d      	lsrs	r5, r5, #12
    83f4:	0d5b      	lsrs	r3, r3, #21
    83f6:	4689      	mov	r9, r1
    83f8:	d100      	bne.n	83fc <__aeabi_dmul+0x60>
    83fa:	e06e      	b.n	84da <__aeabi_dmul+0x13e>
    83fc:	495d      	ldr	r1, [pc, #372]	; (8574 <__aeabi_dmul+0x1d8>)
    83fe:	428b      	cmp	r3, r1
    8400:	d064      	beq.n	84cc <__aeabi_dmul+0x130>
    8402:	2080      	movs	r0, #128	; 0x80
    8404:	495c      	ldr	r1, [pc, #368]	; (8578 <__aeabi_dmul+0x1dc>)
    8406:	0340      	lsls	r0, r0, #13
    8408:	468c      	mov	ip, r1
    840a:	2100      	movs	r1, #0
    840c:	4305      	orrs	r5, r0
    840e:	00ed      	lsls	r5, r5, #3
    8410:	0f50      	lsrs	r0, r2, #29
    8412:	4305      	orrs	r5, r0
    8414:	00d2      	lsls	r2, r2, #3
    8416:	4463      	add	r3, ip
    8418:	4648      	mov	r0, r9
    841a:	18ff      	adds	r7, r7, r3
    841c:	1c7b      	adds	r3, r7, #1
    841e:	469a      	mov	sl, r3
    8420:	9b00      	ldr	r3, [sp, #0]
    8422:	4060      	eors	r0, r4
    8424:	9002      	str	r0, [sp, #8]
    8426:	430b      	orrs	r3, r1
    8428:	2b0f      	cmp	r3, #15
    842a:	d900      	bls.n	842e <__aeabi_dmul+0x92>
    842c:	e0ac      	b.n	8588 <__aeabi_dmul+0x1ec>
    842e:	4853      	ldr	r0, [pc, #332]	; (857c <__aeabi_dmul+0x1e0>)
    8430:	009b      	lsls	r3, r3, #2
    8432:	58c3      	ldr	r3, [r0, r3]
    8434:	469f      	mov	pc, r3
    8436:	465b      	mov	r3, fp
    8438:	431d      	orrs	r5, r3
    843a:	d000      	beq.n	843e <__aeabi_dmul+0xa2>
    843c:	e082      	b.n	8544 <__aeabi_dmul+0x1a8>
    843e:	2308      	movs	r3, #8
    8440:	9300      	str	r3, [sp, #0]
    8442:	2300      	movs	r3, #0
    8444:	469b      	mov	fp, r3
    8446:	3302      	adds	r3, #2
    8448:	2600      	movs	r6, #0
    844a:	4698      	mov	r8, r3
    844c:	e7cb      	b.n	83e6 <__aeabi_dmul+0x4a>
    844e:	9b02      	ldr	r3, [sp, #8]
    8450:	9301      	str	r3, [sp, #4]
    8452:	4643      	mov	r3, r8
    8454:	2b02      	cmp	r3, #2
    8456:	d159      	bne.n	850c <__aeabi_dmul+0x170>
    8458:	2401      	movs	r4, #1
    845a:	2500      	movs	r5, #0
    845c:	2600      	movs	r6, #0
    845e:	9b01      	ldr	r3, [sp, #4]
    8460:	401c      	ands	r4, r3
    8462:	4b44      	ldr	r3, [pc, #272]	; (8574 <__aeabi_dmul+0x1d8>)
    8464:	2100      	movs	r1, #0
    8466:	032d      	lsls	r5, r5, #12
    8468:	0d0a      	lsrs	r2, r1, #20
    846a:	0512      	lsls	r2, r2, #20
    846c:	0b2d      	lsrs	r5, r5, #12
    846e:	4315      	orrs	r5, r2
    8470:	4a43      	ldr	r2, [pc, #268]	; (8580 <__aeabi_dmul+0x1e4>)
    8472:	051b      	lsls	r3, r3, #20
    8474:	4015      	ands	r5, r2
    8476:	431d      	orrs	r5, r3
    8478:	006d      	lsls	r5, r5, #1
    847a:	07e4      	lsls	r4, r4, #31
    847c:	086d      	lsrs	r5, r5, #1
    847e:	4325      	orrs	r5, r4
    8480:	1c30      	adds	r0, r6, #0
    8482:	1c29      	adds	r1, r5, #0
    8484:	b007      	add	sp, #28
    8486:	bc3c      	pop	{r2, r3, r4, r5}
    8488:	4690      	mov	r8, r2
    848a:	4699      	mov	r9, r3
    848c:	46a2      	mov	sl, r4
    848e:	46ab      	mov	fp, r5
    8490:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8492:	432b      	orrs	r3, r5
    8494:	d04e      	beq.n	8534 <__aeabi_dmul+0x198>
    8496:	465b      	mov	r3, fp
    8498:	2b00      	cmp	r3, #0
    849a:	d100      	bne.n	849e <__aeabi_dmul+0x102>
    849c:	e185      	b.n	87aa <__aeabi_dmul+0x40e>
    849e:	4658      	mov	r0, fp
    84a0:	f000 fa88 	bl	89b4 <__clzsi2>
    84a4:	1c02      	adds	r2, r0, #0
    84a6:	2328      	movs	r3, #40	; 0x28
    84a8:	1c29      	adds	r1, r5, #0
    84aa:	1a9b      	subs	r3, r3, r2
    84ac:	1c16      	adds	r6, r2, #0
    84ae:	4658      	mov	r0, fp
    84b0:	40d9      	lsrs	r1, r3
    84b2:	3e08      	subs	r6, #8
    84b4:	40b0      	lsls	r0, r6
    84b6:	1c0b      	adds	r3, r1, #0
    84b8:	40b5      	lsls	r5, r6
    84ba:	4303      	orrs	r3, r0
    84bc:	469b      	mov	fp, r3
    84be:	1c2e      	adds	r6, r5, #0
    84c0:	2300      	movs	r3, #0
    84c2:	4f30      	ldr	r7, [pc, #192]	; (8584 <__aeabi_dmul+0x1e8>)
    84c4:	9300      	str	r3, [sp, #0]
    84c6:	1abf      	subs	r7, r7, r2
    84c8:	4698      	mov	r8, r3
    84ca:	e78c      	b.n	83e6 <__aeabi_dmul+0x4a>
    84cc:	4651      	mov	r1, sl
    84ce:	4329      	orrs	r1, r5
    84d0:	d12e      	bne.n	8530 <__aeabi_dmul+0x194>
    84d2:	2500      	movs	r5, #0
    84d4:	2200      	movs	r2, #0
    84d6:	2102      	movs	r1, #2
    84d8:	e79e      	b.n	8418 <__aeabi_dmul+0x7c>
    84da:	4651      	mov	r1, sl
    84dc:	4329      	orrs	r1, r5
    84de:	d023      	beq.n	8528 <__aeabi_dmul+0x18c>
    84e0:	2d00      	cmp	r5, #0
    84e2:	d100      	bne.n	84e6 <__aeabi_dmul+0x14a>
    84e4:	e154      	b.n	8790 <__aeabi_dmul+0x3f4>
    84e6:	1c28      	adds	r0, r5, #0
    84e8:	f000 fa64 	bl	89b4 <__clzsi2>
    84ec:	1c03      	adds	r3, r0, #0
    84ee:	2128      	movs	r1, #40	; 0x28
    84f0:	4650      	mov	r0, sl
    84f2:	1ac9      	subs	r1, r1, r3
    84f4:	1c1a      	adds	r2, r3, #0
    84f6:	40c8      	lsrs	r0, r1
    84f8:	4651      	mov	r1, sl
    84fa:	3a08      	subs	r2, #8
    84fc:	4091      	lsls	r1, r2
    84fe:	4095      	lsls	r5, r2
    8500:	1c0a      	adds	r2, r1, #0
    8502:	4305      	orrs	r5, r0
    8504:	481f      	ldr	r0, [pc, #124]	; (8584 <__aeabi_dmul+0x1e8>)
    8506:	2100      	movs	r1, #0
    8508:	1ac3      	subs	r3, r0, r3
    850a:	e785      	b.n	8418 <__aeabi_dmul+0x7c>
    850c:	2b03      	cmp	r3, #3
    850e:	d100      	bne.n	8512 <__aeabi_dmul+0x176>
    8510:	e1c2      	b.n	8898 <__aeabi_dmul+0x4fc>
    8512:	2b01      	cmp	r3, #1
    8514:	d000      	beq.n	8518 <__aeabi_dmul+0x17c>
    8516:	e16d      	b.n	87f4 <__aeabi_dmul+0x458>
    8518:	4644      	mov	r4, r8
    851a:	9b01      	ldr	r3, [sp, #4]
    851c:	2500      	movs	r5, #0
    851e:	401c      	ands	r4, r3
    8520:	b2e4      	uxtb	r4, r4
    8522:	2300      	movs	r3, #0
    8524:	2600      	movs	r6, #0
    8526:	e79d      	b.n	8464 <__aeabi_dmul+0xc8>
    8528:	2500      	movs	r5, #0
    852a:	2200      	movs	r2, #0
    852c:	2101      	movs	r1, #1
    852e:	e773      	b.n	8418 <__aeabi_dmul+0x7c>
    8530:	2103      	movs	r1, #3
    8532:	e771      	b.n	8418 <__aeabi_dmul+0x7c>
    8534:	2304      	movs	r3, #4
    8536:	9300      	str	r3, [sp, #0]
    8538:	2300      	movs	r3, #0
    853a:	469b      	mov	fp, r3
    853c:	3301      	adds	r3, #1
    853e:	2600      	movs	r6, #0
    8540:	4698      	mov	r8, r3
    8542:	e750      	b.n	83e6 <__aeabi_dmul+0x4a>
    8544:	230c      	movs	r3, #12
    8546:	9300      	str	r3, [sp, #0]
    8548:	3b09      	subs	r3, #9
    854a:	4698      	mov	r8, r3
    854c:	e74b      	b.n	83e6 <__aeabi_dmul+0x4a>
    854e:	2580      	movs	r5, #128	; 0x80
    8550:	2400      	movs	r4, #0
    8552:	032d      	lsls	r5, r5, #12
    8554:	2600      	movs	r6, #0
    8556:	4b07      	ldr	r3, [pc, #28]	; (8574 <__aeabi_dmul+0x1d8>)
    8558:	e784      	b.n	8464 <__aeabi_dmul+0xc8>
    855a:	464b      	mov	r3, r9
    855c:	46ab      	mov	fp, r5
    855e:	1c16      	adds	r6, r2, #0
    8560:	9301      	str	r3, [sp, #4]
    8562:	4688      	mov	r8, r1
    8564:	e775      	b.n	8452 <__aeabi_dmul+0xb6>
    8566:	9b02      	ldr	r3, [sp, #8]
    8568:	46ab      	mov	fp, r5
    856a:	1c16      	adds	r6, r2, #0
    856c:	9301      	str	r3, [sp, #4]
    856e:	4688      	mov	r8, r1
    8570:	e76f      	b.n	8452 <__aeabi_dmul+0xb6>
    8572:	46c0      	nop			; (mov r8, r8)
    8574:	000007ff 	.word	0x000007ff
    8578:	fffffc01 	.word	0xfffffc01
    857c:	0000bee0 	.word	0x0000bee0
    8580:	800fffff 	.word	0x800fffff
    8584:	fffffc0d 	.word	0xfffffc0d
    8588:	0c33      	lsrs	r3, r6, #16
    858a:	0436      	lsls	r6, r6, #16
    858c:	0c36      	lsrs	r6, r6, #16
    858e:	469c      	mov	ip, r3
    8590:	1c33      	adds	r3, r6, #0
    8592:	0c14      	lsrs	r4, r2, #16
    8594:	0412      	lsls	r2, r2, #16
    8596:	0c12      	lsrs	r2, r2, #16
    8598:	4353      	muls	r3, r2
    859a:	4698      	mov	r8, r3
    859c:	4663      	mov	r3, ip
    859e:	4353      	muls	r3, r2
    85a0:	4699      	mov	r9, r3
    85a2:	4663      	mov	r3, ip
    85a4:	4363      	muls	r3, r4
    85a6:	9301      	str	r3, [sp, #4]
    85a8:	1c33      	adds	r3, r6, #0
    85aa:	4641      	mov	r1, r8
    85ac:	4363      	muls	r3, r4
    85ae:	0c09      	lsrs	r1, r1, #16
    85b0:	444b      	add	r3, r9
    85b2:	185b      	adds	r3, r3, r1
    85b4:	4599      	cmp	r9, r3
    85b6:	d905      	bls.n	85c4 <__aeabi_dmul+0x228>
    85b8:	2080      	movs	r0, #128	; 0x80
    85ba:	0240      	lsls	r0, r0, #9
    85bc:	4681      	mov	r9, r0
    85be:	9901      	ldr	r1, [sp, #4]
    85c0:	4449      	add	r1, r9
    85c2:	9101      	str	r1, [sp, #4]
    85c4:	0c19      	lsrs	r1, r3, #16
    85c6:	9103      	str	r1, [sp, #12]
    85c8:	4641      	mov	r1, r8
    85ca:	0409      	lsls	r1, r1, #16
    85cc:	0c09      	lsrs	r1, r1, #16
    85ce:	041b      	lsls	r3, r3, #16
    85d0:	185b      	adds	r3, r3, r1
    85d2:	9304      	str	r3, [sp, #16]
    85d4:	0c2b      	lsrs	r3, r5, #16
    85d6:	4698      	mov	r8, r3
    85d8:	1c33      	adds	r3, r6, #0
    85da:	042d      	lsls	r5, r5, #16
    85dc:	0c29      	lsrs	r1, r5, #16
    85de:	434b      	muls	r3, r1
    85e0:	4660      	mov	r0, ip
    85e2:	9300      	str	r3, [sp, #0]
    85e4:	4643      	mov	r3, r8
    85e6:	4665      	mov	r5, ip
    85e8:	4358      	muls	r0, r3
    85ea:	435e      	muls	r6, r3
    85ec:	9b00      	ldr	r3, [sp, #0]
    85ee:	434d      	muls	r5, r1
    85f0:	0c1b      	lsrs	r3, r3, #16
    85f2:	4699      	mov	r9, r3
    85f4:	19ae      	adds	r6, r5, r6
    85f6:	444e      	add	r6, r9
    85f8:	4684      	mov	ip, r0
    85fa:	42b5      	cmp	r5, r6
    85fc:	d903      	bls.n	8606 <__aeabi_dmul+0x26a>
    85fe:	2380      	movs	r3, #128	; 0x80
    8600:	025b      	lsls	r3, r3, #9
    8602:	4699      	mov	r9, r3
    8604:	44cc      	add	ip, r9
    8606:	0c35      	lsrs	r5, r6, #16
    8608:	1c2b      	adds	r3, r5, #0
    860a:	9803      	ldr	r0, [sp, #12]
    860c:	4463      	add	r3, ip
    860e:	4684      	mov	ip, r0
    8610:	9305      	str	r3, [sp, #20]
    8612:	9b00      	ldr	r3, [sp, #0]
    8614:	0436      	lsls	r6, r6, #16
    8616:	041b      	lsls	r3, r3, #16
    8618:	0c1b      	lsrs	r3, r3, #16
    861a:	18f3      	adds	r3, r6, r3
    861c:	449c      	add	ip, r3
    861e:	4660      	mov	r0, ip
    8620:	9003      	str	r0, [sp, #12]
    8622:	4658      	mov	r0, fp
    8624:	0405      	lsls	r5, r0, #16
    8626:	0c06      	lsrs	r6, r0, #16
    8628:	0c28      	lsrs	r0, r5, #16
    862a:	4684      	mov	ip, r0
    862c:	4350      	muls	r0, r2
    862e:	1c35      	adds	r5, r6, #0
    8630:	4681      	mov	r9, r0
    8632:	4660      	mov	r0, ip
    8634:	4365      	muls	r5, r4
    8636:	4344      	muls	r4, r0
    8638:	4648      	mov	r0, r9
    863a:	0c00      	lsrs	r0, r0, #16
    863c:	4683      	mov	fp, r0
    863e:	4372      	muls	r2, r6
    8640:	1914      	adds	r4, r2, r4
    8642:	445c      	add	r4, fp
    8644:	42a2      	cmp	r2, r4
    8646:	d903      	bls.n	8650 <__aeabi_dmul+0x2b4>
    8648:	2280      	movs	r2, #128	; 0x80
    864a:	0252      	lsls	r2, r2, #9
    864c:	4693      	mov	fp, r2
    864e:	445d      	add	r5, fp
    8650:	0c22      	lsrs	r2, r4, #16
    8652:	18ad      	adds	r5, r5, r2
    8654:	464a      	mov	r2, r9
    8656:	0412      	lsls	r2, r2, #16
    8658:	0c12      	lsrs	r2, r2, #16
    865a:	0424      	lsls	r4, r4, #16
    865c:	4640      	mov	r0, r8
    865e:	18a4      	adds	r4, r4, r2
    8660:	4662      	mov	r2, ip
    8662:	434a      	muls	r2, r1
    8664:	4371      	muls	r1, r6
    8666:	4346      	muls	r6, r0
    8668:	4660      	mov	r0, ip
    866a:	9600      	str	r6, [sp, #0]
    866c:	4646      	mov	r6, r8
    866e:	4370      	muls	r0, r6
    8670:	4680      	mov	r8, r0
    8672:	0c10      	lsrs	r0, r2, #16
    8674:	4684      	mov	ip, r0
    8676:	4488      	add	r8, r1
    8678:	44e0      	add	r8, ip
    867a:	4541      	cmp	r1, r8
    867c:	d905      	bls.n	868a <__aeabi_dmul+0x2ee>
    867e:	2180      	movs	r1, #128	; 0x80
    8680:	0249      	lsls	r1, r1, #9
    8682:	468c      	mov	ip, r1
    8684:	9900      	ldr	r1, [sp, #0]
    8686:	4461      	add	r1, ip
    8688:	9100      	str	r1, [sp, #0]
    868a:	9801      	ldr	r0, [sp, #4]
    868c:	9903      	ldr	r1, [sp, #12]
    868e:	4684      	mov	ip, r0
    8690:	4461      	add	r1, ip
    8692:	4299      	cmp	r1, r3
    8694:	419b      	sbcs	r3, r3
    8696:	425b      	negs	r3, r3
    8698:	4699      	mov	r9, r3
    869a:	9805      	ldr	r0, [sp, #20]
    869c:	4643      	mov	r3, r8
    869e:	4684      	mov	ip, r0
    86a0:	0412      	lsls	r2, r2, #16
    86a2:	0c12      	lsrs	r2, r2, #16
    86a4:	041b      	lsls	r3, r3, #16
    86a6:	189b      	adds	r3, r3, r2
    86a8:	4463      	add	r3, ip
    86aa:	469c      	mov	ip, r3
    86ac:	46ab      	mov	fp, r5
    86ae:	4283      	cmp	r3, r0
    86b0:	419b      	sbcs	r3, r3
    86b2:	4640      	mov	r0, r8
    86b4:	190a      	adds	r2, r1, r4
    86b6:	44cc      	add	ip, r9
    86b8:	42a2      	cmp	r2, r4
    86ba:	4189      	sbcs	r1, r1
    86bc:	44e3      	add	fp, ip
    86be:	45cc      	cmp	ip, r9
    86c0:	41b6      	sbcs	r6, r6
    86c2:	465c      	mov	r4, fp
    86c4:	0c00      	lsrs	r0, r0, #16
    86c6:	4680      	mov	r8, r0
    86c8:	4249      	negs	r1, r1
    86ca:	4276      	negs	r6, r6
    86cc:	425b      	negs	r3, r3
    86ce:	1864      	adds	r4, r4, r1
    86d0:	4333      	orrs	r3, r6
    86d2:	4498      	add	r8, r3
    86d4:	428c      	cmp	r4, r1
    86d6:	4189      	sbcs	r1, r1
    86d8:	45ab      	cmp	fp, r5
    86da:	419b      	sbcs	r3, r3
    86dc:	4249      	negs	r1, r1
    86de:	425b      	negs	r3, r3
    86e0:	4319      	orrs	r1, r3
    86e2:	1c0d      	adds	r5, r1, #0
    86e4:	9b00      	ldr	r3, [sp, #0]
    86e6:	4445      	add	r5, r8
    86e8:	18ee      	adds	r6, r5, r3
    86ea:	0276      	lsls	r6, r6, #9
    86ec:	0de5      	lsrs	r5, r4, #23
    86ee:	432e      	orrs	r6, r5
    86f0:	46b3      	mov	fp, r6
    86f2:	9b04      	ldr	r3, [sp, #16]
    86f4:	0256      	lsls	r6, r2, #9
    86f6:	431e      	orrs	r6, r3
    86f8:	1e73      	subs	r3, r6, #1
    86fa:	419e      	sbcs	r6, r3
    86fc:	465b      	mov	r3, fp
    86fe:	0dd2      	lsrs	r2, r2, #23
    8700:	4332      	orrs	r2, r6
    8702:	0266      	lsls	r6, r4, #9
    8704:	4316      	orrs	r6, r2
    8706:	01db      	lsls	r3, r3, #7
    8708:	d50a      	bpl.n	8720 <__aeabi_dmul+0x384>
    870a:	2301      	movs	r3, #1
    870c:	4033      	ands	r3, r6
    870e:	0876      	lsrs	r6, r6, #1
    8710:	431e      	orrs	r6, r3
    8712:	465b      	mov	r3, fp
    8714:	07db      	lsls	r3, r3, #31
    8716:	431e      	orrs	r6, r3
    8718:	465b      	mov	r3, fp
    871a:	085b      	lsrs	r3, r3, #1
    871c:	469b      	mov	fp, r3
    871e:	4657      	mov	r7, sl
    8720:	4b63      	ldr	r3, [pc, #396]	; (88b0 <__aeabi_dmul+0x514>)
    8722:	18fb      	adds	r3, r7, r3
    8724:	2b00      	cmp	r3, #0
    8726:	dd5a      	ble.n	87de <__aeabi_dmul+0x442>
    8728:	0772      	lsls	r2, r6, #29
    872a:	d009      	beq.n	8740 <__aeabi_dmul+0x3a4>
    872c:	220f      	movs	r2, #15
    872e:	4032      	ands	r2, r6
    8730:	2a04      	cmp	r2, #4
    8732:	d005      	beq.n	8740 <__aeabi_dmul+0x3a4>
    8734:	1d32      	adds	r2, r6, #4
    8736:	42b2      	cmp	r2, r6
    8738:	41b6      	sbcs	r6, r6
    873a:	4276      	negs	r6, r6
    873c:	44b3      	add	fp, r6
    873e:	1c16      	adds	r6, r2, #0
    8740:	465a      	mov	r2, fp
    8742:	01d2      	lsls	r2, r2, #7
    8744:	d506      	bpl.n	8754 <__aeabi_dmul+0x3b8>
    8746:	465a      	mov	r2, fp
    8748:	4b5a      	ldr	r3, [pc, #360]	; (88b4 <__aeabi_dmul+0x518>)
    874a:	401a      	ands	r2, r3
    874c:	2380      	movs	r3, #128	; 0x80
    874e:	4693      	mov	fp, r2
    8750:	00db      	lsls	r3, r3, #3
    8752:	18fb      	adds	r3, r7, r3
    8754:	4a58      	ldr	r2, [pc, #352]	; (88b8 <__aeabi_dmul+0x51c>)
    8756:	4293      	cmp	r3, r2
    8758:	dd34      	ble.n	87c4 <__aeabi_dmul+0x428>
    875a:	2401      	movs	r4, #1
    875c:	9b02      	ldr	r3, [sp, #8]
    875e:	2500      	movs	r5, #0
    8760:	401c      	ands	r4, r3
    8762:	2600      	movs	r6, #0
    8764:	4b55      	ldr	r3, [pc, #340]	; (88bc <__aeabi_dmul+0x520>)
    8766:	e67d      	b.n	8464 <__aeabi_dmul+0xc8>
    8768:	2080      	movs	r0, #128	; 0x80
    876a:	465b      	mov	r3, fp
    876c:	0300      	lsls	r0, r0, #12
    876e:	4203      	tst	r3, r0
    8770:	d008      	beq.n	8784 <__aeabi_dmul+0x3e8>
    8772:	4205      	tst	r5, r0
    8774:	d106      	bne.n	8784 <__aeabi_dmul+0x3e8>
    8776:	4305      	orrs	r5, r0
    8778:	032d      	lsls	r5, r5, #12
    877a:	0b2d      	lsrs	r5, r5, #12
    877c:	464c      	mov	r4, r9
    877e:	1c16      	adds	r6, r2, #0
    8780:	4b4e      	ldr	r3, [pc, #312]	; (88bc <__aeabi_dmul+0x520>)
    8782:	e66f      	b.n	8464 <__aeabi_dmul+0xc8>
    8784:	465d      	mov	r5, fp
    8786:	4305      	orrs	r5, r0
    8788:	032d      	lsls	r5, r5, #12
    878a:	0b2d      	lsrs	r5, r5, #12
    878c:	4b4b      	ldr	r3, [pc, #300]	; (88bc <__aeabi_dmul+0x520>)
    878e:	e669      	b.n	8464 <__aeabi_dmul+0xc8>
    8790:	4650      	mov	r0, sl
    8792:	f000 f90f 	bl	89b4 <__clzsi2>
    8796:	1c03      	adds	r3, r0, #0
    8798:	3320      	adds	r3, #32
    879a:	2b27      	cmp	r3, #39	; 0x27
    879c:	dc00      	bgt.n	87a0 <__aeabi_dmul+0x404>
    879e:	e6a6      	b.n	84ee <__aeabi_dmul+0x152>
    87a0:	4655      	mov	r5, sl
    87a2:	3808      	subs	r0, #8
    87a4:	4085      	lsls	r5, r0
    87a6:	2200      	movs	r2, #0
    87a8:	e6ac      	b.n	8504 <__aeabi_dmul+0x168>
    87aa:	1c28      	adds	r0, r5, #0
    87ac:	f000 f902 	bl	89b4 <__clzsi2>
    87b0:	1c02      	adds	r2, r0, #0
    87b2:	3220      	adds	r2, #32
    87b4:	2a27      	cmp	r2, #39	; 0x27
    87b6:	dc00      	bgt.n	87ba <__aeabi_dmul+0x41e>
    87b8:	e675      	b.n	84a6 <__aeabi_dmul+0x10a>
    87ba:	3808      	subs	r0, #8
    87bc:	4085      	lsls	r5, r0
    87be:	2600      	movs	r6, #0
    87c0:	46ab      	mov	fp, r5
    87c2:	e67d      	b.n	84c0 <__aeabi_dmul+0x124>
    87c4:	465a      	mov	r2, fp
    87c6:	08f6      	lsrs	r6, r6, #3
    87c8:	0752      	lsls	r2, r2, #29
    87ca:	4316      	orrs	r6, r2
    87cc:	465a      	mov	r2, fp
    87ce:	2401      	movs	r4, #1
    87d0:	0255      	lsls	r5, r2, #9
    87d2:	9a02      	ldr	r2, [sp, #8]
    87d4:	055b      	lsls	r3, r3, #21
    87d6:	0b2d      	lsrs	r5, r5, #12
    87d8:	0d5b      	lsrs	r3, r3, #21
    87da:	4014      	ands	r4, r2
    87dc:	e642      	b.n	8464 <__aeabi_dmul+0xc8>
    87de:	4d38      	ldr	r5, [pc, #224]	; (88c0 <__aeabi_dmul+0x524>)
    87e0:	1bed      	subs	r5, r5, r7
    87e2:	2d38      	cmp	r5, #56	; 0x38
    87e4:	dd0a      	ble.n	87fc <__aeabi_dmul+0x460>
    87e6:	2401      	movs	r4, #1
    87e8:	9b02      	ldr	r3, [sp, #8]
    87ea:	2500      	movs	r5, #0
    87ec:	401c      	ands	r4, r3
    87ee:	2600      	movs	r6, #0
    87f0:	2300      	movs	r3, #0
    87f2:	e637      	b.n	8464 <__aeabi_dmul+0xc8>
    87f4:	9b01      	ldr	r3, [sp, #4]
    87f6:	4657      	mov	r7, sl
    87f8:	9302      	str	r3, [sp, #8]
    87fa:	e791      	b.n	8720 <__aeabi_dmul+0x384>
    87fc:	2d1f      	cmp	r5, #31
    87fe:	dc25      	bgt.n	884c <__aeabi_dmul+0x4b0>
    8800:	4b30      	ldr	r3, [pc, #192]	; (88c4 <__aeabi_dmul+0x528>)
    8802:	1c32      	adds	r2, r6, #0
    8804:	469c      	mov	ip, r3
    8806:	4467      	add	r7, ip
    8808:	40be      	lsls	r6, r7
    880a:	465b      	mov	r3, fp
    880c:	40bb      	lsls	r3, r7
    880e:	1c37      	adds	r7, r6, #0
    8810:	40ea      	lsrs	r2, r5
    8812:	1e7e      	subs	r6, r7, #1
    8814:	41b7      	sbcs	r7, r6
    8816:	4313      	orrs	r3, r2
    8818:	433b      	orrs	r3, r7
    881a:	1c1e      	adds	r6, r3, #0
    881c:	465b      	mov	r3, fp
    881e:	40eb      	lsrs	r3, r5
    8820:	1c1d      	adds	r5, r3, #0
    8822:	0773      	lsls	r3, r6, #29
    8824:	d009      	beq.n	883a <__aeabi_dmul+0x49e>
    8826:	230f      	movs	r3, #15
    8828:	4033      	ands	r3, r6
    882a:	2b04      	cmp	r3, #4
    882c:	d005      	beq.n	883a <__aeabi_dmul+0x49e>
    882e:	1d33      	adds	r3, r6, #4
    8830:	42b3      	cmp	r3, r6
    8832:	41b6      	sbcs	r6, r6
    8834:	4276      	negs	r6, r6
    8836:	19ad      	adds	r5, r5, r6
    8838:	1c1e      	adds	r6, r3, #0
    883a:	022b      	lsls	r3, r5, #8
    883c:	d520      	bpl.n	8880 <__aeabi_dmul+0x4e4>
    883e:	2401      	movs	r4, #1
    8840:	9b02      	ldr	r3, [sp, #8]
    8842:	2500      	movs	r5, #0
    8844:	401c      	ands	r4, r3
    8846:	2600      	movs	r6, #0
    8848:	2301      	movs	r3, #1
    884a:	e60b      	b.n	8464 <__aeabi_dmul+0xc8>
    884c:	465a      	mov	r2, fp
    884e:	4b1e      	ldr	r3, [pc, #120]	; (88c8 <__aeabi_dmul+0x52c>)
    8850:	1bdb      	subs	r3, r3, r7
    8852:	40da      	lsrs	r2, r3
    8854:	1c13      	adds	r3, r2, #0
    8856:	2d20      	cmp	r5, #32
    8858:	d01c      	beq.n	8894 <__aeabi_dmul+0x4f8>
    885a:	4a1c      	ldr	r2, [pc, #112]	; (88cc <__aeabi_dmul+0x530>)
    885c:	4694      	mov	ip, r2
    885e:	465a      	mov	r2, fp
    8860:	4467      	add	r7, ip
    8862:	40ba      	lsls	r2, r7
    8864:	1c17      	adds	r7, r2, #0
    8866:	433e      	orrs	r6, r7
    8868:	1e72      	subs	r2, r6, #1
    886a:	4196      	sbcs	r6, r2
    886c:	431e      	orrs	r6, r3
    886e:	2307      	movs	r3, #7
    8870:	2500      	movs	r5, #0
    8872:	4033      	ands	r3, r6
    8874:	d007      	beq.n	8886 <__aeabi_dmul+0x4ea>
    8876:	230f      	movs	r3, #15
    8878:	2500      	movs	r5, #0
    887a:	4033      	ands	r3, r6
    887c:	2b04      	cmp	r3, #4
    887e:	d1d6      	bne.n	882e <__aeabi_dmul+0x492>
    8880:	076b      	lsls	r3, r5, #29
    8882:	026d      	lsls	r5, r5, #9
    8884:	0b2d      	lsrs	r5, r5, #12
    8886:	2401      	movs	r4, #1
    8888:	08f6      	lsrs	r6, r6, #3
    888a:	431e      	orrs	r6, r3
    888c:	9b02      	ldr	r3, [sp, #8]
    888e:	401c      	ands	r4, r3
    8890:	2300      	movs	r3, #0
    8892:	e5e7      	b.n	8464 <__aeabi_dmul+0xc8>
    8894:	2700      	movs	r7, #0
    8896:	e7e6      	b.n	8866 <__aeabi_dmul+0x4ca>
    8898:	2580      	movs	r5, #128	; 0x80
    889a:	465b      	mov	r3, fp
    889c:	2401      	movs	r4, #1
    889e:	032d      	lsls	r5, r5, #12
    88a0:	431d      	orrs	r5, r3
    88a2:	9b01      	ldr	r3, [sp, #4]
    88a4:	032d      	lsls	r5, r5, #12
    88a6:	4023      	ands	r3, r4
    88a8:	1c1c      	adds	r4, r3, #0
    88aa:	0b2d      	lsrs	r5, r5, #12
    88ac:	4b03      	ldr	r3, [pc, #12]	; (88bc <__aeabi_dmul+0x520>)
    88ae:	e5d9      	b.n	8464 <__aeabi_dmul+0xc8>
    88b0:	000003ff 	.word	0x000003ff
    88b4:	feffffff 	.word	0xfeffffff
    88b8:	000007fe 	.word	0x000007fe
    88bc:	000007ff 	.word	0x000007ff
    88c0:	fffffc02 	.word	0xfffffc02
    88c4:	0000041e 	.word	0x0000041e
    88c8:	fffffbe2 	.word	0xfffffbe2
    88cc:	0000043e 	.word	0x0000043e

000088d0 <__aeabi_d2iz>:
    88d0:	030b      	lsls	r3, r1, #12
    88d2:	b530      	push	{r4, r5, lr}
    88d4:	4c13      	ldr	r4, [pc, #76]	; (8924 <__aeabi_d2iz+0x54>)
    88d6:	0b1a      	lsrs	r2, r3, #12
    88d8:	004b      	lsls	r3, r1, #1
    88da:	1c05      	adds	r5, r0, #0
    88dc:	0d5b      	lsrs	r3, r3, #21
    88de:	0fc9      	lsrs	r1, r1, #31
    88e0:	2000      	movs	r0, #0
    88e2:	42a3      	cmp	r3, r4
    88e4:	dd10      	ble.n	8908 <__aeabi_d2iz+0x38>
    88e6:	4810      	ldr	r0, [pc, #64]	; (8928 <__aeabi_d2iz+0x58>)
    88e8:	4283      	cmp	r3, r0
    88ea:	dc0e      	bgt.n	890a <__aeabi_d2iz+0x3a>
    88ec:	2080      	movs	r0, #128	; 0x80
    88ee:	4c0f      	ldr	r4, [pc, #60]	; (892c <__aeabi_d2iz+0x5c>)
    88f0:	0340      	lsls	r0, r0, #13
    88f2:	4302      	orrs	r2, r0
    88f4:	1ae4      	subs	r4, r4, r3
    88f6:	2c1f      	cmp	r4, #31
    88f8:	dd0a      	ble.n	8910 <__aeabi_d2iz+0x40>
    88fa:	480d      	ldr	r0, [pc, #52]	; (8930 <__aeabi_d2iz+0x60>)
    88fc:	1ac3      	subs	r3, r0, r3
    88fe:	40da      	lsrs	r2, r3
    8900:	1c13      	adds	r3, r2, #0
    8902:	4248      	negs	r0, r1
    8904:	4043      	eors	r3, r0
    8906:	1858      	adds	r0, r3, r1
    8908:	bd30      	pop	{r4, r5, pc}
    890a:	4b0a      	ldr	r3, [pc, #40]	; (8934 <__aeabi_d2iz+0x64>)
    890c:	18c8      	adds	r0, r1, r3
    890e:	e7fb      	b.n	8908 <__aeabi_d2iz+0x38>
    8910:	1c28      	adds	r0, r5, #0
    8912:	40e0      	lsrs	r0, r4
    8914:	4c08      	ldr	r4, [pc, #32]	; (8938 <__aeabi_d2iz+0x68>)
    8916:	46a4      	mov	ip, r4
    8918:	4463      	add	r3, ip
    891a:	409a      	lsls	r2, r3
    891c:	1c13      	adds	r3, r2, #0
    891e:	4303      	orrs	r3, r0
    8920:	e7ef      	b.n	8902 <__aeabi_d2iz+0x32>
    8922:	46c0      	nop			; (mov r8, r8)
    8924:	000003fe 	.word	0x000003fe
    8928:	0000041d 	.word	0x0000041d
    892c:	00000433 	.word	0x00000433
    8930:	00000413 	.word	0x00000413
    8934:	7fffffff 	.word	0x7fffffff
    8938:	fffffbed 	.word	0xfffffbed

0000893c <__aeabi_i2d>:
    893c:	b538      	push	{r3, r4, r5, lr}
    893e:	1e04      	subs	r4, r0, #0
    8940:	d016      	beq.n	8970 <__aeabi_i2d+0x34>
    8942:	0fc5      	lsrs	r5, r0, #31
    8944:	d000      	beq.n	8948 <__aeabi_i2d+0xc>
    8946:	4244      	negs	r4, r0
    8948:	1c20      	adds	r0, r4, #0
    894a:	f000 f833 	bl	89b4 <__clzsi2>
    894e:	4b17      	ldr	r3, [pc, #92]	; (89ac <__aeabi_i2d+0x70>)
    8950:	1a1b      	subs	r3, r3, r0
    8952:	280a      	cmp	r0, #10
    8954:	dc21      	bgt.n	899a <__aeabi_i2d+0x5e>
    8956:	1c02      	adds	r2, r0, #0
    8958:	1c21      	adds	r1, r4, #0
    895a:	3215      	adds	r2, #21
    895c:	4091      	lsls	r1, r2
    895e:	1c0a      	adds	r2, r1, #0
    8960:	210b      	movs	r1, #11
    8962:	1a08      	subs	r0, r1, r0
    8964:	40c4      	lsrs	r4, r0
    8966:	055b      	lsls	r3, r3, #21
    8968:	0324      	lsls	r4, r4, #12
    896a:	0b24      	lsrs	r4, r4, #12
    896c:	0d5b      	lsrs	r3, r3, #21
    896e:	e003      	b.n	8978 <__aeabi_i2d+0x3c>
    8970:	2500      	movs	r5, #0
    8972:	2300      	movs	r3, #0
    8974:	2400      	movs	r4, #0
    8976:	2200      	movs	r2, #0
    8978:	2100      	movs	r1, #0
    897a:	1c10      	adds	r0, r2, #0
    897c:	0324      	lsls	r4, r4, #12
    897e:	0d0a      	lsrs	r2, r1, #20
    8980:	0512      	lsls	r2, r2, #20
    8982:	0b24      	lsrs	r4, r4, #12
    8984:	4314      	orrs	r4, r2
    8986:	4a0a      	ldr	r2, [pc, #40]	; (89b0 <__aeabi_i2d+0x74>)
    8988:	051b      	lsls	r3, r3, #20
    898a:	4014      	ands	r4, r2
    898c:	431c      	orrs	r4, r3
    898e:	0064      	lsls	r4, r4, #1
    8990:	07ed      	lsls	r5, r5, #31
    8992:	0864      	lsrs	r4, r4, #1
    8994:	432c      	orrs	r4, r5
    8996:	1c21      	adds	r1, r4, #0
    8998:	bd38      	pop	{r3, r4, r5, pc}
    899a:	380b      	subs	r0, #11
    899c:	4084      	lsls	r4, r0
    899e:	055b      	lsls	r3, r3, #21
    89a0:	0324      	lsls	r4, r4, #12
    89a2:	0b24      	lsrs	r4, r4, #12
    89a4:	0d5b      	lsrs	r3, r3, #21
    89a6:	2200      	movs	r2, #0
    89a8:	e7e6      	b.n	8978 <__aeabi_i2d+0x3c>
    89aa:	46c0      	nop			; (mov r8, r8)
    89ac:	0000041e 	.word	0x0000041e
    89b0:	800fffff 	.word	0x800fffff

000089b4 <__clzsi2>:
    89b4:	211c      	movs	r1, #28
    89b6:	2301      	movs	r3, #1
    89b8:	041b      	lsls	r3, r3, #16
    89ba:	4298      	cmp	r0, r3
    89bc:	d301      	bcc.n	89c2 <__clzsi2+0xe>
    89be:	0c00      	lsrs	r0, r0, #16
    89c0:	3910      	subs	r1, #16
    89c2:	0a1b      	lsrs	r3, r3, #8
    89c4:	4298      	cmp	r0, r3
    89c6:	d301      	bcc.n	89cc <__clzsi2+0x18>
    89c8:	0a00      	lsrs	r0, r0, #8
    89ca:	3908      	subs	r1, #8
    89cc:	091b      	lsrs	r3, r3, #4
    89ce:	4298      	cmp	r0, r3
    89d0:	d301      	bcc.n	89d6 <__clzsi2+0x22>
    89d2:	0900      	lsrs	r0, r0, #4
    89d4:	3904      	subs	r1, #4
    89d6:	a202      	add	r2, pc, #8	; (adr r2, 89e0 <__clzsi2+0x2c>)
    89d8:	5c10      	ldrb	r0, [r2, r0]
    89da:	1840      	adds	r0, r0, r1
    89dc:	4770      	bx	lr
    89de:	46c0      	nop			; (mov r8, r8)
    89e0:	02020304 	.word	0x02020304
    89e4:	01010101 	.word	0x01010101
	...

000089f0 <__libc_init_array>:
    89f0:	4b0e      	ldr	r3, [pc, #56]	; (8a2c <__libc_init_array+0x3c>)
    89f2:	b570      	push	{r4, r5, r6, lr}
    89f4:	2500      	movs	r5, #0
    89f6:	1c1e      	adds	r6, r3, #0
    89f8:	4c0d      	ldr	r4, [pc, #52]	; (8a30 <__libc_init_array+0x40>)
    89fa:	1ae4      	subs	r4, r4, r3
    89fc:	10a4      	asrs	r4, r4, #2
    89fe:	42a5      	cmp	r5, r4
    8a00:	d004      	beq.n	8a0c <__libc_init_array+0x1c>
    8a02:	00ab      	lsls	r3, r5, #2
    8a04:	58f3      	ldr	r3, [r6, r3]
    8a06:	4798      	blx	r3
    8a08:	3501      	adds	r5, #1
    8a0a:	e7f8      	b.n	89fe <__libc_init_array+0xe>
    8a0c:	f003 fe22 	bl	c654 <_init>
    8a10:	4b08      	ldr	r3, [pc, #32]	; (8a34 <__libc_init_array+0x44>)
    8a12:	2500      	movs	r5, #0
    8a14:	1c1e      	adds	r6, r3, #0
    8a16:	4c08      	ldr	r4, [pc, #32]	; (8a38 <__libc_init_array+0x48>)
    8a18:	1ae4      	subs	r4, r4, r3
    8a1a:	10a4      	asrs	r4, r4, #2
    8a1c:	42a5      	cmp	r5, r4
    8a1e:	d004      	beq.n	8a2a <__libc_init_array+0x3a>
    8a20:	00ab      	lsls	r3, r5, #2
    8a22:	58f3      	ldr	r3, [r6, r3]
    8a24:	4798      	blx	r3
    8a26:	3501      	adds	r5, #1
    8a28:	e7f8      	b.n	8a1c <__libc_init_array+0x2c>
    8a2a:	bd70      	pop	{r4, r5, r6, pc}
    8a2c:	0000c660 	.word	0x0000c660
    8a30:	0000c660 	.word	0x0000c660
    8a34:	0000c660 	.word	0x0000c660
    8a38:	0000c664 	.word	0x0000c664

00008a3c <malloc>:
    8a3c:	b508      	push	{r3, lr}
    8a3e:	4b03      	ldr	r3, [pc, #12]	; (8a4c <malloc+0x10>)
    8a40:	1c01      	adds	r1, r0, #0
    8a42:	6818      	ldr	r0, [r3, #0]
    8a44:	f000 f87a 	bl	8b3c <_malloc_r>
    8a48:	bd08      	pop	{r3, pc}
    8a4a:	46c0      	nop			; (mov r8, r8)
    8a4c:	20000140 	.word	0x20000140

00008a50 <free>:
    8a50:	b508      	push	{r3, lr}
    8a52:	4b03      	ldr	r3, [pc, #12]	; (8a60 <free+0x10>)
    8a54:	1c01      	adds	r1, r0, #0
    8a56:	6818      	ldr	r0, [r3, #0]
    8a58:	f000 f82a 	bl	8ab0 <_free_r>
    8a5c:	bd08      	pop	{r3, pc}
    8a5e:	46c0      	nop			; (mov r8, r8)
    8a60:	20000140 	.word	0x20000140

00008a64 <memcpy>:
    8a64:	2300      	movs	r3, #0
    8a66:	b510      	push	{r4, lr}
    8a68:	4293      	cmp	r3, r2
    8a6a:	d003      	beq.n	8a74 <memcpy+0x10>
    8a6c:	5ccc      	ldrb	r4, [r1, r3]
    8a6e:	54c4      	strb	r4, [r0, r3]
    8a70:	3301      	adds	r3, #1
    8a72:	e7f9      	b.n	8a68 <memcpy+0x4>
    8a74:	bd10      	pop	{r4, pc}

00008a76 <memmove>:
    8a76:	b510      	push	{r4, lr}
    8a78:	4281      	cmp	r1, r0
    8a7a:	d208      	bcs.n	8a8e <memmove+0x18>
    8a7c:	188b      	adds	r3, r1, r2
    8a7e:	4298      	cmp	r0, r3
    8a80:	d205      	bcs.n	8a8e <memmove+0x18>
    8a82:	1a9b      	subs	r3, r3, r2
    8a84:	3a01      	subs	r2, #1
    8a86:	d309      	bcc.n	8a9c <memmove+0x26>
    8a88:	5c99      	ldrb	r1, [r3, r2]
    8a8a:	5481      	strb	r1, [r0, r2]
    8a8c:	e7fa      	b.n	8a84 <memmove+0xe>
    8a8e:	2300      	movs	r3, #0
    8a90:	4293      	cmp	r3, r2
    8a92:	d003      	beq.n	8a9c <memmove+0x26>
    8a94:	5ccc      	ldrb	r4, [r1, r3]
    8a96:	54c4      	strb	r4, [r0, r3]
    8a98:	3301      	adds	r3, #1
    8a9a:	e7f9      	b.n	8a90 <memmove+0x1a>
    8a9c:	bd10      	pop	{r4, pc}

00008a9e <memset>:
    8a9e:	1c03      	adds	r3, r0, #0
    8aa0:	1882      	adds	r2, r0, r2
    8aa2:	4293      	cmp	r3, r2
    8aa4:	d002      	beq.n	8aac <memset+0xe>
    8aa6:	7019      	strb	r1, [r3, #0]
    8aa8:	3301      	adds	r3, #1
    8aaa:	e7fa      	b.n	8aa2 <memset+0x4>
    8aac:	4770      	bx	lr
	...

00008ab0 <_free_r>:
    8ab0:	b530      	push	{r4, r5, lr}
    8ab2:	2900      	cmp	r1, #0
    8ab4:	d03e      	beq.n	8b34 <_free_r+0x84>
    8ab6:	3904      	subs	r1, #4
    8ab8:	680b      	ldr	r3, [r1, #0]
    8aba:	2b00      	cmp	r3, #0
    8abc:	da00      	bge.n	8ac0 <_free_r+0x10>
    8abe:	18c9      	adds	r1, r1, r3
    8ac0:	4a1d      	ldr	r2, [pc, #116]	; (8b38 <_free_r+0x88>)
    8ac2:	6813      	ldr	r3, [r2, #0]
    8ac4:	1c14      	adds	r4, r2, #0
    8ac6:	2b00      	cmp	r3, #0
    8ac8:	d102      	bne.n	8ad0 <_free_r+0x20>
    8aca:	604b      	str	r3, [r1, #4]
    8acc:	6011      	str	r1, [r2, #0]
    8ace:	e031      	b.n	8b34 <_free_r+0x84>
    8ad0:	4299      	cmp	r1, r3
    8ad2:	d20d      	bcs.n	8af0 <_free_r+0x40>
    8ad4:	6808      	ldr	r0, [r1, #0]
    8ad6:	180a      	adds	r2, r1, r0
    8ad8:	429a      	cmp	r2, r3
    8ada:	d103      	bne.n	8ae4 <_free_r+0x34>
    8adc:	6813      	ldr	r3, [r2, #0]
    8ade:	18c3      	adds	r3, r0, r3
    8ae0:	600b      	str	r3, [r1, #0]
    8ae2:	6853      	ldr	r3, [r2, #4]
    8ae4:	604b      	str	r3, [r1, #4]
    8ae6:	6021      	str	r1, [r4, #0]
    8ae8:	e024      	b.n	8b34 <_free_r+0x84>
    8aea:	428a      	cmp	r2, r1
    8aec:	d803      	bhi.n	8af6 <_free_r+0x46>
    8aee:	1c13      	adds	r3, r2, #0
    8af0:	685a      	ldr	r2, [r3, #4]
    8af2:	2a00      	cmp	r2, #0
    8af4:	d1f9      	bne.n	8aea <_free_r+0x3a>
    8af6:	681d      	ldr	r5, [r3, #0]
    8af8:	195c      	adds	r4, r3, r5
    8afa:	428c      	cmp	r4, r1
    8afc:	d10b      	bne.n	8b16 <_free_r+0x66>
    8afe:	6809      	ldr	r1, [r1, #0]
    8b00:	1869      	adds	r1, r5, r1
    8b02:	1858      	adds	r0, r3, r1
    8b04:	6019      	str	r1, [r3, #0]
    8b06:	4290      	cmp	r0, r2
    8b08:	d114      	bne.n	8b34 <_free_r+0x84>
    8b0a:	6810      	ldr	r0, [r2, #0]
    8b0c:	6852      	ldr	r2, [r2, #4]
    8b0e:	1809      	adds	r1, r1, r0
    8b10:	6019      	str	r1, [r3, #0]
    8b12:	605a      	str	r2, [r3, #4]
    8b14:	e00e      	b.n	8b34 <_free_r+0x84>
    8b16:	428c      	cmp	r4, r1
    8b18:	d902      	bls.n	8b20 <_free_r+0x70>
    8b1a:	230c      	movs	r3, #12
    8b1c:	6003      	str	r3, [r0, #0]
    8b1e:	e009      	b.n	8b34 <_free_r+0x84>
    8b20:	6808      	ldr	r0, [r1, #0]
    8b22:	180c      	adds	r4, r1, r0
    8b24:	4294      	cmp	r4, r2
    8b26:	d103      	bne.n	8b30 <_free_r+0x80>
    8b28:	6814      	ldr	r4, [r2, #0]
    8b2a:	6852      	ldr	r2, [r2, #4]
    8b2c:	1900      	adds	r0, r0, r4
    8b2e:	6008      	str	r0, [r1, #0]
    8b30:	604a      	str	r2, [r1, #4]
    8b32:	6059      	str	r1, [r3, #4]
    8b34:	bd30      	pop	{r4, r5, pc}
    8b36:	46c0      	nop			; (mov r8, r8)
    8b38:	20000368 	.word	0x20000368

00008b3c <_malloc_r>:
    8b3c:	2303      	movs	r3, #3
    8b3e:	b570      	push	{r4, r5, r6, lr}
    8b40:	1ccc      	adds	r4, r1, #3
    8b42:	439c      	bics	r4, r3
    8b44:	3408      	adds	r4, #8
    8b46:	1c05      	adds	r5, r0, #0
    8b48:	2c0c      	cmp	r4, #12
    8b4a:	d201      	bcs.n	8b50 <_malloc_r+0x14>
    8b4c:	240c      	movs	r4, #12
    8b4e:	e005      	b.n	8b5c <_malloc_r+0x20>
    8b50:	2c00      	cmp	r4, #0
    8b52:	da03      	bge.n	8b5c <_malloc_r+0x20>
    8b54:	230c      	movs	r3, #12
    8b56:	2000      	movs	r0, #0
    8b58:	602b      	str	r3, [r5, #0]
    8b5a:	e042      	b.n	8be2 <_malloc_r+0xa6>
    8b5c:	428c      	cmp	r4, r1
    8b5e:	d3f9      	bcc.n	8b54 <_malloc_r+0x18>
    8b60:	4a20      	ldr	r2, [pc, #128]	; (8be4 <_malloc_r+0xa8>)
    8b62:	6813      	ldr	r3, [r2, #0]
    8b64:	1c10      	adds	r0, r2, #0
    8b66:	1c19      	adds	r1, r3, #0
    8b68:	2900      	cmp	r1, #0
    8b6a:	d013      	beq.n	8b94 <_malloc_r+0x58>
    8b6c:	680a      	ldr	r2, [r1, #0]
    8b6e:	1b12      	subs	r2, r2, r4
    8b70:	d40d      	bmi.n	8b8e <_malloc_r+0x52>
    8b72:	2a0b      	cmp	r2, #11
    8b74:	d902      	bls.n	8b7c <_malloc_r+0x40>
    8b76:	600a      	str	r2, [r1, #0]
    8b78:	188b      	adds	r3, r1, r2
    8b7a:	e01f      	b.n	8bbc <_malloc_r+0x80>
    8b7c:	428b      	cmp	r3, r1
    8b7e:	d102      	bne.n	8b86 <_malloc_r+0x4a>
    8b80:	685a      	ldr	r2, [r3, #4]
    8b82:	6002      	str	r2, [r0, #0]
    8b84:	e01b      	b.n	8bbe <_malloc_r+0x82>
    8b86:	684a      	ldr	r2, [r1, #4]
    8b88:	605a      	str	r2, [r3, #4]
    8b8a:	1c0b      	adds	r3, r1, #0
    8b8c:	e017      	b.n	8bbe <_malloc_r+0x82>
    8b8e:	1c0b      	adds	r3, r1, #0
    8b90:	6849      	ldr	r1, [r1, #4]
    8b92:	e7e9      	b.n	8b68 <_malloc_r+0x2c>
    8b94:	4e14      	ldr	r6, [pc, #80]	; (8be8 <_malloc_r+0xac>)
    8b96:	6833      	ldr	r3, [r6, #0]
    8b98:	2b00      	cmp	r3, #0
    8b9a:	d103      	bne.n	8ba4 <_malloc_r+0x68>
    8b9c:	1c28      	adds	r0, r5, #0
    8b9e:	f000 f8bf 	bl	8d20 <_sbrk_r>
    8ba2:	6030      	str	r0, [r6, #0]
    8ba4:	1c28      	adds	r0, r5, #0
    8ba6:	1c21      	adds	r1, r4, #0
    8ba8:	f000 f8ba 	bl	8d20 <_sbrk_r>
    8bac:	1c03      	adds	r3, r0, #0
    8bae:	1c42      	adds	r2, r0, #1
    8bb0:	d0d0      	beq.n	8b54 <_malloc_r+0x18>
    8bb2:	2203      	movs	r2, #3
    8bb4:	1cc6      	adds	r6, r0, #3
    8bb6:	4396      	bics	r6, r2
    8bb8:	4286      	cmp	r6, r0
    8bba:	d10a      	bne.n	8bd2 <_malloc_r+0x96>
    8bbc:	601c      	str	r4, [r3, #0]
    8bbe:	1c18      	adds	r0, r3, #0
    8bc0:	2107      	movs	r1, #7
    8bc2:	300b      	adds	r0, #11
    8bc4:	1d1a      	adds	r2, r3, #4
    8bc6:	4388      	bics	r0, r1
    8bc8:	1a82      	subs	r2, r0, r2
    8bca:	d00a      	beq.n	8be2 <_malloc_r+0xa6>
    8bcc:	4251      	negs	r1, r2
    8bce:	5099      	str	r1, [r3, r2]
    8bd0:	e007      	b.n	8be2 <_malloc_r+0xa6>
    8bd2:	1a31      	subs	r1, r6, r0
    8bd4:	1c28      	adds	r0, r5, #0
    8bd6:	f000 f8a3 	bl	8d20 <_sbrk_r>
    8bda:	1c43      	adds	r3, r0, #1
    8bdc:	d0ba      	beq.n	8b54 <_malloc_r+0x18>
    8bde:	1c33      	adds	r3, r6, #0
    8be0:	e7ec      	b.n	8bbc <_malloc_r+0x80>
    8be2:	bd70      	pop	{r4, r5, r6, pc}
    8be4:	20000368 	.word	0x20000368
    8be8:	20000364 	.word	0x20000364

00008bec <iprintf>:
    8bec:	b40f      	push	{r0, r1, r2, r3}
    8bee:	4b0b      	ldr	r3, [pc, #44]	; (8c1c <iprintf+0x30>)
    8bf0:	b513      	push	{r0, r1, r4, lr}
    8bf2:	681c      	ldr	r4, [r3, #0]
    8bf4:	2c00      	cmp	r4, #0
    8bf6:	d005      	beq.n	8c04 <iprintf+0x18>
    8bf8:	69a3      	ldr	r3, [r4, #24]
    8bfa:	2b00      	cmp	r3, #0
    8bfc:	d102      	bne.n	8c04 <iprintf+0x18>
    8bfe:	1c20      	adds	r0, r4, #0
    8c00:	f000 fd0e 	bl	9620 <__sinit>
    8c04:	ab05      	add	r3, sp, #20
    8c06:	1c20      	adds	r0, r4, #0
    8c08:	68a1      	ldr	r1, [r4, #8]
    8c0a:	9a04      	ldr	r2, [sp, #16]
    8c0c:	9301      	str	r3, [sp, #4]
    8c0e:	f000 ff6f 	bl	9af0 <_vfiprintf_r>
    8c12:	bc16      	pop	{r1, r2, r4}
    8c14:	bc08      	pop	{r3}
    8c16:	b004      	add	sp, #16
    8c18:	4718      	bx	r3
    8c1a:	46c0      	nop			; (mov r8, r8)
    8c1c:	20000140 	.word	0x20000140

00008c20 <putchar>:
    8c20:	b538      	push	{r3, r4, r5, lr}
    8c22:	4b08      	ldr	r3, [pc, #32]	; (8c44 <putchar+0x24>)
    8c24:	1c05      	adds	r5, r0, #0
    8c26:	681c      	ldr	r4, [r3, #0]
    8c28:	2c00      	cmp	r4, #0
    8c2a:	d005      	beq.n	8c38 <putchar+0x18>
    8c2c:	69a3      	ldr	r3, [r4, #24]
    8c2e:	2b00      	cmp	r3, #0
    8c30:	d102      	bne.n	8c38 <putchar+0x18>
    8c32:	1c20      	adds	r0, r4, #0
    8c34:	f000 fcf4 	bl	9620 <__sinit>
    8c38:	1c29      	adds	r1, r5, #0
    8c3a:	1c20      	adds	r0, r4, #0
    8c3c:	68a2      	ldr	r2, [r4, #8]
    8c3e:	f001 f9ed 	bl	a01c <_putc_r>
    8c42:	bd38      	pop	{r3, r4, r5, pc}
    8c44:	20000140 	.word	0x20000140

00008c48 <_puts_r>:
    8c48:	b570      	push	{r4, r5, r6, lr}
    8c4a:	1c05      	adds	r5, r0, #0
    8c4c:	1c0e      	adds	r6, r1, #0
    8c4e:	2800      	cmp	r0, #0
    8c50:	d004      	beq.n	8c5c <_puts_r+0x14>
    8c52:	6983      	ldr	r3, [r0, #24]
    8c54:	2b00      	cmp	r3, #0
    8c56:	d101      	bne.n	8c5c <_puts_r+0x14>
    8c58:	f000 fce2 	bl	9620 <__sinit>
    8c5c:	68ac      	ldr	r4, [r5, #8]
    8c5e:	89a3      	ldrh	r3, [r4, #12]
    8c60:	071b      	lsls	r3, r3, #28
    8c62:	d502      	bpl.n	8c6a <_puts_r+0x22>
    8c64:	6923      	ldr	r3, [r4, #16]
    8c66:	2b00      	cmp	r3, #0
    8c68:	d119      	bne.n	8c9e <_puts_r+0x56>
    8c6a:	1c28      	adds	r0, r5, #0
    8c6c:	1c21      	adds	r1, r4, #0
    8c6e:	f000 fb6b 	bl	9348 <__swsetup_r>
    8c72:	2800      	cmp	r0, #0
    8c74:	d013      	beq.n	8c9e <_puts_r+0x56>
    8c76:	2001      	movs	r0, #1
    8c78:	4240      	negs	r0, r0
    8c7a:	e045      	b.n	8d08 <_puts_r+0xc0>
    8c7c:	7831      	ldrb	r1, [r6, #0]
    8c7e:	2b00      	cmp	r3, #0
    8c80:	da1b      	bge.n	8cba <_puts_r+0x72>
    8c82:	69a2      	ldr	r2, [r4, #24]
    8c84:	4293      	cmp	r3, r2
    8c86:	da11      	bge.n	8cac <_puts_r+0x64>
    8c88:	1c22      	adds	r2, r4, #0
    8c8a:	1c28      	adds	r0, r5, #0
    8c8c:	f000 fb04 	bl	9298 <__swbuf_r>
    8c90:	3001      	adds	r0, #1
    8c92:	4242      	negs	r2, r0
    8c94:	4142      	adcs	r2, r0
    8c96:	b2d0      	uxtb	r0, r2
    8c98:	2800      	cmp	r0, #0
    8c9a:	d1ec      	bne.n	8c76 <_puts_r+0x2e>
    8c9c:	3601      	adds	r6, #1
    8c9e:	68a3      	ldr	r3, [r4, #8]
    8ca0:	7832      	ldrb	r2, [r6, #0]
    8ca2:	3b01      	subs	r3, #1
    8ca4:	60a3      	str	r3, [r4, #8]
    8ca6:	2a00      	cmp	r2, #0
    8ca8:	d1e8      	bne.n	8c7c <_puts_r+0x34>
    8caa:	e00c      	b.n	8cc6 <_puts_r+0x7e>
    8cac:	6823      	ldr	r3, [r4, #0]
    8cae:	7019      	strb	r1, [r3, #0]
    8cb0:	6823      	ldr	r3, [r4, #0]
    8cb2:	7819      	ldrb	r1, [r3, #0]
    8cb4:	290a      	cmp	r1, #10
    8cb6:	d103      	bne.n	8cc0 <_puts_r+0x78>
    8cb8:	e7e6      	b.n	8c88 <_puts_r+0x40>
    8cba:	6823      	ldr	r3, [r4, #0]
    8cbc:	7019      	strb	r1, [r3, #0]
    8cbe:	6823      	ldr	r3, [r4, #0]
    8cc0:	3301      	adds	r3, #1
    8cc2:	6023      	str	r3, [r4, #0]
    8cc4:	e7ea      	b.n	8c9c <_puts_r+0x54>
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	da17      	bge.n	8cfa <_puts_r+0xb2>
    8cca:	69a2      	ldr	r2, [r4, #24]
    8ccc:	4293      	cmp	r3, r2
    8cce:	db08      	blt.n	8ce2 <_puts_r+0x9a>
    8cd0:	230a      	movs	r3, #10
    8cd2:	6822      	ldr	r2, [r4, #0]
    8cd4:	7013      	strb	r3, [r2, #0]
    8cd6:	6823      	ldr	r3, [r4, #0]
    8cd8:	7819      	ldrb	r1, [r3, #0]
    8cda:	290a      	cmp	r1, #10
    8cdc:	d111      	bne.n	8d02 <_puts_r+0xba>
    8cde:	1c28      	adds	r0, r5, #0
    8ce0:	e001      	b.n	8ce6 <_puts_r+0x9e>
    8ce2:	1c28      	adds	r0, r5, #0
    8ce4:	210a      	movs	r1, #10
    8ce6:	1c22      	adds	r2, r4, #0
    8ce8:	f000 fad6 	bl	9298 <__swbuf_r>
    8cec:	3001      	adds	r0, #1
    8cee:	4242      	negs	r2, r0
    8cf0:	4142      	adcs	r2, r0
    8cf2:	b2d0      	uxtb	r0, r2
    8cf4:	2800      	cmp	r0, #0
    8cf6:	d006      	beq.n	8d06 <_puts_r+0xbe>
    8cf8:	e7bd      	b.n	8c76 <_puts_r+0x2e>
    8cfa:	230a      	movs	r3, #10
    8cfc:	6822      	ldr	r2, [r4, #0]
    8cfe:	7013      	strb	r3, [r2, #0]
    8d00:	6823      	ldr	r3, [r4, #0]
    8d02:	3301      	adds	r3, #1
    8d04:	6023      	str	r3, [r4, #0]
    8d06:	200a      	movs	r0, #10
    8d08:	bd70      	pop	{r4, r5, r6, pc}
	...

00008d0c <puts>:
    8d0c:	b508      	push	{r3, lr}
    8d0e:	4b03      	ldr	r3, [pc, #12]	; (8d1c <puts+0x10>)
    8d10:	1c01      	adds	r1, r0, #0
    8d12:	6818      	ldr	r0, [r3, #0]
    8d14:	f7ff ff98 	bl	8c48 <_puts_r>
    8d18:	bd08      	pop	{r3, pc}
    8d1a:	46c0      	nop			; (mov r8, r8)
    8d1c:	20000140 	.word	0x20000140

00008d20 <_sbrk_r>:
    8d20:	b538      	push	{r3, r4, r5, lr}
    8d22:	2300      	movs	r3, #0
    8d24:	4c06      	ldr	r4, [pc, #24]	; (8d40 <_sbrk_r+0x20>)
    8d26:	1c05      	adds	r5, r0, #0
    8d28:	1c08      	adds	r0, r1, #0
    8d2a:	6023      	str	r3, [r4, #0]
    8d2c:	f7fc ff8e 	bl	5c4c <_sbrk>
    8d30:	1c43      	adds	r3, r0, #1
    8d32:	d103      	bne.n	8d3c <_sbrk_r+0x1c>
    8d34:	6823      	ldr	r3, [r4, #0]
    8d36:	2b00      	cmp	r3, #0
    8d38:	d000      	beq.n	8d3c <_sbrk_r+0x1c>
    8d3a:	602b      	str	r3, [r5, #0]
    8d3c:	bd38      	pop	{r3, r4, r5, pc}
    8d3e:	46c0      	nop			; (mov r8, r8)
    8d40:	20000768 	.word	0x20000768

00008d44 <setbuf>:
    8d44:	b508      	push	{r3, lr}
    8d46:	424a      	negs	r2, r1
    8d48:	414a      	adcs	r2, r1
    8d4a:	2380      	movs	r3, #128	; 0x80
    8d4c:	0052      	lsls	r2, r2, #1
    8d4e:	00db      	lsls	r3, r3, #3
    8d50:	f000 f802 	bl	8d58 <setvbuf>
    8d54:	bd08      	pop	{r3, pc}
	...

00008d58 <setvbuf>:
    8d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8d5a:	1c1e      	adds	r6, r3, #0
    8d5c:	4b3c      	ldr	r3, [pc, #240]	; (8e50 <setvbuf+0xf8>)
    8d5e:	1c04      	adds	r4, r0, #0
    8d60:	681d      	ldr	r5, [r3, #0]
    8d62:	1c0f      	adds	r7, r1, #0
    8d64:	9201      	str	r2, [sp, #4]
    8d66:	2d00      	cmp	r5, #0
    8d68:	d005      	beq.n	8d76 <setvbuf+0x1e>
    8d6a:	69ab      	ldr	r3, [r5, #24]
    8d6c:	2b00      	cmp	r3, #0
    8d6e:	d102      	bne.n	8d76 <setvbuf+0x1e>
    8d70:	1c28      	adds	r0, r5, #0
    8d72:	f000 fc55 	bl	9620 <__sinit>
    8d76:	4b37      	ldr	r3, [pc, #220]	; (8e54 <setvbuf+0xfc>)
    8d78:	429c      	cmp	r4, r3
    8d7a:	d101      	bne.n	8d80 <setvbuf+0x28>
    8d7c:	686c      	ldr	r4, [r5, #4]
    8d7e:	e008      	b.n	8d92 <setvbuf+0x3a>
    8d80:	4b35      	ldr	r3, [pc, #212]	; (8e58 <setvbuf+0x100>)
    8d82:	429c      	cmp	r4, r3
    8d84:	d101      	bne.n	8d8a <setvbuf+0x32>
    8d86:	68ac      	ldr	r4, [r5, #8]
    8d88:	e003      	b.n	8d92 <setvbuf+0x3a>
    8d8a:	4b34      	ldr	r3, [pc, #208]	; (8e5c <setvbuf+0x104>)
    8d8c:	429c      	cmp	r4, r3
    8d8e:	d100      	bne.n	8d92 <setvbuf+0x3a>
    8d90:	68ec      	ldr	r4, [r5, #12]
    8d92:	9b01      	ldr	r3, [sp, #4]
    8d94:	2b02      	cmp	r3, #2
    8d96:	d858      	bhi.n	8e4a <setvbuf+0xf2>
    8d98:	2e00      	cmp	r6, #0
    8d9a:	db56      	blt.n	8e4a <setvbuf+0xf2>
    8d9c:	1c28      	adds	r0, r5, #0
    8d9e:	1c21      	adds	r1, r4, #0
    8da0:	f000 fbd0 	bl	9544 <_fflush_r>
    8da4:	2300      	movs	r3, #0
    8da6:	6063      	str	r3, [r4, #4]
    8da8:	61a3      	str	r3, [r4, #24]
    8daa:	89a3      	ldrh	r3, [r4, #12]
    8dac:	061b      	lsls	r3, r3, #24
    8dae:	d503      	bpl.n	8db8 <setvbuf+0x60>
    8db0:	1c28      	adds	r0, r5, #0
    8db2:	6921      	ldr	r1, [r4, #16]
    8db4:	f7ff fe7c 	bl	8ab0 <_free_r>
    8db8:	2283      	movs	r2, #131	; 0x83
    8dba:	89a3      	ldrh	r3, [r4, #12]
    8dbc:	4393      	bics	r3, r2
    8dbe:	81a3      	strh	r3, [r4, #12]
    8dc0:	9b01      	ldr	r3, [sp, #4]
    8dc2:	2b02      	cmp	r3, #2
    8dc4:	d013      	beq.n	8dee <setvbuf+0x96>
    8dc6:	2f00      	cmp	r7, #0
    8dc8:	d125      	bne.n	8e16 <setvbuf+0xbe>
    8dca:	2e00      	cmp	r6, #0
    8dcc:	d101      	bne.n	8dd2 <setvbuf+0x7a>
    8dce:	2680      	movs	r6, #128	; 0x80
    8dd0:	00f6      	lsls	r6, r6, #3
    8dd2:	1c30      	adds	r0, r6, #0
    8dd4:	f7ff fe32 	bl	8a3c <malloc>
    8dd8:	1e07      	subs	r7, r0, #0
    8dda:	d118      	bne.n	8e0e <setvbuf+0xb6>
    8ddc:	2080      	movs	r0, #128	; 0x80
    8dde:	00c0      	lsls	r0, r0, #3
    8de0:	f7ff fe2c 	bl	8a3c <malloc>
    8de4:	1e07      	subs	r7, r0, #0
    8de6:	d110      	bne.n	8e0a <setvbuf+0xb2>
    8de8:	2001      	movs	r0, #1
    8dea:	4240      	negs	r0, r0
    8dec:	e000      	b.n	8df0 <setvbuf+0x98>
    8dee:	2000      	movs	r0, #0
    8df0:	2202      	movs	r2, #2
    8df2:	89a3      	ldrh	r3, [r4, #12]
    8df4:	4313      	orrs	r3, r2
    8df6:	81a3      	strh	r3, [r4, #12]
    8df8:	2300      	movs	r3, #0
    8dfa:	60a3      	str	r3, [r4, #8]
    8dfc:	1c23      	adds	r3, r4, #0
    8dfe:	3347      	adds	r3, #71	; 0x47
    8e00:	6023      	str	r3, [r4, #0]
    8e02:	6123      	str	r3, [r4, #16]
    8e04:	2301      	movs	r3, #1
    8e06:	6163      	str	r3, [r4, #20]
    8e08:	e021      	b.n	8e4e <setvbuf+0xf6>
    8e0a:	2680      	movs	r6, #128	; 0x80
    8e0c:	00f6      	lsls	r6, r6, #3
    8e0e:	2280      	movs	r2, #128	; 0x80
    8e10:	89a3      	ldrh	r3, [r4, #12]
    8e12:	4313      	orrs	r3, r2
    8e14:	81a3      	strh	r3, [r4, #12]
    8e16:	9b01      	ldr	r3, [sp, #4]
    8e18:	2b01      	cmp	r3, #1
    8e1a:	d105      	bne.n	8e28 <setvbuf+0xd0>
    8e1c:	89a3      	ldrh	r3, [r4, #12]
    8e1e:	9a01      	ldr	r2, [sp, #4]
    8e20:	431a      	orrs	r2, r3
    8e22:	4273      	negs	r3, r6
    8e24:	81a2      	strh	r2, [r4, #12]
    8e26:	61a3      	str	r3, [r4, #24]
    8e28:	4b0d      	ldr	r3, [pc, #52]	; (8e60 <setvbuf+0x108>)
    8e2a:	2000      	movs	r0, #0
    8e2c:	62ab      	str	r3, [r5, #40]	; 0x28
    8e2e:	89a2      	ldrh	r2, [r4, #12]
    8e30:	6027      	str	r7, [r4, #0]
    8e32:	6127      	str	r7, [r4, #16]
    8e34:	6166      	str	r6, [r4, #20]
    8e36:	0713      	lsls	r3, r2, #28
    8e38:	d509      	bpl.n	8e4e <setvbuf+0xf6>
    8e3a:	2303      	movs	r3, #3
    8e3c:	401a      	ands	r2, r3
    8e3e:	4253      	negs	r3, r2
    8e40:	4153      	adcs	r3, r2
    8e42:	425b      	negs	r3, r3
    8e44:	401e      	ands	r6, r3
    8e46:	60a6      	str	r6, [r4, #8]
    8e48:	e001      	b.n	8e4e <setvbuf+0xf6>
    8e4a:	2001      	movs	r0, #1
    8e4c:	4240      	negs	r0, r0
    8e4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8e50:	20000140 	.word	0x20000140
    8e54:	0000c5c0 	.word	0x0000c5c0
    8e58:	0000c5e0 	.word	0x0000c5e0
    8e5c:	0000c600 	.word	0x0000c600
    8e60:	0000959d 	.word	0x0000959d

00008e64 <siprintf>:
    8e64:	b40e      	push	{r1, r2, r3}
    8e66:	b510      	push	{r4, lr}
    8e68:	b09d      	sub	sp, #116	; 0x74
    8e6a:	a902      	add	r1, sp, #8
    8e6c:	9002      	str	r0, [sp, #8]
    8e6e:	6108      	str	r0, [r1, #16]
    8e70:	480b      	ldr	r0, [pc, #44]	; (8ea0 <siprintf+0x3c>)
    8e72:	2482      	movs	r4, #130	; 0x82
    8e74:	6088      	str	r0, [r1, #8]
    8e76:	6148      	str	r0, [r1, #20]
    8e78:	2001      	movs	r0, #1
    8e7a:	4240      	negs	r0, r0
    8e7c:	ab1f      	add	r3, sp, #124	; 0x7c
    8e7e:	81c8      	strh	r0, [r1, #14]
    8e80:	4808      	ldr	r0, [pc, #32]	; (8ea4 <siprintf+0x40>)
    8e82:	cb04      	ldmia	r3!, {r2}
    8e84:	00a4      	lsls	r4, r4, #2
    8e86:	6800      	ldr	r0, [r0, #0]
    8e88:	9301      	str	r3, [sp, #4]
    8e8a:	818c      	strh	r4, [r1, #12]
    8e8c:	f000 fd12 	bl	98b4 <_svfiprintf_r>
    8e90:	2300      	movs	r3, #0
    8e92:	9a02      	ldr	r2, [sp, #8]
    8e94:	7013      	strb	r3, [r2, #0]
    8e96:	b01d      	add	sp, #116	; 0x74
    8e98:	bc10      	pop	{r4}
    8e9a:	bc08      	pop	{r3}
    8e9c:	b003      	add	sp, #12
    8e9e:	4718      	bx	r3
    8ea0:	7fffffff 	.word	0x7fffffff
    8ea4:	20000140 	.word	0x20000140

00008ea8 <strcmp>:
    8ea8:	7802      	ldrb	r2, [r0, #0]
    8eaa:	780b      	ldrb	r3, [r1, #0]
    8eac:	2a00      	cmp	r2, #0
    8eae:	d003      	beq.n	8eb8 <strcmp+0x10>
    8eb0:	3001      	adds	r0, #1
    8eb2:	3101      	adds	r1, #1
    8eb4:	429a      	cmp	r2, r3
    8eb6:	d0f7      	beq.n	8ea8 <strcmp>
    8eb8:	1ad0      	subs	r0, r2, r3
    8eba:	4770      	bx	lr

00008ebc <strcpy>:
    8ebc:	1c03      	adds	r3, r0, #0
    8ebe:	780a      	ldrb	r2, [r1, #0]
    8ec0:	3101      	adds	r1, #1
    8ec2:	701a      	strb	r2, [r3, #0]
    8ec4:	3301      	adds	r3, #1
    8ec6:	2a00      	cmp	r2, #0
    8ec8:	d1f9      	bne.n	8ebe <strcpy+0x2>
    8eca:	4770      	bx	lr

00008ecc <strdup>:
    8ecc:	b508      	push	{r3, lr}
    8ece:	4b03      	ldr	r3, [pc, #12]	; (8edc <strdup+0x10>)
    8ed0:	1c01      	adds	r1, r0, #0
    8ed2:	6818      	ldr	r0, [r3, #0]
    8ed4:	f000 f804 	bl	8ee0 <_strdup_r>
    8ed8:	bd08      	pop	{r3, pc}
    8eda:	46c0      	nop			; (mov r8, r8)
    8edc:	20000140 	.word	0x20000140

00008ee0 <_strdup_r>:
    8ee0:	b570      	push	{r4, r5, r6, lr}
    8ee2:	1c05      	adds	r5, r0, #0
    8ee4:	1c08      	adds	r0, r1, #0
    8ee6:	1c0e      	adds	r6, r1, #0
    8ee8:	f000 f9b8 	bl	925c <strlen>
    8eec:	1c44      	adds	r4, r0, #1
    8eee:	1c21      	adds	r1, r4, #0
    8ef0:	1c28      	adds	r0, r5, #0
    8ef2:	f7ff fe23 	bl	8b3c <_malloc_r>
    8ef6:	1e05      	subs	r5, r0, #0
    8ef8:	d003      	beq.n	8f02 <_strdup_r+0x22>
    8efa:	1c31      	adds	r1, r6, #0
    8efc:	1c22      	adds	r2, r4, #0
    8efe:	f7ff fdb1 	bl	8a64 <memcpy>
    8f02:	1c28      	adds	r0, r5, #0
    8f04:	bd70      	pop	{r4, r5, r6, pc}
	...

00008f08 <_strerror_r>:
    8f08:	b510      	push	{r4, lr}
    8f0a:	1c04      	adds	r4, r0, #0
    8f0c:	298e      	cmp	r1, #142	; 0x8e
    8f0e:	d900      	bls.n	8f12 <_strerror_r+0xa>
    8f10:	e0e8      	b.n	90e4 <_strerror_r+0x1dc>
    8f12:	1c08      	adds	r0, r1, #0
    8f14:	f7ff f88c 	bl	8030 <__gnu_thumb1_case_uqi>
    8f18:	4c4a48f2 	.word	0x4c4a48f2
    8f1c:	5452504e 	.word	0x5452504e
    8f20:	605c5a56 	.word	0x605c5a56
    8f24:	e6666462 	.word	0xe6666462
    8f28:	6e6c6a68 	.word	0x6e6c6a68
    8f2c:	7e787670 	.word	0x7e787670
    8f30:	86848280 	.word	0x86848280
    8f34:	92908e8a 	.word	0x92908e8a
    8f38:	9a989694 	.word	0x9a989694
    8f3c:	e6e6e69c 	.word	0xe6e6e69c
    8f40:	e6e6e6e6 	.word	0xe6e6e6e6
    8f44:	e6a4a0e6 	.word	0xe6a4a0e6
    8f48:	e6e6e6e6 	.word	0xe6e6e6e6
    8f4c:	e6e6e6e6 	.word	0xe6e6e6e6
    8f50:	e6e6e6e6 	.word	0xe6e6e6e6
    8f54:	aaa8c0a6 	.word	0xaaa8c0a6
    8f58:	ace6e6e6 	.word	0xace6e6e6
    8f5c:	aee6e6e6 	.word	0xaee6e6e6
    8f60:	e6b2e6e6 	.word	0xe6b2e6e6
    8f64:	e6e6b4e6 	.word	0xe6e6b4e6
    8f68:	e6e6e6e6 	.word	0xe6e6e6e6
    8f6c:	e6e6e6e6 	.word	0xe6e6e6e6
    8f70:	bab8e6b6 	.word	0xbab8e6b6
    8f74:	dee6e6bc 	.word	0xdee6e6bc
    8f78:	e6e6e6e6 	.word	0xe6e6e6e6
    8f7c:	e6e6e6e6 	.word	0xe6e6e6e6
    8f80:	c4c2becc 	.word	0xc4c2becc
    8f84:	cae6c8c6 	.word	0xcae6c8c6
    8f88:	7aa2d2ce 	.word	0x7aa2d2ce
    8f8c:	748872e4 	.word	0x748872e4
    8f90:	b0e25e58 	.word	0xb0e25e58
    8f94:	d67cd0e6 	.word	0xd67cd0e6
    8f98:	e6e6e6d4 	.word	0xe6e6e6d4
    8f9c:	e68ce6e6 	.word	0xe68ce6e6
    8fa0:	e09ee6e6 	.word	0xe09ee6e6
    8fa4:	dad8      	.short	0xdad8
    8fa6:	dc          	.byte	0xdc
    8fa7:	00          	.byte	0x00
    8fa8:	4855      	ldr	r0, [pc, #340]	; (9100 <_strerror_r+0x1f8>)
    8faa:	e0a8      	b.n	90fe <_strerror_r+0x1f6>
    8fac:	4855      	ldr	r0, [pc, #340]	; (9104 <_strerror_r+0x1fc>)
    8fae:	e0a6      	b.n	90fe <_strerror_r+0x1f6>
    8fb0:	4855      	ldr	r0, [pc, #340]	; (9108 <_strerror_r+0x200>)
    8fb2:	e0a4      	b.n	90fe <_strerror_r+0x1f6>
    8fb4:	4855      	ldr	r0, [pc, #340]	; (910c <_strerror_r+0x204>)
    8fb6:	e0a2      	b.n	90fe <_strerror_r+0x1f6>
    8fb8:	4855      	ldr	r0, [pc, #340]	; (9110 <_strerror_r+0x208>)
    8fba:	e0a0      	b.n	90fe <_strerror_r+0x1f6>
    8fbc:	4855      	ldr	r0, [pc, #340]	; (9114 <_strerror_r+0x20c>)
    8fbe:	e09e      	b.n	90fe <_strerror_r+0x1f6>
    8fc0:	4855      	ldr	r0, [pc, #340]	; (9118 <_strerror_r+0x210>)
    8fc2:	e09c      	b.n	90fe <_strerror_r+0x1f6>
    8fc4:	4855      	ldr	r0, [pc, #340]	; (911c <_strerror_r+0x214>)
    8fc6:	e09a      	b.n	90fe <_strerror_r+0x1f6>
    8fc8:	4855      	ldr	r0, [pc, #340]	; (9120 <_strerror_r+0x218>)
    8fca:	e098      	b.n	90fe <_strerror_r+0x1f6>
    8fcc:	4855      	ldr	r0, [pc, #340]	; (9124 <_strerror_r+0x21c>)
    8fce:	e096      	b.n	90fe <_strerror_r+0x1f6>
    8fd0:	4855      	ldr	r0, [pc, #340]	; (9128 <_strerror_r+0x220>)
    8fd2:	e094      	b.n	90fe <_strerror_r+0x1f6>
    8fd4:	4855      	ldr	r0, [pc, #340]	; (912c <_strerror_r+0x224>)
    8fd6:	e092      	b.n	90fe <_strerror_r+0x1f6>
    8fd8:	4855      	ldr	r0, [pc, #340]	; (9130 <_strerror_r+0x228>)
    8fda:	e090      	b.n	90fe <_strerror_r+0x1f6>
    8fdc:	4855      	ldr	r0, [pc, #340]	; (9134 <_strerror_r+0x22c>)
    8fde:	e08e      	b.n	90fe <_strerror_r+0x1f6>
    8fe0:	4855      	ldr	r0, [pc, #340]	; (9138 <_strerror_r+0x230>)
    8fe2:	e08c      	b.n	90fe <_strerror_r+0x1f6>
    8fe4:	4855      	ldr	r0, [pc, #340]	; (913c <_strerror_r+0x234>)
    8fe6:	e08a      	b.n	90fe <_strerror_r+0x1f6>
    8fe8:	4855      	ldr	r0, [pc, #340]	; (9140 <_strerror_r+0x238>)
    8fea:	e088      	b.n	90fe <_strerror_r+0x1f6>
    8fec:	4855      	ldr	r0, [pc, #340]	; (9144 <_strerror_r+0x23c>)
    8fee:	e086      	b.n	90fe <_strerror_r+0x1f6>
    8ff0:	4855      	ldr	r0, [pc, #340]	; (9148 <_strerror_r+0x240>)
    8ff2:	e084      	b.n	90fe <_strerror_r+0x1f6>
    8ff4:	4855      	ldr	r0, [pc, #340]	; (914c <_strerror_r+0x244>)
    8ff6:	e082      	b.n	90fe <_strerror_r+0x1f6>
    8ff8:	4855      	ldr	r0, [pc, #340]	; (9150 <_strerror_r+0x248>)
    8ffa:	e080      	b.n	90fe <_strerror_r+0x1f6>
    8ffc:	4855      	ldr	r0, [pc, #340]	; (9154 <_strerror_r+0x24c>)
    8ffe:	e07e      	b.n	90fe <_strerror_r+0x1f6>
    9000:	4855      	ldr	r0, [pc, #340]	; (9158 <_strerror_r+0x250>)
    9002:	e07c      	b.n	90fe <_strerror_r+0x1f6>
    9004:	4855      	ldr	r0, [pc, #340]	; (915c <_strerror_r+0x254>)
    9006:	e07a      	b.n	90fe <_strerror_r+0x1f6>
    9008:	4855      	ldr	r0, [pc, #340]	; (9160 <_strerror_r+0x258>)
    900a:	e078      	b.n	90fe <_strerror_r+0x1f6>
    900c:	4855      	ldr	r0, [pc, #340]	; (9164 <_strerror_r+0x25c>)
    900e:	e076      	b.n	90fe <_strerror_r+0x1f6>
    9010:	4855      	ldr	r0, [pc, #340]	; (9168 <_strerror_r+0x260>)
    9012:	e074      	b.n	90fe <_strerror_r+0x1f6>
    9014:	4855      	ldr	r0, [pc, #340]	; (916c <_strerror_r+0x264>)
    9016:	e072      	b.n	90fe <_strerror_r+0x1f6>
    9018:	4855      	ldr	r0, [pc, #340]	; (9170 <_strerror_r+0x268>)
    901a:	e070      	b.n	90fe <_strerror_r+0x1f6>
    901c:	4855      	ldr	r0, [pc, #340]	; (9174 <_strerror_r+0x26c>)
    901e:	e06e      	b.n	90fe <_strerror_r+0x1f6>
    9020:	4855      	ldr	r0, [pc, #340]	; (9178 <_strerror_r+0x270>)
    9022:	e06c      	b.n	90fe <_strerror_r+0x1f6>
    9024:	4855      	ldr	r0, [pc, #340]	; (917c <_strerror_r+0x274>)
    9026:	e06a      	b.n	90fe <_strerror_r+0x1f6>
    9028:	4855      	ldr	r0, [pc, #340]	; (9180 <_strerror_r+0x278>)
    902a:	e068      	b.n	90fe <_strerror_r+0x1f6>
    902c:	4855      	ldr	r0, [pc, #340]	; (9184 <_strerror_r+0x27c>)
    902e:	e066      	b.n	90fe <_strerror_r+0x1f6>
    9030:	4855      	ldr	r0, [pc, #340]	; (9188 <_strerror_r+0x280>)
    9032:	e064      	b.n	90fe <_strerror_r+0x1f6>
    9034:	4855      	ldr	r0, [pc, #340]	; (918c <_strerror_r+0x284>)
    9036:	e062      	b.n	90fe <_strerror_r+0x1f6>
    9038:	4855      	ldr	r0, [pc, #340]	; (9190 <_strerror_r+0x288>)
    903a:	e060      	b.n	90fe <_strerror_r+0x1f6>
    903c:	4855      	ldr	r0, [pc, #340]	; (9194 <_strerror_r+0x28c>)
    903e:	e05e      	b.n	90fe <_strerror_r+0x1f6>
    9040:	4855      	ldr	r0, [pc, #340]	; (9198 <_strerror_r+0x290>)
    9042:	e05c      	b.n	90fe <_strerror_r+0x1f6>
    9044:	4855      	ldr	r0, [pc, #340]	; (919c <_strerror_r+0x294>)
    9046:	e05a      	b.n	90fe <_strerror_r+0x1f6>
    9048:	4855      	ldr	r0, [pc, #340]	; (91a0 <_strerror_r+0x298>)
    904a:	e058      	b.n	90fe <_strerror_r+0x1f6>
    904c:	4855      	ldr	r0, [pc, #340]	; (91a4 <_strerror_r+0x29c>)
    904e:	e056      	b.n	90fe <_strerror_r+0x1f6>
    9050:	4855      	ldr	r0, [pc, #340]	; (91a8 <_strerror_r+0x2a0>)
    9052:	e054      	b.n	90fe <_strerror_r+0x1f6>
    9054:	4855      	ldr	r0, [pc, #340]	; (91ac <_strerror_r+0x2a4>)
    9056:	e052      	b.n	90fe <_strerror_r+0x1f6>
    9058:	4855      	ldr	r0, [pc, #340]	; (91b0 <_strerror_r+0x2a8>)
    905a:	e050      	b.n	90fe <_strerror_r+0x1f6>
    905c:	4855      	ldr	r0, [pc, #340]	; (91b4 <_strerror_r+0x2ac>)
    905e:	e04e      	b.n	90fe <_strerror_r+0x1f6>
    9060:	4855      	ldr	r0, [pc, #340]	; (91b8 <_strerror_r+0x2b0>)
    9062:	e04c      	b.n	90fe <_strerror_r+0x1f6>
    9064:	4855      	ldr	r0, [pc, #340]	; (91bc <_strerror_r+0x2b4>)
    9066:	e04a      	b.n	90fe <_strerror_r+0x1f6>
    9068:	4855      	ldr	r0, [pc, #340]	; (91c0 <_strerror_r+0x2b8>)
    906a:	e048      	b.n	90fe <_strerror_r+0x1f6>
    906c:	4855      	ldr	r0, [pc, #340]	; (91c4 <_strerror_r+0x2bc>)
    906e:	e046      	b.n	90fe <_strerror_r+0x1f6>
    9070:	4855      	ldr	r0, [pc, #340]	; (91c8 <_strerror_r+0x2c0>)
    9072:	e044      	b.n	90fe <_strerror_r+0x1f6>
    9074:	4855      	ldr	r0, [pc, #340]	; (91cc <_strerror_r+0x2c4>)
    9076:	e042      	b.n	90fe <_strerror_r+0x1f6>
    9078:	4855      	ldr	r0, [pc, #340]	; (91d0 <_strerror_r+0x2c8>)
    907a:	e040      	b.n	90fe <_strerror_r+0x1f6>
    907c:	4855      	ldr	r0, [pc, #340]	; (91d4 <_strerror_r+0x2cc>)
    907e:	e03e      	b.n	90fe <_strerror_r+0x1f6>
    9080:	4855      	ldr	r0, [pc, #340]	; (91d8 <_strerror_r+0x2d0>)
    9082:	e03c      	b.n	90fe <_strerror_r+0x1f6>
    9084:	4855      	ldr	r0, [pc, #340]	; (91dc <_strerror_r+0x2d4>)
    9086:	e03a      	b.n	90fe <_strerror_r+0x1f6>
    9088:	4855      	ldr	r0, [pc, #340]	; (91e0 <_strerror_r+0x2d8>)
    908a:	e038      	b.n	90fe <_strerror_r+0x1f6>
    908c:	4855      	ldr	r0, [pc, #340]	; (91e4 <_strerror_r+0x2dc>)
    908e:	e036      	b.n	90fe <_strerror_r+0x1f6>
    9090:	4855      	ldr	r0, [pc, #340]	; (91e8 <_strerror_r+0x2e0>)
    9092:	e034      	b.n	90fe <_strerror_r+0x1f6>
    9094:	4855      	ldr	r0, [pc, #340]	; (91ec <_strerror_r+0x2e4>)
    9096:	e032      	b.n	90fe <_strerror_r+0x1f6>
    9098:	4855      	ldr	r0, [pc, #340]	; (91f0 <_strerror_r+0x2e8>)
    909a:	e030      	b.n	90fe <_strerror_r+0x1f6>
    909c:	4855      	ldr	r0, [pc, #340]	; (91f4 <_strerror_r+0x2ec>)
    909e:	e02e      	b.n	90fe <_strerror_r+0x1f6>
    90a0:	4855      	ldr	r0, [pc, #340]	; (91f8 <_strerror_r+0x2f0>)
    90a2:	e02c      	b.n	90fe <_strerror_r+0x1f6>
    90a4:	4855      	ldr	r0, [pc, #340]	; (91fc <_strerror_r+0x2f4>)
    90a6:	e02a      	b.n	90fe <_strerror_r+0x1f6>
    90a8:	4855      	ldr	r0, [pc, #340]	; (9200 <_strerror_r+0x2f8>)
    90aa:	e028      	b.n	90fe <_strerror_r+0x1f6>
    90ac:	4855      	ldr	r0, [pc, #340]	; (9204 <_strerror_r+0x2fc>)
    90ae:	e026      	b.n	90fe <_strerror_r+0x1f6>
    90b0:	4855      	ldr	r0, [pc, #340]	; (9208 <_strerror_r+0x300>)
    90b2:	e024      	b.n	90fe <_strerror_r+0x1f6>
    90b4:	4855      	ldr	r0, [pc, #340]	; (920c <_strerror_r+0x304>)
    90b6:	e022      	b.n	90fe <_strerror_r+0x1f6>
    90b8:	4855      	ldr	r0, [pc, #340]	; (9210 <_strerror_r+0x308>)
    90ba:	e020      	b.n	90fe <_strerror_r+0x1f6>
    90bc:	4855      	ldr	r0, [pc, #340]	; (9214 <_strerror_r+0x30c>)
    90be:	e01e      	b.n	90fe <_strerror_r+0x1f6>
    90c0:	4855      	ldr	r0, [pc, #340]	; (9218 <_strerror_r+0x310>)
    90c2:	e01c      	b.n	90fe <_strerror_r+0x1f6>
    90c4:	4855      	ldr	r0, [pc, #340]	; (921c <_strerror_r+0x314>)
    90c6:	e01a      	b.n	90fe <_strerror_r+0x1f6>
    90c8:	4855      	ldr	r0, [pc, #340]	; (9220 <_strerror_r+0x318>)
    90ca:	e018      	b.n	90fe <_strerror_r+0x1f6>
    90cc:	4855      	ldr	r0, [pc, #340]	; (9224 <_strerror_r+0x31c>)
    90ce:	e016      	b.n	90fe <_strerror_r+0x1f6>
    90d0:	4855      	ldr	r0, [pc, #340]	; (9228 <_strerror_r+0x320>)
    90d2:	e014      	b.n	90fe <_strerror_r+0x1f6>
    90d4:	4855      	ldr	r0, [pc, #340]	; (922c <_strerror_r+0x324>)
    90d6:	e012      	b.n	90fe <_strerror_r+0x1f6>
    90d8:	4855      	ldr	r0, [pc, #340]	; (9230 <_strerror_r+0x328>)
    90da:	e010      	b.n	90fe <_strerror_r+0x1f6>
    90dc:	4855      	ldr	r0, [pc, #340]	; (9234 <_strerror_r+0x32c>)
    90de:	e00e      	b.n	90fe <_strerror_r+0x1f6>
    90e0:	4855      	ldr	r0, [pc, #340]	; (9238 <_strerror_r+0x330>)
    90e2:	e00c      	b.n	90fe <_strerror_r+0x1f6>
    90e4:	2b00      	cmp	r3, #0
    90e6:	d100      	bne.n	90ea <_strerror_r+0x1e2>
    90e8:	1c23      	adds	r3, r4, #0
    90ea:	1c08      	adds	r0, r1, #0
    90ec:	1c11      	adds	r1, r2, #0
    90ee:	1c1a      	adds	r2, r3, #0
    90f0:	f000 f8cf 	bl	9292 <_user_strerror>
    90f4:	2800      	cmp	r0, #0
    90f6:	d102      	bne.n	90fe <_strerror_r+0x1f6>
    90f8:	4850      	ldr	r0, [pc, #320]	; (923c <_strerror_r+0x334>)
    90fa:	e000      	b.n	90fe <_strerror_r+0x1f6>
    90fc:	4850      	ldr	r0, [pc, #320]	; (9240 <_strerror_r+0x338>)
    90fe:	bd10      	pop	{r4, pc}
    9100:	0000bf30 	.word	0x0000bf30
    9104:	0000bf3a 	.word	0x0000bf3a
    9108:	0000bf54 	.word	0x0000bf54
    910c:	0000bf64 	.word	0x0000bf64
    9110:	0000bf7c 	.word	0x0000bf7c
    9114:	0000bf86 	.word	0x0000bf86
    9118:	0000bfa0 	.word	0x0000bfa0
    911c:	0000bfb2 	.word	0x0000bfb2
    9120:	0000bfc4 	.word	0x0000bfc4
    9124:	0000bfdd 	.word	0x0000bfdd
    9128:	0000bfed 	.word	0x0000bfed
    912c:	0000bff9 	.word	0x0000bff9
    9130:	0000c016 	.word	0x0000c016
    9134:	0000c028 	.word	0x0000c028
    9138:	0000c039 	.word	0x0000c039
    913c:	0000c04b 	.word	0x0000c04b
    9140:	0000c057 	.word	0x0000c057
    9144:	0000c06f 	.word	0x0000c06f
    9148:	0000c07b 	.word	0x0000c07b
    914c:	0000c08d 	.word	0x0000c08d
    9150:	0000c09c 	.word	0x0000c09c
    9154:	0000c0ac 	.word	0x0000c0ac
    9158:	0000c0b9 	.word	0x0000c0b9
    915c:	0000c0d8 	.word	0x0000c0d8
    9160:	0000c0e7 	.word	0x0000c0e7
    9164:	0000c0f8 	.word	0x0000c0f8
    9168:	0000c11c 	.word	0x0000c11c
    916c:	0000c13a 	.word	0x0000c13a
    9170:	0000c158 	.word	0x0000c158
    9174:	0000c178 	.word	0x0000c178
    9178:	0000c18f 	.word	0x0000c18f
    917c:	0000c19e 	.word	0x0000c19e
    9180:	0000c1ad 	.word	0x0000c1ad
    9184:	0000c1c1 	.word	0x0000c1c1
    9188:	0000c1d9 	.word	0x0000c1d9
    918c:	0000c1e7 	.word	0x0000c1e7
    9190:	0000c1f4 	.word	0x0000c1f4
    9194:	0000c20a 	.word	0x0000c20a
    9198:	0000c219 	.word	0x0000c219
    919c:	0000c225 	.word	0x0000c225
    91a0:	0000c254 	.word	0x0000c254
    91a4:	0000c265 	.word	0x0000c265
    91a8:	0000c280 	.word	0x0000c280
    91ac:	0000c293 	.word	0x0000c293
    91b0:	0000c2a9 	.word	0x0000c2a9
    91b4:	0000c2b2 	.word	0x0000c2b2
    91b8:	0000c2c9 	.word	0x0000c2c9
    91bc:	0000c2d1 	.word	0x0000c2d1
    91c0:	0000c2de 	.word	0x0000c2de
    91c4:	0000c2f3 	.word	0x0000c2f3
    91c8:	0000c307 	.word	0x0000c307
    91cc:	0000c31f 	.word	0x0000c31f
    91d0:	0000c32e 	.word	0x0000c32e
    91d4:	0000c33f 	.word	0x0000c33f
    91d8:	0000c352 	.word	0x0000c352
    91dc:	0000c35e 	.word	0x0000c35e
    91e0:	0000c377 	.word	0x0000c377
    91e4:	0000c38b 	.word	0x0000c38b
    91e8:	0000c3a6 	.word	0x0000c3a6
    91ec:	0000c3be 	.word	0x0000c3be
    91f0:	0000c3d8 	.word	0x0000c3d8
    91f4:	0000c3e0 	.word	0x0000c3e0
    91f8:	0000c410 	.word	0x0000c410
    91fc:	0000c42f 	.word	0x0000c42f
    9200:	0000c44e 	.word	0x0000c44e
    9204:	0000c465 	.word	0x0000c465
    9208:	0000c478 	.word	0x0000c478
    920c:	0000c491 	.word	0x0000c491
    9210:	0000c4a8 	.word	0x0000c4a8
    9214:	0000c4be 	.word	0x0000c4be
    9218:	0000c4df 	.word	0x0000c4df
    921c:	0000c4f7 	.word	0x0000c4f7
    9220:	0000c513 	.word	0x0000c513
    9224:	0000c526 	.word	0x0000c526
    9228:	0000c53c 	.word	0x0000c53c
    922c:	0000c550 	.word	0x0000c550
    9230:	0000c572 	.word	0x0000c572
    9234:	0000c598 	.word	0x0000c598
    9238:	0000c5a9 	.word	0x0000c5a9
    923c:	0000c625 	.word	0x0000c625
    9240:	0000bf28 	.word	0x0000bf28

00009244 <strerror>:
    9244:	2200      	movs	r2, #0
    9246:	b508      	push	{r3, lr}
    9248:	4b03      	ldr	r3, [pc, #12]	; (9258 <strerror+0x14>)
    924a:	1c01      	adds	r1, r0, #0
    924c:	6818      	ldr	r0, [r3, #0]
    924e:	1c13      	adds	r3, r2, #0
    9250:	f7ff fe5a 	bl	8f08 <_strerror_r>
    9254:	bd08      	pop	{r3, pc}
    9256:	46c0      	nop			; (mov r8, r8)
    9258:	20000140 	.word	0x20000140

0000925c <strlen>:
    925c:	2300      	movs	r3, #0
    925e:	5cc2      	ldrb	r2, [r0, r3]
    9260:	3301      	adds	r3, #1
    9262:	2a00      	cmp	r2, #0
    9264:	d1fb      	bne.n	925e <strlen+0x2>
    9266:	1e58      	subs	r0, r3, #1
    9268:	4770      	bx	lr

0000926a <strncmp>:
    926a:	2300      	movs	r3, #0
    926c:	b530      	push	{r4, r5, lr}
    926e:	429a      	cmp	r2, r3
    9270:	d00d      	beq.n	928e <strncmp+0x24>
    9272:	3a01      	subs	r2, #1
    9274:	5cc4      	ldrb	r4, [r0, r3]
    9276:	5ccd      	ldrb	r5, [r1, r3]
    9278:	42ac      	cmp	r4, r5
    927a:	d102      	bne.n	9282 <strncmp+0x18>
    927c:	4293      	cmp	r3, r2
    927e:	d102      	bne.n	9286 <strncmp+0x1c>
    9280:	1c25      	adds	r5, r4, #0
    9282:	1b63      	subs	r3, r4, r5
    9284:	e003      	b.n	928e <strncmp+0x24>
    9286:	3301      	adds	r3, #1
    9288:	2c00      	cmp	r4, #0
    928a:	d1f3      	bne.n	9274 <strncmp+0xa>
    928c:	e7f8      	b.n	9280 <strncmp+0x16>
    928e:	1c18      	adds	r0, r3, #0
    9290:	bd30      	pop	{r4, r5, pc}

00009292 <_user_strerror>:
    9292:	2000      	movs	r0, #0
    9294:	4770      	bx	lr
	...

00009298 <__swbuf_r>:
    9298:	b570      	push	{r4, r5, r6, lr}
    929a:	1c05      	adds	r5, r0, #0
    929c:	1c0e      	adds	r6, r1, #0
    929e:	1c14      	adds	r4, r2, #0
    92a0:	2800      	cmp	r0, #0
    92a2:	d004      	beq.n	92ae <__swbuf_r+0x16>
    92a4:	6983      	ldr	r3, [r0, #24]
    92a6:	2b00      	cmp	r3, #0
    92a8:	d101      	bne.n	92ae <__swbuf_r+0x16>
    92aa:	f000 f9b9 	bl	9620 <__sinit>
    92ae:	4b23      	ldr	r3, [pc, #140]	; (933c <__swbuf_r+0xa4>)
    92b0:	429c      	cmp	r4, r3
    92b2:	d101      	bne.n	92b8 <__swbuf_r+0x20>
    92b4:	686c      	ldr	r4, [r5, #4]
    92b6:	e008      	b.n	92ca <__swbuf_r+0x32>
    92b8:	4b21      	ldr	r3, [pc, #132]	; (9340 <__swbuf_r+0xa8>)
    92ba:	429c      	cmp	r4, r3
    92bc:	d101      	bne.n	92c2 <__swbuf_r+0x2a>
    92be:	68ac      	ldr	r4, [r5, #8]
    92c0:	e003      	b.n	92ca <__swbuf_r+0x32>
    92c2:	4b20      	ldr	r3, [pc, #128]	; (9344 <__swbuf_r+0xac>)
    92c4:	429c      	cmp	r4, r3
    92c6:	d100      	bne.n	92ca <__swbuf_r+0x32>
    92c8:	68ec      	ldr	r4, [r5, #12]
    92ca:	69a3      	ldr	r3, [r4, #24]
    92cc:	60a3      	str	r3, [r4, #8]
    92ce:	89a3      	ldrh	r3, [r4, #12]
    92d0:	071b      	lsls	r3, r3, #28
    92d2:	d50a      	bpl.n	92ea <__swbuf_r+0x52>
    92d4:	6923      	ldr	r3, [r4, #16]
    92d6:	2b00      	cmp	r3, #0
    92d8:	d007      	beq.n	92ea <__swbuf_r+0x52>
    92da:	6823      	ldr	r3, [r4, #0]
    92dc:	6922      	ldr	r2, [r4, #16]
    92de:	b2f6      	uxtb	r6, r6
    92e0:	1a98      	subs	r0, r3, r2
    92e2:	6963      	ldr	r3, [r4, #20]
    92e4:	4298      	cmp	r0, r3
    92e6:	db0f      	blt.n	9308 <__swbuf_r+0x70>
    92e8:	e008      	b.n	92fc <__swbuf_r+0x64>
    92ea:	1c28      	adds	r0, r5, #0
    92ec:	1c21      	adds	r1, r4, #0
    92ee:	f000 f82b 	bl	9348 <__swsetup_r>
    92f2:	2800      	cmp	r0, #0
    92f4:	d0f1      	beq.n	92da <__swbuf_r+0x42>
    92f6:	2001      	movs	r0, #1
    92f8:	4240      	negs	r0, r0
    92fa:	e01d      	b.n	9338 <__swbuf_r+0xa0>
    92fc:	1c28      	adds	r0, r5, #0
    92fe:	1c21      	adds	r1, r4, #0
    9300:	f000 f920 	bl	9544 <_fflush_r>
    9304:	2800      	cmp	r0, #0
    9306:	d1f6      	bne.n	92f6 <__swbuf_r+0x5e>
    9308:	68a3      	ldr	r3, [r4, #8]
    930a:	3001      	adds	r0, #1
    930c:	3b01      	subs	r3, #1
    930e:	60a3      	str	r3, [r4, #8]
    9310:	6823      	ldr	r3, [r4, #0]
    9312:	1c5a      	adds	r2, r3, #1
    9314:	6022      	str	r2, [r4, #0]
    9316:	701e      	strb	r6, [r3, #0]
    9318:	6963      	ldr	r3, [r4, #20]
    931a:	4298      	cmp	r0, r3
    931c:	d005      	beq.n	932a <__swbuf_r+0x92>
    931e:	89a3      	ldrh	r3, [r4, #12]
    9320:	1c30      	adds	r0, r6, #0
    9322:	07db      	lsls	r3, r3, #31
    9324:	d508      	bpl.n	9338 <__swbuf_r+0xa0>
    9326:	2e0a      	cmp	r6, #10
    9328:	d106      	bne.n	9338 <__swbuf_r+0xa0>
    932a:	1c28      	adds	r0, r5, #0
    932c:	1c21      	adds	r1, r4, #0
    932e:	f000 f909 	bl	9544 <_fflush_r>
    9332:	2800      	cmp	r0, #0
    9334:	d1df      	bne.n	92f6 <__swbuf_r+0x5e>
    9336:	1c30      	adds	r0, r6, #0
    9338:	bd70      	pop	{r4, r5, r6, pc}
    933a:	46c0      	nop			; (mov r8, r8)
    933c:	0000c5c0 	.word	0x0000c5c0
    9340:	0000c5e0 	.word	0x0000c5e0
    9344:	0000c600 	.word	0x0000c600

00009348 <__swsetup_r>:
    9348:	4b35      	ldr	r3, [pc, #212]	; (9420 <__swsetup_r+0xd8>)
    934a:	b570      	push	{r4, r5, r6, lr}
    934c:	681d      	ldr	r5, [r3, #0]
    934e:	1c06      	adds	r6, r0, #0
    9350:	1c0c      	adds	r4, r1, #0
    9352:	2d00      	cmp	r5, #0
    9354:	d005      	beq.n	9362 <__swsetup_r+0x1a>
    9356:	69ab      	ldr	r3, [r5, #24]
    9358:	2b00      	cmp	r3, #0
    935a:	d102      	bne.n	9362 <__swsetup_r+0x1a>
    935c:	1c28      	adds	r0, r5, #0
    935e:	f000 f95f 	bl	9620 <__sinit>
    9362:	4b30      	ldr	r3, [pc, #192]	; (9424 <__swsetup_r+0xdc>)
    9364:	429c      	cmp	r4, r3
    9366:	d101      	bne.n	936c <__swsetup_r+0x24>
    9368:	686c      	ldr	r4, [r5, #4]
    936a:	e008      	b.n	937e <__swsetup_r+0x36>
    936c:	4b2e      	ldr	r3, [pc, #184]	; (9428 <__swsetup_r+0xe0>)
    936e:	429c      	cmp	r4, r3
    9370:	d101      	bne.n	9376 <__swsetup_r+0x2e>
    9372:	68ac      	ldr	r4, [r5, #8]
    9374:	e003      	b.n	937e <__swsetup_r+0x36>
    9376:	4b2d      	ldr	r3, [pc, #180]	; (942c <__swsetup_r+0xe4>)
    9378:	429c      	cmp	r4, r3
    937a:	d100      	bne.n	937e <__swsetup_r+0x36>
    937c:	68ec      	ldr	r4, [r5, #12]
    937e:	89a3      	ldrh	r3, [r4, #12]
    9380:	b29a      	uxth	r2, r3
    9382:	0711      	lsls	r1, r2, #28
    9384:	d423      	bmi.n	93ce <__swsetup_r+0x86>
    9386:	06d1      	lsls	r1, r2, #27
    9388:	d407      	bmi.n	939a <__swsetup_r+0x52>
    938a:	2209      	movs	r2, #9
    938c:	2001      	movs	r0, #1
    938e:	6032      	str	r2, [r6, #0]
    9390:	3237      	adds	r2, #55	; 0x37
    9392:	4313      	orrs	r3, r2
    9394:	81a3      	strh	r3, [r4, #12]
    9396:	4240      	negs	r0, r0
    9398:	e040      	b.n	941c <__swsetup_r+0xd4>
    939a:	0753      	lsls	r3, r2, #29
    939c:	d513      	bpl.n	93c6 <__swsetup_r+0x7e>
    939e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    93a0:	2900      	cmp	r1, #0
    93a2:	d008      	beq.n	93b6 <__swsetup_r+0x6e>
    93a4:	1c23      	adds	r3, r4, #0
    93a6:	3344      	adds	r3, #68	; 0x44
    93a8:	4299      	cmp	r1, r3
    93aa:	d002      	beq.n	93b2 <__swsetup_r+0x6a>
    93ac:	1c30      	adds	r0, r6, #0
    93ae:	f7ff fb7f 	bl	8ab0 <_free_r>
    93b2:	2300      	movs	r3, #0
    93b4:	6363      	str	r3, [r4, #52]	; 0x34
    93b6:	2224      	movs	r2, #36	; 0x24
    93b8:	89a3      	ldrh	r3, [r4, #12]
    93ba:	4393      	bics	r3, r2
    93bc:	81a3      	strh	r3, [r4, #12]
    93be:	2300      	movs	r3, #0
    93c0:	6063      	str	r3, [r4, #4]
    93c2:	6923      	ldr	r3, [r4, #16]
    93c4:	6023      	str	r3, [r4, #0]
    93c6:	2208      	movs	r2, #8
    93c8:	89a3      	ldrh	r3, [r4, #12]
    93ca:	4313      	orrs	r3, r2
    93cc:	81a3      	strh	r3, [r4, #12]
    93ce:	6923      	ldr	r3, [r4, #16]
    93d0:	2b00      	cmp	r3, #0
    93d2:	d10b      	bne.n	93ec <__swsetup_r+0xa4>
    93d4:	23a0      	movs	r3, #160	; 0xa0
    93d6:	89a2      	ldrh	r2, [r4, #12]
    93d8:	009b      	lsls	r3, r3, #2
    93da:	4013      	ands	r3, r2
    93dc:	2280      	movs	r2, #128	; 0x80
    93de:	0092      	lsls	r2, r2, #2
    93e0:	4293      	cmp	r3, r2
    93e2:	d003      	beq.n	93ec <__swsetup_r+0xa4>
    93e4:	1c30      	adds	r0, r6, #0
    93e6:	1c21      	adds	r1, r4, #0
    93e8:	f000 f9ac 	bl	9744 <__smakebuf_r>
    93ec:	2301      	movs	r3, #1
    93ee:	89a2      	ldrh	r2, [r4, #12]
    93f0:	4013      	ands	r3, r2
    93f2:	d005      	beq.n	9400 <__swsetup_r+0xb8>
    93f4:	2300      	movs	r3, #0
    93f6:	60a3      	str	r3, [r4, #8]
    93f8:	6963      	ldr	r3, [r4, #20]
    93fa:	425b      	negs	r3, r3
    93fc:	61a3      	str	r3, [r4, #24]
    93fe:	e003      	b.n	9408 <__swsetup_r+0xc0>
    9400:	0791      	lsls	r1, r2, #30
    9402:	d400      	bmi.n	9406 <__swsetup_r+0xbe>
    9404:	6963      	ldr	r3, [r4, #20]
    9406:	60a3      	str	r3, [r4, #8]
    9408:	2000      	movs	r0, #0
    940a:	6923      	ldr	r3, [r4, #16]
    940c:	4283      	cmp	r3, r0
    940e:	d105      	bne.n	941c <__swsetup_r+0xd4>
    9410:	0613      	lsls	r3, r2, #24
    9412:	d503      	bpl.n	941c <__swsetup_r+0xd4>
    9414:	2340      	movs	r3, #64	; 0x40
    9416:	431a      	orrs	r2, r3
    9418:	81a2      	strh	r2, [r4, #12]
    941a:	3801      	subs	r0, #1
    941c:	bd70      	pop	{r4, r5, r6, pc}
    941e:	46c0      	nop			; (mov r8, r8)
    9420:	20000140 	.word	0x20000140
    9424:	0000c5c0 	.word	0x0000c5c0
    9428:	0000c5e0 	.word	0x0000c5e0
    942c:	0000c600 	.word	0x0000c600

00009430 <__sflush_r>:
    9430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9432:	898a      	ldrh	r2, [r1, #12]
    9434:	1c05      	adds	r5, r0, #0
    9436:	1c0c      	adds	r4, r1, #0
    9438:	0713      	lsls	r3, r2, #28
    943a:	d45e      	bmi.n	94fa <__sflush_r+0xca>
    943c:	684b      	ldr	r3, [r1, #4]
    943e:	2b00      	cmp	r3, #0
    9440:	dc02      	bgt.n	9448 <__sflush_r+0x18>
    9442:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    9444:	2b00      	cmp	r3, #0
    9446:	dd1a      	ble.n	947e <__sflush_r+0x4e>
    9448:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    944a:	2f00      	cmp	r7, #0
    944c:	d017      	beq.n	947e <__sflush_r+0x4e>
    944e:	2300      	movs	r3, #0
    9450:	682e      	ldr	r6, [r5, #0]
    9452:	602b      	str	r3, [r5, #0]
    9454:	2380      	movs	r3, #128	; 0x80
    9456:	015b      	lsls	r3, r3, #5
    9458:	401a      	ands	r2, r3
    945a:	d001      	beq.n	9460 <__sflush_r+0x30>
    945c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    945e:	e015      	b.n	948c <__sflush_r+0x5c>
    9460:	1c28      	adds	r0, r5, #0
    9462:	6a21      	ldr	r1, [r4, #32]
    9464:	2301      	movs	r3, #1
    9466:	47b8      	blx	r7
    9468:	1c02      	adds	r2, r0, #0
    946a:	1c43      	adds	r3, r0, #1
    946c:	d10e      	bne.n	948c <__sflush_r+0x5c>
    946e:	682b      	ldr	r3, [r5, #0]
    9470:	2b00      	cmp	r3, #0
    9472:	d00b      	beq.n	948c <__sflush_r+0x5c>
    9474:	2b1d      	cmp	r3, #29
    9476:	d001      	beq.n	947c <__sflush_r+0x4c>
    9478:	2b16      	cmp	r3, #22
    947a:	d102      	bne.n	9482 <__sflush_r+0x52>
    947c:	602e      	str	r6, [r5, #0]
    947e:	2000      	movs	r0, #0
    9480:	e05e      	b.n	9540 <__sflush_r+0x110>
    9482:	2140      	movs	r1, #64	; 0x40
    9484:	89a3      	ldrh	r3, [r4, #12]
    9486:	430b      	orrs	r3, r1
    9488:	81a3      	strh	r3, [r4, #12]
    948a:	e059      	b.n	9540 <__sflush_r+0x110>
    948c:	89a3      	ldrh	r3, [r4, #12]
    948e:	075b      	lsls	r3, r3, #29
    9490:	d506      	bpl.n	94a0 <__sflush_r+0x70>
    9492:	6863      	ldr	r3, [r4, #4]
    9494:	1ad2      	subs	r2, r2, r3
    9496:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9498:	2b00      	cmp	r3, #0
    949a:	d001      	beq.n	94a0 <__sflush_r+0x70>
    949c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    949e:	1ad2      	subs	r2, r2, r3
    94a0:	2300      	movs	r3, #0
    94a2:	1c28      	adds	r0, r5, #0
    94a4:	6a21      	ldr	r1, [r4, #32]
    94a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    94a8:	47b8      	blx	r7
    94aa:	89a3      	ldrh	r3, [r4, #12]
    94ac:	1c42      	adds	r2, r0, #1
    94ae:	d106      	bne.n	94be <__sflush_r+0x8e>
    94b0:	682a      	ldr	r2, [r5, #0]
    94b2:	2a00      	cmp	r2, #0
    94b4:	d003      	beq.n	94be <__sflush_r+0x8e>
    94b6:	2a1d      	cmp	r2, #29
    94b8:	d001      	beq.n	94be <__sflush_r+0x8e>
    94ba:	2a16      	cmp	r2, #22
    94bc:	d119      	bne.n	94f2 <__sflush_r+0xc2>
    94be:	2200      	movs	r2, #0
    94c0:	6062      	str	r2, [r4, #4]
    94c2:	6922      	ldr	r2, [r4, #16]
    94c4:	6022      	str	r2, [r4, #0]
    94c6:	04db      	lsls	r3, r3, #19
    94c8:	d505      	bpl.n	94d6 <__sflush_r+0xa6>
    94ca:	1c43      	adds	r3, r0, #1
    94cc:	d102      	bne.n	94d4 <__sflush_r+0xa4>
    94ce:	682b      	ldr	r3, [r5, #0]
    94d0:	2b00      	cmp	r3, #0
    94d2:	d100      	bne.n	94d6 <__sflush_r+0xa6>
    94d4:	6560      	str	r0, [r4, #84]	; 0x54
    94d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    94d8:	602e      	str	r6, [r5, #0]
    94da:	2900      	cmp	r1, #0
    94dc:	d0cf      	beq.n	947e <__sflush_r+0x4e>
    94de:	1c23      	adds	r3, r4, #0
    94e0:	3344      	adds	r3, #68	; 0x44
    94e2:	4299      	cmp	r1, r3
    94e4:	d002      	beq.n	94ec <__sflush_r+0xbc>
    94e6:	1c28      	adds	r0, r5, #0
    94e8:	f7ff fae2 	bl	8ab0 <_free_r>
    94ec:	2000      	movs	r0, #0
    94ee:	6360      	str	r0, [r4, #52]	; 0x34
    94f0:	e026      	b.n	9540 <__sflush_r+0x110>
    94f2:	2240      	movs	r2, #64	; 0x40
    94f4:	4313      	orrs	r3, r2
    94f6:	81a3      	strh	r3, [r4, #12]
    94f8:	e022      	b.n	9540 <__sflush_r+0x110>
    94fa:	690f      	ldr	r7, [r1, #16]
    94fc:	2f00      	cmp	r7, #0
    94fe:	d0be      	beq.n	947e <__sflush_r+0x4e>
    9500:	680b      	ldr	r3, [r1, #0]
    9502:	600f      	str	r7, [r1, #0]
    9504:	1bdb      	subs	r3, r3, r7
    9506:	9301      	str	r3, [sp, #4]
    9508:	2300      	movs	r3, #0
    950a:	0792      	lsls	r2, r2, #30
    950c:	d100      	bne.n	9510 <__sflush_r+0xe0>
    950e:	694b      	ldr	r3, [r1, #20]
    9510:	60a3      	str	r3, [r4, #8]
    9512:	9b01      	ldr	r3, [sp, #4]
    9514:	2b00      	cmp	r3, #0
    9516:	ddb2      	ble.n	947e <__sflush_r+0x4e>
    9518:	1c28      	adds	r0, r5, #0
    951a:	6a21      	ldr	r1, [r4, #32]
    951c:	1c3a      	adds	r2, r7, #0
    951e:	9b01      	ldr	r3, [sp, #4]
    9520:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    9522:	47b0      	blx	r6
    9524:	2800      	cmp	r0, #0
    9526:	dc06      	bgt.n	9536 <__sflush_r+0x106>
    9528:	2240      	movs	r2, #64	; 0x40
    952a:	2001      	movs	r0, #1
    952c:	89a3      	ldrh	r3, [r4, #12]
    952e:	4240      	negs	r0, r0
    9530:	4313      	orrs	r3, r2
    9532:	81a3      	strh	r3, [r4, #12]
    9534:	e004      	b.n	9540 <__sflush_r+0x110>
    9536:	9b01      	ldr	r3, [sp, #4]
    9538:	183f      	adds	r7, r7, r0
    953a:	1a1b      	subs	r3, r3, r0
    953c:	9301      	str	r3, [sp, #4]
    953e:	e7e8      	b.n	9512 <__sflush_r+0xe2>
    9540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009544 <_fflush_r>:
    9544:	b538      	push	{r3, r4, r5, lr}
    9546:	690b      	ldr	r3, [r1, #16]
    9548:	1c05      	adds	r5, r0, #0
    954a:	1c0c      	adds	r4, r1, #0
    954c:	2b00      	cmp	r3, #0
    954e:	d101      	bne.n	9554 <_fflush_r+0x10>
    9550:	2000      	movs	r0, #0
    9552:	e01c      	b.n	958e <_fflush_r+0x4a>
    9554:	2800      	cmp	r0, #0
    9556:	d004      	beq.n	9562 <_fflush_r+0x1e>
    9558:	6983      	ldr	r3, [r0, #24]
    955a:	2b00      	cmp	r3, #0
    955c:	d101      	bne.n	9562 <_fflush_r+0x1e>
    955e:	f000 f85f 	bl	9620 <__sinit>
    9562:	4b0b      	ldr	r3, [pc, #44]	; (9590 <_fflush_r+0x4c>)
    9564:	429c      	cmp	r4, r3
    9566:	d101      	bne.n	956c <_fflush_r+0x28>
    9568:	686c      	ldr	r4, [r5, #4]
    956a:	e008      	b.n	957e <_fflush_r+0x3a>
    956c:	4b09      	ldr	r3, [pc, #36]	; (9594 <_fflush_r+0x50>)
    956e:	429c      	cmp	r4, r3
    9570:	d101      	bne.n	9576 <_fflush_r+0x32>
    9572:	68ac      	ldr	r4, [r5, #8]
    9574:	e003      	b.n	957e <_fflush_r+0x3a>
    9576:	4b08      	ldr	r3, [pc, #32]	; (9598 <_fflush_r+0x54>)
    9578:	429c      	cmp	r4, r3
    957a:	d100      	bne.n	957e <_fflush_r+0x3a>
    957c:	68ec      	ldr	r4, [r5, #12]
    957e:	220c      	movs	r2, #12
    9580:	5ea3      	ldrsh	r3, [r4, r2]
    9582:	2b00      	cmp	r3, #0
    9584:	d0e4      	beq.n	9550 <_fflush_r+0xc>
    9586:	1c28      	adds	r0, r5, #0
    9588:	1c21      	adds	r1, r4, #0
    958a:	f7ff ff51 	bl	9430 <__sflush_r>
    958e:	bd38      	pop	{r3, r4, r5, pc}
    9590:	0000c5c0 	.word	0x0000c5c0
    9594:	0000c5e0 	.word	0x0000c5e0
    9598:	0000c600 	.word	0x0000c600

0000959c <_cleanup_r>:
    959c:	b508      	push	{r3, lr}
    959e:	4902      	ldr	r1, [pc, #8]	; (95a8 <_cleanup_r+0xc>)
    95a0:	f000 f8ae 	bl	9700 <_fwalk_reent>
    95a4:	bd08      	pop	{r3, pc}
    95a6:	46c0      	nop			; (mov r8, r8)
    95a8:	00009545 	.word	0x00009545

000095ac <std.isra.0>:
    95ac:	2300      	movs	r3, #0
    95ae:	b510      	push	{r4, lr}
    95b0:	1c04      	adds	r4, r0, #0
    95b2:	6003      	str	r3, [r0, #0]
    95b4:	6043      	str	r3, [r0, #4]
    95b6:	6083      	str	r3, [r0, #8]
    95b8:	8181      	strh	r1, [r0, #12]
    95ba:	6643      	str	r3, [r0, #100]	; 0x64
    95bc:	81c2      	strh	r2, [r0, #14]
    95be:	6103      	str	r3, [r0, #16]
    95c0:	6143      	str	r3, [r0, #20]
    95c2:	6183      	str	r3, [r0, #24]
    95c4:	1c19      	adds	r1, r3, #0
    95c6:	2208      	movs	r2, #8
    95c8:	305c      	adds	r0, #92	; 0x5c
    95ca:	f7ff fa68 	bl	8a9e <memset>
    95ce:	4b05      	ldr	r3, [pc, #20]	; (95e4 <std.isra.0+0x38>)
    95d0:	6224      	str	r4, [r4, #32]
    95d2:	6263      	str	r3, [r4, #36]	; 0x24
    95d4:	4b04      	ldr	r3, [pc, #16]	; (95e8 <std.isra.0+0x3c>)
    95d6:	62a3      	str	r3, [r4, #40]	; 0x28
    95d8:	4b04      	ldr	r3, [pc, #16]	; (95ec <std.isra.0+0x40>)
    95da:	62e3      	str	r3, [r4, #44]	; 0x2c
    95dc:	4b04      	ldr	r3, [pc, #16]	; (95f0 <std.isra.0+0x44>)
    95de:	6323      	str	r3, [r4, #48]	; 0x30
    95e0:	bd10      	pop	{r4, pc}
    95e2:	46c0      	nop			; (mov r8, r8)
    95e4:	0000a095 	.word	0x0000a095
    95e8:	0000a0bd 	.word	0x0000a0bd
    95ec:	0000a0f5 	.word	0x0000a0f5
    95f0:	0000a121 	.word	0x0000a121

000095f4 <__sfmoreglue>:
    95f4:	b570      	push	{r4, r5, r6, lr}
    95f6:	2568      	movs	r5, #104	; 0x68
    95f8:	1e4b      	subs	r3, r1, #1
    95fa:	435d      	muls	r5, r3
    95fc:	1c0e      	adds	r6, r1, #0
    95fe:	1c29      	adds	r1, r5, #0
    9600:	3174      	adds	r1, #116	; 0x74
    9602:	f7ff fa9b 	bl	8b3c <_malloc_r>
    9606:	1e04      	subs	r4, r0, #0
    9608:	d008      	beq.n	961c <__sfmoreglue+0x28>
    960a:	2100      	movs	r1, #0
    960c:	1c2a      	adds	r2, r5, #0
    960e:	6001      	str	r1, [r0, #0]
    9610:	6046      	str	r6, [r0, #4]
    9612:	300c      	adds	r0, #12
    9614:	60a0      	str	r0, [r4, #8]
    9616:	3268      	adds	r2, #104	; 0x68
    9618:	f7ff fa41 	bl	8a9e <memset>
    961c:	1c20      	adds	r0, r4, #0
    961e:	bd70      	pop	{r4, r5, r6, pc}

00009620 <__sinit>:
    9620:	6983      	ldr	r3, [r0, #24]
    9622:	b513      	push	{r0, r1, r4, lr}
    9624:	2b00      	cmp	r3, #0
    9626:	d128      	bne.n	967a <__sinit+0x5a>
    9628:	6483      	str	r3, [r0, #72]	; 0x48
    962a:	64c3      	str	r3, [r0, #76]	; 0x4c
    962c:	6503      	str	r3, [r0, #80]	; 0x50
    962e:	4b13      	ldr	r3, [pc, #76]	; (967c <__sinit+0x5c>)
    9630:	4a13      	ldr	r2, [pc, #76]	; (9680 <__sinit+0x60>)
    9632:	681b      	ldr	r3, [r3, #0]
    9634:	6282      	str	r2, [r0, #40]	; 0x28
    9636:	9301      	str	r3, [sp, #4]
    9638:	4298      	cmp	r0, r3
    963a:	d101      	bne.n	9640 <__sinit+0x20>
    963c:	2301      	movs	r3, #1
    963e:	6183      	str	r3, [r0, #24]
    9640:	1c04      	adds	r4, r0, #0
    9642:	f000 f81f 	bl	9684 <__sfp>
    9646:	6060      	str	r0, [r4, #4]
    9648:	1c20      	adds	r0, r4, #0
    964a:	f000 f81b 	bl	9684 <__sfp>
    964e:	60a0      	str	r0, [r4, #8]
    9650:	1c20      	adds	r0, r4, #0
    9652:	f000 f817 	bl	9684 <__sfp>
    9656:	2104      	movs	r1, #4
    9658:	60e0      	str	r0, [r4, #12]
    965a:	2200      	movs	r2, #0
    965c:	6860      	ldr	r0, [r4, #4]
    965e:	f7ff ffa5 	bl	95ac <std.isra.0>
    9662:	68a0      	ldr	r0, [r4, #8]
    9664:	2109      	movs	r1, #9
    9666:	2201      	movs	r2, #1
    9668:	f7ff ffa0 	bl	95ac <std.isra.0>
    966c:	68e0      	ldr	r0, [r4, #12]
    966e:	2112      	movs	r1, #18
    9670:	2202      	movs	r2, #2
    9672:	f7ff ff9b 	bl	95ac <std.isra.0>
    9676:	2301      	movs	r3, #1
    9678:	61a3      	str	r3, [r4, #24]
    967a:	bd13      	pop	{r0, r1, r4, pc}
    967c:	0000bf24 	.word	0x0000bf24
    9680:	0000959d 	.word	0x0000959d

00009684 <__sfp>:
    9684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9686:	4b1d      	ldr	r3, [pc, #116]	; (96fc <__sfp+0x78>)
    9688:	1c06      	adds	r6, r0, #0
    968a:	681d      	ldr	r5, [r3, #0]
    968c:	69ab      	ldr	r3, [r5, #24]
    968e:	2b00      	cmp	r3, #0
    9690:	d102      	bne.n	9698 <__sfp+0x14>
    9692:	1c28      	adds	r0, r5, #0
    9694:	f7ff ffc4 	bl	9620 <__sinit>
    9698:	3548      	adds	r5, #72	; 0x48
    969a:	68ac      	ldr	r4, [r5, #8]
    969c:	686b      	ldr	r3, [r5, #4]
    969e:	3b01      	subs	r3, #1
    96a0:	d405      	bmi.n	96ae <__sfp+0x2a>
    96a2:	220c      	movs	r2, #12
    96a4:	5ea7      	ldrsh	r7, [r4, r2]
    96a6:	2f00      	cmp	r7, #0
    96a8:	d010      	beq.n	96cc <__sfp+0x48>
    96aa:	3468      	adds	r4, #104	; 0x68
    96ac:	e7f7      	b.n	969e <__sfp+0x1a>
    96ae:	682b      	ldr	r3, [r5, #0]
    96b0:	2b00      	cmp	r3, #0
    96b2:	d106      	bne.n	96c2 <__sfp+0x3e>
    96b4:	1c30      	adds	r0, r6, #0
    96b6:	2104      	movs	r1, #4
    96b8:	f7ff ff9c 	bl	95f4 <__sfmoreglue>
    96bc:	6028      	str	r0, [r5, #0]
    96be:	2800      	cmp	r0, #0
    96c0:	d001      	beq.n	96c6 <__sfp+0x42>
    96c2:	682d      	ldr	r5, [r5, #0]
    96c4:	e7e9      	b.n	969a <__sfp+0x16>
    96c6:	230c      	movs	r3, #12
    96c8:	6033      	str	r3, [r6, #0]
    96ca:	e016      	b.n	96fa <__sfp+0x76>
    96cc:	2301      	movs	r3, #1
    96ce:	1c20      	adds	r0, r4, #0
    96d0:	425b      	negs	r3, r3
    96d2:	81e3      	strh	r3, [r4, #14]
    96d4:	3302      	adds	r3, #2
    96d6:	81a3      	strh	r3, [r4, #12]
    96d8:	6667      	str	r7, [r4, #100]	; 0x64
    96da:	6027      	str	r7, [r4, #0]
    96dc:	60a7      	str	r7, [r4, #8]
    96de:	6067      	str	r7, [r4, #4]
    96e0:	6127      	str	r7, [r4, #16]
    96e2:	6167      	str	r7, [r4, #20]
    96e4:	61a7      	str	r7, [r4, #24]
    96e6:	305c      	adds	r0, #92	; 0x5c
    96e8:	1c39      	adds	r1, r7, #0
    96ea:	2208      	movs	r2, #8
    96ec:	f7ff f9d7 	bl	8a9e <memset>
    96f0:	1c20      	adds	r0, r4, #0
    96f2:	6367      	str	r7, [r4, #52]	; 0x34
    96f4:	63a7      	str	r7, [r4, #56]	; 0x38
    96f6:	64a7      	str	r7, [r4, #72]	; 0x48
    96f8:	64e7      	str	r7, [r4, #76]	; 0x4c
    96fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    96fc:	0000bf24 	.word	0x0000bf24

00009700 <_fwalk_reent>:
    9700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9702:	1c04      	adds	r4, r0, #0
    9704:	1c07      	adds	r7, r0, #0
    9706:	2600      	movs	r6, #0
    9708:	9101      	str	r1, [sp, #4]
    970a:	3448      	adds	r4, #72	; 0x48
    970c:	2c00      	cmp	r4, #0
    970e:	d016      	beq.n	973e <_fwalk_reent+0x3e>
    9710:	6863      	ldr	r3, [r4, #4]
    9712:	68a5      	ldr	r5, [r4, #8]
    9714:	9300      	str	r3, [sp, #0]
    9716:	9b00      	ldr	r3, [sp, #0]
    9718:	3b01      	subs	r3, #1
    971a:	9300      	str	r3, [sp, #0]
    971c:	d40d      	bmi.n	973a <_fwalk_reent+0x3a>
    971e:	89ab      	ldrh	r3, [r5, #12]
    9720:	2b01      	cmp	r3, #1
    9722:	d908      	bls.n	9736 <_fwalk_reent+0x36>
    9724:	220e      	movs	r2, #14
    9726:	5eab      	ldrsh	r3, [r5, r2]
    9728:	3301      	adds	r3, #1
    972a:	d004      	beq.n	9736 <_fwalk_reent+0x36>
    972c:	1c38      	adds	r0, r7, #0
    972e:	1c29      	adds	r1, r5, #0
    9730:	9b01      	ldr	r3, [sp, #4]
    9732:	4798      	blx	r3
    9734:	4306      	orrs	r6, r0
    9736:	3568      	adds	r5, #104	; 0x68
    9738:	e7ed      	b.n	9716 <_fwalk_reent+0x16>
    973a:	6824      	ldr	r4, [r4, #0]
    973c:	e7e6      	b.n	970c <_fwalk_reent+0xc>
    973e:	1c30      	adds	r0, r6, #0
    9740:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00009744 <__smakebuf_r>:
    9744:	b5f0      	push	{r4, r5, r6, r7, lr}
    9746:	898b      	ldrh	r3, [r1, #12]
    9748:	b091      	sub	sp, #68	; 0x44
    974a:	079b      	lsls	r3, r3, #30
    974c:	d506      	bpl.n	975c <__smakebuf_r+0x18>
    974e:	1c0b      	adds	r3, r1, #0
    9750:	3347      	adds	r3, #71	; 0x47
    9752:	600b      	str	r3, [r1, #0]
    9754:	610b      	str	r3, [r1, #16]
    9756:	2301      	movs	r3, #1
    9758:	614b      	str	r3, [r1, #20]
    975a:	e045      	b.n	97e8 <__smakebuf_r+0xa4>
    975c:	1c0c      	adds	r4, r1, #0
    975e:	230e      	movs	r3, #14
    9760:	5ec9      	ldrsh	r1, [r1, r3]
    9762:	1c06      	adds	r6, r0, #0
    9764:	2900      	cmp	r1, #0
    9766:	da04      	bge.n	9772 <__smakebuf_r+0x2e>
    9768:	2380      	movs	r3, #128	; 0x80
    976a:	89a5      	ldrh	r5, [r4, #12]
    976c:	401d      	ands	r5, r3
    976e:	d110      	bne.n	9792 <__smakebuf_r+0x4e>
    9770:	e00c      	b.n	978c <__smakebuf_r+0x48>
    9772:	aa01      	add	r2, sp, #4
    9774:	f000 fd00 	bl	a178 <_fstat_r>
    9778:	2800      	cmp	r0, #0
    977a:	dbf5      	blt.n	9768 <__smakebuf_r+0x24>
    977c:	23f0      	movs	r3, #240	; 0xf0
    977e:	9d02      	ldr	r5, [sp, #8]
    9780:	021b      	lsls	r3, r3, #8
    9782:	401d      	ands	r5, r3
    9784:	4b19      	ldr	r3, [pc, #100]	; (97ec <__smakebuf_r+0xa8>)
    9786:	18ed      	adds	r5, r5, r3
    9788:	426b      	negs	r3, r5
    978a:	415d      	adcs	r5, r3
    978c:	2780      	movs	r7, #128	; 0x80
    978e:	00ff      	lsls	r7, r7, #3
    9790:	e001      	b.n	9796 <__smakebuf_r+0x52>
    9792:	2500      	movs	r5, #0
    9794:	2740      	movs	r7, #64	; 0x40
    9796:	1c30      	adds	r0, r6, #0
    9798:	1c39      	adds	r1, r7, #0
    979a:	f7ff f9cf 	bl	8b3c <_malloc_r>
    979e:	2800      	cmp	r0, #0
    97a0:	d10c      	bne.n	97bc <__smakebuf_r+0x78>
    97a2:	89a3      	ldrh	r3, [r4, #12]
    97a4:	059a      	lsls	r2, r3, #22
    97a6:	d41f      	bmi.n	97e8 <__smakebuf_r+0xa4>
    97a8:	2202      	movs	r2, #2
    97aa:	4313      	orrs	r3, r2
    97ac:	81a3      	strh	r3, [r4, #12]
    97ae:	1c23      	adds	r3, r4, #0
    97b0:	3347      	adds	r3, #71	; 0x47
    97b2:	6023      	str	r3, [r4, #0]
    97b4:	6123      	str	r3, [r4, #16]
    97b6:	2301      	movs	r3, #1
    97b8:	6163      	str	r3, [r4, #20]
    97ba:	e015      	b.n	97e8 <__smakebuf_r+0xa4>
    97bc:	2280      	movs	r2, #128	; 0x80
    97be:	4b0c      	ldr	r3, [pc, #48]	; (97f0 <__smakebuf_r+0xac>)
    97c0:	62b3      	str	r3, [r6, #40]	; 0x28
    97c2:	89a3      	ldrh	r3, [r4, #12]
    97c4:	6020      	str	r0, [r4, #0]
    97c6:	4313      	orrs	r3, r2
    97c8:	81a3      	strh	r3, [r4, #12]
    97ca:	6120      	str	r0, [r4, #16]
    97cc:	6167      	str	r7, [r4, #20]
    97ce:	2d00      	cmp	r5, #0
    97d0:	d00a      	beq.n	97e8 <__smakebuf_r+0xa4>
    97d2:	230e      	movs	r3, #14
    97d4:	5ee1      	ldrsh	r1, [r4, r3]
    97d6:	1c30      	adds	r0, r6, #0
    97d8:	f000 fce0 	bl	a19c <_isatty_r>
    97dc:	2800      	cmp	r0, #0
    97de:	d003      	beq.n	97e8 <__smakebuf_r+0xa4>
    97e0:	2201      	movs	r2, #1
    97e2:	89a3      	ldrh	r3, [r4, #12]
    97e4:	4313      	orrs	r3, r2
    97e6:	81a3      	strh	r3, [r4, #12]
    97e8:	b011      	add	sp, #68	; 0x44
    97ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    97ec:	ffffe000 	.word	0xffffe000
    97f0:	0000959d 	.word	0x0000959d

000097f4 <__ssputs_r>:
    97f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    97f6:	688e      	ldr	r6, [r1, #8]
    97f8:	b085      	sub	sp, #20
    97fa:	1c07      	adds	r7, r0, #0
    97fc:	1c0c      	adds	r4, r1, #0
    97fe:	9203      	str	r2, [sp, #12]
    9800:	9301      	str	r3, [sp, #4]
    9802:	42b3      	cmp	r3, r6
    9804:	d345      	bcc.n	9892 <__ssputs_r+0x9e>
    9806:	2390      	movs	r3, #144	; 0x90
    9808:	898a      	ldrh	r2, [r1, #12]
    980a:	00db      	lsls	r3, r3, #3
    980c:	421a      	tst	r2, r3
    980e:	d03d      	beq.n	988c <__ssputs_r+0x98>
    9810:	2503      	movs	r5, #3
    9812:	6909      	ldr	r1, [r1, #16]
    9814:	6823      	ldr	r3, [r4, #0]
    9816:	9801      	ldr	r0, [sp, #4]
    9818:	1a5b      	subs	r3, r3, r1
    981a:	9302      	str	r3, [sp, #8]
    981c:	6963      	ldr	r3, [r4, #20]
    981e:	435d      	muls	r5, r3
    9820:	0feb      	lsrs	r3, r5, #31
    9822:	195d      	adds	r5, r3, r5
    9824:	9b02      	ldr	r3, [sp, #8]
    9826:	106d      	asrs	r5, r5, #1
    9828:	3301      	adds	r3, #1
    982a:	181b      	adds	r3, r3, r0
    982c:	429d      	cmp	r5, r3
    982e:	d200      	bcs.n	9832 <__ssputs_r+0x3e>
    9830:	1c1d      	adds	r5, r3, #0
    9832:	1c38      	adds	r0, r7, #0
    9834:	0553      	lsls	r3, r2, #21
    9836:	d50f      	bpl.n	9858 <__ssputs_r+0x64>
    9838:	1c29      	adds	r1, r5, #0
    983a:	f7ff f97f 	bl	8b3c <_malloc_r>
    983e:	1e06      	subs	r6, r0, #0
    9840:	d013      	beq.n	986a <__ssputs_r+0x76>
    9842:	9a02      	ldr	r2, [sp, #8]
    9844:	6921      	ldr	r1, [r4, #16]
    9846:	f7ff f90d 	bl	8a64 <memcpy>
    984a:	89a2      	ldrh	r2, [r4, #12]
    984c:	4b18      	ldr	r3, [pc, #96]	; (98b0 <__ssputs_r+0xbc>)
    984e:	4013      	ands	r3, r2
    9850:	2280      	movs	r2, #128	; 0x80
    9852:	4313      	orrs	r3, r2
    9854:	81a3      	strh	r3, [r4, #12]
    9856:	e011      	b.n	987c <__ssputs_r+0x88>
    9858:	1c2a      	adds	r2, r5, #0
    985a:	f000 fcd0 	bl	a1fe <_realloc_r>
    985e:	1e06      	subs	r6, r0, #0
    9860:	d10c      	bne.n	987c <__ssputs_r+0x88>
    9862:	1c38      	adds	r0, r7, #0
    9864:	6921      	ldr	r1, [r4, #16]
    9866:	f7ff f923 	bl	8ab0 <_free_r>
    986a:	230c      	movs	r3, #12
    986c:	2240      	movs	r2, #64	; 0x40
    986e:	2001      	movs	r0, #1
    9870:	603b      	str	r3, [r7, #0]
    9872:	89a3      	ldrh	r3, [r4, #12]
    9874:	4240      	negs	r0, r0
    9876:	4313      	orrs	r3, r2
    9878:	81a3      	strh	r3, [r4, #12]
    987a:	e017      	b.n	98ac <__ssputs_r+0xb8>
    987c:	9b02      	ldr	r3, [sp, #8]
    987e:	6126      	str	r6, [r4, #16]
    9880:	18f6      	adds	r6, r6, r3
    9882:	6026      	str	r6, [r4, #0]
    9884:	6165      	str	r5, [r4, #20]
    9886:	9e01      	ldr	r6, [sp, #4]
    9888:	1aed      	subs	r5, r5, r3
    988a:	60a5      	str	r5, [r4, #8]
    988c:	9b01      	ldr	r3, [sp, #4]
    988e:	42b3      	cmp	r3, r6
    9890:	d200      	bcs.n	9894 <__ssputs_r+0xa0>
    9892:	9e01      	ldr	r6, [sp, #4]
    9894:	1c32      	adds	r2, r6, #0
    9896:	6820      	ldr	r0, [r4, #0]
    9898:	9903      	ldr	r1, [sp, #12]
    989a:	f7ff f8ec 	bl	8a76 <memmove>
    989e:	2000      	movs	r0, #0
    98a0:	68a3      	ldr	r3, [r4, #8]
    98a2:	1b9b      	subs	r3, r3, r6
    98a4:	60a3      	str	r3, [r4, #8]
    98a6:	6823      	ldr	r3, [r4, #0]
    98a8:	199e      	adds	r6, r3, r6
    98aa:	6026      	str	r6, [r4, #0]
    98ac:	b005      	add	sp, #20
    98ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    98b0:	fffffb7f 	.word	0xfffffb7f

000098b4 <_svfiprintf_r>:
    98b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    98b6:	b09f      	sub	sp, #124	; 0x7c
    98b8:	9002      	str	r0, [sp, #8]
    98ba:	9305      	str	r3, [sp, #20]
    98bc:	898b      	ldrh	r3, [r1, #12]
    98be:	1c0e      	adds	r6, r1, #0
    98c0:	1c17      	adds	r7, r2, #0
    98c2:	061b      	lsls	r3, r3, #24
    98c4:	d510      	bpl.n	98e8 <_svfiprintf_r+0x34>
    98c6:	690b      	ldr	r3, [r1, #16]
    98c8:	2b00      	cmp	r3, #0
    98ca:	d10d      	bne.n	98e8 <_svfiprintf_r+0x34>
    98cc:	2140      	movs	r1, #64	; 0x40
    98ce:	f7ff f935 	bl	8b3c <_malloc_r>
    98d2:	6030      	str	r0, [r6, #0]
    98d4:	6130      	str	r0, [r6, #16]
    98d6:	2800      	cmp	r0, #0
    98d8:	d104      	bne.n	98e4 <_svfiprintf_r+0x30>
    98da:	230c      	movs	r3, #12
    98dc:	9a02      	ldr	r2, [sp, #8]
    98de:	3801      	subs	r0, #1
    98e0:	6013      	str	r3, [r2, #0]
    98e2:	e0d0      	b.n	9a86 <_svfiprintf_r+0x1d2>
    98e4:	2340      	movs	r3, #64	; 0x40
    98e6:	6173      	str	r3, [r6, #20]
    98e8:	2300      	movs	r3, #0
    98ea:	ad06      	add	r5, sp, #24
    98ec:	616b      	str	r3, [r5, #20]
    98ee:	3320      	adds	r3, #32
    98f0:	766b      	strb	r3, [r5, #25]
    98f2:	3310      	adds	r3, #16
    98f4:	76ab      	strb	r3, [r5, #26]
    98f6:	1c3c      	adds	r4, r7, #0
    98f8:	7823      	ldrb	r3, [r4, #0]
    98fa:	2b00      	cmp	r3, #0
    98fc:	d103      	bne.n	9906 <_svfiprintf_r+0x52>
    98fe:	1be3      	subs	r3, r4, r7
    9900:	9304      	str	r3, [sp, #16]
    9902:	d012      	beq.n	992a <_svfiprintf_r+0x76>
    9904:	e003      	b.n	990e <_svfiprintf_r+0x5a>
    9906:	2b25      	cmp	r3, #37	; 0x25
    9908:	d0f9      	beq.n	98fe <_svfiprintf_r+0x4a>
    990a:	3401      	adds	r4, #1
    990c:	e7f4      	b.n	98f8 <_svfiprintf_r+0x44>
    990e:	9b04      	ldr	r3, [sp, #16]
    9910:	9802      	ldr	r0, [sp, #8]
    9912:	1c31      	adds	r1, r6, #0
    9914:	1c3a      	adds	r2, r7, #0
    9916:	f7ff ff6d 	bl	97f4 <__ssputs_r>
    991a:	1c43      	adds	r3, r0, #1
    991c:	d100      	bne.n	9920 <_svfiprintf_r+0x6c>
    991e:	e0ac      	b.n	9a7a <_svfiprintf_r+0x1c6>
    9920:	696a      	ldr	r2, [r5, #20]
    9922:	9b04      	ldr	r3, [sp, #16]
    9924:	4694      	mov	ip, r2
    9926:	4463      	add	r3, ip
    9928:	616b      	str	r3, [r5, #20]
    992a:	7823      	ldrb	r3, [r4, #0]
    992c:	2b00      	cmp	r3, #0
    992e:	d100      	bne.n	9932 <_svfiprintf_r+0x7e>
    9930:	e0a3      	b.n	9a7a <_svfiprintf_r+0x1c6>
    9932:	2201      	movs	r2, #1
    9934:	2300      	movs	r3, #0
    9936:	4252      	negs	r2, r2
    9938:	606a      	str	r2, [r5, #4]
    993a:	a902      	add	r1, sp, #8
    993c:	3254      	adds	r2, #84	; 0x54
    993e:	1852      	adds	r2, r2, r1
    9940:	3401      	adds	r4, #1
    9942:	602b      	str	r3, [r5, #0]
    9944:	60eb      	str	r3, [r5, #12]
    9946:	60ab      	str	r3, [r5, #8]
    9948:	7013      	strb	r3, [r2, #0]
    994a:	65ab      	str	r3, [r5, #88]	; 0x58
    994c:	4f4f      	ldr	r7, [pc, #316]	; (9a8c <_svfiprintf_r+0x1d8>)
    994e:	7821      	ldrb	r1, [r4, #0]
    9950:	1c38      	adds	r0, r7, #0
    9952:	2205      	movs	r2, #5
    9954:	f000 fc48 	bl	a1e8 <memchr>
    9958:	2800      	cmp	r0, #0
    995a:	d008      	beq.n	996e <_svfiprintf_r+0xba>
    995c:	1bc0      	subs	r0, r0, r7
    995e:	2701      	movs	r7, #1
    9960:	4087      	lsls	r7, r0
    9962:	1c38      	adds	r0, r7, #0
    9964:	682b      	ldr	r3, [r5, #0]
    9966:	3401      	adds	r4, #1
    9968:	4318      	orrs	r0, r3
    996a:	6028      	str	r0, [r5, #0]
    996c:	e7ee      	b.n	994c <_svfiprintf_r+0x98>
    996e:	682b      	ldr	r3, [r5, #0]
    9970:	06da      	lsls	r2, r3, #27
    9972:	d504      	bpl.n	997e <_svfiprintf_r+0xca>
    9974:	2253      	movs	r2, #83	; 0x53
    9976:	2120      	movs	r1, #32
    9978:	a802      	add	r0, sp, #8
    997a:	1812      	adds	r2, r2, r0
    997c:	7011      	strb	r1, [r2, #0]
    997e:	071a      	lsls	r2, r3, #28
    9980:	d504      	bpl.n	998c <_svfiprintf_r+0xd8>
    9982:	2253      	movs	r2, #83	; 0x53
    9984:	212b      	movs	r1, #43	; 0x2b
    9986:	a802      	add	r0, sp, #8
    9988:	1812      	adds	r2, r2, r0
    998a:	7011      	strb	r1, [r2, #0]
    998c:	7822      	ldrb	r2, [r4, #0]
    998e:	2a2a      	cmp	r2, #42	; 0x2a
    9990:	d001      	beq.n	9996 <_svfiprintf_r+0xe2>
    9992:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9994:	e00e      	b.n	99b4 <_svfiprintf_r+0x100>
    9996:	9a05      	ldr	r2, [sp, #20]
    9998:	1d11      	adds	r1, r2, #4
    999a:	6812      	ldr	r2, [r2, #0]
    999c:	9105      	str	r1, [sp, #20]
    999e:	2a00      	cmp	r2, #0
    99a0:	db01      	blt.n	99a6 <_svfiprintf_r+0xf2>
    99a2:	9209      	str	r2, [sp, #36]	; 0x24
    99a4:	e004      	b.n	99b0 <_svfiprintf_r+0xfc>
    99a6:	4252      	negs	r2, r2
    99a8:	60ea      	str	r2, [r5, #12]
    99aa:	2202      	movs	r2, #2
    99ac:	4313      	orrs	r3, r2
    99ae:	602b      	str	r3, [r5, #0]
    99b0:	3401      	adds	r4, #1
    99b2:	e009      	b.n	99c8 <_svfiprintf_r+0x114>
    99b4:	7822      	ldrb	r2, [r4, #0]
    99b6:	3a30      	subs	r2, #48	; 0x30
    99b8:	2a09      	cmp	r2, #9
    99ba:	d804      	bhi.n	99c6 <_svfiprintf_r+0x112>
    99bc:	210a      	movs	r1, #10
    99be:	434b      	muls	r3, r1
    99c0:	3401      	adds	r4, #1
    99c2:	189b      	adds	r3, r3, r2
    99c4:	e7f6      	b.n	99b4 <_svfiprintf_r+0x100>
    99c6:	9309      	str	r3, [sp, #36]	; 0x24
    99c8:	7823      	ldrb	r3, [r4, #0]
    99ca:	2b2e      	cmp	r3, #46	; 0x2e
    99cc:	d118      	bne.n	9a00 <_svfiprintf_r+0x14c>
    99ce:	7863      	ldrb	r3, [r4, #1]
    99d0:	2b2a      	cmp	r3, #42	; 0x2a
    99d2:	d109      	bne.n	99e8 <_svfiprintf_r+0x134>
    99d4:	9b05      	ldr	r3, [sp, #20]
    99d6:	3402      	adds	r4, #2
    99d8:	1d1a      	adds	r2, r3, #4
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	9205      	str	r2, [sp, #20]
    99de:	2b00      	cmp	r3, #0
    99e0:	da0d      	bge.n	99fe <_svfiprintf_r+0x14a>
    99e2:	2301      	movs	r3, #1
    99e4:	425b      	negs	r3, r3
    99e6:	e00a      	b.n	99fe <_svfiprintf_r+0x14a>
    99e8:	2300      	movs	r3, #0
    99ea:	3401      	adds	r4, #1
    99ec:	7822      	ldrb	r2, [r4, #0]
    99ee:	3a30      	subs	r2, #48	; 0x30
    99f0:	2a09      	cmp	r2, #9
    99f2:	d804      	bhi.n	99fe <_svfiprintf_r+0x14a>
    99f4:	210a      	movs	r1, #10
    99f6:	434b      	muls	r3, r1
    99f8:	3401      	adds	r4, #1
    99fa:	189b      	adds	r3, r3, r2
    99fc:	e7f6      	b.n	99ec <_svfiprintf_r+0x138>
    99fe:	9307      	str	r3, [sp, #28]
    9a00:	4f23      	ldr	r7, [pc, #140]	; (9a90 <_svfiprintf_r+0x1dc>)
    9a02:	7821      	ldrb	r1, [r4, #0]
    9a04:	1c38      	adds	r0, r7, #0
    9a06:	2203      	movs	r2, #3
    9a08:	f000 fbee 	bl	a1e8 <memchr>
    9a0c:	2800      	cmp	r0, #0
    9a0e:	d007      	beq.n	9a20 <_svfiprintf_r+0x16c>
    9a10:	1bc0      	subs	r0, r0, r7
    9a12:	2740      	movs	r7, #64	; 0x40
    9a14:	4087      	lsls	r7, r0
    9a16:	1c38      	adds	r0, r7, #0
    9a18:	682b      	ldr	r3, [r5, #0]
    9a1a:	3401      	adds	r4, #1
    9a1c:	4318      	orrs	r0, r3
    9a1e:	6028      	str	r0, [r5, #0]
    9a20:	7821      	ldrb	r1, [r4, #0]
    9a22:	481c      	ldr	r0, [pc, #112]	; (9a94 <_svfiprintf_r+0x1e0>)
    9a24:	2206      	movs	r2, #6
    9a26:	1c67      	adds	r7, r4, #1
    9a28:	7629      	strb	r1, [r5, #24]
    9a2a:	f000 fbdd 	bl	a1e8 <memchr>
    9a2e:	2800      	cmp	r0, #0
    9a30:	d012      	beq.n	9a58 <_svfiprintf_r+0x1a4>
    9a32:	4b19      	ldr	r3, [pc, #100]	; (9a98 <_svfiprintf_r+0x1e4>)
    9a34:	2b00      	cmp	r3, #0
    9a36:	d106      	bne.n	9a46 <_svfiprintf_r+0x192>
    9a38:	2207      	movs	r2, #7
    9a3a:	9b05      	ldr	r3, [sp, #20]
    9a3c:	3307      	adds	r3, #7
    9a3e:	4393      	bics	r3, r2
    9a40:	3308      	adds	r3, #8
    9a42:	9305      	str	r3, [sp, #20]
    9a44:	e014      	b.n	9a70 <_svfiprintf_r+0x1bc>
    9a46:	ab05      	add	r3, sp, #20
    9a48:	9300      	str	r3, [sp, #0]
    9a4a:	9802      	ldr	r0, [sp, #8]
    9a4c:	1c29      	adds	r1, r5, #0
    9a4e:	1c32      	adds	r2, r6, #0
    9a50:	4b12      	ldr	r3, [pc, #72]	; (9a9c <_svfiprintf_r+0x1e8>)
    9a52:	e000      	b.n	9a56 <_svfiprintf_r+0x1a2>
    9a54:	bf00      	nop
    9a56:	e007      	b.n	9a68 <_svfiprintf_r+0x1b4>
    9a58:	ab05      	add	r3, sp, #20
    9a5a:	9300      	str	r3, [sp, #0]
    9a5c:	9802      	ldr	r0, [sp, #8]
    9a5e:	1c29      	adds	r1, r5, #0
    9a60:	1c32      	adds	r2, r6, #0
    9a62:	4b0e      	ldr	r3, [pc, #56]	; (9a9c <_svfiprintf_r+0x1e8>)
    9a64:	f000 f9c2 	bl	9dec <_printf_i>
    9a68:	9003      	str	r0, [sp, #12]
    9a6a:	9b03      	ldr	r3, [sp, #12]
    9a6c:	3301      	adds	r3, #1
    9a6e:	d004      	beq.n	9a7a <_svfiprintf_r+0x1c6>
    9a70:	696b      	ldr	r3, [r5, #20]
    9a72:	9a03      	ldr	r2, [sp, #12]
    9a74:	189b      	adds	r3, r3, r2
    9a76:	616b      	str	r3, [r5, #20]
    9a78:	e73d      	b.n	98f6 <_svfiprintf_r+0x42>
    9a7a:	89b3      	ldrh	r3, [r6, #12]
    9a7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9a7e:	065b      	lsls	r3, r3, #25
    9a80:	d501      	bpl.n	9a86 <_svfiprintf_r+0x1d2>
    9a82:	2001      	movs	r0, #1
    9a84:	4240      	negs	r0, r0
    9a86:	b01f      	add	sp, #124	; 0x7c
    9a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a8a:	46c0      	nop			; (mov r8, r8)
    9a8c:	0000c620 	.word	0x0000c620
    9a90:	0000c626 	.word	0x0000c626
    9a94:	0000c62a 	.word	0x0000c62a
    9a98:	00000000 	.word	0x00000000
    9a9c:	000097f5 	.word	0x000097f5

00009aa0 <__sfputc_r>:
    9aa0:	6893      	ldr	r3, [r2, #8]
    9aa2:	b510      	push	{r4, lr}
    9aa4:	3b01      	subs	r3, #1
    9aa6:	6093      	str	r3, [r2, #8]
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	da05      	bge.n	9ab8 <__sfputc_r+0x18>
    9aac:	6994      	ldr	r4, [r2, #24]
    9aae:	42a3      	cmp	r3, r4
    9ab0:	db08      	blt.n	9ac4 <__sfputc_r+0x24>
    9ab2:	b2cb      	uxtb	r3, r1
    9ab4:	2b0a      	cmp	r3, #10
    9ab6:	d005      	beq.n	9ac4 <__sfputc_r+0x24>
    9ab8:	6813      	ldr	r3, [r2, #0]
    9aba:	1c58      	adds	r0, r3, #1
    9abc:	6010      	str	r0, [r2, #0]
    9abe:	7019      	strb	r1, [r3, #0]
    9ac0:	b2c8      	uxtb	r0, r1
    9ac2:	e001      	b.n	9ac8 <__sfputc_r+0x28>
    9ac4:	f7ff fbe8 	bl	9298 <__swbuf_r>
    9ac8:	bd10      	pop	{r4, pc}

00009aca <__sfputs_r>:
    9aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9acc:	1c06      	adds	r6, r0, #0
    9ace:	1c0f      	adds	r7, r1, #0
    9ad0:	1c14      	adds	r4, r2, #0
    9ad2:	18d5      	adds	r5, r2, r3
    9ad4:	42ac      	cmp	r4, r5
    9ad6:	d008      	beq.n	9aea <__sfputs_r+0x20>
    9ad8:	7821      	ldrb	r1, [r4, #0]
    9ada:	1c30      	adds	r0, r6, #0
    9adc:	1c3a      	adds	r2, r7, #0
    9ade:	f7ff ffdf 	bl	9aa0 <__sfputc_r>
    9ae2:	3401      	adds	r4, #1
    9ae4:	1c43      	adds	r3, r0, #1
    9ae6:	d1f5      	bne.n	9ad4 <__sfputs_r+0xa>
    9ae8:	e000      	b.n	9aec <__sfputs_r+0x22>
    9aea:	2000      	movs	r0, #0
    9aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009af0 <_vfiprintf_r>:
    9af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9af2:	b09f      	sub	sp, #124	; 0x7c
    9af4:	1c06      	adds	r6, r0, #0
    9af6:	1c0f      	adds	r7, r1, #0
    9af8:	9202      	str	r2, [sp, #8]
    9afa:	9305      	str	r3, [sp, #20]
    9afc:	2800      	cmp	r0, #0
    9afe:	d004      	beq.n	9b0a <_vfiprintf_r+0x1a>
    9b00:	6983      	ldr	r3, [r0, #24]
    9b02:	2b00      	cmp	r3, #0
    9b04:	d101      	bne.n	9b0a <_vfiprintf_r+0x1a>
    9b06:	f7ff fd8b 	bl	9620 <__sinit>
    9b0a:	4b79      	ldr	r3, [pc, #484]	; (9cf0 <_vfiprintf_r+0x200>)
    9b0c:	429f      	cmp	r7, r3
    9b0e:	d101      	bne.n	9b14 <_vfiprintf_r+0x24>
    9b10:	6877      	ldr	r7, [r6, #4]
    9b12:	e008      	b.n	9b26 <_vfiprintf_r+0x36>
    9b14:	4b77      	ldr	r3, [pc, #476]	; (9cf4 <_vfiprintf_r+0x204>)
    9b16:	429f      	cmp	r7, r3
    9b18:	d101      	bne.n	9b1e <_vfiprintf_r+0x2e>
    9b1a:	68b7      	ldr	r7, [r6, #8]
    9b1c:	e003      	b.n	9b26 <_vfiprintf_r+0x36>
    9b1e:	4b76      	ldr	r3, [pc, #472]	; (9cf8 <_vfiprintf_r+0x208>)
    9b20:	429f      	cmp	r7, r3
    9b22:	d100      	bne.n	9b26 <_vfiprintf_r+0x36>
    9b24:	68f7      	ldr	r7, [r6, #12]
    9b26:	89bb      	ldrh	r3, [r7, #12]
    9b28:	071b      	lsls	r3, r3, #28
    9b2a:	d50a      	bpl.n	9b42 <_vfiprintf_r+0x52>
    9b2c:	693b      	ldr	r3, [r7, #16]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d007      	beq.n	9b42 <_vfiprintf_r+0x52>
    9b32:	2300      	movs	r3, #0
    9b34:	ad06      	add	r5, sp, #24
    9b36:	616b      	str	r3, [r5, #20]
    9b38:	3320      	adds	r3, #32
    9b3a:	766b      	strb	r3, [r5, #25]
    9b3c:	3310      	adds	r3, #16
    9b3e:	76ab      	strb	r3, [r5, #26]
    9b40:	e03d      	b.n	9bbe <_vfiprintf_r+0xce>
    9b42:	1c30      	adds	r0, r6, #0
    9b44:	1c39      	adds	r1, r7, #0
    9b46:	f7ff fbff 	bl	9348 <__swsetup_r>
    9b4a:	2800      	cmp	r0, #0
    9b4c:	d0f1      	beq.n	9b32 <_vfiprintf_r+0x42>
    9b4e:	2001      	movs	r0, #1
    9b50:	4240      	negs	r0, r0
    9b52:	e0ca      	b.n	9cea <_vfiprintf_r+0x1fa>
    9b54:	9a05      	ldr	r2, [sp, #20]
    9b56:	1d11      	adds	r1, r2, #4
    9b58:	6812      	ldr	r2, [r2, #0]
    9b5a:	9105      	str	r1, [sp, #20]
    9b5c:	2a00      	cmp	r2, #0
    9b5e:	db7e      	blt.n	9c5e <_vfiprintf_r+0x16e>
    9b60:	9209      	str	r2, [sp, #36]	; 0x24
    9b62:	3401      	adds	r4, #1
    9b64:	7823      	ldrb	r3, [r4, #0]
    9b66:	2b2e      	cmp	r3, #46	; 0x2e
    9b68:	d100      	bne.n	9b6c <_vfiprintf_r+0x7c>
    9b6a:	e089      	b.n	9c80 <_vfiprintf_r+0x190>
    9b6c:	7821      	ldrb	r1, [r4, #0]
    9b6e:	4863      	ldr	r0, [pc, #396]	; (9cfc <_vfiprintf_r+0x20c>)
    9b70:	2203      	movs	r2, #3
    9b72:	f000 fb39 	bl	a1e8 <memchr>
    9b76:	2800      	cmp	r0, #0
    9b78:	d008      	beq.n	9b8c <_vfiprintf_r+0x9c>
    9b7a:	4b60      	ldr	r3, [pc, #384]	; (9cfc <_vfiprintf_r+0x20c>)
    9b7c:	3401      	adds	r4, #1
    9b7e:	1ac0      	subs	r0, r0, r3
    9b80:	2340      	movs	r3, #64	; 0x40
    9b82:	4083      	lsls	r3, r0
    9b84:	1c18      	adds	r0, r3, #0
    9b86:	682b      	ldr	r3, [r5, #0]
    9b88:	4318      	orrs	r0, r3
    9b8a:	6028      	str	r0, [r5, #0]
    9b8c:	7821      	ldrb	r1, [r4, #0]
    9b8e:	1c63      	adds	r3, r4, #1
    9b90:	485b      	ldr	r0, [pc, #364]	; (9d00 <_vfiprintf_r+0x210>)
    9b92:	2206      	movs	r2, #6
    9b94:	9302      	str	r3, [sp, #8]
    9b96:	7629      	strb	r1, [r5, #24]
    9b98:	f000 fb26 	bl	a1e8 <memchr>
    9b9c:	2800      	cmp	r0, #0
    9b9e:	d100      	bne.n	9ba2 <_vfiprintf_r+0xb2>
    9ba0:	e091      	b.n	9cc6 <_vfiprintf_r+0x1d6>
    9ba2:	4b58      	ldr	r3, [pc, #352]	; (9d04 <_vfiprintf_r+0x214>)
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d000      	beq.n	9baa <_vfiprintf_r+0xba>
    9ba8:	e084      	b.n	9cb4 <_vfiprintf_r+0x1c4>
    9baa:	2207      	movs	r2, #7
    9bac:	9b05      	ldr	r3, [sp, #20]
    9bae:	3307      	adds	r3, #7
    9bb0:	4393      	bics	r3, r2
    9bb2:	3308      	adds	r3, #8
    9bb4:	9305      	str	r3, [sp, #20]
    9bb6:	696b      	ldr	r3, [r5, #20]
    9bb8:	9a03      	ldr	r2, [sp, #12]
    9bba:	189b      	adds	r3, r3, r2
    9bbc:	616b      	str	r3, [r5, #20]
    9bbe:	9c02      	ldr	r4, [sp, #8]
    9bc0:	7823      	ldrb	r3, [r4, #0]
    9bc2:	2b00      	cmp	r3, #0
    9bc4:	d104      	bne.n	9bd0 <_vfiprintf_r+0xe0>
    9bc6:	9b02      	ldr	r3, [sp, #8]
    9bc8:	1ae3      	subs	r3, r4, r3
    9bca:	9304      	str	r3, [sp, #16]
    9bcc:	d011      	beq.n	9bf2 <_vfiprintf_r+0x102>
    9bce:	e003      	b.n	9bd8 <_vfiprintf_r+0xe8>
    9bd0:	2b25      	cmp	r3, #37	; 0x25
    9bd2:	d0f8      	beq.n	9bc6 <_vfiprintf_r+0xd6>
    9bd4:	3401      	adds	r4, #1
    9bd6:	e7f3      	b.n	9bc0 <_vfiprintf_r+0xd0>
    9bd8:	9b04      	ldr	r3, [sp, #16]
    9bda:	1c30      	adds	r0, r6, #0
    9bdc:	1c39      	adds	r1, r7, #0
    9bde:	9a02      	ldr	r2, [sp, #8]
    9be0:	f7ff ff73 	bl	9aca <__sfputs_r>
    9be4:	1c43      	adds	r3, r0, #1
    9be6:	d07b      	beq.n	9ce0 <_vfiprintf_r+0x1f0>
    9be8:	696a      	ldr	r2, [r5, #20]
    9bea:	9b04      	ldr	r3, [sp, #16]
    9bec:	4694      	mov	ip, r2
    9bee:	4463      	add	r3, ip
    9bf0:	616b      	str	r3, [r5, #20]
    9bf2:	7823      	ldrb	r3, [r4, #0]
    9bf4:	2b00      	cmp	r3, #0
    9bf6:	d073      	beq.n	9ce0 <_vfiprintf_r+0x1f0>
    9bf8:	2201      	movs	r2, #1
    9bfa:	2300      	movs	r3, #0
    9bfc:	4252      	negs	r2, r2
    9bfe:	606a      	str	r2, [r5, #4]
    9c00:	a902      	add	r1, sp, #8
    9c02:	3254      	adds	r2, #84	; 0x54
    9c04:	1852      	adds	r2, r2, r1
    9c06:	3401      	adds	r4, #1
    9c08:	602b      	str	r3, [r5, #0]
    9c0a:	60eb      	str	r3, [r5, #12]
    9c0c:	60ab      	str	r3, [r5, #8]
    9c0e:	7013      	strb	r3, [r2, #0]
    9c10:	65ab      	str	r3, [r5, #88]	; 0x58
    9c12:	7821      	ldrb	r1, [r4, #0]
    9c14:	483c      	ldr	r0, [pc, #240]	; (9d08 <_vfiprintf_r+0x218>)
    9c16:	2205      	movs	r2, #5
    9c18:	f000 fae6 	bl	a1e8 <memchr>
    9c1c:	2800      	cmp	r0, #0
    9c1e:	d009      	beq.n	9c34 <_vfiprintf_r+0x144>
    9c20:	4b39      	ldr	r3, [pc, #228]	; (9d08 <_vfiprintf_r+0x218>)
    9c22:	3401      	adds	r4, #1
    9c24:	1ac0      	subs	r0, r0, r3
    9c26:	2301      	movs	r3, #1
    9c28:	4083      	lsls	r3, r0
    9c2a:	1c18      	adds	r0, r3, #0
    9c2c:	682b      	ldr	r3, [r5, #0]
    9c2e:	4318      	orrs	r0, r3
    9c30:	6028      	str	r0, [r5, #0]
    9c32:	e7ee      	b.n	9c12 <_vfiprintf_r+0x122>
    9c34:	682b      	ldr	r3, [r5, #0]
    9c36:	06da      	lsls	r2, r3, #27
    9c38:	d504      	bpl.n	9c44 <_vfiprintf_r+0x154>
    9c3a:	2253      	movs	r2, #83	; 0x53
    9c3c:	2120      	movs	r1, #32
    9c3e:	a802      	add	r0, sp, #8
    9c40:	1812      	adds	r2, r2, r0
    9c42:	7011      	strb	r1, [r2, #0]
    9c44:	071a      	lsls	r2, r3, #28
    9c46:	d504      	bpl.n	9c52 <_vfiprintf_r+0x162>
    9c48:	2253      	movs	r2, #83	; 0x53
    9c4a:	212b      	movs	r1, #43	; 0x2b
    9c4c:	a802      	add	r0, sp, #8
    9c4e:	1812      	adds	r2, r2, r0
    9c50:	7011      	strb	r1, [r2, #0]
    9c52:	7822      	ldrb	r2, [r4, #0]
    9c54:	2a2a      	cmp	r2, #42	; 0x2a
    9c56:	d100      	bne.n	9c5a <_vfiprintf_r+0x16a>
    9c58:	e77c      	b.n	9b54 <_vfiprintf_r+0x64>
    9c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9c5c:	e005      	b.n	9c6a <_vfiprintf_r+0x17a>
    9c5e:	4252      	negs	r2, r2
    9c60:	60ea      	str	r2, [r5, #12]
    9c62:	2202      	movs	r2, #2
    9c64:	4313      	orrs	r3, r2
    9c66:	602b      	str	r3, [r5, #0]
    9c68:	e77b      	b.n	9b62 <_vfiprintf_r+0x72>
    9c6a:	7822      	ldrb	r2, [r4, #0]
    9c6c:	3a30      	subs	r2, #48	; 0x30
    9c6e:	2a09      	cmp	r2, #9
    9c70:	d804      	bhi.n	9c7c <_vfiprintf_r+0x18c>
    9c72:	210a      	movs	r1, #10
    9c74:	434b      	muls	r3, r1
    9c76:	3401      	adds	r4, #1
    9c78:	189b      	adds	r3, r3, r2
    9c7a:	e7f6      	b.n	9c6a <_vfiprintf_r+0x17a>
    9c7c:	9309      	str	r3, [sp, #36]	; 0x24
    9c7e:	e771      	b.n	9b64 <_vfiprintf_r+0x74>
    9c80:	7863      	ldrb	r3, [r4, #1]
    9c82:	2b2a      	cmp	r3, #42	; 0x2a
    9c84:	d109      	bne.n	9c9a <_vfiprintf_r+0x1aa>
    9c86:	9b05      	ldr	r3, [sp, #20]
    9c88:	3402      	adds	r4, #2
    9c8a:	1d1a      	adds	r2, r3, #4
    9c8c:	681b      	ldr	r3, [r3, #0]
    9c8e:	9205      	str	r2, [sp, #20]
    9c90:	2b00      	cmp	r3, #0
    9c92:	da0d      	bge.n	9cb0 <_vfiprintf_r+0x1c0>
    9c94:	2301      	movs	r3, #1
    9c96:	425b      	negs	r3, r3
    9c98:	e00a      	b.n	9cb0 <_vfiprintf_r+0x1c0>
    9c9a:	2300      	movs	r3, #0
    9c9c:	3401      	adds	r4, #1
    9c9e:	7822      	ldrb	r2, [r4, #0]
    9ca0:	3a30      	subs	r2, #48	; 0x30
    9ca2:	2a09      	cmp	r2, #9
    9ca4:	d804      	bhi.n	9cb0 <_vfiprintf_r+0x1c0>
    9ca6:	210a      	movs	r1, #10
    9ca8:	434b      	muls	r3, r1
    9caa:	3401      	adds	r4, #1
    9cac:	189b      	adds	r3, r3, r2
    9cae:	e7f6      	b.n	9c9e <_vfiprintf_r+0x1ae>
    9cb0:	9307      	str	r3, [sp, #28]
    9cb2:	e75b      	b.n	9b6c <_vfiprintf_r+0x7c>
    9cb4:	ab05      	add	r3, sp, #20
    9cb6:	9300      	str	r3, [sp, #0]
    9cb8:	1c30      	adds	r0, r6, #0
    9cba:	1c29      	adds	r1, r5, #0
    9cbc:	1c3a      	adds	r2, r7, #0
    9cbe:	4b13      	ldr	r3, [pc, #76]	; (9d0c <_vfiprintf_r+0x21c>)
    9cc0:	e000      	b.n	9cc4 <_vfiprintf_r+0x1d4>
    9cc2:	bf00      	nop
    9cc4:	e007      	b.n	9cd6 <_vfiprintf_r+0x1e6>
    9cc6:	ab05      	add	r3, sp, #20
    9cc8:	9300      	str	r3, [sp, #0]
    9cca:	1c30      	adds	r0, r6, #0
    9ccc:	1c29      	adds	r1, r5, #0
    9cce:	1c3a      	adds	r2, r7, #0
    9cd0:	4b0e      	ldr	r3, [pc, #56]	; (9d0c <_vfiprintf_r+0x21c>)
    9cd2:	f000 f88b 	bl	9dec <_printf_i>
    9cd6:	9003      	str	r0, [sp, #12]
    9cd8:	9b03      	ldr	r3, [sp, #12]
    9cda:	3301      	adds	r3, #1
    9cdc:	d000      	beq.n	9ce0 <_vfiprintf_r+0x1f0>
    9cde:	e76a      	b.n	9bb6 <_vfiprintf_r+0xc6>
    9ce0:	89bb      	ldrh	r3, [r7, #12]
    9ce2:	065b      	lsls	r3, r3, #25
    9ce4:	d500      	bpl.n	9ce8 <_vfiprintf_r+0x1f8>
    9ce6:	e732      	b.n	9b4e <_vfiprintf_r+0x5e>
    9ce8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9cea:	b01f      	add	sp, #124	; 0x7c
    9cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cee:	46c0      	nop			; (mov r8, r8)
    9cf0:	0000c5c0 	.word	0x0000c5c0
    9cf4:	0000c5e0 	.word	0x0000c5e0
    9cf8:	0000c600 	.word	0x0000c600
    9cfc:	0000c626 	.word	0x0000c626
    9d00:	0000c62a 	.word	0x0000c62a
    9d04:	00000000 	.word	0x00000000
    9d08:	0000c620 	.word	0x0000c620
    9d0c:	00009acb 	.word	0x00009acb

00009d10 <_printf_common>:
    9d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9d12:	1c17      	adds	r7, r2, #0
    9d14:	9301      	str	r3, [sp, #4]
    9d16:	690a      	ldr	r2, [r1, #16]
    9d18:	688b      	ldr	r3, [r1, #8]
    9d1a:	9000      	str	r0, [sp, #0]
    9d1c:	1c0c      	adds	r4, r1, #0
    9d1e:	4293      	cmp	r3, r2
    9d20:	da00      	bge.n	9d24 <_printf_common+0x14>
    9d22:	1c13      	adds	r3, r2, #0
    9d24:	1c22      	adds	r2, r4, #0
    9d26:	603b      	str	r3, [r7, #0]
    9d28:	3243      	adds	r2, #67	; 0x43
    9d2a:	7812      	ldrb	r2, [r2, #0]
    9d2c:	2a00      	cmp	r2, #0
    9d2e:	d001      	beq.n	9d34 <_printf_common+0x24>
    9d30:	3301      	adds	r3, #1
    9d32:	603b      	str	r3, [r7, #0]
    9d34:	6823      	ldr	r3, [r4, #0]
    9d36:	069b      	lsls	r3, r3, #26
    9d38:	d502      	bpl.n	9d40 <_printf_common+0x30>
    9d3a:	683b      	ldr	r3, [r7, #0]
    9d3c:	3302      	adds	r3, #2
    9d3e:	603b      	str	r3, [r7, #0]
    9d40:	2506      	movs	r5, #6
    9d42:	6823      	ldr	r3, [r4, #0]
    9d44:	401d      	ands	r5, r3
    9d46:	d01e      	beq.n	9d86 <_printf_common+0x76>
    9d48:	1c23      	adds	r3, r4, #0
    9d4a:	3343      	adds	r3, #67	; 0x43
    9d4c:	781b      	ldrb	r3, [r3, #0]
    9d4e:	1e5a      	subs	r2, r3, #1
    9d50:	4193      	sbcs	r3, r2
    9d52:	6822      	ldr	r2, [r4, #0]
    9d54:	0692      	lsls	r2, r2, #26
    9d56:	d51c      	bpl.n	9d92 <_printf_common+0x82>
    9d58:	2030      	movs	r0, #48	; 0x30
    9d5a:	18e1      	adds	r1, r4, r3
    9d5c:	3140      	adds	r1, #64	; 0x40
    9d5e:	70c8      	strb	r0, [r1, #3]
    9d60:	1c21      	adds	r1, r4, #0
    9d62:	1c5a      	adds	r2, r3, #1
    9d64:	3145      	adds	r1, #69	; 0x45
    9d66:	7809      	ldrb	r1, [r1, #0]
    9d68:	18a2      	adds	r2, r4, r2
    9d6a:	3240      	adds	r2, #64	; 0x40
    9d6c:	3302      	adds	r3, #2
    9d6e:	70d1      	strb	r1, [r2, #3]
    9d70:	e00f      	b.n	9d92 <_printf_common+0x82>
    9d72:	1c22      	adds	r2, r4, #0
    9d74:	2301      	movs	r3, #1
    9d76:	9800      	ldr	r0, [sp, #0]
    9d78:	9901      	ldr	r1, [sp, #4]
    9d7a:	3219      	adds	r2, #25
    9d7c:	9e08      	ldr	r6, [sp, #32]
    9d7e:	47b0      	blx	r6
    9d80:	1c43      	adds	r3, r0, #1
    9d82:	d00e      	beq.n	9da2 <_printf_common+0x92>
    9d84:	3501      	adds	r5, #1
    9d86:	68e3      	ldr	r3, [r4, #12]
    9d88:	683a      	ldr	r2, [r7, #0]
    9d8a:	1a9b      	subs	r3, r3, r2
    9d8c:	429d      	cmp	r5, r3
    9d8e:	dbf0      	blt.n	9d72 <_printf_common+0x62>
    9d90:	e7da      	b.n	9d48 <_printf_common+0x38>
    9d92:	1c22      	adds	r2, r4, #0
    9d94:	9800      	ldr	r0, [sp, #0]
    9d96:	9901      	ldr	r1, [sp, #4]
    9d98:	3243      	adds	r2, #67	; 0x43
    9d9a:	9d08      	ldr	r5, [sp, #32]
    9d9c:	47a8      	blx	r5
    9d9e:	1c43      	adds	r3, r0, #1
    9da0:	d102      	bne.n	9da8 <_printf_common+0x98>
    9da2:	2001      	movs	r0, #1
    9da4:	4240      	negs	r0, r0
    9da6:	e020      	b.n	9dea <_printf_common+0xda>
    9da8:	2306      	movs	r3, #6
    9daa:	6820      	ldr	r0, [r4, #0]
    9dac:	68e1      	ldr	r1, [r4, #12]
    9dae:	683a      	ldr	r2, [r7, #0]
    9db0:	4003      	ands	r3, r0
    9db2:	2500      	movs	r5, #0
    9db4:	2b04      	cmp	r3, #4
    9db6:	d103      	bne.n	9dc0 <_printf_common+0xb0>
    9db8:	1a8d      	subs	r5, r1, r2
    9dba:	43eb      	mvns	r3, r5
    9dbc:	17db      	asrs	r3, r3, #31
    9dbe:	401d      	ands	r5, r3
    9dc0:	68a3      	ldr	r3, [r4, #8]
    9dc2:	6922      	ldr	r2, [r4, #16]
    9dc4:	4293      	cmp	r3, r2
    9dc6:	dd01      	ble.n	9dcc <_printf_common+0xbc>
    9dc8:	1a9b      	subs	r3, r3, r2
    9dca:	18ed      	adds	r5, r5, r3
    9dcc:	2700      	movs	r7, #0
    9dce:	42af      	cmp	r7, r5
    9dd0:	da0a      	bge.n	9de8 <_printf_common+0xd8>
    9dd2:	1c22      	adds	r2, r4, #0
    9dd4:	2301      	movs	r3, #1
    9dd6:	9800      	ldr	r0, [sp, #0]
    9dd8:	9901      	ldr	r1, [sp, #4]
    9dda:	321a      	adds	r2, #26
    9ddc:	9e08      	ldr	r6, [sp, #32]
    9dde:	47b0      	blx	r6
    9de0:	1c43      	adds	r3, r0, #1
    9de2:	d0de      	beq.n	9da2 <_printf_common+0x92>
    9de4:	3701      	adds	r7, #1
    9de6:	e7f2      	b.n	9dce <_printf_common+0xbe>
    9de8:	2000      	movs	r0, #0
    9dea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00009dec <_printf_i>:
    9dec:	b5f0      	push	{r4, r5, r6, r7, lr}
    9dee:	b08b      	sub	sp, #44	; 0x2c
    9df0:	9206      	str	r2, [sp, #24]
    9df2:	1c0a      	adds	r2, r1, #0
    9df4:	3243      	adds	r2, #67	; 0x43
    9df6:	9307      	str	r3, [sp, #28]
    9df8:	9005      	str	r0, [sp, #20]
    9dfa:	9204      	str	r2, [sp, #16]
    9dfc:	7e0a      	ldrb	r2, [r1, #24]
    9dfe:	1c0c      	adds	r4, r1, #0
    9e00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9e02:	2a6e      	cmp	r2, #110	; 0x6e
    9e04:	d100      	bne.n	9e08 <_printf_i+0x1c>
    9e06:	e0a8      	b.n	9f5a <_printf_i+0x16e>
    9e08:	d811      	bhi.n	9e2e <_printf_i+0x42>
    9e0a:	2a63      	cmp	r2, #99	; 0x63
    9e0c:	d022      	beq.n	9e54 <_printf_i+0x68>
    9e0e:	d809      	bhi.n	9e24 <_printf_i+0x38>
    9e10:	2a00      	cmp	r2, #0
    9e12:	d100      	bne.n	9e16 <_printf_i+0x2a>
    9e14:	e0b2      	b.n	9f7c <_printf_i+0x190>
    9e16:	2a58      	cmp	r2, #88	; 0x58
    9e18:	d000      	beq.n	9e1c <_printf_i+0x30>
    9e1a:	e0c2      	b.n	9fa2 <_printf_i+0x1b6>
    9e1c:	3145      	adds	r1, #69	; 0x45
    9e1e:	700a      	strb	r2, [r1, #0]
    9e20:	4a7c      	ldr	r2, [pc, #496]	; (a014 <_printf_i+0x228>)
    9e22:	e04f      	b.n	9ec4 <_printf_i+0xd8>
    9e24:	2a64      	cmp	r2, #100	; 0x64
    9e26:	d01d      	beq.n	9e64 <_printf_i+0x78>
    9e28:	2a69      	cmp	r2, #105	; 0x69
    9e2a:	d01b      	beq.n	9e64 <_printf_i+0x78>
    9e2c:	e0b9      	b.n	9fa2 <_printf_i+0x1b6>
    9e2e:	2a73      	cmp	r2, #115	; 0x73
    9e30:	d100      	bne.n	9e34 <_printf_i+0x48>
    9e32:	e0a7      	b.n	9f84 <_printf_i+0x198>
    9e34:	d809      	bhi.n	9e4a <_printf_i+0x5e>
    9e36:	2a6f      	cmp	r2, #111	; 0x6f
    9e38:	d029      	beq.n	9e8e <_printf_i+0xa2>
    9e3a:	2a70      	cmp	r2, #112	; 0x70
    9e3c:	d000      	beq.n	9e40 <_printf_i+0x54>
    9e3e:	e0b0      	b.n	9fa2 <_printf_i+0x1b6>
    9e40:	2220      	movs	r2, #32
    9e42:	6809      	ldr	r1, [r1, #0]
    9e44:	430a      	orrs	r2, r1
    9e46:	6022      	str	r2, [r4, #0]
    9e48:	e037      	b.n	9eba <_printf_i+0xce>
    9e4a:	2a75      	cmp	r2, #117	; 0x75
    9e4c:	d01f      	beq.n	9e8e <_printf_i+0xa2>
    9e4e:	2a78      	cmp	r2, #120	; 0x78
    9e50:	d033      	beq.n	9eba <_printf_i+0xce>
    9e52:	e0a6      	b.n	9fa2 <_printf_i+0x1b6>
    9e54:	1c0e      	adds	r6, r1, #0
    9e56:	681a      	ldr	r2, [r3, #0]
    9e58:	3642      	adds	r6, #66	; 0x42
    9e5a:	1d11      	adds	r1, r2, #4
    9e5c:	6019      	str	r1, [r3, #0]
    9e5e:	6813      	ldr	r3, [r2, #0]
    9e60:	7033      	strb	r3, [r6, #0]
    9e62:	e0a1      	b.n	9fa8 <_printf_i+0x1bc>
    9e64:	6821      	ldr	r1, [r4, #0]
    9e66:	681a      	ldr	r2, [r3, #0]
    9e68:	0608      	lsls	r0, r1, #24
    9e6a:	d406      	bmi.n	9e7a <_printf_i+0x8e>
    9e6c:	0649      	lsls	r1, r1, #25
    9e6e:	d504      	bpl.n	9e7a <_printf_i+0x8e>
    9e70:	1d11      	adds	r1, r2, #4
    9e72:	6019      	str	r1, [r3, #0]
    9e74:	2300      	movs	r3, #0
    9e76:	5ed5      	ldrsh	r5, [r2, r3]
    9e78:	e002      	b.n	9e80 <_printf_i+0x94>
    9e7a:	1d11      	adds	r1, r2, #4
    9e7c:	6019      	str	r1, [r3, #0]
    9e7e:	6815      	ldr	r5, [r2, #0]
    9e80:	2d00      	cmp	r5, #0
    9e82:	da3b      	bge.n	9efc <_printf_i+0x110>
    9e84:	232d      	movs	r3, #45	; 0x2d
    9e86:	9a04      	ldr	r2, [sp, #16]
    9e88:	426d      	negs	r5, r5
    9e8a:	7013      	strb	r3, [r2, #0]
    9e8c:	e036      	b.n	9efc <_printf_i+0x110>
    9e8e:	6821      	ldr	r1, [r4, #0]
    9e90:	681a      	ldr	r2, [r3, #0]
    9e92:	0608      	lsls	r0, r1, #24
    9e94:	d406      	bmi.n	9ea4 <_printf_i+0xb8>
    9e96:	0649      	lsls	r1, r1, #25
    9e98:	d504      	bpl.n	9ea4 <_printf_i+0xb8>
    9e9a:	6815      	ldr	r5, [r2, #0]
    9e9c:	1d11      	adds	r1, r2, #4
    9e9e:	6019      	str	r1, [r3, #0]
    9ea0:	b2ad      	uxth	r5, r5
    9ea2:	e002      	b.n	9eaa <_printf_i+0xbe>
    9ea4:	1d11      	adds	r1, r2, #4
    9ea6:	6019      	str	r1, [r3, #0]
    9ea8:	6815      	ldr	r5, [r2, #0]
    9eaa:	4b5a      	ldr	r3, [pc, #360]	; (a014 <_printf_i+0x228>)
    9eac:	7e22      	ldrb	r2, [r4, #24]
    9eae:	9303      	str	r3, [sp, #12]
    9eb0:	270a      	movs	r7, #10
    9eb2:	2a6f      	cmp	r2, #111	; 0x6f
    9eb4:	d11d      	bne.n	9ef2 <_printf_i+0x106>
    9eb6:	2708      	movs	r7, #8
    9eb8:	e01b      	b.n	9ef2 <_printf_i+0x106>
    9eba:	1c22      	adds	r2, r4, #0
    9ebc:	2178      	movs	r1, #120	; 0x78
    9ebe:	3245      	adds	r2, #69	; 0x45
    9ec0:	7011      	strb	r1, [r2, #0]
    9ec2:	4a55      	ldr	r2, [pc, #340]	; (a018 <_printf_i+0x22c>)
    9ec4:	6819      	ldr	r1, [r3, #0]
    9ec6:	9203      	str	r2, [sp, #12]
    9ec8:	1d08      	adds	r0, r1, #4
    9eca:	6822      	ldr	r2, [r4, #0]
    9ecc:	6018      	str	r0, [r3, #0]
    9ece:	680d      	ldr	r5, [r1, #0]
    9ed0:	0610      	lsls	r0, r2, #24
    9ed2:	d402      	bmi.n	9eda <_printf_i+0xee>
    9ed4:	0650      	lsls	r0, r2, #25
    9ed6:	d500      	bpl.n	9eda <_printf_i+0xee>
    9ed8:	b2ad      	uxth	r5, r5
    9eda:	07d3      	lsls	r3, r2, #31
    9edc:	d502      	bpl.n	9ee4 <_printf_i+0xf8>
    9ede:	2320      	movs	r3, #32
    9ee0:	431a      	orrs	r2, r3
    9ee2:	6022      	str	r2, [r4, #0]
    9ee4:	2710      	movs	r7, #16
    9ee6:	2d00      	cmp	r5, #0
    9ee8:	d103      	bne.n	9ef2 <_printf_i+0x106>
    9eea:	2320      	movs	r3, #32
    9eec:	6822      	ldr	r2, [r4, #0]
    9eee:	439a      	bics	r2, r3
    9ef0:	6022      	str	r2, [r4, #0]
    9ef2:	1c23      	adds	r3, r4, #0
    9ef4:	2200      	movs	r2, #0
    9ef6:	3343      	adds	r3, #67	; 0x43
    9ef8:	701a      	strb	r2, [r3, #0]
    9efa:	e002      	b.n	9f02 <_printf_i+0x116>
    9efc:	270a      	movs	r7, #10
    9efe:	4b45      	ldr	r3, [pc, #276]	; (a014 <_printf_i+0x228>)
    9f00:	9303      	str	r3, [sp, #12]
    9f02:	6863      	ldr	r3, [r4, #4]
    9f04:	60a3      	str	r3, [r4, #8]
    9f06:	2b00      	cmp	r3, #0
    9f08:	db03      	blt.n	9f12 <_printf_i+0x126>
    9f0a:	2204      	movs	r2, #4
    9f0c:	6821      	ldr	r1, [r4, #0]
    9f0e:	4391      	bics	r1, r2
    9f10:	6021      	str	r1, [r4, #0]
    9f12:	2d00      	cmp	r5, #0
    9f14:	d102      	bne.n	9f1c <_printf_i+0x130>
    9f16:	9e04      	ldr	r6, [sp, #16]
    9f18:	2b00      	cmp	r3, #0
    9f1a:	d00e      	beq.n	9f3a <_printf_i+0x14e>
    9f1c:	9e04      	ldr	r6, [sp, #16]
    9f1e:	1c28      	adds	r0, r5, #0
    9f20:	1c39      	adds	r1, r7, #0
    9f22:	f7fe f915 	bl	8150 <__aeabi_uidivmod>
    9f26:	9b03      	ldr	r3, [sp, #12]
    9f28:	3e01      	subs	r6, #1
    9f2a:	5c5b      	ldrb	r3, [r3, r1]
    9f2c:	1c28      	adds	r0, r5, #0
    9f2e:	7033      	strb	r3, [r6, #0]
    9f30:	1c39      	adds	r1, r7, #0
    9f32:	f7fe f887 	bl	8044 <__aeabi_uidiv>
    9f36:	1e05      	subs	r5, r0, #0
    9f38:	d1f1      	bne.n	9f1e <_printf_i+0x132>
    9f3a:	2f08      	cmp	r7, #8
    9f3c:	d109      	bne.n	9f52 <_printf_i+0x166>
    9f3e:	6823      	ldr	r3, [r4, #0]
    9f40:	07db      	lsls	r3, r3, #31
    9f42:	d506      	bpl.n	9f52 <_printf_i+0x166>
    9f44:	6863      	ldr	r3, [r4, #4]
    9f46:	6922      	ldr	r2, [r4, #16]
    9f48:	4293      	cmp	r3, r2
    9f4a:	dc02      	bgt.n	9f52 <_printf_i+0x166>
    9f4c:	2330      	movs	r3, #48	; 0x30
    9f4e:	3e01      	subs	r6, #1
    9f50:	7033      	strb	r3, [r6, #0]
    9f52:	9b04      	ldr	r3, [sp, #16]
    9f54:	1b9b      	subs	r3, r3, r6
    9f56:	6123      	str	r3, [r4, #16]
    9f58:	e02b      	b.n	9fb2 <_printf_i+0x1c6>
    9f5a:	6809      	ldr	r1, [r1, #0]
    9f5c:	681a      	ldr	r2, [r3, #0]
    9f5e:	0608      	lsls	r0, r1, #24
    9f60:	d407      	bmi.n	9f72 <_printf_i+0x186>
    9f62:	0649      	lsls	r1, r1, #25
    9f64:	d505      	bpl.n	9f72 <_printf_i+0x186>
    9f66:	1d11      	adds	r1, r2, #4
    9f68:	6019      	str	r1, [r3, #0]
    9f6a:	6813      	ldr	r3, [r2, #0]
    9f6c:	8aa2      	ldrh	r2, [r4, #20]
    9f6e:	801a      	strh	r2, [r3, #0]
    9f70:	e004      	b.n	9f7c <_printf_i+0x190>
    9f72:	1d11      	adds	r1, r2, #4
    9f74:	6019      	str	r1, [r3, #0]
    9f76:	6813      	ldr	r3, [r2, #0]
    9f78:	6962      	ldr	r2, [r4, #20]
    9f7a:	601a      	str	r2, [r3, #0]
    9f7c:	2300      	movs	r3, #0
    9f7e:	9e04      	ldr	r6, [sp, #16]
    9f80:	6123      	str	r3, [r4, #16]
    9f82:	e016      	b.n	9fb2 <_printf_i+0x1c6>
    9f84:	681a      	ldr	r2, [r3, #0]
    9f86:	1d11      	adds	r1, r2, #4
    9f88:	6019      	str	r1, [r3, #0]
    9f8a:	6816      	ldr	r6, [r2, #0]
    9f8c:	2100      	movs	r1, #0
    9f8e:	1c30      	adds	r0, r6, #0
    9f90:	6862      	ldr	r2, [r4, #4]
    9f92:	f000 f929 	bl	a1e8 <memchr>
    9f96:	2800      	cmp	r0, #0
    9f98:	d001      	beq.n	9f9e <_printf_i+0x1b2>
    9f9a:	1b80      	subs	r0, r0, r6
    9f9c:	6060      	str	r0, [r4, #4]
    9f9e:	6863      	ldr	r3, [r4, #4]
    9fa0:	e003      	b.n	9faa <_printf_i+0x1be>
    9fa2:	1c26      	adds	r6, r4, #0
    9fa4:	3642      	adds	r6, #66	; 0x42
    9fa6:	7032      	strb	r2, [r6, #0]
    9fa8:	2301      	movs	r3, #1
    9faa:	6123      	str	r3, [r4, #16]
    9fac:	2300      	movs	r3, #0
    9fae:	9a04      	ldr	r2, [sp, #16]
    9fb0:	7013      	strb	r3, [r2, #0]
    9fb2:	9b07      	ldr	r3, [sp, #28]
    9fb4:	9805      	ldr	r0, [sp, #20]
    9fb6:	9300      	str	r3, [sp, #0]
    9fb8:	1c21      	adds	r1, r4, #0
    9fba:	9b06      	ldr	r3, [sp, #24]
    9fbc:	aa09      	add	r2, sp, #36	; 0x24
    9fbe:	f7ff fea7 	bl	9d10 <_printf_common>
    9fc2:	1c43      	adds	r3, r0, #1
    9fc4:	d102      	bne.n	9fcc <_printf_i+0x1e0>
    9fc6:	2001      	movs	r0, #1
    9fc8:	4240      	negs	r0, r0
    9fca:	e021      	b.n	a010 <_printf_i+0x224>
    9fcc:	6923      	ldr	r3, [r4, #16]
    9fce:	9805      	ldr	r0, [sp, #20]
    9fd0:	9906      	ldr	r1, [sp, #24]
    9fd2:	1c32      	adds	r2, r6, #0
    9fd4:	9d07      	ldr	r5, [sp, #28]
    9fd6:	47a8      	blx	r5
    9fd8:	1c43      	adds	r3, r0, #1
    9fda:	d0f4      	beq.n	9fc6 <_printf_i+0x1da>
    9fdc:	6823      	ldr	r3, [r4, #0]
    9fde:	079b      	lsls	r3, r3, #30
    9fe0:	d405      	bmi.n	9fee <_printf_i+0x202>
    9fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9fe4:	68e0      	ldr	r0, [r4, #12]
    9fe6:	4298      	cmp	r0, r3
    9fe8:	da12      	bge.n	a010 <_printf_i+0x224>
    9fea:	1c18      	adds	r0, r3, #0
    9fec:	e010      	b.n	a010 <_printf_i+0x224>
    9fee:	2500      	movs	r5, #0
    9ff0:	68e3      	ldr	r3, [r4, #12]
    9ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9ff4:	1a9b      	subs	r3, r3, r2
    9ff6:	429d      	cmp	r5, r3
    9ff8:	daf3      	bge.n	9fe2 <_printf_i+0x1f6>
    9ffa:	1c22      	adds	r2, r4, #0
    9ffc:	2301      	movs	r3, #1
    9ffe:	9805      	ldr	r0, [sp, #20]
    a000:	9906      	ldr	r1, [sp, #24]
    a002:	3219      	adds	r2, #25
    a004:	9e07      	ldr	r6, [sp, #28]
    a006:	47b0      	blx	r6
    a008:	1c43      	adds	r3, r0, #1
    a00a:	d0dc      	beq.n	9fc6 <_printf_i+0x1da>
    a00c:	3501      	adds	r5, #1
    a00e:	e7ef      	b.n	9ff0 <_printf_i+0x204>
    a010:	b00b      	add	sp, #44	; 0x2c
    a012:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a014:	0000c631 	.word	0x0000c631
    a018:	0000c642 	.word	0x0000c642

0000a01c <_putc_r>:
    a01c:	b570      	push	{r4, r5, r6, lr}
    a01e:	1c05      	adds	r5, r0, #0
    a020:	1c0e      	adds	r6, r1, #0
    a022:	1c14      	adds	r4, r2, #0
    a024:	2800      	cmp	r0, #0
    a026:	d004      	beq.n	a032 <_putc_r+0x16>
    a028:	6983      	ldr	r3, [r0, #24]
    a02a:	2b00      	cmp	r3, #0
    a02c:	d101      	bne.n	a032 <_putc_r+0x16>
    a02e:	f7ff faf7 	bl	9620 <__sinit>
    a032:	4b15      	ldr	r3, [pc, #84]	; (a088 <_putc_r+0x6c>)
    a034:	429c      	cmp	r4, r3
    a036:	d101      	bne.n	a03c <_putc_r+0x20>
    a038:	686c      	ldr	r4, [r5, #4]
    a03a:	e008      	b.n	a04e <_putc_r+0x32>
    a03c:	4b13      	ldr	r3, [pc, #76]	; (a08c <_putc_r+0x70>)
    a03e:	429c      	cmp	r4, r3
    a040:	d101      	bne.n	a046 <_putc_r+0x2a>
    a042:	68ac      	ldr	r4, [r5, #8]
    a044:	e003      	b.n	a04e <_putc_r+0x32>
    a046:	4b12      	ldr	r3, [pc, #72]	; (a090 <_putc_r+0x74>)
    a048:	429c      	cmp	r4, r3
    a04a:	d100      	bne.n	a04e <_putc_r+0x32>
    a04c:	68ec      	ldr	r4, [r5, #12]
    a04e:	68a3      	ldr	r3, [r4, #8]
    a050:	3b01      	subs	r3, #1
    a052:	60a3      	str	r3, [r4, #8]
    a054:	2b00      	cmp	r3, #0
    a056:	da10      	bge.n	a07a <_putc_r+0x5e>
    a058:	69a2      	ldr	r2, [r4, #24]
    a05a:	4293      	cmp	r3, r2
    a05c:	db07      	blt.n	a06e <_putc_r+0x52>
    a05e:	6823      	ldr	r3, [r4, #0]
    a060:	701e      	strb	r6, [r3, #0]
    a062:	6823      	ldr	r3, [r4, #0]
    a064:	7819      	ldrb	r1, [r3, #0]
    a066:	290a      	cmp	r1, #10
    a068:	d10a      	bne.n	a080 <_putc_r+0x64>
    a06a:	1c28      	adds	r0, r5, #0
    a06c:	e001      	b.n	a072 <_putc_r+0x56>
    a06e:	1c28      	adds	r0, r5, #0
    a070:	1c31      	adds	r1, r6, #0
    a072:	1c22      	adds	r2, r4, #0
    a074:	f7ff f910 	bl	9298 <__swbuf_r>
    a078:	e005      	b.n	a086 <_putc_r+0x6a>
    a07a:	6823      	ldr	r3, [r4, #0]
    a07c:	701e      	strb	r6, [r3, #0]
    a07e:	6823      	ldr	r3, [r4, #0]
    a080:	1c5a      	adds	r2, r3, #1
    a082:	6022      	str	r2, [r4, #0]
    a084:	7818      	ldrb	r0, [r3, #0]
    a086:	bd70      	pop	{r4, r5, r6, pc}
    a088:	0000c5c0 	.word	0x0000c5c0
    a08c:	0000c5e0 	.word	0x0000c5e0
    a090:	0000c600 	.word	0x0000c600

0000a094 <__sread>:
    a094:	b538      	push	{r3, r4, r5, lr}
    a096:	1c0c      	adds	r4, r1, #0
    a098:	250e      	movs	r5, #14
    a09a:	5f49      	ldrsh	r1, [r1, r5]
    a09c:	f000 f8d6 	bl	a24c <_read_r>
    a0a0:	2800      	cmp	r0, #0
    a0a2:	db03      	blt.n	a0ac <__sread+0x18>
    a0a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a0a6:	181b      	adds	r3, r3, r0
    a0a8:	6563      	str	r3, [r4, #84]	; 0x54
    a0aa:	e003      	b.n	a0b4 <__sread+0x20>
    a0ac:	89a2      	ldrh	r2, [r4, #12]
    a0ae:	4b02      	ldr	r3, [pc, #8]	; (a0b8 <__sread+0x24>)
    a0b0:	4013      	ands	r3, r2
    a0b2:	81a3      	strh	r3, [r4, #12]
    a0b4:	bd38      	pop	{r3, r4, r5, pc}
    a0b6:	46c0      	nop			; (mov r8, r8)
    a0b8:	ffffefff 	.word	0xffffefff

0000a0bc <__swrite>:
    a0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0be:	1c1e      	adds	r6, r3, #0
    a0c0:	898b      	ldrh	r3, [r1, #12]
    a0c2:	1c05      	adds	r5, r0, #0
    a0c4:	1c0c      	adds	r4, r1, #0
    a0c6:	1c17      	adds	r7, r2, #0
    a0c8:	05db      	lsls	r3, r3, #23
    a0ca:	d505      	bpl.n	a0d8 <__swrite+0x1c>
    a0cc:	230e      	movs	r3, #14
    a0ce:	5ec9      	ldrsh	r1, [r1, r3]
    a0d0:	2200      	movs	r2, #0
    a0d2:	2302      	movs	r3, #2
    a0d4:	f000 f874 	bl	a1c0 <_lseek_r>
    a0d8:	89a2      	ldrh	r2, [r4, #12]
    a0da:	4b05      	ldr	r3, [pc, #20]	; (a0f0 <__swrite+0x34>)
    a0dc:	1c28      	adds	r0, r5, #0
    a0de:	4013      	ands	r3, r2
    a0e0:	81a3      	strh	r3, [r4, #12]
    a0e2:	1c3a      	adds	r2, r7, #0
    a0e4:	230e      	movs	r3, #14
    a0e6:	5ee1      	ldrsh	r1, [r4, r3]
    a0e8:	1c33      	adds	r3, r6, #0
    a0ea:	f000 f81f 	bl	a12c <_write_r>
    a0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0f0:	ffffefff 	.word	0xffffefff

0000a0f4 <__sseek>:
    a0f4:	b538      	push	{r3, r4, r5, lr}
    a0f6:	1c0c      	adds	r4, r1, #0
    a0f8:	250e      	movs	r5, #14
    a0fa:	5f49      	ldrsh	r1, [r1, r5]
    a0fc:	f000 f860 	bl	a1c0 <_lseek_r>
    a100:	89a3      	ldrh	r3, [r4, #12]
    a102:	1c42      	adds	r2, r0, #1
    a104:	d103      	bne.n	a10e <__sseek+0x1a>
    a106:	4a05      	ldr	r2, [pc, #20]	; (a11c <__sseek+0x28>)
    a108:	4013      	ands	r3, r2
    a10a:	81a3      	strh	r3, [r4, #12]
    a10c:	e004      	b.n	a118 <__sseek+0x24>
    a10e:	2280      	movs	r2, #128	; 0x80
    a110:	0152      	lsls	r2, r2, #5
    a112:	4313      	orrs	r3, r2
    a114:	81a3      	strh	r3, [r4, #12]
    a116:	6560      	str	r0, [r4, #84]	; 0x54
    a118:	bd38      	pop	{r3, r4, r5, pc}
    a11a:	46c0      	nop			; (mov r8, r8)
    a11c:	ffffefff 	.word	0xffffefff

0000a120 <__sclose>:
    a120:	b508      	push	{r3, lr}
    a122:	230e      	movs	r3, #14
    a124:	5ec9      	ldrsh	r1, [r1, r3]
    a126:	f000 f815 	bl	a154 <_close_r>
    a12a:	bd08      	pop	{r3, pc}

0000a12c <_write_r>:
    a12c:	b538      	push	{r3, r4, r5, lr}
    a12e:	1c05      	adds	r5, r0, #0
    a130:	2000      	movs	r0, #0
    a132:	4c07      	ldr	r4, [pc, #28]	; (a150 <_write_r+0x24>)
    a134:	6020      	str	r0, [r4, #0]
    a136:	1c08      	adds	r0, r1, #0
    a138:	1c11      	adds	r1, r2, #0
    a13a:	1c1a      	adds	r2, r3, #0
    a13c:	f7fb fd5e 	bl	5bfc <_write>
    a140:	1c43      	adds	r3, r0, #1
    a142:	d103      	bne.n	a14c <_write_r+0x20>
    a144:	6823      	ldr	r3, [r4, #0]
    a146:	2b00      	cmp	r3, #0
    a148:	d000      	beq.n	a14c <_write_r+0x20>
    a14a:	602b      	str	r3, [r5, #0]
    a14c:	bd38      	pop	{r3, r4, r5, pc}
    a14e:	46c0      	nop			; (mov r8, r8)
    a150:	20000768 	.word	0x20000768

0000a154 <_close_r>:
    a154:	b538      	push	{r3, r4, r5, lr}
    a156:	2300      	movs	r3, #0
    a158:	4c06      	ldr	r4, [pc, #24]	; (a174 <_close_r+0x20>)
    a15a:	1c05      	adds	r5, r0, #0
    a15c:	1c08      	adds	r0, r1, #0
    a15e:	6023      	str	r3, [r4, #0]
    a160:	f7fb fd86 	bl	5c70 <_close>
    a164:	1c43      	adds	r3, r0, #1
    a166:	d103      	bne.n	a170 <_close_r+0x1c>
    a168:	6823      	ldr	r3, [r4, #0]
    a16a:	2b00      	cmp	r3, #0
    a16c:	d000      	beq.n	a170 <_close_r+0x1c>
    a16e:	602b      	str	r3, [r5, #0]
    a170:	bd38      	pop	{r3, r4, r5, pc}
    a172:	46c0      	nop			; (mov r8, r8)
    a174:	20000768 	.word	0x20000768

0000a178 <_fstat_r>:
    a178:	b538      	push	{r3, r4, r5, lr}
    a17a:	2300      	movs	r3, #0
    a17c:	4c06      	ldr	r4, [pc, #24]	; (a198 <_fstat_r+0x20>)
    a17e:	1c05      	adds	r5, r0, #0
    a180:	1c08      	adds	r0, r1, #0
    a182:	1c11      	adds	r1, r2, #0
    a184:	6023      	str	r3, [r4, #0]
    a186:	f7fb fd77 	bl	5c78 <_fstat>
    a18a:	1c43      	adds	r3, r0, #1
    a18c:	d103      	bne.n	a196 <_fstat_r+0x1e>
    a18e:	6823      	ldr	r3, [r4, #0]
    a190:	2b00      	cmp	r3, #0
    a192:	d000      	beq.n	a196 <_fstat_r+0x1e>
    a194:	602b      	str	r3, [r5, #0]
    a196:	bd38      	pop	{r3, r4, r5, pc}
    a198:	20000768 	.word	0x20000768

0000a19c <_isatty_r>:
    a19c:	b538      	push	{r3, r4, r5, lr}
    a19e:	2300      	movs	r3, #0
    a1a0:	4c06      	ldr	r4, [pc, #24]	; (a1bc <_isatty_r+0x20>)
    a1a2:	1c05      	adds	r5, r0, #0
    a1a4:	1c08      	adds	r0, r1, #0
    a1a6:	6023      	str	r3, [r4, #0]
    a1a8:	f7fb fd6c 	bl	5c84 <_isatty>
    a1ac:	1c43      	adds	r3, r0, #1
    a1ae:	d103      	bne.n	a1b8 <_isatty_r+0x1c>
    a1b0:	6823      	ldr	r3, [r4, #0]
    a1b2:	2b00      	cmp	r3, #0
    a1b4:	d000      	beq.n	a1b8 <_isatty_r+0x1c>
    a1b6:	602b      	str	r3, [r5, #0]
    a1b8:	bd38      	pop	{r3, r4, r5, pc}
    a1ba:	46c0      	nop			; (mov r8, r8)
    a1bc:	20000768 	.word	0x20000768

0000a1c0 <_lseek_r>:
    a1c0:	b538      	push	{r3, r4, r5, lr}
    a1c2:	1c05      	adds	r5, r0, #0
    a1c4:	2000      	movs	r0, #0
    a1c6:	4c07      	ldr	r4, [pc, #28]	; (a1e4 <_lseek_r+0x24>)
    a1c8:	6020      	str	r0, [r4, #0]
    a1ca:	1c08      	adds	r0, r1, #0
    a1cc:	1c11      	adds	r1, r2, #0
    a1ce:	1c1a      	adds	r2, r3, #0
    a1d0:	f7fb fd5a 	bl	5c88 <_lseek>
    a1d4:	1c43      	adds	r3, r0, #1
    a1d6:	d103      	bne.n	a1e0 <_lseek_r+0x20>
    a1d8:	6823      	ldr	r3, [r4, #0]
    a1da:	2b00      	cmp	r3, #0
    a1dc:	d000      	beq.n	a1e0 <_lseek_r+0x20>
    a1de:	602b      	str	r3, [r5, #0]
    a1e0:	bd38      	pop	{r3, r4, r5, pc}
    a1e2:	46c0      	nop			; (mov r8, r8)
    a1e4:	20000768 	.word	0x20000768

0000a1e8 <memchr>:
    a1e8:	b2c9      	uxtb	r1, r1
    a1ea:	1882      	adds	r2, r0, r2
    a1ec:	4290      	cmp	r0, r2
    a1ee:	d004      	beq.n	a1fa <memchr+0x12>
    a1f0:	7803      	ldrb	r3, [r0, #0]
    a1f2:	428b      	cmp	r3, r1
    a1f4:	d002      	beq.n	a1fc <memchr+0x14>
    a1f6:	3001      	adds	r0, #1
    a1f8:	e7f8      	b.n	a1ec <memchr+0x4>
    a1fa:	2000      	movs	r0, #0
    a1fc:	4770      	bx	lr

0000a1fe <_realloc_r>:
    a1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a200:	1c06      	adds	r6, r0, #0
    a202:	1c0c      	adds	r4, r1, #0
    a204:	1c15      	adds	r5, r2, #0
    a206:	2900      	cmp	r1, #0
    a208:	d104      	bne.n	a214 <_realloc_r+0x16>
    a20a:	1c11      	adds	r1, r2, #0
    a20c:	f7fe fc96 	bl	8b3c <_malloc_r>
    a210:	1c04      	adds	r4, r0, #0
    a212:	e018      	b.n	a246 <_realloc_r+0x48>
    a214:	2a00      	cmp	r2, #0
    a216:	d103      	bne.n	a220 <_realloc_r+0x22>
    a218:	f7fe fc4a 	bl	8ab0 <_free_r>
    a21c:	1c2c      	adds	r4, r5, #0
    a21e:	e012      	b.n	a246 <_realloc_r+0x48>
    a220:	f000 f828 	bl	a274 <_malloc_usable_size_r>
    a224:	42a8      	cmp	r0, r5
    a226:	d20e      	bcs.n	a246 <_realloc_r+0x48>
    a228:	1c30      	adds	r0, r6, #0
    a22a:	1c29      	adds	r1, r5, #0
    a22c:	f7fe fc86 	bl	8b3c <_malloc_r>
    a230:	1e07      	subs	r7, r0, #0
    a232:	d007      	beq.n	a244 <_realloc_r+0x46>
    a234:	1c21      	adds	r1, r4, #0
    a236:	1c2a      	adds	r2, r5, #0
    a238:	f7fe fc14 	bl	8a64 <memcpy>
    a23c:	1c30      	adds	r0, r6, #0
    a23e:	1c21      	adds	r1, r4, #0
    a240:	f7fe fc36 	bl	8ab0 <_free_r>
    a244:	1c3c      	adds	r4, r7, #0
    a246:	1c20      	adds	r0, r4, #0
    a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000a24c <_read_r>:
    a24c:	b538      	push	{r3, r4, r5, lr}
    a24e:	1c05      	adds	r5, r0, #0
    a250:	2000      	movs	r0, #0
    a252:	4c07      	ldr	r4, [pc, #28]	; (a270 <_read_r+0x24>)
    a254:	6020      	str	r0, [r4, #0]
    a256:	1c08      	adds	r0, r1, #0
    a258:	1c11      	adds	r1, r2, #0
    a25a:	1c1a      	adds	r2, r3, #0
    a25c:	f7fb fcac 	bl	5bb8 <_read>
    a260:	1c43      	adds	r3, r0, #1
    a262:	d103      	bne.n	a26c <_read_r+0x20>
    a264:	6823      	ldr	r3, [r4, #0]
    a266:	2b00      	cmp	r3, #0
    a268:	d000      	beq.n	a26c <_read_r+0x20>
    a26a:	602b      	str	r3, [r5, #0]
    a26c:	bd38      	pop	{r3, r4, r5, pc}
    a26e:	46c0      	nop			; (mov r8, r8)
    a270:	20000768 	.word	0x20000768

0000a274 <_malloc_usable_size_r>:
    a274:	1f0b      	subs	r3, r1, #4
    a276:	681a      	ldr	r2, [r3, #0]
    a278:	1f10      	subs	r0, r2, #4
    a27a:	2a00      	cmp	r2, #0
    a27c:	da04      	bge.n	a288 <_malloc_usable_size_r+0x14>
    a27e:	1889      	adds	r1, r1, r2
    a280:	3904      	subs	r1, #4
    a282:	680b      	ldr	r3, [r1, #0]
    a284:	18d0      	adds	r0, r2, r3
    a286:	3804      	subs	r0, #4
    a288:	4770      	bx	lr
    a28a:	0000      	movs	r0, r0
    a28c:	50504128 	.word	0x50504128
    a290:	52452829 	.word	0x52452829
    a294:	255b2952 	.word	0x255b2952
    a298:	255b5d73 	.word	0x255b5d73
    a29c:	00005d64 	.word	0x00005d64
    a2a0:	61766e69 	.word	0x61766e69
    a2a4:	6564696c 	.word	0x6564696c
    a2a8:	636f6920 	.word	0x636f6920
    a2ac:	6320746c 	.word	0x6320746c
    a2b0:	0000646d 	.word	0x0000646d

0000a2b4 <__FUNCTION__.14617>:
    a2b4:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....

0000a2c4 <__FUNCTION__.12356>:
    a2c4:	5f666968 00727369                       hif_isr.

0000a2cc <__FUNCTION__.12378>:
    a2cc:	5f666968 65636572 00657669              hif_receive.

0000a2d8 <__FUNCTION__.12391>:
    a2d8:	5f666968 69676572 72657473 0062635f     hif_register_cb.

0000a2e8 <__FUNCTION__.12363>:
    a2e8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..
    a2f8:	46494828 69614629 6f74206c 6b617720     (HIF)Fail to wak
    a308:	74207075 63206568 00706968 66696828     up the chip.(hif
    a318:	49572029 485f4946 5f54534f 5f564352     ) WIFI_HOST_RCV_
    a328:	4c525443 6220305f 66207375 006c6961     CTRL_0 bus fail.
    a338:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    a348:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    a358:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    a368:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    a378:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    a388:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    a398:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    a3a8:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
    a3b8:	6e692029 696c6176 72672064 2070756f     ) invalid group 
    a3c8:	00004449 66696828 6f682029 61207473     ID..(hif) host a
    a3d8:	64207070 276e6469 65732074 58522074     pp didn't set RX
    a3e8:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
    a3f8:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    a408:	61462029 2065736c 65746e69 70757272     ) False interrup
    a418:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    a428:	74206c69 6552206f 69206461 7265746e     il to Read inter
    a438:	74707572 67657220 00000000 66696828     rupt reg....(hif
    a448:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
    a458:	65687420 69686320 00000070 46494828      the chip...(HIF
    a468:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    a478:	746e6920 75727265 25207470 72742064      interrupt %d tr
    a488:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    a498:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    a4a8:	72612064 656d7567 0000746e 20505041     d argument..APP 
    a4b8:	75716552 65747365 69532064 6920657a     Requested Size i
    a4c8:	616c2073 72656772 61687420 6874206e     s larger than th
    a4d8:	65722065 65766963 75622064 72656666     e recived buffer
    a4e8:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
    a4f8:	20505041 75716552 65747365 64412064     APP Requested Ad
    a508:	73657264 65622073 646e6f79 65687420     dress beyond the
    a518:	63657220 64657669 66756220 20726566      recived buffer 
    a528:	72646461 20737365 20646e61 676e656c     address and leng
    a538:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....

0000a548 <__FUNCTION__.12347>:
    a548:	5f666968 646e6573 00000000              hif_send....

0000a554 <__FUNCTION__.12315>:
    a554:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0000a560 <__FUNCTION__.12364>:
    a560:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    a570:	0063735f 50504128 4e492829 00294f46     _sc.(APP)(INFO).
    a580:	666e6f43 7463696c 49206465 20222050     Conflicted IP " 
    a590:	252e7525 75252e75 2075252e 000a2022     %u.%u.%u.%u " ..
    a5a0:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    a5b0:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    a5c0:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    a5d0:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    a5e0:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    a5f0:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    a600:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    a610:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
    a620:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
    a630:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    a640:	49544143 4d204e4f 0045444f 2079654b     CATION MODE.Key 
    a650:	6e207369 7620746f 64696c61 00000000     is not valid....
    a660:	44495353 4e454c20 564e4920 44494c41     SSID LEN INVALID
    a670:	00000000 49204843 4c41564e 00004449     ....CH INVALID..
    a680:	61766e49 2064696c 20706557 2079656b     Invalid Wep key 
    a690:	65646e69 64252078 0000000a 61766e49     index %d....Inva
    a6a0:	2064696c 20706557 2079656b 676e656c     lid Wep key leng
    a6b0:	25206874 00000a64 6f636e49 63657272     th %d...Incorrec
    a6c0:	53502074 656b204b 656c2079 6874676e     t PSK key length
    a6d0:	00000000 65646e75 656e6966 65732064     ....undefined se
    a6e0:	79742063 00006570 41564e49 2044494c     c type..INVALID 
    a6f0:	6f206f4e 63732066 73206e61 73746f6c     No of scan slots
    a700:	00000021 41564e49 2044494c 6e616373     !...INVALID scan
    a710:	6f6c7320 69742074 0021656d 41564e49      slot time!.INVA
    a720:	2044494c 6f206f4e 72702066 2065626f     LID No of probe 
    a730:	75716572 73747365 72657020 61637320     requests per sca
    a740:	6c73206e 0000746f 41564e49 2044494c     n slot..INVALID 
    a750:	49535352 72687420 6f687365 2520646c     RSSI threshold %
    a760:	000a2064 5f53505f 56524553 205f5245     d .._PS_SERVER_ 
    a770:	6e207369 6420746f 6e696665 00006465     is not defined..
    a780:	7473694c 63206e65 6e6e6168 73206c65     Listen channel s
    a790:	6c756f68 6e6f2064 6220796c 2c312065     hould only be 1,
    a7a0:	6f203620 31312072 00000000 45574f50      6 or 11....POWE
    a7b0:	41532052 25204556 00000a64 41564e49     R SAVE %d...INVA
    a7c0:	2044494c 414d4f44 4e204e49 00454d41     LID DOMAIN NAME.

0000a7d0 <__FUNCTION__.11724>:
    a7d0:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.
    a7e0:	20737542 6f727265 31282072 57202e29     Bus error (1). W
    a7f0:	20656b61 66207075 656c6961 00000064     ake up failed...
    a800:	20737542 6f727265 32282072 57202e29     Bus error (2). W
    a810:	20656b61 66207075 656c6961 00000064     ake up failed...
    a820:	636f6c63 7320736b 6c6c6974 46464f20     clocks still OFF
    a830:	6157202e 7520656b 61662070 64656c69     . Wake up failed
    a840:	00000000 696d6e5b 61747320 3a5d7472     ....[nmi start]:
    a850:	69616620 6572206c 72206461 30206765      fail read reg 0
    a860:	31313178 2e2e2038 0000002e 6c696166     x1118 ......fail
    a870:	74206465 6564206f 696e692d 6c616974     ed to de-initial
    a880:	00657a69 6f727245 68772072 20656c69     ize.Error while 
    a890:	74697277 20676e69 00676572 6f727245     writing reg.Erro
    a8a0:	68772072 20656c69 64616572 20676e69     r while reading 
    a8b0:	00676572 6c75705b 5f70756c 6c727463     reg.[pullup_ctrl
    a8c0:	66203a5d 656c6961 6f742064 61657220     ]: failed to rea
    a8d0:	00000064 6c75705b 5f70756c 6c727463     d...[pullup_ctrl
    a8e0:	66203a5d 656c6961 6f742064 69727720     ]: failed to wri
    a8f0:	00006574                                te..

0000a8f4 <__FUNCTION__.11813>:
    a8f4:	70696863 6965645f 0074696e              chip_deinit.

0000a900 <__FUNCTION__.12205>:
    a900:	645f6d6e 695f7672 0074696e              nm_drv_init.

0000a90c <__FUNCTION__.12212>:
    a90c:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
    a91c:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
    a92c:	6e69206c 62207469 00007375 70696843     l init bus..Chip
    a93c:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
    a94c:	74206465 6e65206f 656c6261 746e6920     ed to enable int
    a95c:	75727265 2e737470 0000002e 6d726946     errupts.....Firm
    a96c:	65726177 72657620 3a202020 2e752520     ware ver   : %u.
    a97c:	252e7525 00000a75 206e694d 76697264     %u.%u...Min driv
    a98c:	76207265 3a207265 2e752520 252e7525     er ver : %u.%u.%
    a99c:	00000a75 72727543 69726420 20726576     u...Curr driver 
    a9ac:	3a726576 2e752520 252e7525 00000a75     ver: %u.%u.%u...
    a9bc:	6d726946 65726177 72657620 6e6f6973     Firmware version
    a9cc:	73696d20 6374616d 00002168 696d6e5b      mismatch!..[nmi
    a9dc:	6f747320 203a5d70 70696863 6965645f      stop]: chip_dei
    a9ec:	2074696e 6c696166 00000000 696d6e5b     nit fail....[nmi
    a9fc:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
    aa0c:	75622074 00000073 00001f54 00001f54     t bus...T...T...
    aa1c:	00001f84 00001f06 00001f2a 00001f38     ........*...8...
    aa2c:	00001f6a 00001f6a 00001fb2 00001ef6     j...j...........
    aa3c:	00002014 00002014 00002014 00002014     . ... ... ... ..
    aa4c:	00001f46                                F...

0000aa50 <__FUNCTION__.11751>:
    aa50:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000aa60 <__FUNCTION__.11702>:
    aa60:	5f697073 00646d63                       spi_cmd.

0000aa68 <__FUNCTION__.11759>:
    aa68:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000aa78 <__FUNCTION__.11710>:
    aa78:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000aa84 <__FUNCTION__.11768>:
    aa84:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000aa94 <__FUNCTION__.11776>:
    aa94:	735f6d6e 725f6970 00646165 696d6e5b     nm_spi_read.[nmi
    aaa4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    aab4:	65722064 6e6f7073 72206573 2c646165     d response read,
    aac4:	73756220 72726520 2e2e726f 0000002e      bus error......
    aad4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    aae4:	61642064 72206174 6f707365 2065736e     d data response 
    aaf4:	64616572 7562202c 72652073 2e726f72     read, bus error.
    ab04:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ab14:	656c6961 61642064 72206174 6f707365     ailed data respo
    ab24:	2065736e 64616572 282e2e2e 78323025     nse read...(%02x
    ab34:	00000a29 696d6e5b 69707320 46203a5d     )...[nmi spi]: F
    ab44:	656c6961 61642064 62206174 6b636f6c     ailed data block
    ab54:	61657220 62202c64 65207375 726f7272      read, bus error
    ab64:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ab74:	656c6961 61642064 62206174 6b636f6c     ailed data block
    ab84:	63726320 61657220 62202c64 65207375      crc read, bus e
    ab94:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    aba4:	46203a5d 656c6961 6d632064 72772064     ]: Failed cmd wr
    abb4:	2c657469 73756220 72726520 2e2e726f     ite, bus error..
    abc4:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    abd4:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    abe4:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
    abf4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    ac04:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    ac14:	74697277 65722065 25282067 29783830     write reg (%08x)
    ac24:	0a2e2e2e 00000000 696d6e5b 69707320     ........[nmi spi
    ac34:	46203a5d 656c6961 6d632064 72202c64     ]: Failed cmd, r
    ac44:	20646165 20676572 38302528 2e2e2978     ead reg (%08x)..
    ac54:	00000a2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ac64:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    ac74:	202c6573 64616572 67657220 30252820     se, read reg (%0
    ac84:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
    ac94:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    aca4:	2e646165 00002e2e 696d6e5b 69707320     ead.....[nmi spi
    acb4:	46203a5d 656c6961 6e692064 6e726574     ]: Failed intern
    acc4:	72206c61 20646165 746f7270 6c6f636f     al read protocol
    acd4:	74697720 52432068 6e6f2043 6572202c      with CRC on, re
    ace4:	69727974 7720676e 20687469 20435243     tyring with CRC 
    acf4:	2e66666f 00002e2e 696d6e5b 69707320     off.....[nmi spi
    ad04:	46203a5d 656c6961 6e692064 6e726574     ]: Failed intern
    ad14:	72206c61 20646165 746f7270 6c6f636f     al read protocol
    ad24:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ad34:	656c6961 6e692064 6e726574 77206c61     ailed internal w
    ad44:	65746972 6f727020 6f636f74 6572206c     rite protocol re
    ad54:	2e2e2e67 00000000 696d6e5b 69707320     g.......[nmi spi
    ad64:	46203a5d 206c6961 20646d63 64616572     ]: Fail cmd read
    ad74:	69686320 64692070 002e2e2e 696d6e5b      chip id....[nmi
    ad84:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    ad94:	72202c64 20646165 636f6c62 2528206b     d, read block (%
    ada4:	29783830 0a2e2e2e 00000000 696d6e5b     08x)........[nmi
    adb4:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    adc4:	65722064 6e6f7073 202c6573 64616572     d response, read
    add4:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    ade4:	0000000a 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    adf4:	656c6961 6c622064 206b636f 61746164     ailed block data
    ae04:	61657220 2e2e2e64 00000000 696d6e5b      read.......[nmi
    ae14:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    ae24:	77202c64 65746972 6f6c6220 28206b63     d, write block (
    ae34:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    ae44:	69707320 203a5d20 6c696146 63206465      spi ]: Failed c
    ae54:	7220646d 6f707365 2c65736e 69727720     md response, wri
    ae64:	62206574 6b636f6c 30252820 2e297838     te block (%08x).
    ae74:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    ae84:	656c6961 61642064 62206174 6b636f6c     ailed data block
    ae94:	646d6320 69727720 202c6574 20737562      cmd write, bus 
    aea4:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
    aeb4:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    aec4:	62206174 6b636f6c 69727720 202c6574     ta block write, 
    aed4:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    aee4:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    aef4:	61642064 62206174 6b636f6c 63726320     d data block crc
    af04:	69727720 202c6574 20737562 6f727265      write, bus erro
    af14:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    af24:	46203a5d 656c6961 6c622064 206b636f     ]: Failed block 
    af34:	61746164 69727720 2e2e6574 0000002e     data write......

0000af44 <__FUNCTION__.11793>:
    af44:	735f6d6e 695f6970 0074696e              nm_spi_init.

0000af50 <__FUNCTION__.11741>:
    af50:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000af60 <crc7_syndrome_table>:
    af60:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    af70:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    af80:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    af90:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    afa0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    afb0:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    afc0:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    afd0:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    afe0:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    aff0:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    b000:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    b010:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    b020:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    b030:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    b040:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    b050:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy

0000b060 <__FUNCTION__.11726>:
    b060:	5f697073 61746164 6165725f 00000064     spi_data_read...
    b070:	52524528 75432952 6e657272 253c2074     (ERRR)Current <%
    b080:	000a3e64 20494e53 65637845 20736465     d>..SNI Exceeds 
    b090:	2078614d 676e654c 00006874 6e6b6e55     Max Length..Unkn
    b0a0:	206e776f 204c5353 6b636f53 4f207465     own SSL Socket O
    b0b0:	6f697470 6425206e 0000000a 20746f4e     ption %d....Not 
    b0c0:	204c5353 6b636f53 00007465 00003438     SSL Socket..84..
    b0d0:	00003438 00003414 00003438 00003414     84...4..84...4..
    b0e0:	00003400 00003400 00003438 00003438     .4...4..84..84..
    b0f0:	00003438 00003438 00003438 00003438     84..84..84..84..
    b100:	00003438 00003438 00003438 00003438     84..84..84..84..
    b110:	00003438 00003438 00003438 00003438     84..84..84..84..
    b120:	00003438 00003438 00003438 00003438     84..84..84..84..
    b130:	00003438 00003438 00003438 00003438     84..84..84..84..
    b140:	00003438 00003438 00003438 00003438     84..84..84..84..
    b150:	00003438 00003438 00003438 00003438     84..84..84..84..
    b160:	00003438 00003438 00003438 00003438     84..84..84..84..
    b170:	00003438 00003438 00003438 00003438     84..84..84..84..
    b180:	00003438 00003438 00003438 00003438     84..84..84..84..
    b190:	00003438 00003438 00003438 00003438     84..84..84..84..
    b1a0:	00003438 00003438 00003438 00003438     84..84..84..84..
    b1b0:	00003438 00003438 00003438 00003438     84..84..84..84..
    b1c0:	00003438 00003438 00003438 00003414     84..84..84...4..
    b1d0:	00003414 0000341c 0000341c 0000341c     .4...4...4...4..
    b1e0:	0000341c 42000800 42000c00 42001000     .4.....B...B...B
    b1f0:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    b200:	00000e0d 00004cca 00004cc6 00004cc6     .....L...L...L..
    b210:	00004d26 00004d26 00004ce0 00004cd0     &M..&M...L...L..
    b220:	00004ce6 00004d14 00004ef8 00004ed8     .L...M...N...N..
    b230:	00004ed8 00004f58 00004eea 00004f06     .N..XO...N...O..
    b240:	00004edc 00004f14 00004f48              .N...O..HO..

0000b24c <_tcc_gclk_ids>:
    b24c:	001b1a1a                                ....

0000b250 <_tcc_apbcmasks>:
    b250:	00000100 00000200 00000400              ............

0000b25c <_tcc_maxs>:
    b25c:	00ffffff 00ffffff 0000ffff              ............

0000b268 <_tcc_cc_nums>:
    b268:	00020204                                ....

0000b26c <_tcc_ow_nums>:
    b26c:	00020408                                ....

0000b270 <tcc_interrupt_vectors.12377>:
    b270:	0011100f                                ....

0000b274 <_tcc_intflag>:
    b274:	00000001 00000002 00000004 00000008     ................
    b284:	00001000 00002000 00004000 00008000     ..... ...@......
    b294:	00010000 00020000 00040000 00080000     ................

0000b2a4 <main_mqtt_broker>:
    b2a4:	7474716d 6568742e 6e696874 692e7367     mqtt.thethings.i
    b2b4:	0000006f 6c707061 74616369 2f6e6f69     o...application/
    b2c4:	6e6f736a 00000000 5454514d 4c414320     json....MQTT CAL
    b2d4:	4341424c 4e45204b 0d524554 00000000     LBACK ENTER.....
    b2e4:	5454514d 434f5320 4f43204b 43454e4e     MQTT SOCK CONNEC
    b2f4:	0d444554 00000000 7474716d 6e6f6320     TED.....mqtt con
    b304:	7463656e 6f726220 0d72656b 00000000     nect broker.....
    b314:	6b636f73 25207465 00000069 70736572     socket %i...resp
    b324:	65736e6f 20732520 0a0d6925 00000000     onse %s %i......
    b334:	6e6e6f43 20746365 6c696166 206f7420     Connect fail to 
    b344:	76726573 25287265 20212973 72746572     server(%s)! retr
    b354:	74692079 74756120 74616d6f 6c616369     y it automatical
    b364:	0d2e796c 0000000a 73627573 62697263     ly......subscrib
    b374:	6f742065 20636970 0a0d7325 00000000     e topic %s......
    b384:	70657250 74617261 206e6f69 7420666f     Preparation of t
    b394:	63206568 20746168 20736168 6e656562     he chat has been
    b3a4:	6d6f6320 74656c70 0d2e6465 00000000      completed......
    b3b4:	5454514d 6f726220 2072656b 6c636564     MQTT broker decl
    b3c4:	20656e69 72756f79 63636120 21737365     ine your access!
    b3d4:	72726520 6320726f 2065646f 0a0d6425      error code %d..
    b3e4:	00000000 69636572 20657665 6c627570     ....recieve publ
    b3f4:	0d687369 00000000 5454514d 73696420     ish.....MQTT dis
    b404:	6e6e6f63 65746365 00000d64 54454854     connected...THET
    b414:	474e4948 3a4f4953 65687420 6e696874     HINGSIO: thethin
    b424:	6f697367 6178655f 656c706d 696e695f     gsio_example_ini
    b434:	00000d74 6c727563 312e372f 00362e30     t...curl/7.10.6.
    b444:	54454854 474e4948 3a4f4953 54544820     THETHINGSIO: HTT
    b454:	6c632050 746e6569 696e6920 6c616974     P client initial
    b464:	74617a69 206e6f69 20736168 6c696166     ization has fail
    b474:	25286465 0a0d2973 00000000 54454854     ed(%s)......THET
    b484:	474e4948 3a4f4953 72724520 3a20726f     HINGSIO: Error :
    b494:	65687420 6e696874 6f697367 6178655f      thethingsio_exa
    b4a4:	656c706d 696e695f 00000d74 64616f6c     mple_init...load
    b4b4:	69687420 7420676e 6e656b6f 6572202c      thing token, re
    b4c4:	4e206461 65204d56 726f7272 78302820     ad NVM error (0x
    b4d4:	20297825 00000a0d 64616f6c 69687420     %x) ....load thi
    b4e4:	7420676e 6e656b6f 6874202c 20676e69     ng token, thing 
    b4f4:	656b6f74 6f64206e 6e207365 6520746f     token does not e
    b504:	74736978 206e6920 204d564e 0000000d     xist in NVM ....
    b514:	64616f6c 69687420 7420676e 6e656b6f     load thing token
    b524:	6572202c 74206461 676e6968 6b6f7420     , read thing tok
    b534:	65206e65 726f7272 78302820 0d297825     en error (0x%x).
    b544:	0000000a 73627573 62697263 68742065     ....subscribe th
    b554:	20676e69 656b6f74 7325206e 00000000     ing token %s....
    b564:	204c5255 73627573 70697263 6e6f6974     URL subscription
    b574:	0d732520 0000000a 20746573 6e696874      %s.....set thin
    b584:	6f742067 2c6e656b 69727720 74206574     g token, write t
    b594:	676e6968 6b6f7420 65206e65 726f7272     hing token error
    b5a4:	000d2121 61657263 6d206574 20747471     !!..create mqtt 
    b5b4:	6b6f7262 000d7265 20646e65 7474716d     broker..end mqtt
    b5c4:	6f726220 0d72656b 00000000 54454854      broker.....THET
    b5d4:	474e4948 3a4f4953 65687420 6e696874     HINGSIO: thethin
    b5e4:	6f697367 6178655f 656c706d 7463615f     gsio_example_act
    b5f4:	61697669 000d6574 6361227b 61766974     iviate..{"activa
    b604:	6e6f6974 65646f43 25223a22 007d2273     tionCode":"%s"}.
    b614:	70747468 612f2f3a 742e6970 68746568     http://api.theth
    b624:	73676e69 2f6f692e 742f3276 676e6968     ings.io/v2/thing
    b634:	00000073 54454854 474e4948 3a4f4953     s...THETHINGSIO:
    b644:	72724520 3a20726f 65687420 6e696874      Error : thethin
    b654:	6f697367 6178655f 656c706d 7463615f     gsio_example_act
    b664:	61697669 63206574 2065646f 0a0d6425     iviate code %d..
    b674:	00000000 54454854 474e4948 3a4f4953     ....THETHINGSIO:
    b684:	65687420 6e696874 6f697367 6178655f      thethingsio_exa
    b694:	656c706d 6275735f 69726373 000d6562     mple_subscribe..
    b6a4:	54454854 474e4948 3a4f4953 65687420     THETHINGSIO: the
    b6b4:	6e696874 6f697367 6178655f 656c706d     thingsio_example
    b6c4:	6165725f 6e615f64 72775f64 0d657469     _read_and_write.
    b6d4:	00000000 54454854 474e4948 3a4f4953     ....THETHINGSIO:
    b6e4:	72724520 3a20726f 65687420 6e696874      Error : thethin
    b6f4:	6f697367 6178655f 656c706d 6165725f     gsio_example_rea
    b704:	6e615f64 72775f64 20657469 65646f63     d_and_write code
    b714:	0d642520 0000000a 73627573 62697263      %d.....subscrib
    b724:	6f632065 6769666e 0000000d 5454514d     e config....MQTT
    b734:	696e6920 6c616974 74617a69 206e6f69      initialization 
    b744:	6c696166 202e6465 6f727245 6f632072     failed. Error co
    b754:	69206564 25282073 0a0d2964 00000000     de is (%d)......
    b764:	5454514d 67657220 65747369 61632072     MQTT register ca
    b774:	61626c6c 66206b63 656c6961 45202e64     llback failed. E
    b784:	726f7272 646f6320 73692065 64252820     rror code is (%d
    b794:	000a0d29 20646e65 666e6f63 72756769     )...end configur
    b7a4:	716d2065 000d7474 6e6e6f63 20746365     e mqtt..connect 
    b7b4:	73627573 62697263 00000d65 7474716d     subscribe...mqtt
    b7c4:	6f726220 3a72656b 0d732520 0000000a      broker: %s.....
    b7d4:	33323130 37363534 62613938 66656463     0123456789abcdef
    b7e4:	65730a0d 6d20646e 61737365 3a206567     ..send message :
    b7f4:	00000d20 656d7461 2e312f6c 00322e30      ...atmel/1.0.2.
    b804:	20544547 00000000 54534f50 00000020     GET ....POST ...
    b814:	454c4544 00204554 20545550 00000000     DELETE .PUT ....
    b824:	4954504f 20534e4f 00000000 44414548     OPTIONS ....HEAD
    b834:	00000020 54544820 2e312f50 000a0d31      ... HTTP/1.1...
    b844:	74736f48 0000203a 6e6e6f43 69746365     Host: ..Connecti
    b854:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
    b864:	00000000 6e617254 72656673 636e452d     ....Transfer-Enc
    b874:	6e69646f 63203a67 6b6e7568 0a0d6465     oding: chunked..
    b884:	00000000 00007525 746e6f43 2d746e65     ....%u..Content-
    b894:	676e654c 203a6874 00000000 746e6f43     Length: ....Cont
    b8a4:	2d746e65 65707954 0000203a 646e6573     ent-Type: ..send
    b8b4:	74616420 0a0d2061 0a0d7325 00000000      data ..%s......
    b8c4:	70747468 002f2f3a 70747468 2f2f3a73     http://.https://
    b8d4:	00000000 65720a0d 6e6f7073 6d206573     ......response m
    b8e4:	61737365 3a206567 0000000d 6e617254     essage :....Tran
    b8f4:	72656673 636e452d 6e69646f 00203a67     sfer-Encoding: .
    b904:	6e6e6f43 69746365 203a6e6f 00000000     Connection: ....
    b914:	50545448 0000002f 00000d31 42002000     HTTP/...1.... .B
    b924:	42002400 42002800 00006d00 00006dde     .$.B.(.B.m...m..
    b934:	00006dde 00006dde 00006dde 00006da0     .m...m...m...m..
    b944:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b954:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b964:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b974:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b984:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b994:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b9a4:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b9b4:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b9c4:	00006d70 00006dde 00006d0a 00006dde     pm...m...m...m..
    b9d4:	00006dde 00006dde 00006dde 00006dde     .m...m...m...m..
    b9e4:	00006d28 49535352 726f6620 65687420     (m..RSSI for the
    b9f4:	72756320 746e6572 6e6f6320 7463656e      current connect
    ba04:	41206465 25282050 0a0d2964 00000000     ed AP (%d)......
    ba14:	434e4957 30303531 6163203a 4d206573     WINC1500: case M
    ba24:	575f4d32 5f494649 50534552 4e4f435f     2M_WIFI_RESP_CON
    ba34:	4154535f 435f4554 474e4148 000d4445     _STATE_CHANGED..
    ba44:	4b434f53 203a5445 462d6957 69642069     SOCKET: Wi-Fi di
    ba54:	6e6f6373 7463656e 000d6465 462d6957     sconnected..Wi-F
    ba64:	6f632069 63656e6e 0d646574 00000000     i connected.....
    ba74:	462d6957 50492069 20736920 252e7525     Wi-Fi IP is %u.%
    ba84:	75252e75 0d75252e 0000000a 434e4957     u.%u.%u.....WINC
    ba94:	30303531 6163203a 4d206573 575f4d32     1500: case M2M_W
    baa4:	5f494649 5f514552 50434844 4e4f435f     IFI_REQ_DHCP_CON
    bab4:	00000d46 434e4957 30303531 4547203a     F...WINC1500: GE
    bac4:	50492054 73693a20 2e752520 252e7525     T IP :is %u.%u.%
    bad4:	75252e75 00000a0d 55674a58 6a54502d     u.%u....XJgU-PTj
    bae4:	56396b35 5f6c7652 4f334935 6b496d38     5k9VRvl_5I3O8mIk
    baf4:	59534e46 376b7042 52574d4a 4e725170     FNSYBpk7JMWRpQrN
    bb04:	00455177 75626564 68742067 20676e69     wQE.debug thing 
    bb14:	656b6f74 7277206e 2065746f 6e206f74     token wrote to n
    bb24:	61206d76 6c20646e 6564616f 72662064     vm and loaded fr
    bb34:	69206d6f 75732074 73656363 6c756673     om it successful
    bb44:	0a20796c 0000000d 434e4957 30303531     ly .....WINC1500
    bb54:	324d203a 49575f4d 525f4946 5f505345     : M2M_WIFI_RESP_
    bb64:	41464544 5f544c55 4e4e4f43 2e544345     DEFAULT_CONNECT.
    bb74:	0000000d 434e4957 30303531 6553203a     ....WINC1500: Se
    bb84:	414d2074 4e5f4e49 5f444545 50545448     t MAIN_NEED_HTTP
    bb94:	4f52505f 49534956 4e494e4f 6f6d2047     _PROVISIONING mo
    bba4:	0d206564 00000000 434e4957 30303531     de .....WINC1500
    bbb4:	6553203a 414d2074 415f4e49 4f435f50     : Set MAIN_AP_CO
    bbc4:	43454e4e 4e4f4954 646f6d20 000d2065     NNECTION mode ..
    bbd4:	434e4957 30303531 324d203a 49575f4d     WINC1500: M2M_WI
    bbe4:	525f4946 5f505345 564f5250 4f495349     FI_RESP_PROVISIO
    bbf4:	4e495f4e 0d2e4f46 00000000 434e4957     N_INFO......WINC
    bc04:	30303531 5448203a 50205054 49564f52     1500: HTTP PROVI
    bc14:	4e4f4953 63755320 73736563 00000d2e     SION Success....
    bc24:	434e4957 30303531 5448203a 50205054     WINC1500: HTTP P
    bc34:	49564f52 4e4f4953 61462020 64656c69     ROVISION  Failed
    bc44:	00000d2e 434e4957 30303531 6163203a     ....WINC1500: ca
    bc54:	77206c6c 5f696669 6c6c6163 6b636162     ll wifi_callback
    bc64:	6e756620 6f697463 736d206e 79742067      function msg ty
    bc74:	3a206570 0d642520 0000000a 6e696874     pe : %d.....thin
    bc84:	6f742067 206e656b 74697277 206e6574     g token written 
    bc94:	6e206f74 73206d76 65636375 75667373     to nvm successfu
    bca4:	20796c6c 00000d0a 54454854 474e4948     lly ....THETHING
    bcb4:	3a4f4953 65685420 6e696854 4f497367     SIO: TheThingsIO
    bcc4:	72655320 20726576 6e6e6f43 65746365      Server Connecte
    bcd4:	00000d64 54454854 474e4948 3a4f4953     d...THETHINGSIO:
    bce4:	71655220 74736575 6d6f6320 74656c70      Request complet
    bcf4:	00000d65 54454854 474e4948 3a4f4953     e...THETHINGSIO:
    bd04:	73694420 6e6e6f63 65746365 65722064      Disconnected re
    bd14:	6e6f7361 0d64253a 0000000a 204d564e     ason:%d.....NVM 
    bd24:	74696e69 72726520 000d726f 0a0d0a0d     init error......
    bd34:	57202d2d 31434e49 20303035 70696863     -- WINC1500 chip
    bd44:	74202620 68746568 73676e69 204f692e      & thethings.iO 
    bd54:	20546f49 6f6d6544 0d2d2d20 202d2d0a     IoT Demo --..-- 
    bd64:	444d4153 585f3132 49414c50 5f44454e     SAMD21_XPLAINED_
    bd74:	204f5250 0a0d2d2d 43202d2d 69706d6f     PRO --..-- Compi
    bd84:	3a64656c 63654420 20353120 35313032     led: Dec 15 2015
    bd94:	3a343020 303a3030 2d2d2035 0000000d      04:00:05 --....
    bda4:	434e4957 30303531 326d203a 69775f6d     WINC1500: m2m_wi
    bdb4:	695f6966 2074696e 6c6c6163 72726520     fi_init call err
    bdc4:	2821726f 0d296425 0000000a 33313663     or!(%d).....c613
    bdd4:	00006138 31313732 31343836 00000038     8a..271168418...
    bde4:	6e6e6f43 69746365 7420676e 7325206f     Connecting to %s
    bdf4:	000a0d2e 434e4957 30303531 6977203a     ....WINC1500: wi
    be04:	685f6966 6c646e61 76655f65 20746e65     fi_handle_event 
    be14:	6f727265 6f632072 3a206564 0a0d6425     error code :%d..
    be24:	00000000 434e4957 30303531 326d203a     ....WINC1500: m2
    be34:	69775f6d 645f6966 75616665 635f746c     m_wifi_default_c
    be44:	656e6e6f 73207463 74726174 0000000d     onnect start....
    be54:	434e4957 30303531 326d203a 69775f6d     WINC1500: m2m_wi
    be64:	735f6966 74726174 6f72705f 69736976     fi_start_provisi
    be74:	6d5f6e6f 2065646f 72617473 00000d74     on_mode start...
    be84:	6176227b 7365756c 7b5b3a22 79656b22     {"values":[{"key
    be94:	25223a22 222c2273 756c6176 223a2265     ":"%s","value":"
    bea4:	7d226425 00007d5d 706d6574 74617265     %d"}]}..temperat
    beb4:	00657275 54737953 206b6369 666e6f63     ure.SysTick conf
    bec4:	72756769 6f697461 7265206e 0d726f72     iguration error.
    bed4:	00000000 7349514d 00007064 00008588     ....MQIsdp......
    bee4:	00008566 00008566 0000855a 0000844e     f...f...Z...N...
    bef4:	0000844e 0000854e 0000855a 0000844e     N...N...Z...N...
    bf04:	0000854e 0000844e 0000855a 00008452     N...N...Z...R...
    bf14:	00008452 00008452 00008768 00000043     R...R...h...C...

0000bf24 <_global_impure_ptr>:
    bf24:	200000e0 63637553 00737365 20746f4e     ... Success.Not 
    bf34:	656e776f 6f4e0072 63757320 69662068     owner.No such fi
    bf44:	6f20656c 69642072 74636572 0079726f     le or directory.
    bf54:	73206f4e 20686375 636f7270 00737365     No such process.
    bf64:	65746e49 70757272 20646574 74737973     Interrupted syst
    bf74:	63206d65 006c6c61 204f2f49 6f727265     em call.I/O erro
    bf84:	6f4e0072 63757320 65642068 65636976     r.No such device
    bf94:	20726f20 72646461 00737365 20677241      or address.Arg 
    bfa4:	7473696c 6f6f7420 6e6f6c20 78450067     list too long.Ex
    bfb4:	66206365 616d726f 72652074 00726f72     ec format error.
    bfc4:	6b636f53 61207465 6165726c 63207964     Socket already c
    bfd4:	656e6e6f 64657463 64614200 6c696620     onnected.Bad fil
    bfe4:	756e2065 7265626d 206f4e00 6c696863     e number.No chil
    bff4:	6e657264 73654400 616e6974 6e6f6974     dren.Destination
    c004:	64646120 73736572 71657220 65726975      address require
    c014:	6f4e0064 726f6d20 72702065 7365636f     d.No more proces
    c024:	00736573 20746f4e 756f6e65 73206867     ses.Not enough s
    c034:	65636170 72655000 7373696d 206e6f69     pace.Permission 
    c044:	696e6564 42006465 61206461 65726464     denied.Bad addre
    c054:	44007373 63697665 726f2065 73657220     ss.Device or res
    c064:	6372756f 75622065 46007973 20656c69     ource busy.File 
    c074:	73697865 43007374 73736f72 7665642d     exists.Cross-dev
    c084:	20656369 6b6e696c 206f4e00 68637573     ice link.No such
    c094:	76656420 00656369 20746f4e 69642061      device.Not a di
    c0a4:	74636572 0079726f 74736f48 20736920     rectory.Host is 
    c0b4:	6e776f64 6e6f4300 7463656e 206e6f69     down.Connection 
    c0c4:	65726c61 20796461 70206e69 72676f72     already in progr
    c0d4:	00737365 61207349 72696420 6f746365     ess.Is a directo
    c0e4:	49007972 6c61766e 61206469 6d756772     ry.Invalid argum
    c0f4:	00746e65 7774654e 206b726f 65746e69     ent.Network inte
    c104:	63616672 73692065 746f6e20 6e6f6320     rface is not con
    c114:	75676966 00646572 6e6e6f43 69746365     figured.Connecti
    c124:	61206e6f 74726f62 62206465 656e2079     on aborted by ne
    c134:	726f7774 6f54006b 616d206f 6f20796e     twork.Too many o
    c144:	206e6570 656c6966 6e692073 73797320     pen files in sys
    c154:	006d6574 656c6946 73656420 70697263     tem.File descrip
    c164:	20726f74 756c6176 6f742065 616c206f     tor value too la
    c174:	00656772 20746f4e 68632061 63617261     rge.Not a charac
    c184:	20726574 69766564 54006563 20747865     ter device.Text 
    c194:	656c6966 73756220 69460079 7420656c     file busy.File t
    c1a4:	6c206f6f 65677261 736f4800 73692074     oo large.Host is
    c1b4:	726e7520 68636165 656c6261 206f4e00      unreachable.No 
    c1c4:	63617073 656c2065 6f207466 6564206e     space left on de
    c1d4:	65636976 746f4e00 70757320 74726f70     vice.Not support
    c1e4:	49006465 67656c6c 73206c61 006b6565     ed.Illegal seek.
    c1f4:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
    c204:	65747379 6f54006d 616d206f 6c20796e     ystem.Too many l
    c214:	736b6e69 6f724200 206e656b 65706970     inks.Broken pipe
    c224:	74614d00 616d6568 73636974 67726120     .Mathematics arg
    c234:	6e656d75 756f2074 666f2074 6d6f6420     ument out of dom
    c244:	206e6961 6620666f 74636e75 006e6f69     ain of function.
    c254:	75736552 7420746c 6c206f6f 65677261     Result too large
    c264:	206f4e00 7373656d 20656761 6420666f     .No message of d
    c274:	72697365 74206465 00657079 6e656449     esired type.Iden
    c284:	69666974 72207265 766f6d65 49006465     tifier removed.I
    c294:	67656c6c 62206c61 20657479 75716573     llegal byte sequ
    c2a4:	65636e65 61654400 636f6c64 654e006b     ence.Deadlock.Ne
    c2b4:	726f7774 7369206b 726e7520 68636165     twork is unreach
    c2c4:	656c6261 206f4e00 6b636f6c 746f4e00     able.No lock.Not
    c2d4:	73206120 61657274 7453006d 6d616572      a stream.Stream
    c2e4:	636f6920 74206c74 6f656d69 4e007475      ioctl timeout.N
    c2f4:	7473206f 6d616572 73657220 6372756f     o stream resourc
    c304:	56007365 75747269 63206c61 75637269     es.Virtual circu
    c314:	69207469 6f672073 5000656e 6f746f72     it is gone.Proto
    c324:	206c6f63 6f727265 6e550072 776f6e6b     col error.Unknow
    c334:	7270206e 636f746f 4d006c6f 69746c75     n protocol.Multi
    c344:	20706f68 65747461 6574706d 61420064     hop attempted.Ba
    c354:	656d2064 67617373 75460065 6974636e     d message.Functi
    c364:	6e206e6f 6920746f 656c706d 746e656d     on not implement
    c374:	44006465 63657269 79726f74 746f6e20     ed.Directory not
    c384:	706d6520 46007974 20656c69 7020726f      empty.File or p
    c394:	20687461 656d616e 6f6f7420 6e6f6c20     ath name too lon
    c3a4:	6f540067 616d206f 7320796e 6f626d79     g.Too many symbo
    c3b4:	2063696c 6b6e696c 6f4e0073 66756220     lic links.No buf
    c3c4:	20726566 63617073 76612065 616c6961     fer space availa
    c3d4:	00656c62 64206f4e 00617461 72646441     ble.No data.Addr
    c3e4:	20737365 696d6166 6e20796c 7320746f     ess family not s
    c3f4:	6f707075 64657472 20796220 746f7270     upported by prot
    c404:	6c6f636f 6d616620 00796c69 746f7250     ocol family.Prot
    c414:	6c6f636f 6f727720 7420676e 20657079     ocol wrong type 
    c424:	20726f66 6b636f73 53007465 656b636f     for socket.Socke
    c434:	706f2074 74617265 206e6f69 6e206e6f     t operation on n
    c444:	732d6e6f 656b636f 72500074 636f746f     on-socket.Protoc
    c454:	6e206c6f 6120746f 6c696176 656c6261     ol not available
    c464:	6e6f4300 7463656e 206e6f69 75666572     .Connection refu
    c474:	00646573 6e6e6f43 69746365 72206e6f     sed.Connection r
    c484:	74657365 20796220 72656570 64644100     eset by peer.Add
    c494:	73736572 726c6120 79646165 206e6920     ress already in 
    c4a4:	00657375 72646441 20737365 20746f6e     use.Address not 
    c4b4:	69617661 6c62616c 6f530065 61777466     available.Softwa
    c4c4:	63206572 65737561 6f632064 63656e6e     re caused connec
    c4d4:	6e6f6974 6f626120 53007472 656b636f     tion abort.Socke
    c4e4:	73692074 746f6e20 6e6f6320 7463656e     t is not connect
    c4f4:	53006465 656b636f 73692074 726c6120     ed.Socket is alr
    c504:	79646165 6e6f6320 7463656e 4f006465     eady connected.O
    c514:	61726570 6e6f6974 6e616320 656c6563     peration cancele
    c524:	74530064 20657461 20746f6e 6f636572     d.State not reco
    c534:	61726576 00656c62 76657250 73756f69     verable.Previous
    c544:	6e776f20 64207265 00646569 7265704f      owner died.Oper
    c554:	6f697461 6f6e206e 75732074 726f7070     ation not suppor
    c564:	20646574 73206e6f 656b636f 61560074     ted on socket.Va
    c574:	2065756c 206f6f74 6772616c 6f662065     lue too large fo
    c584:	65642072 656e6966 61642064 74206174     r defined data t
    c594:	00657079 7373654d 20656761 206f6f74     ype.Message too 
    c5a4:	676e6f6c 6e6f4300 7463656e 206e6f69     long.Connection 
    c5b4:	656d6974 756f2064 00000074              timed out...

0000c5c0 <__sf_fake_stdin>:
	...

0000c5e0 <__sf_fake_stdout>:
	...

0000c600 <__sf_fake_stderr>:
	...
    c620:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    c630:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    c640:	31300046 35343332 39383736 64636261     F.0123456789abcd
    c650:	00006665                                ef..

0000c654 <_init>:
    c654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c656:	46c0      	nop			; (mov r8, r8)
    c658:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c65a:	bc08      	pop	{r3}
    c65c:	469e      	mov	lr, r3
    c65e:	4770      	bx	lr

0000c660 <__init_array_start>:
    c660:	000000d9 	.word	0x000000d9

0000c664 <_fini>:
    c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c666:	46c0      	nop			; (mov r8, r8)
    c668:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c66a:	bc08      	pop	{r3}
    c66c:	469e      	mov	lr, r3
    c66e:	4770      	bx	lr

0000c670 <__fini_array_start>:
    c670:	000000b1 	.word	0x000000b1
